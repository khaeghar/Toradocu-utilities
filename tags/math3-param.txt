./analysis/UnivariateVectorFunction.java:     * @param x the point for which the function value should be computed
./analysis/MultivariateMatrixFunction.java:     * @param point point at which the function must be evaluated
./analysis/MultivariateVectorFunction.java:     * @param point point at which the function must be evaluated
./analysis/BivariateFunction.java:     * @param x Abscissa for which the function value should be computed.
./analysis/BivariateFunction.java:     * @param y Ordinate for which the function value should be computed.
./analysis/DifferentiableMultivariateFunction.java:     * @param k index of the coordinate with respect to which the partial
./analysis/interpolation/MicrosphereInterpolatingFunction.java:         * @param n Normal vector characterizing a surface element
./analysis/interpolation/MicrosphereInterpolatingFunction.java:         * @param illuminationFromSample illumination received from sample
./analysis/interpolation/MicrosphereInterpolatingFunction.java:         * @param sample current sample illuminating the element
./analysis/interpolation/MicrosphereInterpolatingFunction.java:     * @param xval Arguments for the interpolation points.
./analysis/interpolation/MicrosphereInterpolatingFunction.java:     * @param yval Values for the interpolation points.
./analysis/interpolation/MicrosphereInterpolatingFunction.java:     * @param brightnessExponent Brightness dimming factor.
./analysis/interpolation/MicrosphereInterpolatingFunction.java:     * @param microsphereElements Number of surface elements of the
./analysis/interpolation/MicrosphereInterpolatingFunction.java:     * @param rand Unit vector generator for creating the microsphere.
./analysis/interpolation/MicrosphereInterpolatingFunction.java:     * @param point Interpolation point.
./analysis/interpolation/MicrosphereInterpolatingFunction.java:     * @param v Vector.
./analysis/interpolation/MicrosphereInterpolatingFunction.java:     * @param w Vector.
./analysis/interpolation/UnivariatePeriodicInterpolator.java:     * @param interpolator Interpolator.
./analysis/interpolation/UnivariatePeriodicInterpolator.java:     * @param period Period.
./analysis/interpolation/UnivariatePeriodicInterpolator.java:     * @param extend Number of points to be appended at the beginning and
./analysis/interpolation/UnivariatePeriodicInterpolator.java:     * @param interpolator Interpolator.
./analysis/interpolation/UnivariatePeriodicInterpolator.java:     * @param period Period.
./analysis/interpolation/MicrosphereInterpolator.java:     * @param elements Number of surface elements of the microsphere.
./analysis/interpolation/MicrosphereInterpolator.java:     * @param exponent Exponent used in the power law that computes the
./analysis/interpolation/DividedDifferenceInterpolator.java:     * @param x Interpolating points array.
./analysis/interpolation/DividedDifferenceInterpolator.java:     * @param y Interpolating values array.
./analysis/interpolation/DividedDifferenceInterpolator.java:     * @param x Interpolating points array.
./analysis/interpolation/DividedDifferenceInterpolator.java:     * @param y Interpolating values array.
./analysis/interpolation/BicubicInterpolatingFunction.java:     * @param x Sample values of the x-coordinate, in increasing order.
./analysis/interpolation/BicubicInterpolatingFunction.java:     * @param y Sample values of the y-coordinate, in increasing order.
./analysis/interpolation/BicubicInterpolatingFunction.java:     * @param f Values of the function on every grid point.
./analysis/interpolation/BicubicInterpolatingFunction.java:     * @param dFdX Values of the partial derivative of function with respect
./analysis/interpolation/BicubicInterpolatingFunction.java:     * @param dFdY Values of the partial derivative of function with respect
./analysis/interpolation/BicubicInterpolatingFunction.java:     * @param d2FdXdY Values of the cross partial derivative of function on
./analysis/interpolation/BicubicInterpolatingFunction.java:     * @param x First coordinate.
./analysis/interpolation/BicubicInterpolatingFunction.java:     * @param y Second coordinate.
./analysis/interpolation/BicubicInterpolatingFunction.java:     * @param c Coordinate.
./analysis/interpolation/BicubicInterpolatingFunction.java:     * @param val Coordinate samples.
./analysis/interpolation/BicubicInterpolatingFunction.java:     * @param beta List of function values and function partial derivatives
./analysis/interpolation/BicubicInterpolatingFunction.java:     * @param coeff Spline coefficients.
./analysis/interpolation/BicubicInterpolatingFunction.java:     * @param pX Powers of the x-coordinate.
./analysis/interpolation/BicubicInterpolatingFunction.java:     * @param pY Powers of the y-coordinate.
./analysis/interpolation/BicubicInterpolatingFunction.java:     * @param coeff Spline coefficients.
./analysis/interpolation/TrivariateGridInterpolator.java:     * @param xval All the x-coordinates of the interpolation points, sorted
./analysis/interpolation/TrivariateGridInterpolator.java:     * @param yval All the y-coordinates of the interpolation points, sorted
./analysis/interpolation/TrivariateGridInterpolator.java:     * @param zval All the z-coordinates of the interpolation points, sorted
./analysis/interpolation/TrivariateGridInterpolator.java:     * @param fval the values of the interpolation points on all the grid knots:
./analysis/interpolation/UnivariateInterpolator.java:     * @param xval Arguments for the interpolation points.
./analysis/interpolation/UnivariateInterpolator.java:     * @param yval Values for the interpolation points.
./analysis/interpolation/BivariateGridInterpolator.java:     * @param xval All the x-coordinates of the interpolation points, sorted
./analysis/interpolation/BivariateGridInterpolator.java:     * @param yval All the y-coordinates of the interpolation points, sorted
./analysis/interpolation/BivariateGridInterpolator.java:     * @param fval The values of the interpolation points on all the grid knots:
./analysis/interpolation/PiecewiseBicubicSplineInterpolatingFunction.java:     * @param x Sample values of the x-coordinate, in increasing order.
./analysis/interpolation/PiecewiseBicubicSplineInterpolatingFunction.java:     * @param y Sample values of the y-coordinate, in increasing order.
./analysis/interpolation/PiecewiseBicubicSplineInterpolatingFunction.java:     * @param f Values of the function on every grid point. the expected number
./analysis/interpolation/PiecewiseBicubicSplineInterpolatingFunction.java:     * @param x First coordinate.
./analysis/interpolation/PiecewiseBicubicSplineInterpolatingFunction.java:     * @param y Second coordinate.
./analysis/interpolation/PiecewiseBicubicSplineInterpolatingFunction.java:     * @param c Coordinate.
./analysis/interpolation/PiecewiseBicubicSplineInterpolatingFunction.java:     * @param val Coordinate samples.
./analysis/interpolation/PiecewiseBicubicSplineInterpolatingFunction.java:     * @param offset how far back from found value to offset for querying
./analysis/interpolation/PiecewiseBicubicSplineInterpolatingFunction.java:     * @param count total number of elements forward from beginning that will be
./analysis/interpolation/TricubicSplineInterpolatingFunction.java:     * @param x Sample values of the x-coordinate, in increasing order.
./analysis/interpolation/TricubicSplineInterpolatingFunction.java:     * @param y Sample values of the y-coordinate, in increasing order.
./analysis/interpolation/TricubicSplineInterpolatingFunction.java:     * @param z Sample values of the y-coordinate, in increasing order.
./analysis/interpolation/TricubicSplineInterpolatingFunction.java:     * @param f Values of the function on every grid point.
./analysis/interpolation/TricubicSplineInterpolatingFunction.java:     * @param dFdX Values of the partial derivative of function with respect to x on every grid point.
./analysis/interpolation/TricubicSplineInterpolatingFunction.java:     * @param dFdY Values of the partial derivative of function with respect to y on every grid point.
./analysis/interpolation/TricubicSplineInterpolatingFunction.java:     * @param dFdZ Values of the partial derivative of function with respect to z on every grid point.
./analysis/interpolation/TricubicSplineInterpolatingFunction.java:     * @param d2FdXdY Values of the cross partial derivative of function on every grid point.
./analysis/interpolation/TricubicSplineInterpolatingFunction.java:     * @param d2FdXdZ Values of the cross partial derivative of function on every grid point.
./analysis/interpolation/TricubicSplineInterpolatingFunction.java:     * @param d2FdYdZ Values of the cross partial derivative of function on every grid point.
./analysis/interpolation/TricubicSplineInterpolatingFunction.java:     * @param d3FdXdYdZ Values of the cross partial derivative of function on every grid point.
./analysis/interpolation/TricubicSplineInterpolatingFunction.java:     * @param c Coordinate.
./analysis/interpolation/TricubicSplineInterpolatingFunction.java:     * @param val Coordinate samples.
./analysis/interpolation/TricubicSplineInterpolatingFunction.java:     * @param beta List of function values and function partial derivatives values.
./analysis/interpolation/TricubicSplineInterpolatingFunction.java:     * @param aV List of spline coefficients.
./analysis/interpolation/TricubicSplineInterpolatingFunction.java:     * @param x x-coordinate of the interpolation point.
./analysis/interpolation/TricubicSplineInterpolatingFunction.java:     * @param y y-coordinate of the interpolation point.
./analysis/interpolation/TricubicSplineInterpolatingFunction.java:     * @param z z-coordinate of the interpolation point.
./analysis/interpolation/HermiteInterpolator.java:     * @param x abscissa of the sample point
./analysis/interpolation/HermiteInterpolator.java:     * @param value value and derivatives of the sample point
./analysis/interpolation/HermiteInterpolator.java:     * @param x interpolation abscissa
./analysis/interpolation/HermiteInterpolator.java:     * @param x interpolation abscissa
./analysis/interpolation/HermiteInterpolator.java:     * @param c polynomials coefficients
./analysis/interpolation/TricubicSplineInterpolator.java:     * @param i Index
./analysis/interpolation/TricubicSplineInterpolator.java:     * @param max Upper limit of the array
./analysis/interpolation/TricubicSplineInterpolator.java:     * @param i Index
./analysis/interpolation/InterpolatingMicrosphere.java:     * @param dimension Dimension of the data space.
./analysis/interpolation/InterpolatingMicrosphere.java:     * @param size Number of surface elements of the sphere.
./analysis/interpolation/InterpolatingMicrosphere.java:     * @param maxDarkFraction Maximum fraction of the facets that can be dark.
./analysis/interpolation/InterpolatingMicrosphere.java:     * @param darkThreshold Value of the illumination below which a facet is
./analysis/interpolation/InterpolatingMicrosphere.java:     * @param background Value returned when the {@code maxDarkFraction}
./analysis/interpolation/InterpolatingMicrosphere.java:     * @param dimension Dimension of the data space.
./analysis/interpolation/InterpolatingMicrosphere.java:     * @param size Number of surface elements of the sphere.
./analysis/interpolation/InterpolatingMicrosphere.java:     * @param rand Unit vector generator for creating the microsphere.
./analysis/interpolation/InterpolatingMicrosphere.java:     * @param maxDarkFraction Maximum fraction of the facets that can be dark.
./analysis/interpolation/InterpolatingMicrosphere.java:     * @param darkThreshold Value of the illumination below which a facet
./analysis/interpolation/InterpolatingMicrosphere.java:     * @param background Value returned when the {@code maxDarkFraction}
./analysis/interpolation/InterpolatingMicrosphere.java:     * @param other Instance to copy.
./analysis/interpolation/InterpolatingMicrosphere.java:     * @param point Interpolation point.
./analysis/interpolation/InterpolatingMicrosphere.java:     * @param samplePoints Sampling data points.
./analysis/interpolation/InterpolatingMicrosphere.java:     * @param sampleValues Sampling data values at the corresponding
./analysis/interpolation/InterpolatingMicrosphere.java:     * @param exponent Exponent used in the power law that computes
./analysis/interpolation/InterpolatingMicrosphere.java:     * @param noInterpolationTolerance When the distance between the
./analysis/interpolation/InterpolatingMicrosphere.java:     * @param normal Facet's normal vector.
./analysis/interpolation/InterpolatingMicrosphere.java:     * @param copy Whether to copy the given array.
./analysis/interpolation/InterpolatingMicrosphere.java:     * @param sampleDirection Vector whose origin is at the interpolation
./analysis/interpolation/InterpolatingMicrosphere.java:     * @param sampleValue Data value of the sample.
./analysis/interpolation/InterpolatingMicrosphere.java:     * @param weight Weight.
./analysis/interpolation/InterpolatingMicrosphere.java:         * @param n Normal vector characterizing a surface element
./analysis/interpolation/InterpolatingMicrosphere.java:         * @param illumination Illumination.
./analysis/interpolation/InterpolatingMicrosphere.java:         * @param sample Data value.
./analysis/interpolation/SplineInterpolator.java:     * @param x the arguments for the interpolation points
./analysis/interpolation/SplineInterpolator.java:     * @param y the values for the interpolation points
./analysis/interpolation/BicubicSplineInterpolator.java:     * @param initializeDerivatives Whether to initialize the internal data
./analysis/interpolation/BicubicSplineInterpolator.java:     * @param i Index.
./analysis/interpolation/BicubicSplineInterpolator.java:     * @param max Upper limit of the array.
./analysis/interpolation/BicubicSplineInterpolator.java:     * @param i Index.
./analysis/interpolation/TricubicInterpolatingFunction.java:     * @param x Sample values of the x-coordinate, in increasing order.
./analysis/interpolation/TricubicInterpolatingFunction.java:     * @param y Sample values of the y-coordinate, in increasing order.
./analysis/interpolation/TricubicInterpolatingFunction.java:     * @param z Sample values of the y-coordinate, in increasing order.
./analysis/interpolation/TricubicInterpolatingFunction.java:     * @param f Values of the function on every grid point.
./analysis/interpolation/TricubicInterpolatingFunction.java:     * @param dFdX Values of the partial derivative of function with respect to x on every grid point.
./analysis/interpolation/TricubicInterpolatingFunction.java:     * @param dFdY Values of the partial derivative of function with respect to y on every grid point.
./analysis/interpolation/TricubicInterpolatingFunction.java:     * @param dFdZ Values of the partial derivative of function with respect to z on every grid point.
./analysis/interpolation/TricubicInterpolatingFunction.java:     * @param d2FdXdY Values of the cross partial derivative of function on every grid point.
./analysis/interpolation/TricubicInterpolatingFunction.java:     * @param d2FdXdZ Values of the cross partial derivative of function on every grid point.
./analysis/interpolation/TricubicInterpolatingFunction.java:     * @param d2FdYdZ Values of the cross partial derivative of function on every grid point.
./analysis/interpolation/TricubicInterpolatingFunction.java:     * @param d3FdXdYdZ Values of the cross partial derivative of function on every grid point.
./analysis/interpolation/TricubicInterpolatingFunction.java:     * @param x First coordinate.
./analysis/interpolation/TricubicInterpolatingFunction.java:     * @param y Second coordinate.
./analysis/interpolation/TricubicInterpolatingFunction.java:     * @param z Third coordinate.
./analysis/interpolation/TricubicInterpolatingFunction.java:     * @param c Coordinate.
./analysis/interpolation/TricubicInterpolatingFunction.java:     * @param val Coordinate samples.
./analysis/interpolation/TricubicInterpolatingFunction.java:     * @param beta List of function values and function partial derivatives values.
./analysis/interpolation/TricubicInterpolatingFunction.java:     * @param aV List of spline coefficients.
./analysis/interpolation/TricubicInterpolatingFunction.java:     * @param x x-coordinate of the interpolation point.
./analysis/interpolation/TricubicInterpolatingFunction.java:     * @param y y-coordinate of the interpolation point.
./analysis/interpolation/TricubicInterpolatingFunction.java:     * @param z z-coordinate of the interpolation point.
./analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java:     * @param degree Degree of the polynomial fitting functions.
./analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java:     * @param xDegree Degree of the polynomial fitting functions along the
./analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java:     * @param yDegree Degree of the polynomial fitting functions along the
./analysis/interpolation/InterpolatingMicrosphere2D.java:     * @param size Number of surface elements of the sphere.
./analysis/interpolation/InterpolatingMicrosphere2D.java:     * @param maxDarkFraction Maximum fraction of the facets that can be dark.
./analysis/interpolation/InterpolatingMicrosphere2D.java:     * @param darkThreshold Value of the illumination below which a facet is
./analysis/interpolation/InterpolatingMicrosphere2D.java:     * @param background Value returned when the {@code maxDarkFraction}
./analysis/interpolation/InterpolatingMicrosphere2D.java:     * @param other Instance to copy.
./analysis/interpolation/LoessInterpolator.java:     * @param bandwidth  when computing the loess fit at
./analysis/interpolation/LoessInterpolator.java:     * @param robustnessIters This many robustness iterations are done.
./analysis/interpolation/LoessInterpolator.java:     * @param bandwidth  when computing the loess fit at
./analysis/interpolation/LoessInterpolator.java:     * @param robustnessIters This many robustness iterations are done.
./analysis/interpolation/LoessInterpolator.java:     * @param accuracy If the median residual at a certain robustness iteration
./analysis/interpolation/LoessInterpolator.java:     * @param xval the arguments for the interpolation points
./analysis/interpolation/LoessInterpolator.java:     * @param yval the values for the interpolation points
./analysis/interpolation/LoessInterpolator.java:     * @param xval Arguments for the interpolation points.
./analysis/interpolation/LoessInterpolator.java:     * @param yval Values for the interpolation points.
./analysis/interpolation/LoessInterpolator.java:     * @param weights point weights: coefficients by which the robustness weight
./analysis/interpolation/LoessInterpolator.java:     * @param xval the arguments for the interpolation points
./analysis/interpolation/LoessInterpolator.java:     * @param yval the values for the interpolation points
./analysis/interpolation/LoessInterpolator.java:     * @param xval Arguments array.
./analysis/interpolation/LoessInterpolator.java:     * @param weights Weights array.
./analysis/interpolation/LoessInterpolator.java:     * @param i Index around which the new interval should be computed.
./analysis/interpolation/LoessInterpolator.java:     * @param bandwidthInterval a two-element array {left, right} such that:
./analysis/interpolation/LoessInterpolator.java:     * @param weights Weights array.
./analysis/interpolation/LoessInterpolator.java:     * @param i Index from which to start search.
./analysis/interpolation/LoessInterpolator.java:     * @param x Argument.
./analysis/interpolation/LoessInterpolator.java:     * @param values Values array.
./analysis/interpolation/MicrosphereProjectionInterpolator.java:     * @param dimension Space dimension.
./analysis/interpolation/MicrosphereProjectionInterpolator.java:     * @param elements Number of surface elements of the microsphere.
./analysis/interpolation/MicrosphereProjectionInterpolator.java:     * @param exponent Exponent used in the power law that computes the
./analysis/interpolation/MicrosphereProjectionInterpolator.java:     * @param maxDarkFraction Maximum fraction of the facets that can be dark.
./analysis/interpolation/MicrosphereProjectionInterpolator.java:     * @param darkThreshold Value of the illumination below which a facet is
./analysis/interpolation/MicrosphereProjectionInterpolator.java:     * @param background Value returned when the {@code maxDarkFraction}
./analysis/interpolation/MicrosphereProjectionInterpolator.java:     * @param sharedSphere Whether the sphere can be shared among the
./analysis/interpolation/MicrosphereProjectionInterpolator.java:     * @param noInterpolationTolerance When the distance between an
./analysis/interpolation/MicrosphereProjectionInterpolator.java:     * @param microsphere Microsphere.
./analysis/interpolation/MicrosphereProjectionInterpolator.java:     * @param exponent Exponent used in the power law that computes the
./analysis/interpolation/MicrosphereProjectionInterpolator.java:     * @param sharedSphere Whether the sphere can be shared among the
./analysis/interpolation/MicrosphereProjectionInterpolator.java:     * @param noInterpolationTolerance When the distance between an
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @param x Sample values of the x-coordinate, in increasing order.
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @param y Sample values of the y-coordinate, in increasing order.
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @param f Values of the function on every grid point.
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @param dFdX Values of the partial derivative of function with respect
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @param dFdY Values of the partial derivative of function with respect
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @param d2FdXdY Values of the cross partial derivative of function on
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @param x Sample values of the x-coordinate, in increasing order.
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @param y Sample values of the y-coordinate, in increasing order.
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @param f Values of the function on every grid point.
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @param dFdX Values of the partial derivative of function with respect
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @param dFdY Values of the partial derivative of function with respect
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @param d2FdXdY Values of the cross partial derivative of function on
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @param initializeDerivatives Whether to initialize the internal data
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @param x First coordinate.
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @param y Second coordinate.
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @param x x-coordinate.
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @param y y-coordinate.
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @param x x-coordinate.
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @param y y-coordinate.
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @param x x-coordinate.
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @param y y-coordinate.
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @param x x-coordinate.
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @param y y-coordinate.
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @param x x-coordinate.
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @param y y-coordinate.
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @param which First index in {@link #partialDerivatives}.
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @param x x-coordinate.
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @param y y-coordinate.
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @param c Coordinate.
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @param val Coordinate samples.
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @param beta List of function values and function partial derivatives
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @param coeff Spline coefficients.
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @param coeff Spline coefficients.
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @param initializeDerivatives Whether to initialize the internal data
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @param pX Powers of the x-coordinate.
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @param pY Powers of the y-coordinate.
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @param coeff Spline coefficients.
./analysis/interpolation/MultivariateInterpolator.java:     * @param xval the arguments for the interpolation points.
./analysis/interpolation/MultivariateInterpolator.java:     * @param yval the values for the interpolation points
./analysis/interpolation/LinearInterpolator.java:     * @param x the arguments for the interpolation points
./analysis/interpolation/LinearInterpolator.java:     * @param y the values for the interpolation points
./analysis/interpolation/AkimaSplineInterpolator.java:     * @param xvals the arguments for the interpolation points
./analysis/interpolation/AkimaSplineInterpolator.java:     * @param yvals the values for the interpolation points
./analysis/interpolation/AkimaSplineInterpolator.java:     * @param xvals x values to calculate the numerical derivative with
./analysis/interpolation/AkimaSplineInterpolator.java:     * @param yvals y values to calculate the numerical derivative with
./analysis/interpolation/AkimaSplineInterpolator.java:     * @param indexOfDifferentiation index of the elemnt we are calculating the derivative around
./analysis/interpolation/AkimaSplineInterpolator.java:     * @param indexOfFirstSample index of the first element to sample for the three point method
./analysis/interpolation/AkimaSplineInterpolator.java:     * @param indexOfSecondsample index of the second element to sample for the three point method
./analysis/interpolation/AkimaSplineInterpolator.java:     * @param indexOfThirdSample index of the third element to sample for the three point method
./analysis/interpolation/AkimaSplineInterpolator.java:     * @param xvals x values for interpolation
./analysis/interpolation/AkimaSplineInterpolator.java:     * @param yvals y values for interpolation
./analysis/interpolation/AkimaSplineInterpolator.java:     * @param firstDerivatives first derivative values of the function
./analysis/interpolation/FieldHermiteInterpolator.java: * @param <T> Type of the field elements.
./analysis/interpolation/FieldHermiteInterpolator.java:     * @param x abscissa of the sample point
./analysis/interpolation/FieldHermiteInterpolator.java:     * @param value value and derivatives of the sample point
./analysis/interpolation/FieldHermiteInterpolator.java:     * @param x interpolation abscissa
./analysis/interpolation/FieldHermiteInterpolator.java:     * @param x interpolation abscissa
./analysis/interpolation/FieldHermiteInterpolator.java:     * @param order maximum derivation order
./analysis/interpolation/NevilleInterpolator.java:     * @param x Interpolating points.
./analysis/interpolation/NevilleInterpolator.java:     * @param y Interpolating values.
./analysis/differentiation/MultivariateDifferentiableVectorFunction.java:     * @param point point at which the function must be evaluated
./analysis/differentiation/DerivativeStructure.java:     * @param compiler compiler to use for computation
./analysis/differentiation/DerivativeStructure.java:     * @param parameters number of free parameters
./analysis/differentiation/DerivativeStructure.java:     * @param order derivation order
./analysis/differentiation/DerivativeStructure.java:     * @param parameters number of free parameters
./analysis/differentiation/DerivativeStructure.java:     * @param order derivation order
./analysis/differentiation/DerivativeStructure.java:     * @param value value of the constant
./analysis/differentiation/DerivativeStructure.java:     * @param parameters number of free parameters
./analysis/differentiation/DerivativeStructure.java:     * @param order derivation order
./analysis/differentiation/DerivativeStructure.java:     * @param index index of the variable (from 0 to {@code parameters - 1})
./analysis/differentiation/DerivativeStructure.java:     * @param value value of the variable
./analysis/differentiation/DerivativeStructure.java:     * @param a1 first scale factor
./analysis/differentiation/DerivativeStructure.java:     * @param ds1 first base (unscaled) derivative structure
./analysis/differentiation/DerivativeStructure.java:     * @param a2 second scale factor
./analysis/differentiation/DerivativeStructure.java:     * @param ds2 second base (unscaled) derivative structure
./analysis/differentiation/DerivativeStructure.java:     * @param a1 first scale factor
./analysis/differentiation/DerivativeStructure.java:     * @param ds1 first base (unscaled) derivative structure
./analysis/differentiation/DerivativeStructure.java:     * @param a2 second scale factor
./analysis/differentiation/DerivativeStructure.java:     * @param ds2 second base (unscaled) derivative structure
./analysis/differentiation/DerivativeStructure.java:     * @param a3 third scale factor
./analysis/differentiation/DerivativeStructure.java:     * @param ds3 third base (unscaled) derivative structure
./analysis/differentiation/DerivativeStructure.java:     * @param a1 first scale factor
./analysis/differentiation/DerivativeStructure.java:     * @param ds1 first base (unscaled) derivative structure
./analysis/differentiation/DerivativeStructure.java:     * @param a2 second scale factor
./analysis/differentiation/DerivativeStructure.java:     * @param ds2 second base (unscaled) derivative structure
./analysis/differentiation/DerivativeStructure.java:     * @param a3 third scale factor
./analysis/differentiation/DerivativeStructure.java:     * @param ds3 third base (unscaled) derivative structure
./analysis/differentiation/DerivativeStructure.java:     * @param a4 fourth scale factor
./analysis/differentiation/DerivativeStructure.java:     * @param ds4 fourth base (unscaled) derivative structure
./analysis/differentiation/DerivativeStructure.java:     * @param parameters number of free parameters
./analysis/differentiation/DerivativeStructure.java:     * @param order derivation order
./analysis/differentiation/DerivativeStructure.java:     * @param derivatives derivatives sorted according to
./analysis/differentiation/DerivativeStructure.java:     * @param ds instance to copy
./analysis/differentiation/DerivativeStructure.java:     * @param c value of the constant
./analysis/differentiation/DerivativeStructure.java:     * @param orders derivation orders with respect to each variable (if all orders are 0,
./analysis/differentiation/DerivativeStructure.java:     * @param x a value
./analysis/differentiation/DerivativeStructure.java:     * @param y a value
./analysis/differentiation/DerivativeStructure.java:     * @param f array of value and derivatives of the function at
./analysis/differentiation/DerivativeStructure.java:     * @param a number to exponentiate
./analysis/differentiation/DerivativeStructure.java:     * @param x power to apply
./analysis/differentiation/DerivativeStructure.java:     * @param y first argument of the arc tangent
./analysis/differentiation/DerivativeStructure.java:     * @param x second argument of the arc tangent
./analysis/differentiation/DerivativeStructure.java:     * @param delta parameters offsets (&Delta;x, &Delta;y, ...)
./analysis/differentiation/DerivativeStructure.java:     * @param other Object to test for equality to this
./analysis/differentiation/DerivativeStructure.java:         * @param variables number of variables
./analysis/differentiation/DerivativeStructure.java:         * @param order derivation order
./analysis/differentiation/DerivativeStructure.java:         * @param data partial derivatives
./analysis/differentiation/UnivariateDifferentiableFunction.java:     * @param t function input value
./analysis/differentiation/GradientFunction.java:     * @param f underlying real-valued function
./analysis/differentiation/SparseGradient.java:     * @param value value of the function
./analysis/differentiation/SparseGradient.java:     * @param derivatives derivatives map, a deep copy will be performed,
./analysis/differentiation/SparseGradient.java:     * @param value value of the function
./analysis/differentiation/SparseGradient.java:     * @param scale scaling factor to apply to all derivatives
./analysis/differentiation/SparseGradient.java:     * @param derivatives derivatives map, a deep copy will be performed,
./analysis/differentiation/SparseGradient.java:     * @param value value of the constant
./analysis/differentiation/SparseGradient.java:     * @param idx index of the variable
./analysis/differentiation/SparseGradient.java:     * @param value value of the variable
./analysis/differentiation/SparseGradient.java:     * @param index index to differentiate with.
./analysis/differentiation/SparseGradient.java:     * @param a instance to add
./analysis/differentiation/SparseGradient.java:     * @param a instance to multiply
./analysis/differentiation/SparseGradient.java:     * @param x a value
./analysis/differentiation/SparseGradient.java:     * @param y a value
./analysis/differentiation/SparseGradient.java:     * @param a number to exponentiate
./analysis/differentiation/SparseGradient.java:     * @param x power to apply
./analysis/differentiation/SparseGradient.java:     * @param y first argument of the arc tangent
./analysis/differentiation/SparseGradient.java:     * @param x second argument of the arc tangent
./analysis/differentiation/SparseGradient.java:     * @param delta parameters offsets (&Delta;x, &Delta;y, ...)
./analysis/differentiation/SparseGradient.java:     * @param f0 value of the function at (i.e. f({@link #getValue()}))
./analysis/differentiation/SparseGradient.java:     * @param f1 first derivative of the function at
./analysis/differentiation/SparseGradient.java:     * @param other Object to test for equality to this
./analysis/differentiation/JacobianFunction.java:     * @param f underlying vector-valued function
./analysis/differentiation/UnivariateDifferentiableVectorFunction.java:     * @param x the point for which the function value should be computed
./analysis/differentiation/UnivariateMatrixFunctionDifferentiator.java:     * @param function function to differentiate
./analysis/differentiation/UnivariateDifferentiableMatrixFunction.java:     * @param x the point for which the function value should be computed
./analysis/differentiation/UnivariateVectorFunctionDifferentiator.java:     * @param function function to differentiate
./analysis/differentiation/UnivariateFunctionDifferentiator.java:     * @param function function to differentiate
./analysis/differentiation/FiniteDifferencesDifferentiator.java:     * @param nbPoints number of points to use
./analysis/differentiation/FiniteDifferencesDifferentiator.java:     * @param stepSize step size (gap between each point)
./analysis/differentiation/FiniteDifferencesDifferentiator.java:     * @param nbPoints number of points to use
./analysis/differentiation/FiniteDifferencesDifferentiator.java:     * @param stepSize step size (gap between each point)
./analysis/differentiation/FiniteDifferencesDifferentiator.java:     * @param tLower lower bound for independent variable (may be {@code Double.NEGATIVE_INFINITY}
./analysis/differentiation/FiniteDifferencesDifferentiator.java:     * @param tUpper upper bound for independent variable (may be {@code Double.POSITIVE_INFINITY}
./analysis/differentiation/FiniteDifferencesDifferentiator.java:     * @param t evaluation abscissa value and derivatives
./analysis/differentiation/FiniteDifferencesDifferentiator.java:     * @param t0 first sample point abscissa
./analysis/differentiation/FiniteDifferencesDifferentiator.java:     * @param y function values sample {@code y[i] = f(t[i]) = f(t0 + i * stepSize)}
./analysis/differentiation/MultivariateDifferentiableFunction.java:     * @param point Point at which the function must be evaluated.
./analysis/differentiation/DSCompiler.java:     * @param parameters number of free parameters
./analysis/differentiation/DSCompiler.java:     * @param order derivation order
./analysis/differentiation/DSCompiler.java:     * @param valueCompiler compiler for the value part
./analysis/differentiation/DSCompiler.java:     * @param derivativeCompiler compiler for the derivative part
./analysis/differentiation/DSCompiler.java:     * @param parameters number of free parameters
./analysis/differentiation/DSCompiler.java:     * @param order derivation order
./analysis/differentiation/DSCompiler.java:     * @param parameters number of free parameters
./analysis/differentiation/DSCompiler.java:     * @param order derivation order
./analysis/differentiation/DSCompiler.java:     * @param valueCompiler compiler for the value part
./analysis/differentiation/DSCompiler.java:     * @param parameters number of free parameters
./analysis/differentiation/DSCompiler.java:     * @param order derivation order
./analysis/differentiation/DSCompiler.java:     * @param valueCompiler compiler for the value part
./analysis/differentiation/DSCompiler.java:     * @param derivativeCompiler compiler for the derivative part
./analysis/differentiation/DSCompiler.java:     * @param parameters number of free parameters
./analysis/differentiation/DSCompiler.java:     * @param order derivation order
./analysis/differentiation/DSCompiler.java:     * @param valueCompiler compiler for the value part
./analysis/differentiation/DSCompiler.java:     * @param derivativeCompiler compiler for the derivative part
./analysis/differentiation/DSCompiler.java:     * @param parameters number of free parameters
./analysis/differentiation/DSCompiler.java:     * @param order derivation order
./analysis/differentiation/DSCompiler.java:     * @param valueCompiler compiler for the value part
./analysis/differentiation/DSCompiler.java:     * @param derivativeCompiler compiler for the derivative part
./analysis/differentiation/DSCompiler.java:     * @param lowerIndirection lower derivatives indirection array
./analysis/differentiation/DSCompiler.java:     * @param parameters number of free parameters
./analysis/differentiation/DSCompiler.java:     * @param order derivation order
./analysis/differentiation/DSCompiler.java:     * @param valueCompiler compiler for the value part
./analysis/differentiation/DSCompiler.java:     * @param derivativeCompiler compiler for the derivative part
./analysis/differentiation/DSCompiler.java:     * @param sizes sizes array
./analysis/differentiation/DSCompiler.java:     * @param derivativesIndirection derivatives indirection array
./analysis/differentiation/DSCompiler.java:     * @param orders derivation orders with respect to each parameter
./analysis/differentiation/DSCompiler.java:     * @param parameters number of free parameters
./analysis/differentiation/DSCompiler.java:     * @param order derivation order
./analysis/differentiation/DSCompiler.java:     * @param sizes sizes array
./analysis/differentiation/DSCompiler.java:     * @param orders derivation orders with respect to each parameter
./analysis/differentiation/DSCompiler.java:     * @param index index of a partial derivative in source derivative structure
./analysis/differentiation/DSCompiler.java:     * @param srcP number of free parameters in source derivative structure
./analysis/differentiation/DSCompiler.java:     * @param srcDerivativesIndirection derivatives indirection array for the source
./analysis/differentiation/DSCompiler.java:     * @param destP number of free parameters in destination derivative structure
./analysis/differentiation/DSCompiler.java:     * @param destO derivation order in destination derivative structure
./analysis/differentiation/DSCompiler.java:     * @param destSizes sizes array for the destination derivative structure
./analysis/differentiation/DSCompiler.java:     * @param index of the partial derivative
./analysis/differentiation/DSCompiler.java:     * @param a1 first scale factor
./analysis/differentiation/DSCompiler.java:     * @param c1 first base (unscaled) component
./analysis/differentiation/DSCompiler.java:     * @param offset1 offset of first operand in its array
./analysis/differentiation/DSCompiler.java:     * @param a2 second scale factor
./analysis/differentiation/DSCompiler.java:     * @param c2 second base (unscaled) component
./analysis/differentiation/DSCompiler.java:     * @param offset2 offset of second operand in its array
./analysis/differentiation/DSCompiler.java:     * @param result array where result must be stored (it may be
./analysis/differentiation/DSCompiler.java:     * @param resultOffset offset of the result in its array
./analysis/differentiation/DSCompiler.java:     * @param a1 first scale factor
./analysis/differentiation/DSCompiler.java:     * @param c1 first base (unscaled) component
./analysis/differentiation/DSCompiler.java:     * @param offset1 offset of first operand in its array
./analysis/differentiation/DSCompiler.java:     * @param a2 second scale factor
./analysis/differentiation/DSCompiler.java:     * @param c2 second base (unscaled) component
./analysis/differentiation/DSCompiler.java:     * @param offset2 offset of second operand in its array
./analysis/differentiation/DSCompiler.java:     * @param a3 third scale factor
./analysis/differentiation/DSCompiler.java:     * @param c3 third base (unscaled) component
./analysis/differentiation/DSCompiler.java:     * @param offset3 offset of third operand in its array
./analysis/differentiation/DSCompiler.java:     * @param result array where result must be stored (it may be
./analysis/differentiation/DSCompiler.java:     * @param resultOffset offset of the result in its array
./analysis/differentiation/DSCompiler.java:     * @param a1 first scale factor
./analysis/differentiation/DSCompiler.java:     * @param c1 first base (unscaled) component
./analysis/differentiation/DSCompiler.java:     * @param offset1 offset of first operand in its array
./analysis/differentiation/DSCompiler.java:     * @param a2 second scale factor
./analysis/differentiation/DSCompiler.java:     * @param c2 second base (unscaled) component
./analysis/differentiation/DSCompiler.java:     * @param offset2 offset of second operand in its array
./analysis/differentiation/DSCompiler.java:     * @param a3 third scale factor
./analysis/differentiation/DSCompiler.java:     * @param c3 third base (unscaled) component
./analysis/differentiation/DSCompiler.java:     * @param offset3 offset of third operand in its array
./analysis/differentiation/DSCompiler.java:     * @param a4 fourth scale factor
./analysis/differentiation/DSCompiler.java:     * @param c4 fourth base (unscaled) component
./analysis/differentiation/DSCompiler.java:     * @param offset4 offset of fourth operand in its array
./analysis/differentiation/DSCompiler.java:     * @param result array where result must be stored (it may be
./analysis/differentiation/DSCompiler.java:     * @param resultOffset offset of the result in its array
./analysis/differentiation/DSCompiler.java:     * @param lhs array holding left hand side of addition
./analysis/differentiation/DSCompiler.java:     * @param lhsOffset offset of the left hand side in its array
./analysis/differentiation/DSCompiler.java:     * @param rhs array right hand side of addition
./analysis/differentiation/DSCompiler.java:     * @param rhsOffset offset of the right hand side in its array
./analysis/differentiation/DSCompiler.java:     * @param result array where result must be stored (it may be
./analysis/differentiation/DSCompiler.java:     * @param resultOffset offset of the result in its array
./analysis/differentiation/DSCompiler.java:     * @param lhs array holding left hand side of subtraction
./analysis/differentiation/DSCompiler.java:     * @param lhsOffset offset of the left hand side in its array
./analysis/differentiation/DSCompiler.java:     * @param rhs array right hand side of subtraction
./analysis/differentiation/DSCompiler.java:     * @param rhsOffset offset of the right hand side in its array
./analysis/differentiation/DSCompiler.java:     * @param result array where result must be stored (it may be
./analysis/differentiation/DSCompiler.java:     * @param resultOffset offset of the result in its array
./analysis/differentiation/DSCompiler.java:     * @param lhs array holding left hand side of multiplication
./analysis/differentiation/DSCompiler.java:     * @param lhsOffset offset of the left hand side in its array
./analysis/differentiation/DSCompiler.java:     * @param rhs array right hand side of multiplication
./analysis/differentiation/DSCompiler.java:     * @param rhsOffset offset of the right hand side in its array
./analysis/differentiation/DSCompiler.java:     * @param result array where result must be stored (for
./analysis/differentiation/DSCompiler.java:     * @param resultOffset offset of the result in its array
./analysis/differentiation/DSCompiler.java:     * @param lhs array holding left hand side of division
./analysis/differentiation/DSCompiler.java:     * @param lhsOffset offset of the left hand side in its array
./analysis/differentiation/DSCompiler.java:     * @param rhs array right hand side of division
./analysis/differentiation/DSCompiler.java:     * @param rhsOffset offset of the right hand side in its array
./analysis/differentiation/DSCompiler.java:     * @param result array where result must be stored (for
./analysis/differentiation/DSCompiler.java:     * @param resultOffset offset of the result in its array
./analysis/differentiation/DSCompiler.java:     * @param lhs array holding left hand side of remainder
./analysis/differentiation/DSCompiler.java:     * @param lhsOffset offset of the left hand side in its array
./analysis/differentiation/DSCompiler.java:     * @param rhs array right hand side of remainder
./analysis/differentiation/DSCompiler.java:     * @param rhsOffset offset of the right hand side in its array
./analysis/differentiation/DSCompiler.java:     * @param result array where result must be stored (it may be
./analysis/differentiation/DSCompiler.java:     * @param resultOffset offset of the result in its array
./analysis/differentiation/DSCompiler.java:     * @param a number to exponentiate
./analysis/differentiation/DSCompiler.java:     * @param operand array holding the power
./analysis/differentiation/DSCompiler.java:     * @param operandOffset offset of the power in its array
./analysis/differentiation/DSCompiler.java:     * @param result array where result must be stored (for
./analysis/differentiation/DSCompiler.java:     * @param resultOffset offset of the result in its array
./analysis/differentiation/DSCompiler.java:     * @param operand array holding the operand
./analysis/differentiation/DSCompiler.java:     * @param operandOffset offset of the operand in its array
./analysis/differentiation/DSCompiler.java:     * @param p power to apply
./analysis/differentiation/DSCompiler.java:     * @param result array where result must be stored (for
./analysis/differentiation/DSCompiler.java:     * @param resultOffset offset of the result in its array
./analysis/differentiation/DSCompiler.java:     * @param operand array holding the operand
./analysis/differentiation/DSCompiler.java:     * @param operandOffset offset of the operand in its array
./analysis/differentiation/DSCompiler.java:     * @param n power to apply
./analysis/differentiation/DSCompiler.java:     * @param result array where result must be stored (for
./analysis/differentiation/DSCompiler.java:     * @param resultOffset offset of the result in its array
./analysis/differentiation/DSCompiler.java:     * @param x array holding the base
./analysis/differentiation/DSCompiler.java:     * @param xOffset offset of the base in its array
./analysis/differentiation/DSCompiler.java:     * @param y array holding the exponent
./analysis/differentiation/DSCompiler.java:     * @param yOffset offset of the exponent in its array
./analysis/differentiation/DSCompiler.java:     * @param result array where result must be stored (for
./analysis/differentiation/DSCompiler.java:     * @param resultOffset offset of the result in its array
./analysis/differentiation/DSCompiler.java:     * @param operand array holding the operand
./analysis/differentiation/DSCompiler.java:     * @param operandOffset offset of the operand in its array
./analysis/differentiation/DSCompiler.java:     * @param n order of the root
./analysis/differentiation/DSCompiler.java:     * @param result array where result must be stored (for
./analysis/differentiation/DSCompiler.java:     * @param resultOffset offset of the result in its array
./analysis/differentiation/DSCompiler.java:     * @param operand array holding the operand
./analysis/differentiation/DSCompiler.java:     * @param operandOffset offset of the operand in its array
./analysis/differentiation/DSCompiler.java:     * @param result array where result must be stored (for
./analysis/differentiation/DSCompiler.java:     * @param resultOffset offset of the result in its array
./analysis/differentiation/DSCompiler.java:     * @param operand array holding the operand
./analysis/differentiation/DSCompiler.java:     * @param operandOffset offset of the operand in its array
./analysis/differentiation/DSCompiler.java:     * @param result array where result must be stored (for
./analysis/differentiation/DSCompiler.java:     * @param resultOffset offset of the result in its array
./analysis/differentiation/DSCompiler.java:     * @param operand array holding the operand
./analysis/differentiation/DSCompiler.java:     * @param operandOffset offset of the operand in its array
./analysis/differentiation/DSCompiler.java:     * @param result array where result must be stored (for
./analysis/differentiation/DSCompiler.java:     * @param resultOffset offset of the result in its array
./analysis/differentiation/DSCompiler.java:     * @param operand array holding the operand
./analysis/differentiation/DSCompiler.java:     * @param operandOffset offset of the operand in its array
./analysis/differentiation/DSCompiler.java:     * @param result array where result must be stored (for
./analysis/differentiation/DSCompiler.java:     * @param resultOffset offset of the result in its array
./analysis/differentiation/DSCompiler.java:     * @param operand array holding the operand
./analysis/differentiation/DSCompiler.java:     * @param operandOffset offset of the operand in its array
./analysis/differentiation/DSCompiler.java:     * @param result array where result must be stored (for
./analysis/differentiation/DSCompiler.java:     * @param resultOffset offset of the result in its array
./analysis/differentiation/DSCompiler.java:     * @param operand array holding the operand
./analysis/differentiation/DSCompiler.java:     * @param operandOffset offset of the operand in its array
./analysis/differentiation/DSCompiler.java:     * @param result array where result must be stored (for
./analysis/differentiation/DSCompiler.java:     * @param resultOffset offset of the result in its array
./analysis/differentiation/DSCompiler.java:     * @param operand array holding the operand
./analysis/differentiation/DSCompiler.java:     * @param operandOffset offset of the operand in its array
./analysis/differentiation/DSCompiler.java:     * @param result array where result must be stored (for
./analysis/differentiation/DSCompiler.java:     * @param resultOffset offset of the result in its array
./analysis/differentiation/DSCompiler.java:     * @param operand array holding the operand
./analysis/differentiation/DSCompiler.java:     * @param operandOffset offset of the operand in its array
./analysis/differentiation/DSCompiler.java:     * @param result array where result must be stored (for
./analysis/differentiation/DSCompiler.java:     * @param resultOffset offset of the result in its array
./analysis/differentiation/DSCompiler.java:     * @param operand array holding the operand
./analysis/differentiation/DSCompiler.java:     * @param operandOffset offset of the operand in its array
./analysis/differentiation/DSCompiler.java:     * @param result array where result must be stored (for
./analysis/differentiation/DSCompiler.java:     * @param resultOffset offset of the result in its array
./analysis/differentiation/DSCompiler.java:     * @param operand array holding the operand
./analysis/differentiation/DSCompiler.java:     * @param operandOffset offset of the operand in its array
./analysis/differentiation/DSCompiler.java:     * @param result array where result must be stored (for
./analysis/differentiation/DSCompiler.java:     * @param resultOffset offset of the result in its array
./analysis/differentiation/DSCompiler.java:     * @param operand array holding the operand
./analysis/differentiation/DSCompiler.java:     * @param operandOffset offset of the operand in its array
./analysis/differentiation/DSCompiler.java:     * @param result array where result must be stored (for
./analysis/differentiation/DSCompiler.java:     * @param resultOffset offset of the result in its array
./analysis/differentiation/DSCompiler.java:     * @param y array holding the first operand
./analysis/differentiation/DSCompiler.java:     * @param yOffset offset of the first operand in its array
./analysis/differentiation/DSCompiler.java:     * @param x array holding the second operand
./analysis/differentiation/DSCompiler.java:     * @param xOffset offset of the second operand in its array
./analysis/differentiation/DSCompiler.java:     * @param result array where result must be stored (for
./analysis/differentiation/DSCompiler.java:     * @param resultOffset offset of the result in its array
./analysis/differentiation/DSCompiler.java:     * @param operand array holding the operand
./analysis/differentiation/DSCompiler.java:     * @param operandOffset offset of the operand in its array
./analysis/differentiation/DSCompiler.java:     * @param result array where result must be stored (for
./analysis/differentiation/DSCompiler.java:     * @param resultOffset offset of the result in its array
./analysis/differentiation/DSCompiler.java:     * @param operand array holding the operand
./analysis/differentiation/DSCompiler.java:     * @param operandOffset offset of the operand in its array
./analysis/differentiation/DSCompiler.java:     * @param result array where result must be stored (for
./analysis/differentiation/DSCompiler.java:     * @param resultOffset offset of the result in its array
./analysis/differentiation/DSCompiler.java:     * @param operand array holding the operand
./analysis/differentiation/DSCompiler.java:     * @param operandOffset offset of the operand in its array
./analysis/differentiation/DSCompiler.java:     * @param result array where result must be stored (for
./analysis/differentiation/DSCompiler.java:     * @param resultOffset offset of the result in its array
./analysis/differentiation/DSCompiler.java:     * @param operand array holding the operand
./analysis/differentiation/DSCompiler.java:     * @param operandOffset offset of the operand in its array
./analysis/differentiation/DSCompiler.java:     * @param result array where result must be stored (for
./analysis/differentiation/DSCompiler.java:     * @param resultOffset offset of the result in its array
./analysis/differentiation/DSCompiler.java:     * @param operand array holding the operand
./analysis/differentiation/DSCompiler.java:     * @param operandOffset offset of the operand in its array
./analysis/differentiation/DSCompiler.java:     * @param result array where result must be stored (for
./analysis/differentiation/DSCompiler.java:     * @param resultOffset offset of the result in its array
./analysis/differentiation/DSCompiler.java:     * @param operand array holding the operand
./analysis/differentiation/DSCompiler.java:     * @param operandOffset offset of the operand in its array
./analysis/differentiation/DSCompiler.java:     * @param result array where result must be stored (for
./analysis/differentiation/DSCompiler.java:     * @param resultOffset offset of the result in its array
./analysis/differentiation/DSCompiler.java:     * @param operand array holding the operand
./analysis/differentiation/DSCompiler.java:     * @param operandOffset offset of the operand in its array
./analysis/differentiation/DSCompiler.java:     * @param f array of value and derivatives of the function at
./analysis/differentiation/DSCompiler.java:     * @param result array where result must be stored (for
./analysis/differentiation/DSCompiler.java:     * @param resultOffset offset of the result in its array
./analysis/differentiation/DSCompiler.java:     * @param ds array holding the derivative structure
./analysis/differentiation/DSCompiler.java:     * @param dsOffset offset of the derivative structure in its array
./analysis/differentiation/DSCompiler.java:     * @param delta parameters offsets (&Delta;x, &Delta;y, ...)
./analysis/differentiation/DSCompiler.java:     * @param compiler other compiler to check against instance
./analysis/UnivariateFunction.java:     * @param x Point at which the function value should be computed.
./analysis/ParametricUnivariateFunction.java:     * @param x Point for which the function value should be computed.
./analysis/ParametricUnivariateFunction.java:     * @param parameters Function parameters.
./analysis/ParametricUnivariateFunction.java:     * @param x Point for which the function value should be computed.
./analysis/ParametricUnivariateFunction.java:     * @param parameters Function parameters.
./analysis/MultivariateFunction.java:     * @param point Point at which the function must be evaluated.
./analysis/function/Constant.java:     * @param c Constant.
./analysis/function/StepFunction.java:     * @param x Domain values where the function changes value.
./analysis/function/StepFunction.java:     * @param y Values of the function.
./analysis/function/Logit.java:     * @param lo Lower bound of the function domain.
./analysis/function/Logit.java:     * @param hi Higher bound of the function domain.
./analysis/function/Logit.java:         * @param x Value for which the function must be computed.
./analysis/function/Logit.java:         * @param param Values of lower bound and higher bounds.
./analysis/function/Logit.java:         * @param x Value at which the gradient must be computed.
./analysis/function/Logit.java:         * @param param Values for lower and higher bounds.
./analysis/function/Logit.java:         * @param param Values for lower and higher bounds.
./analysis/function/Logit.java:     * @param x Value at which to compute the logit.
./analysis/function/Logit.java:     * @param lo Lower bound.
./analysis/function/Logit.java:     * @param hi Higher bound.
./analysis/function/HarmonicOscillator.java:     * @param amplitude Amplitude.
./analysis/function/HarmonicOscillator.java:     * @param omega Angular frequency.
./analysis/function/HarmonicOscillator.java:     * @param phase Phase.
./analysis/function/HarmonicOscillator.java:         * @param x Value for which the function must be computed.
./analysis/function/HarmonicOscillator.java:         * @param param Values of norm, mean and standard deviation.
./analysis/function/HarmonicOscillator.java:         * @param x Value at which the gradient must be computed.
./analysis/function/HarmonicOscillator.java:         * @param param Values of amplitude, angular frequency and phase.
./analysis/function/HarmonicOscillator.java:         * @param param Values of norm, mean and standard deviation.
./analysis/function/HarmonicOscillator.java:     * @param xTimesOmegaPlusPhase {@code omega * x + phase}.
./analysis/function/HarmonicOscillator.java:     * @param amplitude Amplitude.
./analysis/function/Sigmoid.java:     * @param lo Lower asymptote.
./analysis/function/Sigmoid.java:     * @param hi Higher asymptote.
./analysis/function/Sigmoid.java:         * @param x Value for which the function must be computed.
./analysis/function/Sigmoid.java:         * @param param Values of lower asymptote and higher asymptote.
./analysis/function/Sigmoid.java:         * @param x Value at which the gradient must be computed.
./analysis/function/Sigmoid.java:         * @param param Values for lower asymptote and higher asymptote.
./analysis/function/Sigmoid.java:         * @param param Values for lower and higher asymptotes.
./analysis/function/Sigmoid.java:     * @param x Value at which to compute the sigmoid.
./analysis/function/Sigmoid.java:     * @param lo Lower asymptote.
./analysis/function/Sigmoid.java:     * @param hi Higher asymptote.
./analysis/function/Sinc.java:     * @param normalized If {@code true}, the function is
./analysis/function/Power.java:     * @param p Power.
./analysis/function/Gaussian.java:     * @param norm Normalization factor.
./analysis/function/Gaussian.java:     * @param mean Mean.
./analysis/function/Gaussian.java:     * @param sigma Standard deviation.
./analysis/function/Gaussian.java:     * @param mean Mean.
./analysis/function/Gaussian.java:     * @param sigma Standard deviation.
./analysis/function/Gaussian.java:         * @param x Value for which the function must be computed.
./analysis/function/Gaussian.java:         * @param param Values of norm, mean and standard deviation.
./analysis/function/Gaussian.java:         * @param x Value at which the gradient must be computed.
./analysis/function/Gaussian.java:         * @param param Values of norm, mean and standard deviation.
./analysis/function/Gaussian.java:         * @param param Values of norm, mean and standard deviation.
./analysis/function/Gaussian.java:     * @param xMinusMean {@code x - mean}.
./analysis/function/Gaussian.java:     * @param norm Normalization factor.
./analysis/function/Gaussian.java:     * @param i2s2 Inverse of twice the square of the standard deviation.
./analysis/function/Logistic.java:     * @param k If {@code b > 0}, value of the function for x going towards +&infin;.
./analysis/function/Logistic.java:     * @param m Abscissa of maximum growth.
./analysis/function/Logistic.java:     * @param b Growth rate.
./analysis/function/Logistic.java:     * @param q Parameter that affects the position of the curve along the
./analysis/function/Logistic.java:     * @param a If {@code b > 0}, value of the function for x going towards -&infin;.
./analysis/function/Logistic.java:     * @param n Parameter that affects near which asymptote the maximum
./analysis/function/Logistic.java:         * @param x Value for which the function must be computed.
./analysis/function/Logistic.java:         * @param param Values for {@code k}, {@code m}, {@code b}, {@code q},
./analysis/function/Logistic.java:         * @param x Value at which the gradient must be computed.
./analysis/function/Logistic.java:         * @param param Values for {@code k}, {@code m}, {@code b}, {@code q},
./analysis/function/Logistic.java:         * @param param Values for {@code k}, {@code m}, {@code b}, {@code q},
./analysis/function/Logistic.java:     * @param mMinusX {@code m - x}.
./analysis/function/Logistic.java:     * @param k {@code k}.
./analysis/function/Logistic.java:     * @param b {@code b}.
./analysis/function/Logistic.java:     * @param q {@code q}.
./analysis/function/Logistic.java:     * @param a {@code a}.
./analysis/function/Logistic.java:     * @param oneOverN {@code 1 / n}.
./analysis/solvers/FieldBracketingNthOrderBrentSolver.java: * @param <T> the type of the field elements
./analysis/solvers/FieldBracketingNthOrderBrentSolver.java:     * @param relativeAccuracy Relative accuracy.
./analysis/solvers/FieldBracketingNthOrderBrentSolver.java:     * @param absoluteAccuracy Absolute accuracy.
./analysis/solvers/FieldBracketingNthOrderBrentSolver.java:     * @param functionValueAccuracy Function value accuracy.
./analysis/solvers/FieldBracketingNthOrderBrentSolver.java:     * @param maximalOrder maximal order.
./analysis/solvers/FieldBracketingNthOrderBrentSolver.java:     * @param maxEval Maximum number of evaluations.
./analysis/solvers/FieldBracketingNthOrderBrentSolver.java:     * @param f Function to solve.
./analysis/solvers/FieldBracketingNthOrderBrentSolver.java:     * @param min Lower bound for the interval.
./analysis/solvers/FieldBracketingNthOrderBrentSolver.java:     * @param max Upper bound for the interval.
./analysis/solvers/FieldBracketingNthOrderBrentSolver.java:     * @param allowedSolution The kind of solutions that the root-finding algorithm may
./analysis/solvers/FieldBracketingNthOrderBrentSolver.java:     * @param maxEval Maximum number of evaluations.
./analysis/solvers/FieldBracketingNthOrderBrentSolver.java:     * @param f Function to solve.
./analysis/solvers/FieldBracketingNthOrderBrentSolver.java:     * @param min Lower bound for the interval.
./analysis/solvers/FieldBracketingNthOrderBrentSolver.java:     * @param max Upper bound for the interval.
./analysis/solvers/FieldBracketingNthOrderBrentSolver.java:     * @param startValue Start value to use.
./analysis/solvers/FieldBracketingNthOrderBrentSolver.java:     * @param allowedSolution The kind of solutions that the root-finding algorithm may
./analysis/solvers/FieldBracketingNthOrderBrentSolver.java:     * @param targetY target value for y
./analysis/solvers/FieldBracketingNthOrderBrentSolver.java:     * @param x reference points abscissas for interpolation,
./analysis/solvers/FieldBracketingNthOrderBrentSolver.java:     * @param y reference points ordinates for interpolation
./analysis/solvers/FieldBracketingNthOrderBrentSolver.java:     * @param start start index of the points to consider (inclusive)
./analysis/solvers/FieldBracketingNthOrderBrentSolver.java:     * @param end end index of the points to consider (exclusive)
./analysis/solvers/RiddersSolver.java:     * @param absoluteAccuracy Absolute accuracy.
./analysis/solvers/RiddersSolver.java:     * @param relativeAccuracy Relative accuracy.
./analysis/solvers/RiddersSolver.java:     * @param absoluteAccuracy Absolute accuracy.
./analysis/solvers/BaseAbstractUnivariateSolver.java: * @param <FUNC> Type of function to solve.
./analysis/solvers/BaseAbstractUnivariateSolver.java:     * @param absoluteAccuracy Maximum absolute error.
./analysis/solvers/BaseAbstractUnivariateSolver.java:     * @param relativeAccuracy Maximum relative error.
./analysis/solvers/BaseAbstractUnivariateSolver.java:     * @param absoluteAccuracy Maximum absolute error.
./analysis/solvers/BaseAbstractUnivariateSolver.java:     * @param relativeAccuracy Maximum relative error.
./analysis/solvers/BaseAbstractUnivariateSolver.java:     * @param absoluteAccuracy Maximum absolute error.
./analysis/solvers/BaseAbstractUnivariateSolver.java:     * @param functionValueAccuracy Maximum function value error.
./analysis/solvers/BaseAbstractUnivariateSolver.java:     * @param point Point at which the objective function must be evaluated.
./analysis/solvers/BaseAbstractUnivariateSolver.java:     * @param f Function to solve.
./analysis/solvers/BaseAbstractUnivariateSolver.java:     * @param min Lower bound for the interval.
./analysis/solvers/BaseAbstractUnivariateSolver.java:     * @param max Upper bound for the interval.
./analysis/solvers/BaseAbstractUnivariateSolver.java:     * @param startValue Start value to use.
./analysis/solvers/BaseAbstractUnivariateSolver.java:     * @param maxEval Maximum number of evaluations.
./analysis/solvers/BaseAbstractUnivariateSolver.java:     * @param lower Lower endpoint.
./analysis/solvers/BaseAbstractUnivariateSolver.java:     * @param upper Upper endpoint.
./analysis/solvers/BaseAbstractUnivariateSolver.java:     * @param start First number.
./analysis/solvers/BaseAbstractUnivariateSolver.java:     * @param mid Second number.
./analysis/solvers/BaseAbstractUnivariateSolver.java:     * @param end Third number.
./analysis/solvers/BaseAbstractUnivariateSolver.java:     * @param lower Lower endpoint.
./analysis/solvers/BaseAbstractUnivariateSolver.java:     * @param upper Upper endpoint.
./analysis/solvers/BaseAbstractUnivariateSolver.java:     * @param lower Lower endpoint.
./analysis/solvers/BaseAbstractUnivariateSolver.java:     * @param initial Initial value.
./analysis/solvers/BaseAbstractUnivariateSolver.java:     * @param upper Upper endpoint.
./analysis/solvers/BaseAbstractUnivariateSolver.java:     * @param lower Lower endpoint.
./analysis/solvers/BaseAbstractUnivariateSolver.java:     * @param upper Upper endpoint.
./analysis/solvers/BracketedRealFieldUnivariateSolver.java: * @param <T> the type of the field elements
./analysis/solvers/BracketedRealFieldUnivariateSolver.java:     * @param maxEval Maximum number of evaluations.
./analysis/solvers/BracketedRealFieldUnivariateSolver.java:     * @param f Function to solve.
./analysis/solvers/BracketedRealFieldUnivariateSolver.java:     * @param min Lower bound for the interval.
./analysis/solvers/BracketedRealFieldUnivariateSolver.java:     * @param max Upper bound for the interval.
./analysis/solvers/BracketedRealFieldUnivariateSolver.java:     * @param allowedSolution The kind of solutions that the root-finding algorithm may
./analysis/solvers/BracketedRealFieldUnivariateSolver.java:     * @param maxEval Maximum number of evaluations.
./analysis/solvers/BracketedRealFieldUnivariateSolver.java:     * @param f Function to solve.
./analysis/solvers/BracketedRealFieldUnivariateSolver.java:     * @param min Lower bound for the interval.
./analysis/solvers/BracketedRealFieldUnivariateSolver.java:     * @param max Upper bound for the interval.
./analysis/solvers/BracketedRealFieldUnivariateSolver.java:     * @param startValue Start value to use.
./analysis/solvers/BracketedRealFieldUnivariateSolver.java:     * @param allowedSolution The kind of solutions that the root-finding algorithm may
./analysis/solvers/UnivariateSolverUtils.java:     * @param function Function.
./analysis/solvers/UnivariateSolverUtils.java:     * @param x0 Lower bound for the interval.
./analysis/solvers/UnivariateSolverUtils.java:     * @param x1 Upper bound for the interval.
./analysis/solvers/UnivariateSolverUtils.java:     * @param function Function.
./analysis/solvers/UnivariateSolverUtils.java:     * @param x0 Lower bound for the interval.
./analysis/solvers/UnivariateSolverUtils.java:     * @param x1 Upper bound for the interval.
./analysis/solvers/UnivariateSolverUtils.java:     * @param absoluteAccuracy Accuracy to be used by the solver.
./analysis/solvers/UnivariateSolverUtils.java:     * @param maxEval maximal number of new evaluations of the function
./analysis/solvers/UnivariateSolverUtils.java:     * @param f function to solve
./analysis/solvers/UnivariateSolverUtils.java:     * @param bracketing bracketing solver to use for shifting the root
./analysis/solvers/UnivariateSolverUtils.java:     * @param baseRoot original root found by a previous non-bracketing solver
./analysis/solvers/UnivariateSolverUtils.java:     * @param min minimal bound of the search interval
./analysis/solvers/UnivariateSolverUtils.java:     * @param max maximal bound of the search interval
./analysis/solvers/UnivariateSolverUtils.java:     * @param allowedSolution the kind of solutions that the root-finding algorithm may
./analysis/solvers/UnivariateSolverUtils.java:     * @param function Function.
./analysis/solvers/UnivariateSolverUtils.java:     * @param initial Initial midpoint of interval being expanded to
./analysis/solvers/UnivariateSolverUtils.java:     * @param lowerBound Lower bound (a is never lower than this value)
./analysis/solvers/UnivariateSolverUtils.java:     * @param upperBound Upper bound (b never is greater than this
./analysis/solvers/UnivariateSolverUtils.java:     * @param function Function.
./analysis/solvers/UnivariateSolverUtils.java:     * @param initial Initial midpoint of interval being expanded to
./analysis/solvers/UnivariateSolverUtils.java:     * @param lowerBound Lower bound (a is never lower than this value).
./analysis/solvers/UnivariateSolverUtils.java:     * @param upperBound Upper bound (b never is greater than this
./analysis/solvers/UnivariateSolverUtils.java:     * @param maximumIterations Maximum number of iterations to perform
./analysis/solvers/UnivariateSolverUtils.java:     * @param function function to check
./analysis/solvers/UnivariateSolverUtils.java:     * @param initial Initial midpoint of interval being expanded to
./analysis/solvers/UnivariateSolverUtils.java:     * @param lowerBound Lower bound (a is never lower than this value).
./analysis/solvers/UnivariateSolverUtils.java:     * @param upperBound Upper bound (b never is greater than this
./analysis/solvers/UnivariateSolverUtils.java:     * @param q additive offset used to compute bounds sequence (must be strictly positive)
./analysis/solvers/UnivariateSolverUtils.java:     * @param r multiplicative factor used to compute bounds sequence
./analysis/solvers/UnivariateSolverUtils.java:     * @param maximumIterations Maximum number of iterations to perform
./analysis/solvers/UnivariateSolverUtils.java:     * @param a first value.
./analysis/solvers/UnivariateSolverUtils.java:     * @param b second value.
./analysis/solvers/UnivariateSolverUtils.java:     * @param function Function.
./analysis/solvers/UnivariateSolverUtils.java:     * @param lower Lower endpoint.
./analysis/solvers/UnivariateSolverUtils.java:     * @param upper Upper endpoint.
./analysis/solvers/UnivariateSolverUtils.java:     * @param start First number.
./analysis/solvers/UnivariateSolverUtils.java:     * @param mid Second number.
./analysis/solvers/UnivariateSolverUtils.java:     * @param end Third number.
./analysis/solvers/UnivariateSolverUtils.java:     * @param lower Lower endpoint.
./analysis/solvers/UnivariateSolverUtils.java:     * @param upper Upper endpoint.
./analysis/solvers/UnivariateSolverUtils.java:     * @param lower Lower endpoint.
./analysis/solvers/UnivariateSolverUtils.java:     * @param initial Initial value.
./analysis/solvers/UnivariateSolverUtils.java:     * @param upper Upper endpoint.
./analysis/solvers/UnivariateSolverUtils.java:     * @param function Function.
./analysis/solvers/UnivariateSolverUtils.java:     * @param lower Lower endpoint.
./analysis/solvers/UnivariateSolverUtils.java:     * @param upper Upper endpoint.
./analysis/solvers/BaseUnivariateSolver.java: * @param <FUNC> Type of function to solve.
./analysis/solvers/BaseUnivariateSolver.java:     * @param maxEval Maximum number of evaluations.
./analysis/solvers/BaseUnivariateSolver.java:     * @param f Function to solve.
./analysis/solvers/BaseUnivariateSolver.java:     * @param min Lower bound for the interval.
./analysis/solvers/BaseUnivariateSolver.java:     * @param max Upper bound for the interval.
./analysis/solvers/BaseUnivariateSolver.java:     * @param maxEval Maximum number of evaluations.
./analysis/solvers/BaseUnivariateSolver.java:     * @param f Function to solve.
./analysis/solvers/BaseUnivariateSolver.java:     * @param min Lower bound for the interval.
./analysis/solvers/BaseUnivariateSolver.java:     * @param max Upper bound for the interval.
./analysis/solvers/BaseUnivariateSolver.java:     * @param startValue Start value to use.
./analysis/solvers/BaseUnivariateSolver.java:     * @param f Function to solve.
./analysis/solvers/BaseUnivariateSolver.java:     * @param startValue Start value to use.
./analysis/solvers/BaseUnivariateSolver.java:     * @param maxEval Maximum number of evaluations.
./analysis/solvers/AbstractDifferentiableUnivariateSolver.java:     * @param absoluteAccuracy Maximum absolute error.
./analysis/solvers/AbstractDifferentiableUnivariateSolver.java:     * @param relativeAccuracy Maximum relative error.
./analysis/solvers/AbstractDifferentiableUnivariateSolver.java:     * @param absoluteAccuracy Maximum absolute error.
./analysis/solvers/AbstractDifferentiableUnivariateSolver.java:     * @param functionValueAccuracy Maximum function value error.
./analysis/solvers/AbstractDifferentiableUnivariateSolver.java:     * @param point Point at which the objective function must be evaluated.
./analysis/solvers/SecantSolver.java:     * @param absoluteAccuracy absolute accuracy
./analysis/solvers/SecantSolver.java:     * @param relativeAccuracy relative accuracy
./analysis/solvers/SecantSolver.java:     * @param absoluteAccuracy absolute accuracy
./analysis/solvers/MullerSolver.java:     * @param absoluteAccuracy Absolute accuracy.
./analysis/solvers/MullerSolver.java:     * @param relativeAccuracy Relative accuracy.
./analysis/solvers/MullerSolver.java:     * @param absoluteAccuracy Absolute accuracy.
./analysis/solvers/MullerSolver.java:     * @param min Lower bound for the interval.
./analysis/solvers/MullerSolver.java:     * @param max Upper bound for the interval.
./analysis/solvers/MullerSolver.java:     * @param fMin function value at the lower bound.
./analysis/solvers/MullerSolver.java:     * @param fMax function value at the upper bound.
./analysis/solvers/MullerSolver2.java:     * @param absoluteAccuracy Absolute accuracy.
./analysis/solvers/MullerSolver2.java:     * @param relativeAccuracy Relative accuracy.
./analysis/solvers/MullerSolver2.java:     * @param absoluteAccuracy Absolute accuracy.
./analysis/solvers/LaguerreSolver.java:     * @param absoluteAccuracy Absolute accuracy.
./analysis/solvers/LaguerreSolver.java:     * @param relativeAccuracy Relative accuracy.
./analysis/solvers/LaguerreSolver.java:     * @param absoluteAccuracy Absolute accuracy.
./analysis/solvers/LaguerreSolver.java:     * @param relativeAccuracy Relative accuracy.
./analysis/solvers/LaguerreSolver.java:     * @param absoluteAccuracy Absolute accuracy.
./analysis/solvers/LaguerreSolver.java:     * @param functionValueAccuracy Function value accuracy.
./analysis/solvers/LaguerreSolver.java:     * @param lo Lower bound of the search interval.
./analysis/solvers/LaguerreSolver.java:     * @param hi Higher bound of the search interval.
./analysis/solvers/LaguerreSolver.java:     * @param fLo Function value at the lower bound of the search interval.
./analysis/solvers/LaguerreSolver.java:     * @param fHi Function value at the higher bound of the search interval.
./analysis/solvers/LaguerreSolver.java:     * @param coefficients Polynomial coefficients.
./analysis/solvers/LaguerreSolver.java:     * @param initial Start value.
./analysis/solvers/LaguerreSolver.java:     * @param coefficients polynomial coefficients
./analysis/solvers/LaguerreSolver.java:     * @param initial start value
./analysis/solvers/LaguerreSolver.java:     * @param maxEval maximum number of evaluations
./analysis/solvers/LaguerreSolver.java:     * @param coefficients Polynomial coefficients.
./analysis/solvers/LaguerreSolver.java:     * @param initial Start value.
./analysis/solvers/LaguerreSolver.java:     * @param coefficients polynomial coefficients
./analysis/solvers/LaguerreSolver.java:     * @param initial start value
./analysis/solvers/LaguerreSolver.java:     * @param maxEval maximum number of evaluations
./analysis/solvers/LaguerreSolver.java:         * @param min Lower bound for the interval.
./analysis/solvers/LaguerreSolver.java:         * @param max Upper bound for the interval.
./analysis/solvers/LaguerreSolver.java:         * @param z Complex root.
./analysis/solvers/LaguerreSolver.java:         * @param coefficients Polynomial coefficients.
./analysis/solvers/LaguerreSolver.java:         * @param initial Start value.
./analysis/solvers/LaguerreSolver.java:         * @param coefficients Polynomial coefficients.
./analysis/solvers/LaguerreSolver.java:         * @param initial Start value.
./analysis/solvers/BisectionSolver.java:     * @param absoluteAccuracy Absolute accuracy.
./analysis/solvers/BisectionSolver.java:     * @param relativeAccuracy Relative accuracy.
./analysis/solvers/BisectionSolver.java:     * @param absoluteAccuracy Absolute accuracy.
./analysis/solvers/AbstractPolynomialSolver.java:     * @param absoluteAccuracy Maximum absolute error.
./analysis/solvers/AbstractPolynomialSolver.java:     * @param relativeAccuracy Maximum relative error.
./analysis/solvers/AbstractPolynomialSolver.java:     * @param absoluteAccuracy Maximum absolute error.
./analysis/solvers/AbstractPolynomialSolver.java:     * @param relativeAccuracy Maximum relative error.
./analysis/solvers/AbstractPolynomialSolver.java:     * @param absoluteAccuracy Maximum absolute error.
./analysis/solvers/AbstractPolynomialSolver.java:     * @param functionValueAccuracy Maximum function value error.
./analysis/solvers/NewtonSolver.java:     * @param absoluteAccuracy Absolute accuracy.
./analysis/solvers/NewtonSolver.java:     * @param f Function to solve.
./analysis/solvers/NewtonSolver.java:     * @param min Lower bound for the interval.
./analysis/solvers/NewtonSolver.java:     * @param max Upper bound for the interval.
./analysis/solvers/NewtonSolver.java:     * @param maxEval Maximum number of evaluations.
./analysis/solvers/RegulaFalsiSolver.java:     * @param absoluteAccuracy Absolute accuracy.
./analysis/solvers/RegulaFalsiSolver.java:     * @param relativeAccuracy Relative accuracy.
./analysis/solvers/RegulaFalsiSolver.java:     * @param absoluteAccuracy Absolute accuracy.
./analysis/solvers/RegulaFalsiSolver.java:     * @param relativeAccuracy Relative accuracy.
./analysis/solvers/RegulaFalsiSolver.java:     * @param absoluteAccuracy Absolute accuracy.
./analysis/solvers/RegulaFalsiSolver.java:     * @param functionValueAccuracy Maximum function value error.
./analysis/solvers/PegasusSolver.java:     * @param absoluteAccuracy Absolute accuracy.
./analysis/solvers/PegasusSolver.java:     * @param relativeAccuracy Relative accuracy.
./analysis/solvers/PegasusSolver.java:     * @param absoluteAccuracy Absolute accuracy.
./analysis/solvers/PegasusSolver.java:     * @param relativeAccuracy Relative accuracy.
./analysis/solvers/PegasusSolver.java:     * @param absoluteAccuracy Absolute accuracy.
./analysis/solvers/PegasusSolver.java:     * @param functionValueAccuracy Maximum function value error.
./analysis/solvers/BaseSecantSolver.java:     * @param absoluteAccuracy Absolute accuracy.
./analysis/solvers/BaseSecantSolver.java:     * @param method <em>Secant</em>-based root-finding method to use.
./analysis/solvers/BaseSecantSolver.java:     * @param relativeAccuracy Relative accuracy.
./analysis/solvers/BaseSecantSolver.java:     * @param absoluteAccuracy Absolute accuracy.
./analysis/solvers/BaseSecantSolver.java:     * @param method <em>Secant</em>-based root-finding method to use.
./analysis/solvers/BaseSecantSolver.java:     * @param relativeAccuracy Maximum relative error.
./analysis/solvers/BaseSecantSolver.java:     * @param absoluteAccuracy Maximum absolute error.
./analysis/solvers/BaseSecantSolver.java:     * @param functionValueAccuracy Maximum function value error.
./analysis/solvers/BaseSecantSolver.java:     * @param method <em>Secant</em>-based root-finding method to use
./analysis/solvers/NewtonRaphsonSolver.java:     * @param absoluteAccuracy Absolute accuracy.
./analysis/solvers/NewtonRaphsonSolver.java:     * @param f Function to solve.
./analysis/solvers/NewtonRaphsonSolver.java:     * @param min Lower bound for the interval.
./analysis/solvers/NewtonRaphsonSolver.java:     * @param max Upper bound for the interval.
./analysis/solvers/NewtonRaphsonSolver.java:     * @param maxEval Maximum number of evaluations.
./analysis/solvers/AbstractUnivariateSolver.java:     * @param absoluteAccuracy Maximum absolute error.
./analysis/solvers/AbstractUnivariateSolver.java:     * @param relativeAccuracy Maximum relative error.
./analysis/solvers/AbstractUnivariateSolver.java:     * @param absoluteAccuracy Maximum absolute error.
./analysis/solvers/AbstractUnivariateSolver.java:     * @param relativeAccuracy Maximum relative error.
./analysis/solvers/AbstractUnivariateSolver.java:     * @param absoluteAccuracy Maximum absolute error.
./analysis/solvers/AbstractUnivariateSolver.java:     * @param functionValueAccuracy Maximum function value error.
./analysis/solvers/AbstractUnivariateDifferentiableSolver.java:     * @param absoluteAccuracy Maximum absolute error.
./analysis/solvers/AbstractUnivariateDifferentiableSolver.java:     * @param relativeAccuracy Maximum relative error.
./analysis/solvers/AbstractUnivariateDifferentiableSolver.java:     * @param absoluteAccuracy Maximum absolute error.
./analysis/solvers/AbstractUnivariateDifferentiableSolver.java:     * @param functionValueAccuracy Maximum function value error.
./analysis/solvers/AbstractUnivariateDifferentiableSolver.java:     * @param point Point at which the objective function must be evaluated.
./analysis/solvers/BrentSolver.java:     * @param absoluteAccuracy Absolute accuracy.
./analysis/solvers/BrentSolver.java:     * @param relativeAccuracy Relative accuracy.
./analysis/solvers/BrentSolver.java:     * @param absoluteAccuracy Absolute accuracy.
./analysis/solvers/BrentSolver.java:     * @param relativeAccuracy Relative accuracy.
./analysis/solvers/BrentSolver.java:     * @param absoluteAccuracy Absolute accuracy.
./analysis/solvers/BrentSolver.java:     * @param functionValueAccuracy Function value accuracy.
./analysis/solvers/BrentSolver.java:     * @param lo Lower bound of the search interval.
./analysis/solvers/BrentSolver.java:     * @param hi Higher bound of the search interval.
./analysis/solvers/BrentSolver.java:     * @param fLo Function value at the lower bound of the search interval.
./analysis/solvers/BrentSolver.java:     * @param fHi Function value at the higher bound of the search interval.
./analysis/solvers/BracketingNthOrderBrentSolver.java:     * @param absoluteAccuracy Absolute accuracy.
./analysis/solvers/BracketingNthOrderBrentSolver.java:     * @param maximalOrder maximal order.
./analysis/solvers/BracketingNthOrderBrentSolver.java:     * @param relativeAccuracy Relative accuracy.
./analysis/solvers/BracketingNthOrderBrentSolver.java:     * @param absoluteAccuracy Absolute accuracy.
./analysis/solvers/BracketingNthOrderBrentSolver.java:     * @param maximalOrder maximal order.
./analysis/solvers/BracketingNthOrderBrentSolver.java:     * @param relativeAccuracy Relative accuracy.
./analysis/solvers/BracketingNthOrderBrentSolver.java:     * @param absoluteAccuracy Absolute accuracy.
./analysis/solvers/BracketingNthOrderBrentSolver.java:     * @param functionValueAccuracy Function value accuracy.
./analysis/solvers/BracketingNthOrderBrentSolver.java:     * @param maximalOrder maximal order.
./analysis/solvers/BracketingNthOrderBrentSolver.java:     * @param targetY target value for y
./analysis/solvers/BracketingNthOrderBrentSolver.java:     * @param x reference points abscissas for interpolation,
./analysis/solvers/BracketingNthOrderBrentSolver.java:     * @param y reference points ordinates for interpolation
./analysis/solvers/BracketingNthOrderBrentSolver.java:     * @param start start index of the points to consider (inclusive)
./analysis/solvers/BracketingNthOrderBrentSolver.java:     * @param end end index of the points to consider (exclusive)
./analysis/solvers/BracketedUnivariateSolver.java: * @param <FUNC> Type of function to solve.
./analysis/solvers/BracketedUnivariateSolver.java:     * @param maxEval Maximum number of evaluations.
./analysis/solvers/BracketedUnivariateSolver.java:     * @param f Function to solve.
./analysis/solvers/BracketedUnivariateSolver.java:     * @param min Lower bound for the interval.
./analysis/solvers/BracketedUnivariateSolver.java:     * @param max Upper bound for the interval.
./analysis/solvers/BracketedUnivariateSolver.java:     * @param allowedSolution The kind of solutions that the root-finding algorithm may
./analysis/solvers/BracketedUnivariateSolver.java:     * @param maxEval Maximum number of evaluations.
./analysis/solvers/BracketedUnivariateSolver.java:     * @param f Function to solve.
./analysis/solvers/BracketedUnivariateSolver.java:     * @param min Lower bound for the interval.
./analysis/solvers/BracketedUnivariateSolver.java:     * @param max Upper bound for the interval.
./analysis/solvers/BracketedUnivariateSolver.java:     * @param startValue Start value to use.
./analysis/solvers/BracketedUnivariateSolver.java:     * @param allowedSolution The kind of solutions that the root-finding algorithm may
./analysis/solvers/IllinoisSolver.java:     * @param absoluteAccuracy Absolute accuracy.
./analysis/solvers/IllinoisSolver.java:     * @param relativeAccuracy Relative accuracy.
./analysis/solvers/IllinoisSolver.java:     * @param absoluteAccuracy Absolute accuracy.
./analysis/solvers/IllinoisSolver.java:     * @param relativeAccuracy Relative accuracy.
./analysis/solvers/IllinoisSolver.java:     * @param absoluteAccuracy Absolute accuracy.
./analysis/solvers/IllinoisSolver.java:     * @param functionValueAccuracy Maximum function value error.
./analysis/integration/gauss/SymmetricGaussIntegrator.java:     * @param points Integration points.
./analysis/integration/gauss/SymmetricGaussIntegrator.java:     * @param weights Weights of the corresponding integration nodes.
./analysis/integration/gauss/SymmetricGaussIntegrator.java:     * @param pointsAndWeights Integration points and corresponding weights.
./analysis/integration/gauss/BaseRuleFactory.java: * @param <T> Type of the number used to represent the points and weights of
./analysis/integration/gauss/BaseRuleFactory.java:     * @param numberOfPoints Number of integration points.
./analysis/integration/gauss/BaseRuleFactory.java:     * @param numberOfPoints Order of the rule to be retrieved.
./analysis/integration/gauss/BaseRuleFactory.java:     * @param rule Rule to be stored.
./analysis/integration/gauss/BaseRuleFactory.java:     * @param numberOfPoints Order of the rule to be computed.
./analysis/integration/gauss/BaseRuleFactory.java:     * @param <T> Type of the number used to represent the points and
./analysis/integration/gauss/BaseRuleFactory.java:     * @param rule Points and weights.
./analysis/integration/gauss/GaussIntegratorFactory.java:     * @param numberOfPoints Order of the integration rule.
./analysis/integration/gauss/GaussIntegratorFactory.java:     * @param numberOfPoints Order of the integration rule.
./analysis/integration/gauss/GaussIntegratorFactory.java:     * @param lowerBound Lower bound of the integration interval.
./analysis/integration/gauss/GaussIntegratorFactory.java:     * @param upperBound Upper bound of the integration interval.
./analysis/integration/gauss/GaussIntegratorFactory.java:     * @param numberOfPoints Order of the integration rule.
./analysis/integration/gauss/GaussIntegratorFactory.java:     * @param numberOfPoints Order of the integration rule.
./analysis/integration/gauss/GaussIntegratorFactory.java:     * @param lowerBound Lower bound of the integration interval.
./analysis/integration/gauss/GaussIntegratorFactory.java:     * @param upperBound Upper bound of the integration interval.
./analysis/integration/gauss/GaussIntegratorFactory.java:     * @param numberOfPoints Order of the integration rule.
./analysis/integration/gauss/GaussIntegratorFactory.java:     * @param factory Integration rule factory.
./analysis/integration/gauss/GaussIntegratorFactory.java:     * @param numberOfPoints Order of the integration rule.
./analysis/integration/gauss/GaussIntegratorFactory.java:     * @param rule Original points and weights.
./analysis/integration/gauss/GaussIntegratorFactory.java:     * @param a Lower bound of the integration interval.
./analysis/integration/gauss/GaussIntegratorFactory.java:     * @param b Lower bound of the integration interval.
./analysis/integration/gauss/GaussIntegrator.java:     * @param points Integration points.
./analysis/integration/gauss/GaussIntegrator.java:     * @param weights Weights of the corresponding integration nodes.
./analysis/integration/gauss/GaussIntegrator.java:     * @param pointsAndWeights Integration points and corresponding weights.
./analysis/integration/gauss/GaussIntegrator.java:     * @param f Function to integrate.
./analysis/integration/gauss/GaussIntegrator.java:     * @param index index of the integration point
./analysis/integration/gauss/GaussIntegrator.java:     * @param index index of the integration point
./analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java:     * @param mContext Precision setting for computing the quadrature rules.
./analysis/integration/LegendreGaussIntegrator.java:     * @param n number of points desired (must be between 2 and 5 inclusive)
./analysis/integration/LegendreGaussIntegrator.java:     * @param relativeAccuracy relative accuracy of the result
./analysis/integration/LegendreGaussIntegrator.java:     * @param absoluteAccuracy absolute accuracy of the result
./analysis/integration/LegendreGaussIntegrator.java:     * @param minimalIterationCount minimum number of iterations
./analysis/integration/LegendreGaussIntegrator.java:     * @param maximalIterationCount maximum number of iterations
./analysis/integration/LegendreGaussIntegrator.java:     * @param n number of points desired (must be between 2 and 5 inclusive)
./analysis/integration/LegendreGaussIntegrator.java:     * @param relativeAccuracy relative accuracy of the result
./analysis/integration/LegendreGaussIntegrator.java:     * @param absoluteAccuracy absolute accuracy of the result
./analysis/integration/LegendreGaussIntegrator.java:     * @param n number of points desired (must be between 2 and 5 inclusive)
./analysis/integration/LegendreGaussIntegrator.java:     * @param minimalIterationCount minimum number of iterations
./analysis/integration/LegendreGaussIntegrator.java:     * @param maximalIterationCount maximum number of iterations
./analysis/integration/LegendreGaussIntegrator.java:     * @param n number of steps
./analysis/integration/UnivariateIntegrator.java:     * @param maxEval Maximum number of evaluations.
./analysis/integration/UnivariateIntegrator.java:     * @param f the integrand function
./analysis/integration/UnivariateIntegrator.java:     * @param min the lower bound for the interval
./analysis/integration/UnivariateIntegrator.java:     * @param max the upper bound for the interval
./analysis/integration/BaseAbstractUnivariateIntegrator.java:     * @param relativeAccuracy relative accuracy of the result
./analysis/integration/BaseAbstractUnivariateIntegrator.java:     * @param absoluteAccuracy absolute accuracy of the result
./analysis/integration/BaseAbstractUnivariateIntegrator.java:     * @param minimalIterationCount minimum number of iterations
./analysis/integration/BaseAbstractUnivariateIntegrator.java:     * @param maximalIterationCount maximum number of iterations
./analysis/integration/BaseAbstractUnivariateIntegrator.java:     * @param relativeAccuracy relative accuracy of the result
./analysis/integration/BaseAbstractUnivariateIntegrator.java:     * @param absoluteAccuracy absolute accuracy of the result
./analysis/integration/BaseAbstractUnivariateIntegrator.java:     * @param minimalIterationCount minimum number of iterations
./analysis/integration/BaseAbstractUnivariateIntegrator.java:     * @param maximalIterationCount maximum number of iterations
./analysis/integration/BaseAbstractUnivariateIntegrator.java:     * @param point Point at which the objective function must be evaluated.
./analysis/integration/BaseAbstractUnivariateIntegrator.java:     * @param maxEval Maximum number of evaluations.
./analysis/integration/BaseAbstractUnivariateIntegrator.java:     * @param f the integrand function
./analysis/integration/BaseAbstractUnivariateIntegrator.java:     * @param lower the min bound for the interval
./analysis/integration/BaseAbstractUnivariateIntegrator.java:     * @param upper the upper bound for the interval
./analysis/integration/MidPointIntegrator.java:     * @param relativeAccuracy relative accuracy of the result
./analysis/integration/MidPointIntegrator.java:     * @param absoluteAccuracy absolute accuracy of the result
./analysis/integration/MidPointIntegrator.java:     * @param minimalIterationCount minimum number of iterations
./analysis/integration/MidPointIntegrator.java:     * @param maximalIterationCount maximum number of iterations
./analysis/integration/MidPointIntegrator.java:     * @param minimalIterationCount minimum number of iterations
./analysis/integration/MidPointIntegrator.java:     * @param maximalIterationCount maximum number of iterations
./analysis/integration/MidPointIntegrator.java:     * @param n the stage of 1/2 refinement. Must be larger than 0.
./analysis/integration/MidPointIntegrator.java:     * @param previousStageResult Result from the previous call to the
./analysis/integration/MidPointIntegrator.java:     * @param min Lower bound of the integration interval.
./analysis/integration/MidPointIntegrator.java:     * @param diffMaxMin Difference between the lower bound and upper bound
./analysis/integration/RombergIntegrator.java:     * @param relativeAccuracy relative accuracy of the result
./analysis/integration/RombergIntegrator.java:     * @param absoluteAccuracy absolute accuracy of the result
./analysis/integration/RombergIntegrator.java:     * @param minimalIterationCount minimum number of iterations
./analysis/integration/RombergIntegrator.java:     * @param maximalIterationCount maximum number of iterations
./analysis/integration/RombergIntegrator.java:     * @param minimalIterationCount minimum number of iterations
./analysis/integration/RombergIntegrator.java:     * @param maximalIterationCount maximum number of iterations
./analysis/integration/IterativeLegendreGaussIntegrator.java:     * @param n Number of integration points.
./analysis/integration/IterativeLegendreGaussIntegrator.java:     * @param relativeAccuracy Relative accuracy of the result.
./analysis/integration/IterativeLegendreGaussIntegrator.java:     * @param absoluteAccuracy Absolute accuracy of the result.
./analysis/integration/IterativeLegendreGaussIntegrator.java:     * @param minimalIterationCount Minimum number of iterations.
./analysis/integration/IterativeLegendreGaussIntegrator.java:     * @param maximalIterationCount Maximum number of iterations.
./analysis/integration/IterativeLegendreGaussIntegrator.java:     * @param n Number of integration points.
./analysis/integration/IterativeLegendreGaussIntegrator.java:     * @param relativeAccuracy Relative accuracy of the result.
./analysis/integration/IterativeLegendreGaussIntegrator.java:     * @param absoluteAccuracy Absolute accuracy of the result.
./analysis/integration/IterativeLegendreGaussIntegrator.java:     * @param n Number of integration points.
./analysis/integration/IterativeLegendreGaussIntegrator.java:     * @param minimalIterationCount Minimum number of iterations.
./analysis/integration/IterativeLegendreGaussIntegrator.java:     * @param maximalIterationCount Maximum number of iterations.
./analysis/integration/IterativeLegendreGaussIntegrator.java:     * @param n Number of steps.
./analysis/integration/SimpsonIntegrator.java:     * @param relativeAccuracy relative accuracy of the result
./analysis/integration/SimpsonIntegrator.java:     * @param absoluteAccuracy absolute accuracy of the result
./analysis/integration/SimpsonIntegrator.java:     * @param minimalIterationCount minimum number of iterations
./analysis/integration/SimpsonIntegrator.java:     * @param maximalIterationCount maximum number of iterations
./analysis/integration/SimpsonIntegrator.java:     * @param minimalIterationCount minimum number of iterations
./analysis/integration/SimpsonIntegrator.java:     * @param maximalIterationCount maximum number of iterations
./analysis/integration/TrapezoidIntegrator.java:     * @param relativeAccuracy relative accuracy of the result
./analysis/integration/TrapezoidIntegrator.java:     * @param absoluteAccuracy absolute accuracy of the result
./analysis/integration/TrapezoidIntegrator.java:     * @param minimalIterationCount minimum number of iterations
./analysis/integration/TrapezoidIntegrator.java:     * @param maximalIterationCount maximum number of iterations
./analysis/integration/TrapezoidIntegrator.java:     * @param minimalIterationCount minimum number of iterations
./analysis/integration/TrapezoidIntegrator.java:     * @param maximalIterationCount maximum number of iterations
./analysis/integration/TrapezoidIntegrator.java:     * @param baseIntegrator integrator holding integration parameters
./analysis/integration/TrapezoidIntegrator.java:     * @param n the stage of 1/2 refinement, n = 0 is no refinement
./analysis/FunctionUtils.java:     * @param f List of functions.
./analysis/FunctionUtils.java:     * @param f List of functions.
./analysis/FunctionUtils.java:     * @param f List of functions.
./analysis/FunctionUtils.java:     * @param f List of functions.
./analysis/FunctionUtils.java:     * @param f List of functions.
./analysis/FunctionUtils.java:     * @param f List of functions.
./analysis/FunctionUtils.java:     * @param f List of functions.
./analysis/FunctionUtils.java:     * @param f List of functions.
./analysis/FunctionUtils.java:     * @param f List of functions.
./analysis/FunctionUtils.java:     * @param combiner Combiner function.
./analysis/FunctionUtils.java:     * @param f Function.
./analysis/FunctionUtils.java:     * @param g Function.
./analysis/FunctionUtils.java:     * @param combiner Combiner function.
./analysis/FunctionUtils.java:     * @param f Function.
./analysis/FunctionUtils.java:     * @param initialValue Initial value.
./analysis/FunctionUtils.java:     * @param combiner Combiner function.
./analysis/FunctionUtils.java:     * @param initialValue Initial value.
./analysis/FunctionUtils.java:     * @param f Binary function.
./analysis/FunctionUtils.java:     * @param fixed value to which the first argument of {@code f} is set.
./analysis/FunctionUtils.java:     * @param f Binary function.
./analysis/FunctionUtils.java:     * @param fixed value to which the second argument of {@code f} is set.
./analysis/FunctionUtils.java:     * @param f Function to be sampled
./analysis/FunctionUtils.java:     * @param min Lower bound of the interval (included).
./analysis/FunctionUtils.java:     * @param max Upper bound of the interval (excluded).
./analysis/FunctionUtils.java:     * @param n Number of sample points.
./analysis/FunctionUtils.java:     * @param f function to convert
./analysis/FunctionUtils.java:     * @param f function to convert
./analysis/FunctionUtils.java:     * @param f function to convert
./analysis/FunctionUtils.java:     * @param f function to convert
./analysis/FunctionUtils.java:     * @param f function to convert
./analysis/FunctionUtils.java:     * @param f function to convert
./analysis/TrivariateFunction.java:     * @param x x-coordinate for which the function value should be computed.
./analysis/TrivariateFunction.java:     * @param y y-coordinate for which the function value should be computed.
./analysis/TrivariateFunction.java:     * @param z z-coordinate for which the function value should be computed.
./analysis/polynomials/PolynomialSplineFunction.java:     * @param knots Spline segment interval delimiters.
./analysis/polynomials/PolynomialSplineFunction.java:     * @param polynomials Polynomial functions that make up the spline.
./analysis/polynomials/PolynomialSplineFunction.java:     * @param v Point for which the function value should be computed.
./analysis/polynomials/PolynomialSplineFunction.java:     * @param x Point.
./analysis/polynomials/PolynomialFunctionLagrangeForm.java:     * @param x interpolating points
./analysis/polynomials/PolynomialFunctionLagrangeForm.java:     * @param y function values at interpolating points
./analysis/polynomials/PolynomialFunctionLagrangeForm.java:     * @param z Point at which the function value is to be computed.
./analysis/polynomials/PolynomialFunctionLagrangeForm.java:     * @param x Interpolating points array.
./analysis/polynomials/PolynomialFunctionLagrangeForm.java:     * @param y Interpolating values array.
./analysis/polynomials/PolynomialFunctionLagrangeForm.java:     * @param z Point at which the function value is to be computed.
./analysis/polynomials/PolynomialFunctionLagrangeForm.java:     * @param x Interpolating points array.
./analysis/polynomials/PolynomialFunctionLagrangeForm.java:     * @param y Interpolating values array.
./analysis/polynomials/PolynomialFunctionLagrangeForm.java:     * @param z Point at which the function value is to be computed.
./analysis/polynomials/PolynomialFunctionLagrangeForm.java:     * @param x Interpolating points array.
./analysis/polynomials/PolynomialFunctionLagrangeForm.java:     * @param y Interpolating values array.
./analysis/polynomials/PolynomialFunctionLagrangeForm.java:     * @param abort Whether to throw an exception if {@code x} is not sorted.
./analysis/polynomials/PolynomialFunction.java:     * @param c Polynomial coefficients.
./analysis/polynomials/PolynomialFunction.java:     * @param x Argument for which the function value should be computed.
./analysis/polynomials/PolynomialFunction.java:     * @param coefficients Coefficients of the polynomial to evaluate.
./analysis/polynomials/PolynomialFunction.java:     * @param argument Input value.
./analysis/polynomials/PolynomialFunction.java:     * @param p Polynomial to add.
./analysis/polynomials/PolynomialFunction.java:     * @param p Polynomial to subtract.
./analysis/polynomials/PolynomialFunction.java:     * @param p Polynomial to multiply by.
./analysis/polynomials/PolynomialFunction.java:     * @param coefficients Coefficients of the polynomial to differentiate.
./analysis/polynomials/PolynomialFunction.java:     * @param coeff Coefficient.
./analysis/polynomials/PolynomialFunctionNewtonForm.java:     * @param a Coefficients in Newton form formula.
./analysis/polynomials/PolynomialFunctionNewtonForm.java:     * @param c Centers.
./analysis/polynomials/PolynomialFunctionNewtonForm.java:     * @param z Point at which the function value is to be computed.
./analysis/polynomials/PolynomialFunctionNewtonForm.java:     * @param a Coefficients in Newton form formula.
./analysis/polynomials/PolynomialFunctionNewtonForm.java:     * @param c Centers.
./analysis/polynomials/PolynomialFunctionNewtonForm.java:     * @param z Point at which the function value is to be computed.
./analysis/polynomials/PolynomialFunctionNewtonForm.java:     * @param a the coefficients in Newton form formula
./analysis/polynomials/PolynomialFunctionNewtonForm.java:     * @param c the centers
./analysis/polynomials/PolynomialsUtils.java:     * @param degree degree of the polynomial
./analysis/polynomials/PolynomialsUtils.java:     * @param degree degree of the polynomial
./analysis/polynomials/PolynomialsUtils.java:     * @param degree degree of the polynomial
./analysis/polynomials/PolynomialsUtils.java:     * @param degree degree of the polynomial
./analysis/polynomials/PolynomialsUtils.java:     * @param degree degree of the polynomial
./analysis/polynomials/PolynomialsUtils.java:     * @param v first exponent
./analysis/polynomials/PolynomialsUtils.java:     * @param w second exponent
./analysis/polynomials/PolynomialsUtils.java:         * @param v first exponent
./analysis/polynomials/PolynomialsUtils.java:         * @param w second exponent
./analysis/polynomials/PolynomialsUtils.java:         * @param key other key
./analysis/polynomials/PolynomialsUtils.java:     * @param coefficients Coefficients of the original polynomial.
./analysis/polynomials/PolynomialsUtils.java:     * @param shift Shift value.
./analysis/polynomials/PolynomialsUtils.java:     * @param degree degree of the polynomial
./analysis/polynomials/PolynomialsUtils.java:     * @param coefficients list where the computed coefficients are stored
./analysis/polynomials/PolynomialsUtils.java:     * @param generator recurrence coefficients generator
./analysis/polynomials/PolynomialsUtils.java:     * @param degree maximal degree
./analysis/polynomials/PolynomialsUtils.java:     * @param maxDegree current maximal degree
./analysis/polynomials/PolynomialsUtils.java:     * @param generator recurrence coefficients generator
./analysis/polynomials/PolynomialsUtils.java:     * @param coefficients list where the computed coefficients should be appended
./analysis/polynomials/PolynomialsUtils.java:         * @param k highest degree of the polynomials used in the recurrence
./analysis/RealFieldUnivariateFunction.java: * @param <T> the type of the field elements
./analysis/RealFieldUnivariateFunction.java:     * @param x Point at which the function value should be computed.
./analysis/UnivariateMatrixFunction.java:     * @param x the point for which the function value should be computed
./complex/ComplexUtils.java:     * @param r the modulus of the complex number to create
./complex/ComplexUtils.java:     * @param theta  the argument of the complex number to create
./complex/ComplexUtils.java:     * @param real Array of numbers to be converted to their {@code Complex}
./complex/ComplexFormat.java:     * @param format the custom format for both real and imaginary parts.
./complex/ComplexFormat.java:     * @param realFormat the custom format for the real part.
./complex/ComplexFormat.java:     * @param imaginaryFormat the custom format for the imaginary part.
./complex/ComplexFormat.java:     * @param imaginaryCharacter The custom imaginary character.
./complex/ComplexFormat.java:     * @param imaginaryCharacter The custom imaginary character.
./complex/ComplexFormat.java:     * @param format the custom format for both real and imaginary parts.
./complex/ComplexFormat.java:     * @param imaginaryCharacter The custom imaginary character.
./complex/ComplexFormat.java:     * @param realFormat the custom format for the real part.
./complex/ComplexFormat.java:     * @param imaginaryFormat the custom format for the imaginary part.
./complex/ComplexFormat.java:     * @param c Complex object to format.
./complex/ComplexFormat.java:     * @param c Double object to format.
./complex/ComplexFormat.java:     * @param complex the object to format.
./complex/ComplexFormat.java:     * @param toAppendTo where the text is to be appended
./complex/ComplexFormat.java:     * @param pos On input: an alignment field, if desired. On output: the
./complex/ComplexFormat.java:     * @param absIm Absolute value of the imaginary part of a complex number.
./complex/ComplexFormat.java:     * @param toAppendTo where the text is to be appended.
./complex/ComplexFormat.java:     * @param pos On input: an alignment field, if desired. On output: the
./complex/ComplexFormat.java:     * @param obj the object to format.
./complex/ComplexFormat.java:     * @param toAppendTo where the text is to be appended
./complex/ComplexFormat.java:     * @param pos On input: an alignment field, if desired. On output: the
./complex/ComplexFormat.java:     * @param locale the specific locale used by the format.
./complex/ComplexFormat.java:     * @param locale the specific locale used by the format.
./complex/ComplexFormat.java:     * @param imaginaryCharacter Imaginary character.
./complex/ComplexFormat.java:     * @param source the string to parse.
./complex/ComplexFormat.java:     * @param source the string to parse
./complex/ComplexFormat.java:     * @param pos input/ouput parsing parameter.
./complex/Complex.java:     * @param real Real part.
./complex/Complex.java:     * @param real Real part.
./complex/Complex.java:     * @param imaginary Imaginary part.
./complex/Complex.java:     * @param  addend Value to be added to this {@code Complex}.
./complex/Complex.java:     * @param addend Value to be added to this {@code Complex}.
./complex/Complex.java:     * @param divisor Value by which this {@code Complex} is to be divided.
./complex/Complex.java:     * @param  divisor Value by which this {@code Complex} is to be divided.
./complex/Complex.java:     * @param other Object to test for equality with this instance.
./complex/Complex.java:     * @param x First value (cannot be {@code null}).
./complex/Complex.java:     * @param y Second value (cannot be {@code null}).
./complex/Complex.java:     * @param maxUlps {@code (maxUlps - 1)} is the number of floating point
./complex/Complex.java:     * @param x First value (cannot be {@code null}).
./complex/Complex.java:     * @param y Second value (cannot be {@code null}).
./complex/Complex.java:     * @param x First value (cannot be {@code null}).
./complex/Complex.java:     * @param y Second value (cannot be {@code null}).
./complex/Complex.java:     * @param eps Amount of allowed absolute error.
./complex/Complex.java:     * @param x First value (cannot be {@code null}).
./complex/Complex.java:     * @param y Second value (cannot be {@code null}).
./complex/Complex.java:     * @param eps Amount of allowed relative error.
./complex/Complex.java:     * @param  factor value to be multiplied by this {@code Complex}.
./complex/Complex.java:     * @param  factor value to be multiplied by this {@code Complex}.
./complex/Complex.java:     * @param  factor value to be multiplied by this {@code Complex}.
./complex/Complex.java:     * @param  subtrahend value to be subtracted from this {@code Complex}.
./complex/Complex.java:     * @param  subtrahend value to be subtracted from this {@code Complex}.
./complex/Complex.java:     * @param  x exponent to which this {@code Complex} is to be raised.
./complex/Complex.java:     * @param  x exponent to which this {@code Complex} is to be raised.
./complex/Complex.java:     * @param n Degree of root.
./complex/Complex.java:     * @param realPart Real part.
./complex/Complex.java:     * @param imaginaryPart Imaginary part.
./complex/Complex.java:     * @param realPart Real part.
./complex/Complex.java:     * @param imaginaryPart Imaginary part.
./complex/Complex.java:     * @param realPart Real part.
./complex/RootsOfUnity.java:     * @param n the (signed) number of roots of unity to be computed
./complex/RootsOfUnity.java:     * @param k index of the {@code n}-th root of unity
./complex/RootsOfUnity.java:     * @param k index of the {@code n}-th root of unity
./complex/Quaternion.java:     * @param a Scalar component.
./complex/Quaternion.java:     * @param b First vector component.
./complex/Quaternion.java:     * @param c Second vector component.
./complex/Quaternion.java:     * @param d Third vector component.
./complex/Quaternion.java:     * @param scalar Scalar part of the quaternion.
./complex/Quaternion.java:     * @param v Components of the vector part of the quaternion.
./complex/Quaternion.java:     * @param v Components of the vector part of the pure quaternion.
./complex/Quaternion.java:     * @param q1 First quaternion.
./complex/Quaternion.java:     * @param q2 Second quaternion.
./complex/Quaternion.java:     * @param q Quaternion.
./complex/Quaternion.java:     * @param q1 Quaternion.
./complex/Quaternion.java:     * @param q2 Quaternion.
./complex/Quaternion.java:     * @param q Quaternion.
./complex/Quaternion.java:     * @param q1 First Quaternion.
./complex/Quaternion.java:     * @param q2 Second quaternion.
./complex/Quaternion.java:     * @param q Quaternion.
./complex/Quaternion.java:     * @param q1 Quaternion.
./complex/Quaternion.java:     * @param q2 Quaternion.
./complex/Quaternion.java:     * @param q Quaternion.
./complex/Quaternion.java:     * @param q Quaternion with which to compare the current quaternion.
./complex/Quaternion.java:     * @param eps Tolerance.
./complex/Quaternion.java:     * @param eps Tolerance (absolute error).
./complex/Quaternion.java:     * @param eps Tolerance (absolute error).
./complex/Quaternion.java:     * @param alpha Scalar factor.
./dfp/DfpField.java:     * @param decimalDigits minimal number of decimal digits.
./dfp/DfpField.java:     * @param decimalDigits minimal number of decimal digits
./dfp/DfpField.java:     * @param computeConstants if true, the transcendental constants for the given precision
./dfp/DfpField.java:     * @param mode desired rounding mode
./dfp/DfpField.java:     * @param flags desired value for the flags
./dfp/DfpField.java:     * @param bits bits to set
./dfp/DfpField.java:     * @param x value to convert to an instance
./dfp/DfpField.java:     * @param x value to convert to an instance
./dfp/DfpField.java:     * @param x value to convert to an instance
./dfp/DfpField.java:     * @param x value to convert to an instance
./dfp/DfpField.java:     * @param d instance to copy
./dfp/DfpField.java:     * @param s string representation of the instance
./dfp/DfpField.java:     * @param sign sign of the Dfp to create
./dfp/DfpField.java:     * @param nans code of the value, must be one of {@link Dfp#INFINITE},
./dfp/DfpField.java:     * @param a string representation of the number to split
./dfp/DfpField.java:     * @param highPrecisionDecimalDigits precision at which the string constants mus be computed
./dfp/DfpField.java:     * @param one constant with value 1 at desired precision
./dfp/DfpField.java:     * @param two constant with value 2 at desired precision
./dfp/DfpField.java:     * @param three constant with value 3 at desired precision
./dfp/DfpField.java:     * @param a number for which we want the exponential
./dfp/DfpField.java:     * @param one constant with value 1 at desired precision
./dfp/DfpField.java:     * @param a number for which we want the exponential
./dfp/DfpField.java:     * @param one constant with value 1 at desired precision
./dfp/DfpField.java:     * @param two constant with value 2 at desired precision
./dfp/DfpMath.java:     * @param field field to which the Dfp must belong
./dfp/DfpMath.java:     * @param a string representation to split
./dfp/DfpMath.java:     * @param a number to split
./dfp/DfpMath.java:     *  @param a first factor of the multiplication, in split form
./dfp/DfpMath.java:     *  @param b second factor of the multiplication, in split form
./dfp/DfpMath.java:     *  @param a dividend, in split form
./dfp/DfpMath.java:     *  @param b divisor, in split form
./dfp/DfpMath.java:     * @param base number to raise
./dfp/DfpMath.java:     * @param a power
./dfp/DfpMath.java:     * @param base number to raise
./dfp/DfpMath.java:     * @param a power
./dfp/DfpMath.java:     * @param a power at which e should be raised
./dfp/DfpMath.java:     * @param a power at which e should be raised
./dfp/DfpMath.java:     * @param a number from which logarithm is requested
./dfp/DfpMath.java:     * @param a number from which logarithm is requested, in split form
./dfp/DfpMath.java:     *  @param x base to be raised
./dfp/DfpMath.java:     *  @param y power to which base should be raised
./dfp/DfpMath.java:     * @param a number from which sine is desired, in split form
./dfp/DfpMath.java:     * @param a number from which cosine is desired, in split form
./dfp/DfpMath.java:     * @param a number from which sine is desired
./dfp/DfpMath.java:     * @param a number from which cosine is desired
./dfp/DfpMath.java:     * @param a number from which tangent is desired
./dfp/DfpMath.java:     * @param a number from which arc-tangent is desired
./dfp/DfpMath.java:     * @param a number from which arc-tangent is desired
./dfp/DfpMath.java:     * @param a number from which arc-sine is desired
./dfp/DfpMath.java:     * @param a number from which arc-cosine is desired
./dfp/BracketingNthOrderBrentSolverDFP.java:     * @param relativeAccuracy Relative accuracy.
./dfp/BracketingNthOrderBrentSolverDFP.java:     * @param absoluteAccuracy Absolute accuracy.
./dfp/BracketingNthOrderBrentSolverDFP.java:     * @param functionValueAccuracy Function value accuracy.
./dfp/BracketingNthOrderBrentSolverDFP.java:     * @param maximalOrder maximal order.
./dfp/BracketingNthOrderBrentSolverDFP.java:     * @param maxEval Maximum number of evaluations.
./dfp/BracketingNthOrderBrentSolverDFP.java:     * @param f Function to solve.
./dfp/BracketingNthOrderBrentSolverDFP.java:     * @param min Lower bound for the interval.
./dfp/BracketingNthOrderBrentSolverDFP.java:     * @param max Upper bound for the interval.
./dfp/BracketingNthOrderBrentSolverDFP.java:     * @param allowedSolution The kind of solutions that the root-finding algorithm may
./dfp/BracketingNthOrderBrentSolverDFP.java:     * @param maxEval Maximum number of evaluations.
./dfp/BracketingNthOrderBrentSolverDFP.java:     * @param f Function to solve.
./dfp/BracketingNthOrderBrentSolverDFP.java:     * @param min Lower bound for the interval.
./dfp/BracketingNthOrderBrentSolverDFP.java:     * @param max Upper bound for the interval.
./dfp/BracketingNthOrderBrentSolverDFP.java:     * @param startValue Start value to use.
./dfp/BracketingNthOrderBrentSolverDFP.java:     * @param allowedSolution The kind of solutions that the root-finding algorithm may
./dfp/UnivariateDfpFunction.java:     * @param x Point at which the function value should be computed.
./dfp/DfpDec.java:     * @param factory factory linked to this instance
./dfp/DfpDec.java:     * @param factory factory linked to this instance
./dfp/DfpDec.java:     * @param x value to convert to an instance
./dfp/DfpDec.java:     * @param factory factory linked to this instance
./dfp/DfpDec.java:     * @param x value to convert to an instance
./dfp/DfpDec.java:     * @param factory factory linked to this instance
./dfp/DfpDec.java:     * @param x value to convert to an instance
./dfp/DfpDec.java:     * @param factory factory linked to this instance
./dfp/DfpDec.java:     * @param x value to convert to an instance
./dfp/DfpDec.java:     * @param d instance to copy
./dfp/DfpDec.java:     * @param factory factory linked to this instance
./dfp/DfpDec.java:     * @param s string representation of the instance
./dfp/DfpDec.java:     * @param factory factory linked to this instance
./dfp/DfpDec.java:     * @param sign sign of the Dfp to create
./dfp/DfpDec.java:     * @param nans code of the value, must be one of {@link #INFINITE},
./dfp/Dfp.java:     * @param field field to which this instance belongs
./dfp/Dfp.java:     * @param field field to which this instance belongs
./dfp/Dfp.java:     * @param x value to convert to an instance
./dfp/Dfp.java:     * @param field field to which this instance belongs
./dfp/Dfp.java:     * @param x value to convert to an instance
./dfp/Dfp.java:     * @param field field to which this instance belongs
./dfp/Dfp.java:     * @param x value to convert to an instance
./dfp/Dfp.java:     * @param field field to which this instance belongs
./dfp/Dfp.java:     * @param x value to convert to an instance
./dfp/Dfp.java:     * @param d instance to copy
./dfp/Dfp.java:     * @param field field to which this instance belongs
./dfp/Dfp.java:     * @param s string representation of the instance
./dfp/Dfp.java:     * @param field field to which this instance belongs
./dfp/Dfp.java:     * @param sign sign of the Dfp to create
./dfp/Dfp.java:     * @param nans code of the value, must be one of {@link #INFINITE},
./dfp/Dfp.java:     * @param x value to convert to an instance
./dfp/Dfp.java:     * @param x value to convert to an instance
./dfp/Dfp.java:     * @param x value to convert to an instance
./dfp/Dfp.java:     * @param x value to convert to an instance
./dfp/Dfp.java:     * @param d instance to copy
./dfp/Dfp.java:     * @param s string representation of the instance
./dfp/Dfp.java:     * @param sig sign of the Dfp to create
./dfp/Dfp.java:     * @param code code of the value, must be one of {@link #INFINITE},
./dfp/Dfp.java:     *  @param e desired exponent
./dfp/Dfp.java:     * @param x number to check instance against
./dfp/Dfp.java:     * @param x number to check instance against
./dfp/Dfp.java:     * @param other object to check instance against
./dfp/Dfp.java:     * @param x number to check instance against
./dfp/Dfp.java:     * @param a first instance in comparison
./dfp/Dfp.java:     * @param b second instance in comparison
./dfp/Dfp.java:     * @param d divisor
./dfp/Dfp.java:     * @param rmode rounding mode to use
./dfp/Dfp.java:     * @param e desired power
./dfp/Dfp.java:     * @param e desired power
./dfp/Dfp.java:     *  @param extra ???
./dfp/Dfp.java:     * @param x number to add
./dfp/Dfp.java:     * @param x number to subtract
./dfp/Dfp.java:     * @param n ???
./dfp/Dfp.java:     * @param x multiplicand
./dfp/Dfp.java:     * @param x multiplicand
./dfp/Dfp.java:     * @param x multiplicand
./dfp/Dfp.java:     * @param divisor divisor
./dfp/Dfp.java:     * @param divisor divisor
./dfp/Dfp.java:     *  @param type the trap type
./dfp/Dfp.java:     *  @param what - name of routine trap occurred in
./dfp/Dfp.java:     *  @param oper - input operator to function
./dfp/Dfp.java:     *  @param result - the result computed prior to the trap
./dfp/Dfp.java:     *  @param type  The exception type - e.g. FLAG_OVERFLOW
./dfp/Dfp.java:     *  @param what  The name of the routine we were in e.g. divide()
./dfp/Dfp.java:     *  @param oper  An operand to this function if any
./dfp/Dfp.java:     *  @param def   The default return value if trap not enabled
./dfp/Dfp.java:     *  @param result    The result that is specified to be delivered per
./dfp/Dfp.java:     * @param x number to get the value from
./dfp/Dfp.java:     * @param y number to get the sign from
./dfp/Dfp.java:     * @param x direction where to look at
./distribution/NormalDistribution.java:     * @param mean Mean for this distribution.
./distribution/NormalDistribution.java:     * @param sd Standard deviation for this distribution.
./distribution/NormalDistribution.java:     * @param mean Mean for this distribution.
./distribution/NormalDistribution.java:     * @param sd Standard deviation for this distribution.
./distribution/NormalDistribution.java:     * @param inverseCumAccuracy Inverse cumulative probability accuracy.
./distribution/NormalDistribution.java:     * @param rng Random number generator.
./distribution/NormalDistribution.java:     * @param mean Mean for this distribution.
./distribution/NormalDistribution.java:     * @param sd Standard deviation for this distribution.
./distribution/NormalDistribution.java:     * @param rng Random number generator.
./distribution/NormalDistribution.java:     * @param mean Mean for this distribution.
./distribution/NormalDistribution.java:     * @param sd Standard deviation for this distribution.
./distribution/NormalDistribution.java:     * @param inverseCumAccuracy Inverse cumulative probability accuracy.
./distribution/RealDistribution.java:     * @param x the point at which the PMF is evaluated
./distribution/RealDistribution.java:     * @param x the point at which the PDF is evaluated
./distribution/RealDistribution.java:     * @param x the point at which the CDF is evaluated
./distribution/RealDistribution.java:     * @param x0 the exclusive lower bound
./distribution/RealDistribution.java:     * @param x1 the inclusive upper bound
./distribution/RealDistribution.java:     * @param p the cumulative probability
./distribution/RealDistribution.java:     * @param seed the new seed
./distribution/RealDistribution.java:     * @param sampleSize the number of random values to generate
./distribution/HypergeometricDistribution.java:     * @param populationSize Population size.
./distribution/HypergeometricDistribution.java:     * @param numberOfSuccesses Number of successes in the population.
./distribution/HypergeometricDistribution.java:     * @param sampleSize Sample size.
./distribution/HypergeometricDistribution.java:     * @param rng Random number generator.
./distribution/HypergeometricDistribution.java:     * @param populationSize Population size.
./distribution/HypergeometricDistribution.java:     * @param numberOfSuccesses Number of successes in the population.
./distribution/HypergeometricDistribution.java:     * @param sampleSize Sample size.
./distribution/HypergeometricDistribution.java:     * @param n Population size.
./distribution/HypergeometricDistribution.java:     * @param m Number of successes in the population.
./distribution/HypergeometricDistribution.java:     * @param k Sample size.
./distribution/HypergeometricDistribution.java:     * @param n Population size.
./distribution/HypergeometricDistribution.java:     * @param m Number of successes in the population.
./distribution/HypergeometricDistribution.java:     * @param k Sample size.
./distribution/HypergeometricDistribution.java:     * @param m Number of successes in the population.
./distribution/HypergeometricDistribution.java:     * @param k Sample size.
./distribution/HypergeometricDistribution.java:     * @param x Value at which the CDF is evaluated.
./distribution/HypergeometricDistribution.java:     * @param x0 Inclusive lower bound.
./distribution/HypergeometricDistribution.java:     * @param x1 Inclusive upper bound.
./distribution/HypergeometricDistribution.java:     * @param dx Direction of summation (1 indicates summing from x0 to x1, and
./distribution/EnumeratedRealDistribution.java:     * @param singletons array of random variable values.
./distribution/EnumeratedRealDistribution.java:     * @param probabilities array of probabilities.
./distribution/EnumeratedRealDistribution.java:     * @param rng random number generator.
./distribution/EnumeratedRealDistribution.java:     * @param singletons array of random variable values.
./distribution/EnumeratedRealDistribution.java:     * @param probabilities array of probabilities.
./distribution/EnumeratedRealDistribution.java:     * @param rng random number generator used for sampling
./distribution/EnumeratedRealDistribution.java:     * @param data input dataset
./distribution/EnumeratedRealDistribution.java:     * @param data input dataset
./distribution/EnumeratedRealDistribution.java:     * @param singletons values
./distribution/EnumeratedRealDistribution.java:     * @param probabilities probabilities
./distribution/EnumeratedRealDistribution.java:     * @param x the point at which the PMF is evaluated
./distribution/ConstantRealDistribution.java:     * @param value the constant value of this distribution
./distribution/ConstantRealDistribution.java:     * @param seed (ignored)
./distribution/ZipfDistribution.java:     * @param numberOfElements Number of elements.
./distribution/ZipfDistribution.java:     * @param exponent Exponent.
./distribution/ZipfDistribution.java:     * @param rng Random number generator.
./distribution/ZipfDistribution.java:     * @param numberOfElements Number of elements.
./distribution/ZipfDistribution.java:     * @param exponent Exponent.
./distribution/ZipfDistribution.java:     * @param n Term in the series to calculate (must be larger than 1)
./distribution/ZipfDistribution.java:     * @param m Exponent (special case {@code m = 1} is the harmonic series).
./distribution/ZipfDistribution.java:         * @param numberOfElements number of elements
./distribution/ZipfDistribution.java:         * @param exponent exponent parameter of the distribution
./distribution/ZipfDistribution.java:         * @param random random generator to use
./distribution/ZipfDistribution.java:         * @param x free parameter
./distribution/ZipfDistribution.java:         * @param x free parameter
./distribution/ZipfDistribution.java:         * @param x free parameter
./distribution/ZipfDistribution.java:         * @param x a value larger than or equal to -1
./distribution/ZipfDistribution.java:         * @param x free parameter
./distribution/WeibullDistribution.java:     * @param alpha Shape parameter.
./distribution/WeibullDistribution.java:     * @param beta Scale parameter.
./distribution/WeibullDistribution.java:     * @param alpha Shape parameter.
./distribution/WeibullDistribution.java:     * @param beta Scale parameter.
./distribution/WeibullDistribution.java:     * @param inverseCumAccuracy Maximum absolute error in inverse
./distribution/WeibullDistribution.java:     * @param rng Random number generator.
./distribution/WeibullDistribution.java:     * @param alpha Shape parameter.
./distribution/WeibullDistribution.java:     * @param beta Scale parameter.
./distribution/WeibullDistribution.java:     * @param rng Random number generator.
./distribution/WeibullDistribution.java:     * @param alpha Shape parameter.
./distribution/WeibullDistribution.java:     * @param beta Scale parameter.
./distribution/WeibullDistribution.java:     * @param inverseCumAccuracy Maximum absolute error in inverse
./distribution/fitting/MultivariateNormalMixtureExpectationMaximization.java:     * @param data Data to use in fitting procedure
./distribution/fitting/MultivariateNormalMixtureExpectationMaximization.java:     * @param initialMixture Model containing initial values of weights and
./distribution/fitting/MultivariateNormalMixtureExpectationMaximization.java:     * @param maxIterations Maximum iterations allowed for fit
./distribution/fitting/MultivariateNormalMixtureExpectationMaximization.java:     * @param threshold Convergence threshold computed as difference in
./distribution/fitting/MultivariateNormalMixtureExpectationMaximization.java:     * @param initialMixture Model containing initial values of weights and
./distribution/fitting/MultivariateNormalMixtureExpectationMaximization.java:     * @param data Data to estimate distribution
./distribution/fitting/MultivariateNormalMixtureExpectationMaximization.java:     * @param numComponents Number of components for estimated mixture
./distribution/fitting/MultivariateNormalMixtureExpectationMaximization.java:         * @param data Data to use for the row
./distribution/fitting/MultivariateNormalMixtureExpectationMaximization.java:         * @param other The other row
./distribution/TDistribution.java:     * @param degreesOfFreedom Degrees of freedom.
./distribution/TDistribution.java:     * @param degreesOfFreedom Degrees of freedom.
./distribution/TDistribution.java:     * @param inverseCumAccuracy the maximum absolute error in inverse
./distribution/TDistribution.java:     * @param rng Random number generator.
./distribution/TDistribution.java:     * @param degreesOfFreedom Degrees of freedom.
./distribution/TDistribution.java:     * @param rng Random number generator.
./distribution/TDistribution.java:     * @param degreesOfFreedom Degrees of freedom.
./distribution/TDistribution.java:     * @param inverseCumAccuracy the maximum absolute error in inverse
./distribution/BetaDistribution.java:     * @param alpha First shape parameter (must be positive).
./distribution/BetaDistribution.java:     * @param beta Second shape parameter (must be positive).
./distribution/BetaDistribution.java:     * @param alpha First shape parameter (must be positive).
./distribution/BetaDistribution.java:     * @param beta Second shape parameter (must be positive).
./distribution/BetaDistribution.java:     * @param inverseCumAccuracy Maximum absolute error in inverse
./distribution/BetaDistribution.java:     * @param rng Random number generator.
./distribution/BetaDistribution.java:     * @param alpha First shape parameter (must be positive).
./distribution/BetaDistribution.java:     * @param beta Second shape parameter (must be positive).
./distribution/BetaDistribution.java:     * @param rng Random number generator.
./distribution/BetaDistribution.java:     * @param alpha First shape parameter (must be positive).
./distribution/BetaDistribution.java:     * @param beta Second shape parameter (must be positive).
./distribution/BetaDistribution.java:     * @param inverseCumAccuracy Maximum absolute error in inverse
./distribution/BetaDistribution.java:         * @param random random generator to use
./distribution/BetaDistribution.java:         * @param alpha distribution first shape parameter
./distribution/BetaDistribution.java:         * @param beta distribution second shape parameter
./distribution/BetaDistribution.java:         * @param random random generator to use
./distribution/BetaDistribution.java:         * @param a0 distribution first shape parameter (&alpha;)
./distribution/BetaDistribution.java:         * @param a min(&alpha;, &beta;) where &alpha;, &beta; are the two distribution shape parameters
./distribution/BetaDistribution.java:         * @param b max(&alpha;, &beta;) where &alpha;, &beta; are the two distribution shape parameters
./distribution/BetaDistribution.java:         * @param random random generator to use
./distribution/BetaDistribution.java:         * @param a0 distribution first shape parameter (&alpha;)
./distribution/BetaDistribution.java:         * @param a max(&alpha;, &beta;) where &alpha;, &beta; are the two distribution shape parameters
./distribution/BetaDistribution.java:         * @param b min(&alpha;, &beta;) where &alpha;, &beta; are the two distribution shape parameters
./distribution/MixtureMultivariateRealDistribution.java: * @param <T> Type of the mixture components.
./distribution/MixtureMultivariateRealDistribution.java:     * @param components List of (weight, distribution) pairs from which to sample.
./distribution/MixtureMultivariateRealDistribution.java:     * @param rng Random number generator.
./distribution/MixtureMultivariateRealDistribution.java:     * @param components Distributions from which to sample.
./distribution/KolmogorovSmirnovDistribution.java:     * @param n Number of observations
./distribution/KolmogorovSmirnovDistribution.java:     * @param d statistic
./distribution/KolmogorovSmirnovDistribution.java:     * @param d statistic
./distribution/KolmogorovSmirnovDistribution.java:     * @param d statistic
./distribution/KolmogorovSmirnovDistribution.java:     * @param exact whether the probability should be calculated exact using
./distribution/KolmogorovSmirnovDistribution.java:     * @param d statistic
./distribution/KolmogorovSmirnovDistribution.java:     * @param d statistic
./distribution/KolmogorovSmirnovDistribution.java:     * @param d statistic
./distribution/ExponentialDistribution.java:     * @param mean mean of this distribution.
./distribution/ExponentialDistribution.java:     * @param mean Mean of this distribution.
./distribution/ExponentialDistribution.java:     * @param inverseCumAccuracy Maximum absolute error in inverse
./distribution/ExponentialDistribution.java:     * @param rng Random number generator.
./distribution/ExponentialDistribution.java:     * @param mean Mean of this distribution.
./distribution/ExponentialDistribution.java:     * @param rng Random number generator.
./distribution/ExponentialDistribution.java:     * @param mean Mean of this distribution.
./distribution/ExponentialDistribution.java:     * @param inverseCumAccuracy Maximum absolute error in inverse
./distribution/LogNormalDistribution.java:     * @param scale the scale parameter of this distribution
./distribution/LogNormalDistribution.java:     * @param shape the shape parameter of this distribution
./distribution/LogNormalDistribution.java:     * @param scale the scale parameter of this distribution
./distribution/LogNormalDistribution.java:     * @param shape the shape parameter of this distribution
./distribution/LogNormalDistribution.java:     * @param inverseCumAccuracy Inverse cumulative probability accuracy.
./distribution/LogNormalDistribution.java:     * @param rng Random number generator.
./distribution/LogNormalDistribution.java:     * @param scale Scale parameter of this distribution.
./distribution/LogNormalDistribution.java:     * @param shape Shape parameter of this distribution.
./distribution/LogNormalDistribution.java:     * @param rng Random number generator.
./distribution/LogNormalDistribution.java:     * @param scale Scale parameter of this distribution.
./distribution/LogNormalDistribution.java:     * @param shape Shape parameter of this distribution.
./distribution/LogNormalDistribution.java:     * @param inverseCumAccuracy Inverse cumulative probability accuracy.
./distribution/MultivariateRealDistribution.java:     * @param x Point at which the PDF is evaluated.
./distribution/MultivariateRealDistribution.java:     * @param seed Seed with which to initialize the random number generator.
./distribution/MultivariateRealDistribution.java:     * @param sampleSize the number of random vectors to generate.
./distribution/ChiSquaredDistribution.java:     * @param degreesOfFreedom Degrees of freedom.
./distribution/ChiSquaredDistribution.java:     * @param degreesOfFreedom Degrees of freedom.
./distribution/ChiSquaredDistribution.java:     * @param inverseCumAccuracy the maximum absolute error in inverse
./distribution/ChiSquaredDistribution.java:     * @param rng Random number generator.
./distribution/ChiSquaredDistribution.java:     * @param degreesOfFreedom Degrees of freedom.
./distribution/ChiSquaredDistribution.java:     * @param rng Random number generator.
./distribution/ChiSquaredDistribution.java:     * @param degreesOfFreedom Degrees of freedom.
./distribution/ChiSquaredDistribution.java:     * @param inverseCumAccuracy the maximum absolute error in inverse
./distribution/TriangularDistribution.java:     * @param a Lower limit of this distribution (inclusive).
./distribution/TriangularDistribution.java:     * @param b Upper limit of this distribution (inclusive).
./distribution/TriangularDistribution.java:     * @param c Mode of this distribution.
./distribution/TriangularDistribution.java:     * @param rng Random number generator.
./distribution/TriangularDistribution.java:     * @param a Lower limit of this distribution (inclusive).
./distribution/TriangularDistribution.java:     * @param b Upper limit of this distribution (inclusive).
./distribution/TriangularDistribution.java:     * @param c Mode of this distribution.
./distribution/LevyDistribution.java:     * @param mu location parameter
./distribution/LevyDistribution.java:     * @param c scale parameter
./distribution/LevyDistribution.java:     * @param rng random generator to be used for sampling
./distribution/LevyDistribution.java:     * @param mu location
./distribution/LevyDistribution.java:     * @param c scale parameter
./distribution/GeometricDistribution.java:     * @param p probability of success.
./distribution/GeometricDistribution.java:     * @param rng Random number generator.
./distribution/GeometricDistribution.java:     * @param p Probability of success.
./distribution/UniformRealDistribution.java:     * @param lower Lower bound of this distribution (inclusive).
./distribution/UniformRealDistribution.java:     * @param upper Upper bound of this distribution (exclusive).
./distribution/UniformRealDistribution.java:     * @param lower Lower bound of this distribution (inclusive).
./distribution/UniformRealDistribution.java:     * @param upper Upper bound of this distribution (exclusive).
./distribution/UniformRealDistribution.java:     * @param inverseCumAccuracy Inverse cumulative probability accuracy.
./distribution/UniformRealDistribution.java:     * @param rng Random number generator.
./distribution/UniformRealDistribution.java:     * @param lower Lower bound of this distribution (inclusive).
./distribution/UniformRealDistribution.java:     * @param upper Upper bound of this distribution (exclusive).
./distribution/UniformRealDistribution.java:     * @param inverseCumAccuracy Inverse cumulative probability accuracy.
./distribution/UniformRealDistribution.java:     * @param rng Random number generator.
./distribution/UniformRealDistribution.java:     * @param lower Lower bound of this distribution (inclusive).
./distribution/UniformRealDistribution.java:     * @param upper Upper bound of this distribution (exclusive).
./distribution/PascalDistribution.java:     * @param r Number of successes.
./distribution/PascalDistribution.java:     * @param p Probability of success.
./distribution/PascalDistribution.java:     * @param rng Random number generator.
./distribution/PascalDistribution.java:     * @param r Number of successes.
./distribution/PascalDistribution.java:     * @param p Probability of success.
./distribution/CauchyDistribution.java:     * @param median Median for this distribution.
./distribution/CauchyDistribution.java:     * @param scale Scale parameter for this distribution.
./distribution/CauchyDistribution.java:     * @param median Median for this distribution.
./distribution/CauchyDistribution.java:     * @param scale Scale parameter for this distribution.
./distribution/CauchyDistribution.java:     * @param inverseCumAccuracy Maximum absolute error in inverse
./distribution/CauchyDistribution.java:     * @param rng Random number generator.
./distribution/CauchyDistribution.java:     * @param median Median for this distribution.
./distribution/CauchyDistribution.java:     * @param scale Scale parameter for this distribution.
./distribution/CauchyDistribution.java:     * @param rng Random number generator.
./distribution/CauchyDistribution.java:     * @param median Median for this distribution.
./distribution/CauchyDistribution.java:     * @param scale Scale parameter for this distribution.
./distribution/CauchyDistribution.java:     * @param inverseCumAccuracy Maximum absolute error in inverse
./distribution/LogisticDistribution.java:     * @param mu location parameter
./distribution/LogisticDistribution.java:     * @param s scale parameter (must be positive)
./distribution/LogisticDistribution.java:     * @param rng Random number generator
./distribution/LogisticDistribution.java:     * @param mu location parameter
./distribution/LogisticDistribution.java:     * @param s scale parameter (must be positive)
./distribution/EnumeratedDistribution.java: * @param <T> type of the elements in the sample space.
./distribution/EnumeratedDistribution.java:     * @param pmf probability mass function enumerated as a list of <T, probability>
./distribution/EnumeratedDistribution.java:     * @param rng random number generator.
./distribution/EnumeratedDistribution.java:     * @param pmf probability mass function enumerated as a list of <T, probability>
./distribution/EnumeratedDistribution.java:     * @param seed the new seed
./distribution/EnumeratedDistribution.java:     * @param x the point at which the PMF is evaluated
./distribution/EnumeratedDistribution.java:     * @param sampleSize the number of random values to generate.
./distribution/EnumeratedDistribution.java:     * @param sampleSize the number of random values to generate.
./distribution/EnumeratedDistribution.java:     * @param array the array to populate.
./distribution/AbstractIntegerDistribution.java:     * @param rng Random number generator.
./distribution/AbstractIntegerDistribution.java:     * @param p the cumulative probability
./distribution/AbstractIntegerDistribution.java:     * @param lower a value satisfying {@code cumulativeProbability(lower) < p}
./distribution/AbstractIntegerDistribution.java:     * @param upper a value satisfying {@code p <= cumulativeProbability(upper)}
./distribution/AbstractIntegerDistribution.java:     * @param argument input value
./distribution/AbstractIntegerDistribution.java:     * @param x the point at which the PMF is evaluated
./distribution/SaddlePointExpansion.java:     * @param z the value.
./distribution/SaddlePointExpansion.java:     * @param x the x value.
./distribution/SaddlePointExpansion.java:     * @param mu the average.
./distribution/SaddlePointExpansion.java:     * @param x the value at which the probability is evaluated.
./distribution/SaddlePointExpansion.java:     * @param n the number of trials.
./distribution/SaddlePointExpansion.java:     * @param p the probability of success.
./distribution/SaddlePointExpansion.java:     * @param q the probability of failure (1 - p).
./distribution/EnumeratedIntegerDistribution.java:     * @param singletons array of random variable values.
./distribution/EnumeratedIntegerDistribution.java:     * @param probabilities array of probabilities.
./distribution/EnumeratedIntegerDistribution.java:     * @param rng random number generator.
./distribution/EnumeratedIntegerDistribution.java:     * @param singletons array of random variable values.
./distribution/EnumeratedIntegerDistribution.java:     * @param probabilities array of probabilities.
./distribution/EnumeratedIntegerDistribution.java:     * @param rng random number generator used for sampling
./distribution/EnumeratedIntegerDistribution.java:     * @param data input dataset
./distribution/EnumeratedIntegerDistribution.java:     * @param data input dataset
./distribution/EnumeratedIntegerDistribution.java:     * @param singletons values
./distribution/EnumeratedIntegerDistribution.java:     * @param probabilities probabilities
./distribution/NakagamiDistribution.java:     * @param mu shape parameter
./distribution/NakagamiDistribution.java:     * @param omega scale parameter (must be positive)
./distribution/NakagamiDistribution.java:     * @param mu shape parameter
./distribution/NakagamiDistribution.java:     * @param omega scale parameter (must be positive)
./distribution/NakagamiDistribution.java:     * @param inverseAbsoluteAccuracy the maximum absolute error in inverse
./distribution/NakagamiDistribution.java:     * @param rng Random number generator
./distribution/NakagamiDistribution.java:     * @param mu shape parameter
./distribution/NakagamiDistribution.java:     * @param omega scale parameter (must be positive)
./distribution/NakagamiDistribution.java:     * @param inverseAbsoluteAccuracy the maximum absolute error in inverse
./distribution/UniformIntegerDistribution.java:     * @param lower Lower bound (inclusive) of this distribution.
./distribution/UniformIntegerDistribution.java:     * @param upper Upper bound (inclusive) of this distribution.
./distribution/UniformIntegerDistribution.java:     * @param rng Random number generator.
./distribution/UniformIntegerDistribution.java:     * @param lower Lower bound (inclusive) of this distribution.
./distribution/UniformIntegerDistribution.java:     * @param upper Upper bound (inclusive) of this distribution.
./distribution/LaplaceDistribution.java:     * @param mu location parameter
./distribution/LaplaceDistribution.java:     * @param beta scale parameter (must be positive)
./distribution/LaplaceDistribution.java:     * @param rng Random number generator
./distribution/LaplaceDistribution.java:     * @param mu location parameter
./distribution/LaplaceDistribution.java:     * @param beta scale parameter (must be positive)
./distribution/PoissonDistribution.java:     * @param p the Poisson mean
./distribution/PoissonDistribution.java:     * @param p Poisson mean.
./distribution/PoissonDistribution.java:     * @param epsilon Convergence criterion for cumulative probabilities.
./distribution/PoissonDistribution.java:     * @param maxIterations the maximum number of iterations for cumulative
./distribution/PoissonDistribution.java:     * @param rng Random number generator.
./distribution/PoissonDistribution.java:     * @param p Poisson mean.
./distribution/PoissonDistribution.java:     * @param epsilon Convergence criterion for cumulative probabilities.
./distribution/PoissonDistribution.java:     * @param maxIterations the maximum number of iterations for cumulative
./distribution/PoissonDistribution.java:     * @param p Poisson mean.
./distribution/PoissonDistribution.java:     * @param epsilon Convergence criterion for cumulative probabilities.
./distribution/PoissonDistribution.java:     * @param p Poisson mean.
./distribution/PoissonDistribution.java:     * @param maxIterations Maximum number of iterations for cumulative
./distribution/PoissonDistribution.java:     * @param x Upper bound, inclusive.
./distribution/PoissonDistribution.java:     * @param meanPoisson Mean of the Poisson distribution.
./distribution/FDistribution.java:     * @param numeratorDegreesOfFreedom Numerator degrees of freedom.
./distribution/FDistribution.java:     * @param denominatorDegreesOfFreedom Denominator degrees of freedom.
./distribution/FDistribution.java:     * @param numeratorDegreesOfFreedom Numerator degrees of freedom.
./distribution/FDistribution.java:     * @param denominatorDegreesOfFreedom Denominator degrees of freedom.
./distribution/FDistribution.java:     * @param inverseCumAccuracy the maximum absolute error in inverse
./distribution/FDistribution.java:     * @param rng Random number generator.
./distribution/FDistribution.java:     * @param numeratorDegreesOfFreedom Numerator degrees of freedom.
./distribution/FDistribution.java:     * @param denominatorDegreesOfFreedom Denominator degrees of freedom.
./distribution/FDistribution.java:     * @param rng Random number generator.
./distribution/FDistribution.java:     * @param numeratorDegreesOfFreedom Numerator degrees of freedom.
./distribution/FDistribution.java:     * @param denominatorDegreesOfFreedom Denominator degrees of freedom.
./distribution/FDistribution.java:     * @param inverseCumAccuracy the maximum absolute error in inverse
./distribution/AbstractMultivariateRealDistribution.java:     * @param rng Random number generator.
./distribution/AbstractMultivariateRealDistribution.java:     * @param n Number of dimensions.
./distribution/ParetoDistribution.java:     * @param scale the scale parameter of this distribution
./distribution/ParetoDistribution.java:     * @param shape the shape parameter of this distribution
./distribution/ParetoDistribution.java:     * @param scale the scale parameter of this distribution
./distribution/ParetoDistribution.java:     * @param shape the shape parameter of this distribution
./distribution/ParetoDistribution.java:     * @param inverseCumAccuracy Inverse cumulative probability accuracy.
./distribution/ParetoDistribution.java:     * @param rng Random number generator.
./distribution/ParetoDistribution.java:     * @param scale Scale parameter of this distribution.
./distribution/ParetoDistribution.java:     * @param shape Shape parameter of this distribution.
./distribution/ParetoDistribution.java:     * @param rng Random number generator.
./distribution/ParetoDistribution.java:     * @param scale Scale parameter of this distribution.
./distribution/ParetoDistribution.java:     * @param shape Shape parameter of this distribution.
./distribution/ParetoDistribution.java:     * @param inverseCumAccuracy Inverse cumulative probability accuracy.
./distribution/AbstractRealDistribution.java:     * @param rng Random number generator.
./distribution/AbstractRealDistribution.java:     * @param x0 Lower bound (excluded).
./distribution/AbstractRealDistribution.java:     * @param x1 Upper bound (included).
./distribution/AbstractRealDistribution.java:     * @param x the point at which the PDF is evaluated
./distribution/MultivariateNormalDistribution.java:     * @param means Vector of means.
./distribution/MultivariateNormalDistribution.java:     * @param covariances Covariance matrix.
./distribution/MultivariateNormalDistribution.java:     * @param rng Random Number Generator.
./distribution/MultivariateNormalDistribution.java:     * @param means Vector of means.
./distribution/MultivariateNormalDistribution.java:     * @param covariances Covariance matrix.
./distribution/MultivariateNormalDistribution.java:     * @param values Values at which to compute density.
./distribution/GumbelDistribution.java:     * @param mu location parameter
./distribution/GumbelDistribution.java:     * @param beta scale parameter (must be positive)
./distribution/GumbelDistribution.java:     * @param rng Random number generator
./distribution/GumbelDistribution.java:     * @param mu location parameter
./distribution/GumbelDistribution.java:     * @param beta scale parameter (must be positive)
./distribution/IntegerDistribution.java:     * @param x the point at which the PMF is evaluated
./distribution/IntegerDistribution.java:     * @param x the point at which the CDF is evaluated
./distribution/IntegerDistribution.java:     * @param x0 the exclusive lower bound
./distribution/IntegerDistribution.java:     * @param x1 the inclusive upper bound
./distribution/IntegerDistribution.java:     * @param p the cumulative probability
./distribution/IntegerDistribution.java:     * @param seed the new seed
./distribution/IntegerDistribution.java:     * @param sampleSize the number of random values to generate
./distribution/BinomialDistribution.java:     * @param trials Number of trials.
./distribution/BinomialDistribution.java:     * @param p Probability of success.
./distribution/BinomialDistribution.java:     * @param rng Random number generator.
./distribution/BinomialDistribution.java:     * @param trials Number of trials.
./distribution/BinomialDistribution.java:     * @param p Probability of success.
./distribution/MixtureMultivariateNormalDistribution.java:     * @param weights Weights of each component.
./distribution/MixtureMultivariateNormalDistribution.java:     * @param means Mean vector for each component.
./distribution/MixtureMultivariateNormalDistribution.java:     * @param covariances Covariance matrix for each component.
./distribution/MixtureMultivariateNormalDistribution.java:     * @param components List of (weight, distribution) pairs from which to sample.
./distribution/MixtureMultivariateNormalDistribution.java:     * @param rng Random number generator.
./distribution/MixtureMultivariateNormalDistribution.java:     * @param components Distributions from which to sample.
./distribution/MixtureMultivariateNormalDistribution.java:     * @param weights Weights of each component.
./distribution/MixtureMultivariateNormalDistribution.java:     * @param means Mean vector for each component.
./distribution/MixtureMultivariateNormalDistribution.java:     * @param covariances Covariance matrix for each component.
./distribution/GammaDistribution.java:     * @param shape the shape parameter
./distribution/GammaDistribution.java:     * @param scale the scale parameter
./distribution/GammaDistribution.java:     * @param shape the shape parameter
./distribution/GammaDistribution.java:     * @param scale the scale parameter
./distribution/GammaDistribution.java:     * @param inverseCumAccuracy the maximum absolute error in inverse
./distribution/GammaDistribution.java:     * @param rng Random number generator.
./distribution/GammaDistribution.java:     * @param shape the shape parameter
./distribution/GammaDistribution.java:     * @param scale the scale parameter
./distribution/GammaDistribution.java:     * @param rng Random number generator.
./distribution/GammaDistribution.java:     * @param shape the shape parameter
./distribution/GammaDistribution.java:     * @param scale the scale parameter
./distribution/GammaDistribution.java:     * @param inverseCumAccuracy the maximum absolute error in inverse
./exception/MathInternalError.java:     * @param cause root cause
./exception/MathInternalError.java:     * @param pattern Message pattern explaining the cause of the error.
./exception/MathInternalError.java:     * @param args Arguments.
./exception/MathParseException.java:     * @param wrong Bad string representation of the object.
./exception/MathParseException.java:     * @param position Index, in the {@code wrong} string, that caused the
./exception/MathParseException.java:     * @param type Class of the object supposedly represented by the
./exception/MathParseException.java:     * @param wrong Bad string representation of the object.
./exception/MathParseException.java:     * @param position Index, in the {@code wrong} string, that caused the
./exception/MathIllegalArgumentException.java:     * @param pattern Message pattern explaining the cause of the error.
./exception/MathIllegalArgumentException.java:     * @param args Arguments.
./exception/NonMonotonicSequenceException.java:     * @param wrong Value that did not match the requirements.
./exception/NonMonotonicSequenceException.java:     * @param previous Previous value in the sequence.
./exception/NonMonotonicSequenceException.java:     * @param index Index of the value that did not match the requirements.
./exception/NonMonotonicSequenceException.java:     * @param wrong Value that did not match the requirements.
./exception/NonMonotonicSequenceException.java:     * @param previous Previous value in the sequence.
./exception/NonMonotonicSequenceException.java:     * @param index Index of the value that did not match the requirements.
./exception/NonMonotonicSequenceException.java:     * @param direction Strictly positive for a sequence required to be
./exception/NonMonotonicSequenceException.java:     * @param strict Whether the sequence must be strictly increasing or
./exception/ConvergenceException.java:     * @param pattern Message pattern providing the specific context of
./exception/ConvergenceException.java:     * @param args Arguments.
./exception/InsufficientDataException.java:     * @param pattern Message pattern providing the specific context of the error.
./exception/InsufficientDataException.java:     * @param arguments Values for replacing the placeholders in {@code pattern}.
./exception/MathUnsupportedOperationException.java:     * @param pattern Message pattern providing the specific context of
./exception/MathUnsupportedOperationException.java:     * @param args Arguments.
./exception/NumberIsTooLargeException.java:     * @param wrong Value that is larger than the maximum.
./exception/NumberIsTooLargeException.java:     * @param max Maximum.
./exception/NumberIsTooLargeException.java:     * @param boundIsAllowed if true the maximum is included in the allowed range.
./exception/NumberIsTooLargeException.java:     * @param specific Specific context pattern.
./exception/NumberIsTooLargeException.java:     * @param wrong Value that is larger than the maximum.
./exception/NumberIsTooLargeException.java:     * @param max Maximum.
./exception/NumberIsTooLargeException.java:     * @param boundIsAllowed if true the maximum is included in the allowed range.
./exception/MathIllegalNumberException.java:     * @param pattern Localizable pattern.
./exception/MathIllegalNumberException.java:     * @param wrong Wrong number.
./exception/MathIllegalNumberException.java:     * @param arguments Arguments.
./exception/TooManyIterationsException.java:     * @param max Maximum number of evaluations.
./exception/ZeroException.java:     * @param specific Specific context pattern.
./exception/ZeroException.java:     * @param arguments Arguments.
./exception/util/Localizable.java:     * @param locale locale into which to get the string.
./exception/util/DummyLocalizable.java:     * @param source source text
./exception/util/ArgUtils.java:     * @param array Array (possibly multidimensional).
./exception/util/ExceptionContext.java:     * @param throwable the exception this context refers too
./exception/util/ExceptionContext.java:     * @param pattern Message pattern.
./exception/util/ExceptionContext.java:     * @param arguments Values for replacing the placeholders in the message
./exception/util/ExceptionContext.java:     * @param key Context key (not null).
./exception/util/ExceptionContext.java:     * @param value Context value.
./exception/util/ExceptionContext.java:     * @param key Context key.
./exception/util/ExceptionContext.java:     * @param locale Locale in which the message should be translated.
./exception/util/ExceptionContext.java:     * @param locale Locale in which the message should be translated.
./exception/util/ExceptionContext.java:     * @param separator Separator inserted between the message parts.
./exception/util/ExceptionContext.java:     * @param locale Locale in which the message should be translated.
./exception/util/ExceptionContext.java:     * @param separator Message separator.
./exception/util/ExceptionContext.java:     * @param out Stream.
./exception/util/ExceptionContext.java:     * @param in Stream.
./exception/util/ExceptionContext.java:     * @param out Stream.
./exception/util/ExceptionContext.java:     * @param in Stream.
./exception/util/ExceptionContext.java:     * @param out Stream.
./exception/util/ExceptionContext.java:     * @param in Stream.
./exception/util/ExceptionContext.java:     * @param obj Object that does not implement the {@code Serializable}
./exception/util/LocalizedFormats.java:     * @param sourceFormat source English format to use when no
./exception/MaxCountExceededException.java:     * @param max Maximum.
./exception/MaxCountExceededException.java:     * @param specific Specific context pattern.
./exception/MaxCountExceededException.java:     * @param max Maximum.
./exception/MaxCountExceededException.java:     * @param args Additional arguments.
./exception/MathArithmeticException.java:     * @param pattern Message pattern providing the specific context of
./exception/MathArithmeticException.java:     * @param args Arguments.
./exception/NotStrictlyPositiveException.java:     * @param value Argument.
./exception/NotStrictlyPositiveException.java:     * @param specific Specific context where the error occurred.
./exception/NotStrictlyPositiveException.java:     * @param value Argument.
./exception/NullArgumentException.java:     * @param pattern Message pattern providing the specific context of
./exception/NullArgumentException.java:     * @param arguments Values for replacing the placeholders in {@code pattern}.
./exception/NotFiniteNumberException.java:     * @param wrong Value that is infinite or NaN.
./exception/NotFiniteNumberException.java:     * @param args Optional arguments.
./exception/NotFiniteNumberException.java:     * @param specific Specific context pattern.
./exception/NotFiniteNumberException.java:     * @param wrong Value that is infinite or NaN.
./exception/NotFiniteNumberException.java:     * @param args Optional arguments.
./exception/MultiDimensionMismatchException.java:     * @param wrong Wrong dimensions.
./exception/MultiDimensionMismatchException.java:     * @param expected Expected dimensions.
./exception/MultiDimensionMismatchException.java:     * @param specific Message pattern providing the specific context of
./exception/MultiDimensionMismatchException.java:     * @param wrong Wrong dimensions.
./exception/MultiDimensionMismatchException.java:     * @param expected Expected dimensions.
./exception/MultiDimensionMismatchException.java:     * @param index Dimension index.
./exception/MultiDimensionMismatchException.java:     * @param index Dimension index.
./exception/OutOfRangeException.java:     * @param wrong Requested value.
./exception/OutOfRangeException.java:     * @param lo Lower bound.
./exception/OutOfRangeException.java:     * @param hi Higher bound.
./exception/OutOfRangeException.java:     * @param specific Context information.
./exception/OutOfRangeException.java:     * @param wrong Requested value.
./exception/OutOfRangeException.java:     * @param lo Lower bound.
./exception/OutOfRangeException.java:     * @param hi Higher bound.
./exception/NumberIsTooSmallException.java:     * @param wrong Value that is smaller than the minimum.
./exception/NumberIsTooSmallException.java:     * @param min Minimum.
./exception/NumberIsTooSmallException.java:     * @param boundIsAllowed Whether {@code min} is included in the allowed range.
./exception/NumberIsTooSmallException.java:     * @param specific Specific context pattern.
./exception/NumberIsTooSmallException.java:     * @param wrong Value that is smaller than the minimum.
./exception/NumberIsTooSmallException.java:     * @param min Minimum.
./exception/NumberIsTooSmallException.java:     * @param boundIsAllowed Whether {@code min} is included in the allowed range.
./exception/NoBracketingException.java:     * @param lo Lower end of the interval.
./exception/NoBracketingException.java:     * @param hi Higher end of the interval.
./exception/NoBracketingException.java:     * @param fLo Value at lower end of the interval.
./exception/NoBracketingException.java:     * @param fHi Value at higher end of the interval.
./exception/NoBracketingException.java:     * @param specific Contextual information on what caused the exception.
./exception/NoBracketingException.java:     * @param lo Lower end of the interval.
./exception/NoBracketingException.java:     * @param hi Higher end of the interval.
./exception/NoBracketingException.java:     * @param fLo Value at lower end of the interval.
./exception/NoBracketingException.java:     * @param fHi Value at higher end of the interval.
./exception/NoBracketingException.java:     * @param args Additional arguments.
./exception/TooManyEvaluationsException.java:     * @param max Maximum number of evaluations.
./exception/MathRuntimeException.java:     * @param pattern Message pattern explaining the cause of the error.
./exception/MathRuntimeException.java:     * @param args Arguments.
./exception/MathIllegalStateException.java:     * @param pattern Message pattern explaining the cause of the error.
./exception/MathIllegalStateException.java:     * @param args Arguments.
./exception/MathIllegalStateException.java:     * @param cause Root cause.
./exception/MathIllegalStateException.java:     * @param pattern Message pattern explaining the cause of the error.
./exception/MathIllegalStateException.java:     * @param args Arguments.
./exception/NotPositiveException.java:     * @param value Argument.
./exception/NotPositiveException.java:     * @param specific Specific context where the error occurred.
./exception/NotPositiveException.java:     * @param value Argument.
./exception/NoDataException.java:     * @param specific Contextual information on what caused the exception.
./exception/DimensionMismatchException.java:     * @param specific Specific context information pattern.
./exception/DimensionMismatchException.java:     * @param wrong Wrong dimension.
./exception/DimensionMismatchException.java:     * @param expected Expected dimension.
./exception/DimensionMismatchException.java:     * @param wrong Wrong dimension.
./exception/DimensionMismatchException.java:     * @param expected Expected dimension.
./FieldElement.java: * @param <T> the type of the field elements
./FieldElement.java:     * @param a element to add
./FieldElement.java:     * @param a element to subtract
./FieldElement.java:     * @param n Number of times {@code this} must be added to itself.
./FieldElement.java:     * @param a element to multiply
./FieldElement.java:     * @param a element to divide by
./Field.java: * @param <T> the type of the field elements
./filter/DefaultProcessModel.java:     * @param stateTransition
./filter/DefaultProcessModel.java:     * @param control
./filter/DefaultProcessModel.java:     * @param processNoise
./filter/DefaultProcessModel.java:     * @param initialStateEstimate
./filter/DefaultProcessModel.java:     * @param initialErrorCovariance
./filter/DefaultProcessModel.java:     * @param stateTransition
./filter/DefaultProcessModel.java:     * @param control
./filter/DefaultProcessModel.java:     * @param processNoise
./filter/DefaultProcessModel.java:     * @param stateTransition
./filter/DefaultProcessModel.java:     * @param control
./filter/DefaultProcessModel.java:     * @param processNoise
./filter/DefaultProcessModel.java:     * @param initialStateEstimate
./filter/DefaultProcessModel.java:     * @param initialErrorCovariance
./filter/KalmanFilter.java:     * @param process
./filter/KalmanFilter.java:     * @param measurement
./filter/KalmanFilter.java:     * @param u
./filter/KalmanFilter.java:     * @param u
./filter/KalmanFilter.java:     * @param z
./filter/KalmanFilter.java:     * @param z
./filter/DefaultMeasurementModel.java:     * @param measMatrix
./filter/DefaultMeasurementModel.java:     * @param measNoise
./filter/DefaultMeasurementModel.java:     * @param measMatrix the measurement matrix
./filter/DefaultMeasurementModel.java:     * @param measNoise the measurement noise matrix
./fitting/SimpleCurveFitter.java:     * @param function Function to fit.
./fitting/SimpleCurveFitter.java:     * @param initialGuess Initial guess. Cannot be {@code null}. Its length must
./fitting/SimpleCurveFitter.java:     * @param maxIter Maximum number of iterations of the optimization algorithm.
./fitting/SimpleCurveFitter.java:     * @param f Function to fit.
./fitting/SimpleCurveFitter.java:     * @param start Initial guess for the parameters.  Cannot be {@code null}.
./fitting/SimpleCurveFitter.java:     * @param newStart new start point (initial guess)
./fitting/SimpleCurveFitter.java:     * @param newMaxIter maximum number of iterations
./fitting/WeightedObservedPoint.java:     * @param weight Weight of the measurement in the fitting process.
./fitting/WeightedObservedPoint.java:     * @param x Abscissa of the measurement.
./fitting/WeightedObservedPoint.java:     * @param y Ordinate of the measurement.
./fitting/AbstractCurveFitter.java:     * @param points Observations.
./fitting/AbstractCurveFitter.java:     * @param points Sample points.
./fitting/AbstractCurveFitter.java:         * @param f function to fit.
./fitting/AbstractCurveFitter.java:         * @param observations Observations.
./fitting/WeightedObservedPoints.java:     * @param x Abscissa of the point.
./fitting/WeightedObservedPoints.java:     * @param y Observed value  at {@code x}. After fitting we should
./fitting/WeightedObservedPoints.java:     * @param weight Weight of the observed point.
./fitting/WeightedObservedPoints.java:     * @param x Abscissa of the point.
./fitting/WeightedObservedPoints.java:     * @param y Observed value  at {@code x}. After fitting we should
./fitting/WeightedObservedPoints.java:     * @param observed Observed point to add.
./fitting/GaussianCurveFitter.java:     * @param initialGuess Initial guess. If set to {@code null}, the initial guess
./fitting/GaussianCurveFitter.java:     * @param maxIter Maximum number of iterations of the optimization algorithm.
./fitting/GaussianCurveFitter.java:     * @param newStart new start point (initial guess)
./fitting/GaussianCurveFitter.java:     * @param newMaxIter maximum number of iterations
./fitting/GaussianCurveFitter.java:         * @param observations Observed points from which to guess the
./fitting/GaussianCurveFitter.java:         * @param unsorted Input observations.
./fitting/GaussianCurveFitter.java:         * @param points Observed points, sorted.
./fitting/GaussianCurveFitter.java:         * @param points Points to search.
./fitting/GaussianCurveFitter.java:         * @param points Points to use for interpolation.
./fitting/GaussianCurveFitter.java:         * @param startIdx Index within points from which to start the search for
./fitting/GaussianCurveFitter.java:         * @param idxStep Index step for searching interpolation bounds points.
./fitting/GaussianCurveFitter.java:         * @param y Y value for which X should be determined.
./fitting/GaussianCurveFitter.java:         * @param points Points to use for interpolation.
./fitting/GaussianCurveFitter.java:         * @param startIdx Index within points from which to start search for
./fitting/GaussianCurveFitter.java:         * @param idxStep Index step for search for interpolation bounds points.
./fitting/GaussianCurveFitter.java:         * @param y Y value for which X should be determined.
./fitting/GaussianCurveFitter.java:         * @param value Value to test whether it is between {@code boundary1}
./fitting/GaussianCurveFitter.java:         * @param boundary1 One end of the range.
./fitting/GaussianCurveFitter.java:         * @param boundary2 Other end of the range.
./fitting/HarmonicFitter.java:     * @param optimizer Optimizer to use for the fitting.
./fitting/HarmonicFitter.java:     * @param initialGuess First guess values in the following order:
./fitting/HarmonicFitter.java:         * @param observations Sampled observations.
./fitting/HarmonicFitter.java:         * @param unsorted Input observations.
./fitting/HarmonicFitter.java:         * @param observations Observations, sorted w.r.t. abscissa.
./fitting/HarmonicFitter.java:         * @param observations Observations, sorted w.r.t. abscissa.
./fitting/leastsquares/OptimumImpl.java:     * @param value       the function value
./fitting/leastsquares/OptimumImpl.java:     * @param evaluations number of times the function was evaluated
./fitting/leastsquares/OptimumImpl.java:     * @param iterations  number of iterations of the algorithm
./fitting/leastsquares/MultivariateJacobianFunction.java:     * @param point the abscissae
./fitting/leastsquares/LeastSquaresAdapter.java:     * @param problem the delegate
./fitting/leastsquares/LeastSquaresAdapter.java:     * @param point*/
./fitting/leastsquares/GaussNewtonOptimizer.java:         * @param jacobian  the Jacobian matrix, J. the number of rows >= the number or
./fitting/leastsquares/GaussNewtonOptimizer.java:         * @param residuals the computed residuals, r.
./fitting/leastsquares/GaussNewtonOptimizer.java:     * @param decomposition the {@link Decomposition} algorithm.
./fitting/leastsquares/GaussNewtonOptimizer.java:     * @param newDecomposition the {@link Decomposition} algorithm to use.
./fitting/leastsquares/GaussNewtonOptimizer.java:     * @param jacobian  the m by n jacobian matrix, J. Input.
./fitting/leastsquares/GaussNewtonOptimizer.java:     * @param residuals the m by 1 residual vector, r. Input.
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @param initialStepBoundFactor initial step bound factor
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @param costRelativeTolerance  cost relative tolerance
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @param parRelativeTolerance   parameters relative tolerance
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @param orthoTolerance         orthogonality tolerance
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @param qrRankingThreshold     threshold in the QR decomposition. Columns with a 2
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @param newInitialStepBoundFactor Positive input variable used in
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @param newCostRelativeTolerance Desired relative error in the sum of squares.
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @param newParRelativeTolerance Desired relative error in the approximate solution
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @param newOrthoTolerance Desired max cosine on the orthogonality between
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @param newQRRankingThreshold Desired threshold for QR ranking.
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:         * @param weightedJacobian Weighted Jacobian.
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:         * @param permutation Columns permutation array.
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:         * @param rank Rank of the Jacobian matrix.
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:         * @param diagR Diagonal elements of the R matrix in the QR decomposition.
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:         * @param jacNorm Norms of the columns of the jacobian matrix.
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:         * @param beta Coefficients of the Householder transforms vectors.
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @param qy Array containing qTy.
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @param delta Upper bound on the euclidean norm of diagR * lmDir.
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @param diag Diagonal matrix.
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @param internalData Data (modified in-place in this method).
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @param solvedCols Number of solved point.
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @param work1 work array
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @param work2 work array
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @param work3 work array
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @param lmDir the "returned" LM direction will be stored in this array.
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @param lmPar the value of the LM parameter from the previous iteration.
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @param qy array containing qTy
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @param diag diagonal matrix
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @param lmDiag diagonal elements associated with lmDir
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @param internalData Data (modified in-place in this method).
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @param solvedCols Number of sloved point.
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @param work work array
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @param lmDir the "returned" LM direction is stored in this array
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @param jacobian Weighted Jacobian matrix at the current point.
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @param solvedCols Number of solved point.
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @param y vector to multiply (will be overwritten with the result)
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @param internalData Data.
./fitting/leastsquares/EvaluationRmsChecker.java:     * @param tol the relative and absolute tolerance.
./fitting/leastsquares/EvaluationRmsChecker.java:     * @param relTol the relative tolerance.
./fitting/leastsquares/EvaluationRmsChecker.java:     * @param absTol the absolute tolerance.
./fitting/leastsquares/LeastSquaresProblem.java:     * @param point the parameter values.
./fitting/leastsquares/LeastSquaresProblem.java:         * @param threshold Singularity threshold.
./fitting/leastsquares/LeastSquaresProblem.java:         * @param covarianceSingularityThreshold Singularity threshold (see {@link
./fitting/leastsquares/ParameterValidator.java:     * @param params Input parameters.
./fitting/leastsquares/DenseWeightedEvaluation.java:     * @param unweighted the evalutation before weights are applied
./fitting/leastsquares/DenseWeightedEvaluation.java:     * @param weightSqrt the matrix square root of the weight matrix
./fitting/leastsquares/LeastSquaresBuilder.java:     * @param newMaxEvaluations the maximum number of evaluations permitted.
./fitting/leastsquares/LeastSquaresBuilder.java:     * @param newMaxIterations the maximum number of iterations permitted.
./fitting/leastsquares/LeastSquaresBuilder.java:     * @param newChecker the convergence checker.
./fitting/leastsquares/LeastSquaresBuilder.java:     * @param newChecker the convergence checker.
./fitting/leastsquares/LeastSquaresBuilder.java:     * @param value the model function value
./fitting/leastsquares/LeastSquaresBuilder.java:     * @param jacobian the Jacobian of {@code value}
./fitting/leastsquares/LeastSquaresBuilder.java:     * @param newModel the model function value and Jacobian
./fitting/leastsquares/LeastSquaresBuilder.java:     * @param newTarget the observed data.
./fitting/leastsquares/LeastSquaresBuilder.java:     * @param newTarget the observed data.
./fitting/leastsquares/LeastSquaresBuilder.java:     * @param newStart the initial guess.
./fitting/leastsquares/LeastSquaresBuilder.java:     * @param newStart the initial guess.
./fitting/leastsquares/LeastSquaresBuilder.java:     * @param newWeight the weight matrix
./fitting/leastsquares/LeastSquaresBuilder.java:     * @param newValue Whether to perform lazy evaluation.
./fitting/leastsquares/LeastSquaresBuilder.java:     * @param newValidator Parameter validator.
./fitting/leastsquares/LeastSquaresOptimizer.java:     * @param leastSquaresProblem the problem definition, including model function and
./fitting/leastsquares/AbstractEvaluation.java:     * @param observationSize the number of observation. Needed for {@link
./fitting/leastsquares/LeastSquaresFactory.java:     * @param model          the model function. Produces the computed values.
./fitting/leastsquares/LeastSquaresFactory.java:     * @param observed       the observed (target) values
./fitting/leastsquares/LeastSquaresFactory.java:     * @param start          the initial guess.
./fitting/leastsquares/LeastSquaresFactory.java:     * @param weight         the weight matrix
./fitting/leastsquares/LeastSquaresFactory.java:     * @param checker        convergence checker
./fitting/leastsquares/LeastSquaresFactory.java:     * @param maxEvaluations the maximum number of times to evaluate the model
./fitting/leastsquares/LeastSquaresFactory.java:     * @param maxIterations  the maximum number to times to iterate in the algorithm
./fitting/leastsquares/LeastSquaresFactory.java:     * @param lazyEvaluation Whether the call to {@link Evaluation#evaluate(RealVector)}
./fitting/leastsquares/LeastSquaresFactory.java:     * @param paramValidator Model parameters validator.
./fitting/leastsquares/LeastSquaresFactory.java:     * @param model          the model function. Produces the computed values.
./fitting/leastsquares/LeastSquaresFactory.java:     * @param observed       the observed (target) values
./fitting/leastsquares/LeastSquaresFactory.java:     * @param start          the initial guess.
./fitting/leastsquares/LeastSquaresFactory.java:     * @param checker        convergence checker
./fitting/leastsquares/LeastSquaresFactory.java:     * @param maxEvaluations the maximum number of times to evaluate the model
./fitting/leastsquares/LeastSquaresFactory.java:     * @param maxIterations  the maximum number to times to iterate in the algorithm
./fitting/leastsquares/LeastSquaresFactory.java:     * @param model          the model function. Produces the computed values.
./fitting/leastsquares/LeastSquaresFactory.java:     * @param observed       the observed (target) values
./fitting/leastsquares/LeastSquaresFactory.java:     * @param start          the initial guess.
./fitting/leastsquares/LeastSquaresFactory.java:     * @param weight         the weight matrix
./fitting/leastsquares/LeastSquaresFactory.java:     * @param checker        convergence checker
./fitting/leastsquares/LeastSquaresFactory.java:     * @param maxEvaluations the maximum number of times to evaluate the model
./fitting/leastsquares/LeastSquaresFactory.java:     * @param maxIterations  the maximum number to times to iterate in the algorithm
./fitting/leastsquares/LeastSquaresFactory.java:     * @param model          the model function. Produces the computed values.
./fitting/leastsquares/LeastSquaresFactory.java:     * @param jacobian       the jacobian of the model with respect to the parameters
./fitting/leastsquares/LeastSquaresFactory.java:     * @param observed       the observed (target) values
./fitting/leastsquares/LeastSquaresFactory.java:     * @param start          the initial guess.
./fitting/leastsquares/LeastSquaresFactory.java:     * @param weight         the weight matrix
./fitting/leastsquares/LeastSquaresFactory.java:     * @param checker        convergence checker
./fitting/leastsquares/LeastSquaresFactory.java:     * @param maxEvaluations the maximum number of times to evaluate the model
./fitting/leastsquares/LeastSquaresFactory.java:     * @param maxIterations  the maximum number to times to iterate in the algorithm
./fitting/leastsquares/LeastSquaresFactory.java:     * @param problem the unweighted problem
./fitting/leastsquares/LeastSquaresFactory.java:     * @param weights the matrix of weights
./fitting/leastsquares/LeastSquaresFactory.java:     * @param problem the unweighted problem
./fitting/leastsquares/LeastSquaresFactory.java:     * @param weights the diagonal of the weight matrix
./fitting/leastsquares/LeastSquaresFactory.java:     * @param problem the problem to track.
./fitting/leastsquares/LeastSquaresFactory.java:     * @param counter the counter to increment.
./fitting/leastsquares/LeastSquaresFactory.java:     * @param checker the convergence checker to adapt.
./fitting/leastsquares/LeastSquaresFactory.java:     * @param m Symmetric, positive-definite (weight) matrix.
./fitting/leastsquares/LeastSquaresFactory.java:     * @param value    the vector value function
./fitting/leastsquares/LeastSquaresFactory.java:     * @param jacobian the Jacobian function
./fitting/leastsquares/LeastSquaresFactory.java:     * @param value    the vector value function
./fitting/leastsquares/LeastSquaresFactory.java:     * @param jacobian the Jacobian function
./fitting/leastsquares/LeastSquaresFactory.java:         * @param value Model function.
./fitting/leastsquares/LeastSquaresFactory.java:         * @param jacobian Model's Jacobian function.
./fitting/leastsquares/LeastSquaresFactory.java:         * @param model          the model function
./fitting/leastsquares/LeastSquaresFactory.java:         * @param target         the observed data
./fitting/leastsquares/LeastSquaresFactory.java:         * @param start          the initial guess
./fitting/leastsquares/LeastSquaresFactory.java:         * @param checker        the convergence checker
./fitting/leastsquares/LeastSquaresFactory.java:         * @param maxEvaluations the allowed evaluations
./fitting/leastsquares/LeastSquaresFactory.java:         * @param maxIterations  the allowed iterations
./fitting/leastsquares/LeastSquaresFactory.java:         * @param lazyEvaluation Whether the call to {@link Evaluation#evaluate(RealVector)}
./fitting/leastsquares/LeastSquaresFactory.java:         * @param paramValidator Model parameters validator.
./fitting/leastsquares/LeastSquaresFactory.java:             * @param values   the computed function values
./fitting/leastsquares/LeastSquaresFactory.java:             * @param jacobian the computed function Jacobian
./fitting/leastsquares/LeastSquaresFactory.java:             * @param target   the observed values
./fitting/leastsquares/LeastSquaresFactory.java:             * @param point    the abscissa
./fitting/leastsquares/LeastSquaresFactory.java:             * @param model  the model function
./fitting/leastsquares/LeastSquaresFactory.java:             * @param target the observed values
./fitting/leastsquares/LeastSquaresFactory.java:             * @param point  the abscissa
./fitting/leastsquares/ValueAndJacobianFunction.java:     * @param params Point.
./fitting/leastsquares/ValueAndJacobianFunction.java:     * @param params Point.
./fitting/CurveFitter.java: * @param <T> Function to use for the fit.
./fitting/CurveFitter.java:     * @param optimizer Optimizer to use for the fitting.
./fitting/CurveFitter.java:     * @param x abscissa of the point
./fitting/CurveFitter.java:     * @param y observed value of the point at x, after fitting we should
./fitting/CurveFitter.java:     * @param weight weight of the observed point in the fit
./fitting/CurveFitter.java:     * @param x abscissa of the point
./fitting/CurveFitter.java:     * @param y observed value of the point at x, after fitting we should
./fitting/CurveFitter.java:     * @param observed observed point to add
./fitting/CurveFitter.java:     * @param f parametric function to fit.
./fitting/CurveFitter.java:     * @param initialGuess first guess of the function parameters.
./fitting/CurveFitter.java:     * @param f parametric function to fit.
./fitting/CurveFitter.java:     * @param initialGuess first guess of the function parameters.
./fitting/CurveFitter.java:     * @param maxEval Maximum number of function evaluations.
./fitting/CurveFitter.java:         * @param f function to fit.
./fitting/PolynomialCurveFitter.java:     * @param initialGuess Initial guess.
./fitting/PolynomialCurveFitter.java:     * @param maxIter Maximum number of iterations of the optimization algorithm.
./fitting/PolynomialCurveFitter.java:     * @param degree Degree of the polynomial to be fitted.
./fitting/PolynomialCurveFitter.java:     * @param newStart new start point (initial guess)
./fitting/PolynomialCurveFitter.java:     * @param newMaxIter maximum number of iterations
./fitting/HarmonicCurveFitter.java:     * @param initialGuess Initial guess. If set to {@code null}, the initial guess
./fitting/HarmonicCurveFitter.java:     * @param maxIter Maximum number of iterations of the optimization algorithm.
./fitting/HarmonicCurveFitter.java:     * @param newStart new start point (initial guess)
./fitting/HarmonicCurveFitter.java:     * @param newMaxIter maximum number of iterations
./fitting/HarmonicCurveFitter.java:         * @param observations Sampled observations.
./fitting/HarmonicCurveFitter.java:         * @param unsorted Input observations.
./fitting/HarmonicCurveFitter.java:         * @param observations Observations, sorted w.r.t. abscissa.
./fitting/HarmonicCurveFitter.java:         * @param observations Observations, sorted w.r.t. abscissa.
./fitting/GaussianFitter.java:     * @param optimizer Optimizer to use for the fitting.
./fitting/GaussianFitter.java:     * @param initialGuess First guess values in the following order:
./fitting/GaussianFitter.java:         * @param observations Observed points from which to guess the
./fitting/GaussianFitter.java:         * @param unsorted Input observations.
./fitting/GaussianFitter.java:         * @param points Observed points, sorted.
./fitting/GaussianFitter.java:         * @param points Points to search.
./fitting/GaussianFitter.java:         * @param points Points to use for interpolation.
./fitting/GaussianFitter.java:         * @param startIdx Index within points from which to start the search for
./fitting/GaussianFitter.java:         * @param idxStep Index step for searching interpolation bounds points.
./fitting/GaussianFitter.java:         * @param y Y value for which X should be determined.
./fitting/GaussianFitter.java:         * @param points Points to use for interpolation.
./fitting/GaussianFitter.java:         * @param startIdx Index within points from which to start search for
./fitting/GaussianFitter.java:         * @param idxStep Index step for search for interpolation bounds points.
./fitting/GaussianFitter.java:         * @param y Y value for which X should be determined.
./fitting/GaussianFitter.java:         * @param value Value to test whether it is between {@code boundary1}
./fitting/GaussianFitter.java:         * @param boundary1 One end of the range.
./fitting/GaussianFitter.java:         * @param boundary2 Other end of the range.
./fitting/PolynomialFitter.java:     * @param optimizer Optimizer to use for the fitting.
./fitting/PolynomialFitter.java:     * @param guess First guess for the coefficients. They must be sorted in
./fitting/PolynomialFitter.java:     * @param maxEval Maximum number of evaluations of the polynomial.
./fitting/PolynomialFitter.java:     * @param guess First guess for the coefficients. They must be sorted in
./fraction/FractionConversionException.java:     * @param value double value to convert
./fraction/FractionConversionException.java:     * @param maxIterations maximal number of iterations allowed
./fraction/FractionConversionException.java:     * @param value double value to convert
./fraction/FractionConversionException.java:     * @param p current numerator
./fraction/FractionConversionException.java:     * @param q current denominator
./fraction/ProperBigFractionFormat.java:     * @param format the custom format for the whole, numerator, and
./fraction/ProperBigFractionFormat.java:     * @param wholeFormat the custom format for the whole.
./fraction/ProperBigFractionFormat.java:     * @param numeratorFormat the custom format for the numerator.
./fraction/ProperBigFractionFormat.java:     * @param denominatorFormat the custom format for the denominator.
./fraction/ProperBigFractionFormat.java:     * @param fraction the object to format.
./fraction/ProperBigFractionFormat.java:     * @param toAppendTo where the text is to be appended
./fraction/ProperBigFractionFormat.java:     * @param pos On input: an alignment field, if desired. On output: the
./fraction/ProperBigFractionFormat.java:     * @param source the string to parse
./fraction/ProperBigFractionFormat.java:     * @param pos input/ouput parsing parameter.
./fraction/ProperBigFractionFormat.java:     * @param format The new whole format value.
./fraction/BigFractionFormat.java:     * @param format the custom format for both the numerator and denominator.
./fraction/BigFractionFormat.java:     * @param numeratorFormat the custom format for the numerator.
./fraction/BigFractionFormat.java:     * @param denominatorFormat the custom format for the denominator.
./fraction/BigFractionFormat.java:     * @param f BigFraction object to format
./fraction/BigFractionFormat.java:     * @param locale the specific locale used by the format.
./fraction/BigFractionFormat.java:     * @param locale the specific locale used by the format.
./fraction/BigFractionFormat.java:     * @param BigFraction the object to format.
./fraction/BigFractionFormat.java:     * @param toAppendTo where the text is to be appended
./fraction/BigFractionFormat.java:     * @param pos On input: an alignment field, if desired. On output: the
./fraction/BigFractionFormat.java:     * @param obj the object to format.
./fraction/BigFractionFormat.java:     * @param toAppendTo where the text is to be appended
./fraction/BigFractionFormat.java:     * @param pos On input: an alignment field, if desired. On output: the
./fraction/BigFractionFormat.java:     * @param source the string to parse
./fraction/BigFractionFormat.java:     * @param source the string to parse
./fraction/BigFractionFormat.java:     * @param pos input/output parsing parameter.
./fraction/BigFractionFormat.java:     * @param source the string to parse
./fraction/BigFractionFormat.java:     * @param pos input/output parsing parameter.
./fraction/ProperFractionFormat.java:     * @param format the custom format for the whole, numerator, and
./fraction/ProperFractionFormat.java:     * @param wholeFormat the custom format for the whole.
./fraction/ProperFractionFormat.java:     * @param numeratorFormat the custom format for the numerator.
./fraction/ProperFractionFormat.java:     * @param denominatorFormat the custom format for the denominator.
./fraction/ProperFractionFormat.java:     * @param fraction the object to format.
./fraction/ProperFractionFormat.java:     * @param toAppendTo where the text is to be appended
./fraction/ProperFractionFormat.java:     * @param pos On input: an alignment field, if desired. On output: the
./fraction/ProperFractionFormat.java:     * @param source the string to parse
./fraction/ProperFractionFormat.java:     * @param pos input/ouput parsing parameter.
./fraction/ProperFractionFormat.java:     * @param format The new whole format value.
./fraction/FractionFormat.java:     * @param format the custom format for both the numerator and denominator.
./fraction/FractionFormat.java:     * @param numeratorFormat the custom format for the numerator.
./fraction/FractionFormat.java:     * @param denominatorFormat the custom format for the denominator.
./fraction/FractionFormat.java:     * @param f Fraction object to format
./fraction/FractionFormat.java:     * @param locale the specific locale used by the format.
./fraction/FractionFormat.java:     * @param locale the specific locale used by the format.
./fraction/FractionFormat.java:     * @param fraction the object to format.
./fraction/FractionFormat.java:     * @param toAppendTo where the text is to be appended
./fraction/FractionFormat.java:     * @param pos On input: an alignment field, if desired. On output: the
./fraction/FractionFormat.java:     * @param obj the object to format.
./fraction/FractionFormat.java:     * @param toAppendTo where the text is to be appended
./fraction/FractionFormat.java:     * @param pos On input: an alignment field, if desired. On output: the
./fraction/FractionFormat.java:     * @param source the string to parse
./fraction/FractionFormat.java:     * @param source the string to parse
./fraction/FractionFormat.java:     * @param pos input/output parsing parameter.
./fraction/AbstractFormat.java:     * @param format the custom format for both the numerator and denominator.
./fraction/AbstractFormat.java:     * @param numeratorFormat the custom format for the numerator.
./fraction/AbstractFormat.java:     * @param denominatorFormat the custom format for the denominator.
./fraction/AbstractFormat.java:     * @param locale the specific locale used by the format.
./fraction/AbstractFormat.java:     * @param format the new denominator format value.
./fraction/AbstractFormat.java:     * @param format the new numerator format value.
./fraction/AbstractFormat.java:     * @param source the string to parse
./fraction/AbstractFormat.java:     * @param pos input/output parsing parameter.  On output, <code>pos</code>
./fraction/AbstractFormat.java:     * @param source the string to parse
./fraction/AbstractFormat.java:     * @param pos input/output parsing parameter.
./fraction/AbstractFormat.java:     * @param value the double value to format
./fraction/AbstractFormat.java:     * @param buffer StringBuffer to append to
./fraction/AbstractFormat.java:     * @param position On input: an alignment field, if desired. On output: the
./fraction/AbstractFormat.java:     * @param value the long value to format
./fraction/AbstractFormat.java:     * @param buffer StringBuffer to append to
./fraction/AbstractFormat.java:     * @param position On input: an alignment field, if desired. On output: the
./fraction/BigFraction.java:     * @param num
./fraction/BigFraction.java:     * @param num the numerator, must not be {@code null}.
./fraction/BigFraction.java:     * @param den the denominator, must not be {@code null}.
./fraction/BigFraction.java:     * @param value the double value to convert to a fraction.
./fraction/BigFraction.java:     * @param value
./fraction/BigFraction.java:     * @param epsilon
./fraction/BigFraction.java:     * @param maxIterations
./fraction/BigFraction.java:     * @param value
./fraction/BigFraction.java:     * @param epsilon
./fraction/BigFraction.java:     * @param maxDenominator
./fraction/BigFraction.java:     * @param maxIterations
./fraction/BigFraction.java:     * @param value
./fraction/BigFraction.java:     * @param maxDenominator
./fraction/BigFraction.java:     * @param num
./fraction/BigFraction.java:     * @param num
./fraction/BigFraction.java:     * @param den
./fraction/BigFraction.java:     * @param num
./fraction/BigFraction.java:     * @param num
./fraction/BigFraction.java:     * @param den
./fraction/BigFraction.java:     * @param numerator
./fraction/BigFraction.java:     * @param denominator
./fraction/BigFraction.java:     * @param bg
./fraction/BigFraction.java:     * @param i
./fraction/BigFraction.java:     * @param l
./fraction/BigFraction.java:     * @param fraction
./fraction/BigFraction.java:     * @param roundingMode
./fraction/BigFraction.java:     * @param scale
./fraction/BigFraction.java:     * @param roundingMode
./fraction/BigFraction.java:     * @param object
./fraction/BigFraction.java:     * @param bg the {@code BigInteger} to divide by, must not be {@code null}
./fraction/BigFraction.java:     * @param i the {@code int} to divide by
./fraction/BigFraction.java:     * @param l the {@code long} to divide by
./fraction/BigFraction.java:     * @param fraction Fraction to divide by, must not be {@code null}.
./fraction/BigFraction.java:     * @param other
./fraction/BigFraction.java:     * @param bg the {@code BigInteger} to multiply by.
./fraction/BigFraction.java:     * @param i
./fraction/BigFraction.java:     * @param l
./fraction/BigFraction.java:     * @param fraction Fraction to multiply by, must not be {@code null}.
./fraction/BigFraction.java:     * @param exponent
./fraction/BigFraction.java:     * @param exponent
./fraction/BigFraction.java:     * @param exponent
./fraction/BigFraction.java:     * @param exponent
./fraction/BigFraction.java:     * @param bg the {@link BigInteger} to subtract, cannot be {@code null}.
./fraction/BigFraction.java:     * @param i the {@code integer} to subtract.
./fraction/BigFraction.java:     * @param l the {@code long} to subtract.
./fraction/BigFraction.java:     * @param fraction {@link BigFraction} to subtract, must not be {@code null}.
./fraction/Fraction.java:     * @param value the double value to convert to a fraction.
./fraction/Fraction.java:     * @param value the double value to convert to a fraction.
./fraction/Fraction.java:     * @param epsilon maximum error allowed.  The resulting fraction is within
./fraction/Fraction.java:     * @param maxIterations maximum number of convergents
./fraction/Fraction.java:     * @param value the double value to convert to a fraction.
./fraction/Fraction.java:     * @param maxDenominator The maximum allowed value for denominator
./fraction/Fraction.java:     * @param value the double value to convert to a fraction.
./fraction/Fraction.java:     * @param epsilon maximum error allowed.  The resulting fraction is within
./fraction/Fraction.java:     * @param maxDenominator maximum denominator value allowed.
./fraction/Fraction.java:     * @param maxIterations maximum number of convergents
./fraction/Fraction.java:     * @param num the numerator.
./fraction/Fraction.java:     * @param num the numerator.
./fraction/Fraction.java:     * @param den the denominator.
./fraction/Fraction.java:     * @param object the object to compare to
./fraction/Fraction.java:     * @param other fraction to test for equality to this fraction
./fraction/Fraction.java:     * @param fraction  the fraction to add, must not be {@code null}
./fraction/Fraction.java:     * @param i the {@code integer} to add.
./fraction/Fraction.java:     * @param fraction  the fraction to subtract, must not be {@code null}
./fraction/Fraction.java:     * @param i the {@code integer} to subtract.
./fraction/Fraction.java:     * @param fraction the fraction to subtract, must not be {@code null}
./fraction/Fraction.java:     * @param isAdd true to add, false to subtract
./fraction/Fraction.java:     * @param fraction  the fraction to multiply by, must not be {@code null}
./fraction/Fraction.java:     * @param i the {@code integer} to multiply by.
./fraction/Fraction.java:     * @param fraction  the fraction to divide by, must not be {@code null}
./fraction/Fraction.java:     * @param i the {@code integer} to divide by.
./fraction/Fraction.java:     * @param numerator  the numerator, for example the three in 'three sevenths'
./fraction/Fraction.java:     * @param denominator  the denominator, for example the seven in 'three sevenths'
./genetics/FixedElapsedTime.java:     * @param maxTime maximum number of seconds generations are allowed to evolve
./genetics/FixedElapsedTime.java:     * @param maxTime maximum time generations are allowed to evolve
./genetics/FixedElapsedTime.java:     * @param unit {@link TimeUnit} of the maxTime argument
./genetics/FixedElapsedTime.java:     * @param population ignored (no impact on result)
./genetics/NPointCrossover.java: * @param <T> generic type of the {@link AbstractListChromosome}s for crossover
./genetics/NPointCrossover.java:     * @param crossoverPoints the number of crossover points
./genetics/NPointCrossover.java:     * @param first first parent (p1)
./genetics/NPointCrossover.java:     * @param second second parent (p2)
./genetics/NPointCrossover.java:     * @param first the first chromosome
./genetics/NPointCrossover.java:     * @param second the second chromosome
./genetics/OnePointCrossover.java: * @param <T> generic type of the {@link AbstractListChromosome}s for crossover
./genetics/OnePointCrossover.java:     * @param first first parent (p1)
./genetics/OnePointCrossover.java:     * @param second second parent (p2)
./genetics/OnePointCrossover.java:     * @param first the first chromosome.
./genetics/OnePointCrossover.java:     * @param second the second chromosome.
./genetics/ChromosomePair.java:     * @param c1 the first chromosome.
./genetics/ChromosomePair.java:     * @param c2 the second chromosome.
./genetics/BinaryMutation.java:     * @param original the original chromosome.
./genetics/SelectionPolicy.java:     * @param population the population from which the chromosomes are choosen.
./genetics/Population.java:     * @param chromosome the chromosome to add.
./genetics/StoppingCondition.java:     * @param population the population to test.
./genetics/RandomKey.java: * @param <T> type of the permuted objects
./genetics/RandomKey.java:     * @param representation list of [0,1] values representing the permutation
./genetics/RandomKey.java:     * @param representation array of [0,1] values representing the permutation
./genetics/RandomKey.java:     * @param <S> generic type of the sequence values
./genetics/RandomKey.java:     * @param sequence the unpermuted sequence
./genetics/RandomKey.java:     * @param representation representation of the permutation ([0,1] vector)
./genetics/RandomKey.java:     * @param sortedRepr sorted <code>representation</code>
./genetics/RandomKey.java:     * @param another chromosome to compare
./genetics/RandomKey.java:     * @param l length of the permutation
./genetics/RandomKey.java:     * @param l length of the permutation
./genetics/RandomKey.java:     * @param <S> type of the data
./genetics/RandomKey.java:     * @param data list of data determining the order
./genetics/RandomKey.java:     * @param comparator how the data will be compared
./genetics/RandomKey.java:     * @param <S> type of the data
./genetics/RandomKey.java:     * @param originalData the original, unpermuted data
./genetics/RandomKey.java:     * @param permutedData the data, somehow permuted
./genetics/RandomKey.java:     * @param l length of list to generate
./genetics/CrossoverPolicy.java:     * @param first the first chromosome.
./genetics/CrossoverPolicy.java:     * @param second the second chromosome.
./genetics/GeneticAlgorithm.java:     * @param crossoverPolicy The {@link CrossoverPolicy}
./genetics/GeneticAlgorithm.java:     * @param crossoverRate The crossover rate as a percentage (0-1 inclusive)
./genetics/GeneticAlgorithm.java:     * @param mutationPolicy The {@link MutationPolicy}
./genetics/GeneticAlgorithm.java:     * @param mutationRate The mutation rate as a percentage (0-1 inclusive)
./genetics/GeneticAlgorithm.java:     * @param selectionPolicy The {@link SelectionPolicy}
./genetics/GeneticAlgorithm.java:     * @param random random generator
./genetics/GeneticAlgorithm.java:     * @param initial the initial, seed population.
./genetics/GeneticAlgorithm.java:     * @param condition the stopping condition used to stop evolution.
./genetics/GeneticAlgorithm.java:     * @param current the current population.
./genetics/Chromosome.java:     * @param another another chromosome to compare
./genetics/Chromosome.java:     * @param another chromosome to compare
./genetics/Chromosome.java:     * @param population Population to search
./genetics/Chromosome.java:     * @param population Population to search
./genetics/AbstractListChromosome.java: * @param <T> type of the representation list
./genetics/AbstractListChromosome.java:     * @param representation inner representation of the chromosome
./genetics/AbstractListChromosome.java:     * @param representation inner representation of the chromosome
./genetics/AbstractListChromosome.java:     * @param representation inner representation of the chromosome
./genetics/AbstractListChromosome.java:     * @param copyList if {@code true}, the representation will be copied, otherwise it will be referenced.
./genetics/AbstractListChromosome.java:     * @param chromosomeRepresentation representation of the chromosome
./genetics/AbstractListChromosome.java:     * @param chromosomeRepresentation the inner array representation of the new chromosome.
./genetics/BinaryChromosome.java:     * @param representation list of {0,1} values representing the chromosome
./genetics/BinaryChromosome.java:     * @param representation array of {0,1} values representing the chromosome
./genetics/BinaryChromosome.java:     * @param length length of the array
./genetics/OrderedCrossover.java: * @param <T> generic type of the {@link AbstractListChromosome}s for crossover
./genetics/OrderedCrossover.java:     * @param first the first chromosome
./genetics/OrderedCrossover.java:     * @param second the second chromosome
./genetics/CycleCrossover.java: * @param <T> generic type of the {@link AbstractListChromosome}s for crossover
./genetics/CycleCrossover.java:     * @param randomStart whether the start index shall be chosen randomly or be set to 0
./genetics/CycleCrossover.java:     * @param first the first chromosome
./genetics/CycleCrossover.java:     * @param second the second chromosome
./genetics/PermutationChromosome.java: * @param <T> type of the permuted objects
./genetics/PermutationChromosome.java:     * @param sequence the unpermuted (original) sequence of objects
./genetics/ListPopulation.java:     * @param populationLimit maximal size of the population
./genetics/ListPopulation.java:     * @param chromosomes list of chromosomes to be added to the population
./genetics/ListPopulation.java:     * @param populationLimit maximal size of the population
./genetics/ListPopulation.java:     * @param chromosomes the list of chromosomes
./genetics/ListPopulation.java:     * @param chromosomeColl a {@link Collection} of chromosomes
./genetics/ListPopulation.java:     * @param chromosome the chromosome to add.
./genetics/ListPopulation.java:     * @param populationLimit maximal population size.
./genetics/FixedGenerationCount.java:     * @param maxGenerations number of generations to evolve
./genetics/FixedGenerationCount.java:     * @param population ignored (no impact on result)
./genetics/ElitisticListPopulation.java:     * @param chromosomes list of chromosomes in the population
./genetics/ElitisticListPopulation.java:     * @param populationLimit maximal size of the population
./genetics/ElitisticListPopulation.java:     * @param elitismRate how many best chromosomes will be directly transferred to the next generation [in %]
./genetics/ElitisticListPopulation.java:     * @param populationLimit maximal size of the population
./genetics/ElitisticListPopulation.java:     * @param elitismRate how many best chromosomes will be directly transferred to the next generation [in %]
./genetics/ElitisticListPopulation.java:     * @param elitismRate how many best chromosomes will be directly transferred to the next generation [in %]
./genetics/UniformCrossover.java: * @param <T> generic type of the {@link AbstractListChromosome}s for crossover
./genetics/UniformCrossover.java:     * @param ratio the mixing ratio
./genetics/UniformCrossover.java:     * @param first the first chromosome
./genetics/UniformCrossover.java:     * @param second the second chromosome
./genetics/TournamentSelection.java:     * @param arity how many chromosomes will be drawn to the tournament
./genetics/TournamentSelection.java:     * @param population the population from which the chromosomes are chosen.
./genetics/TournamentSelection.java:     * @param population the population from which the chromosomes are chosen.
./genetics/TournamentSelection.java:     * @param arity arity of the tournament
./genetics/InvalidRepresentationException.java:     * @param pattern Message pattern.
./genetics/InvalidRepresentationException.java:     * @param args Arguments.
./genetics/MutationPolicy.java:     * @param original the original chromosome.
./geometry/spherical/oned/ArcsSet.java:     * @param tolerance tolerance below which close sub-arcs are merged together
./geometry/spherical/oned/ArcsSet.java:     * @param lower lower bound of the arc
./geometry/spherical/oned/ArcsSet.java:     * @param upper upper bound of the arc
./geometry/spherical/oned/ArcsSet.java:     * @param tolerance tolerance below which close sub-arcs are merged together
./geometry/spherical/oned/ArcsSet.java:     * @param tree inside/outside BSP tree representing the arcs set
./geometry/spherical/oned/ArcsSet.java:     * @param tolerance tolerance below which close sub-arcs are merged together
./geometry/spherical/oned/ArcsSet.java:     * @param boundary collection of boundary elements
./geometry/spherical/oned/ArcsSet.java:     * @param tolerance tolerance below which close sub-arcs are merged together
./geometry/spherical/oned/ArcsSet.java:     * @param lower lower angular bound of the arc
./geometry/spherical/oned/ArcsSet.java:     * @param upper upper angular bound of the arc
./geometry/spherical/oned/ArcsSet.java:     * @param tolerance tolerance below which close sub-arcs are merged together
./geometry/spherical/oned/ArcsSet.java:     * @param root tree root
./geometry/spherical/oned/ArcsSet.java:     * @param root tree root
./geometry/spherical/oned/ArcsSet.java:     * @param node internal node to check
./geometry/spherical/oned/ArcsSet.java:     * @param node internal node to check
./geometry/spherical/oned/ArcsSet.java:     * @param node current internal node
./geometry/spherical/oned/ArcsSet.java:     * @param node current internal node
./geometry/spherical/oned/ArcsSet.java:     * @param node internal node at which the sub-tree starts
./geometry/spherical/oned/ArcsSet.java:     * @param node internal node at which the sub-tree starts
./geometry/spherical/oned/ArcsSet.java:     * @param node child node considered
./geometry/spherical/oned/ArcsSet.java:     * @param node child node considered
./geometry/spherical/oned/ArcsSet.java:     * @param node internal node at which the sub-tree starts
./geometry/spherical/oned/ArcsSet.java:     * @param node internal node at which the sub-tree starts
./geometry/spherical/oned/ArcsSet.java:     * @param node internal node to check
./geometry/spherical/oned/ArcsSet.java:     * @param node internal node to check
./geometry/spherical/oned/ArcsSet.java:     * @param arc arc to check instance against
./geometry/spherical/oned/ArcsSet.java:     * @param arc splitting arc
./geometry/spherical/oned/ArcsSet.java:     * @param tree BSP tree under construction
./geometry/spherical/oned/ArcsSet.java:     * @param alpha arc limit
./geometry/spherical/oned/ArcsSet.java:     * @param isStart if true, the limit is the start of an arc
./geometry/spherical/oned/ArcsSet.java:     * @param limits limit angles of the split part
./geometry/spherical/oned/ArcsSet.java:         * @param plus part of the arcs set on the plus side of the
./geometry/spherical/oned/ArcsSet.java:         * @param minus part of the arcs set on the minus side of the
./geometry/spherical/oned/LimitAngle.java:     * @param location location of the hyperplane
./geometry/spherical/oned/LimitAngle.java:     * @param direct if true, the plus side of the hyperplane is towards
./geometry/spherical/oned/LimitAngle.java:     * @param tolerance tolerance below which angles are considered identical
./geometry/spherical/oned/S1Point.java:     * @param alpha azimuthal angle \( \alpha \)
./geometry/spherical/oned/S1Point.java:     * @param alpha azimuthal angle \( \alpha \)
./geometry/spherical/oned/S1Point.java:     * @param vector corresponding vector
./geometry/spherical/oned/S1Point.java:     * @param p1 first vector
./geometry/spherical/oned/S1Point.java:     * @param p2 second vector
./geometry/spherical/oned/S1Point.java:     * @param other Object to test for equality to this
./geometry/spherical/oned/Arc.java:     * @param lower lower angular bound of the arc
./geometry/spherical/oned/Arc.java:     * @param upper upper angular bound of the arc
./geometry/spherical/oned/Arc.java:     * @param tolerance tolerance below which angles are considered identical
./geometry/spherical/oned/Arc.java:     * @param point point to check
./geometry/spherical/oned/SubLimitAngle.java:     * @param hyperplane underlying hyperplane
./geometry/spherical/oned/SubLimitAngle.java:     * @param remainingRegion remaining region of the hyperplane
./geometry/spherical/twod/PropertiesComputer.java:     * @param tolerance below which points are consider to be identical
./geometry/spherical/twod/PropertiesComputer.java:     * @param start start vertex of the convex cell boundary
./geometry/spherical/twod/PropertiesComputer.java:     * @param start start vertex of the convex cell boundary
./geometry/spherical/twod/Vertex.java:     * @param location vertex location
./geometry/spherical/twod/Vertex.java:     * @param circle circle to bind with this vertex
./geometry/spherical/twod/Vertex.java:     * @param vertex other vertex to check instance against
./geometry/spherical/twod/Vertex.java:     * @param incoming incoming edge
./geometry/spherical/twod/Vertex.java:     * @param outgoing outgoing edge
./geometry/spherical/twod/EdgesBuilder.java:     * @param root tree root
./geometry/spherical/twod/EdgesBuilder.java:     * @param tolerance below which points are consider to be identical
./geometry/spherical/twod/EdgesBuilder.java:     * @param sub boundary facet
./geometry/spherical/twod/EdgesBuilder.java:     * @param reversed if true, the facet has the inside on its plus side
./geometry/spherical/twod/EdgesBuilder.java:     * @param node node to which the edge belongs
./geometry/spherical/twod/EdgesBuilder.java:     * @param previous edge to be continued
./geometry/spherical/twod/Circle.java:     * @param pole circle pole
./geometry/spherical/twod/Circle.java:     * @param tolerance tolerance below which close sub-arcs are merged together
./geometry/spherical/twod/Circle.java:     * @param first first point contained in the great circle
./geometry/spherical/twod/Circle.java:     * @param second second point contained in the great circle
./geometry/spherical/twod/Circle.java:     * @param tolerance tolerance below which close sub-arcs are merged together
./geometry/spherical/twod/Circle.java:     * @param pole circle pole
./geometry/spherical/twod/Circle.java:     * @param x first axis in the equator plane
./geometry/spherical/twod/Circle.java:     * @param y second axis in the equator plane
./geometry/spherical/twod/Circle.java:     * @param tolerance tolerance below which close sub-arcs are merged together
./geometry/spherical/twod/Circle.java:     * @param circle circle to copy
./geometry/spherical/twod/Circle.java:     * @param newPole circle pole
./geometry/spherical/twod/Circle.java:     * @param direction direction for which phase is requested
./geometry/spherical/twod/Circle.java:     * @param alpha phase around the circle
./geometry/spherical/twod/Circle.java:     * @param other other circle
./geometry/spherical/twod/Circle.java:     * @param direction direction to check
./geometry/spherical/twod/Circle.java:     * @param rotation rotation to use
./geometry/spherical/twod/Circle.java:         * @param rotation rotation to use
./geometry/spherical/twod/Edge.java:     * @param start start vertex
./geometry/spherical/twod/Edge.java:     * @param end end vertex
./geometry/spherical/twod/Edge.java:     * @param length length of the arc (it can be greater than \( \pi \))
./geometry/spherical/twod/Edge.java:     * @param circle circle supporting the edge
./geometry/spherical/twod/Edge.java:     * @param alpha angle along the edge, counted from {@link #getStart()}
./geometry/spherical/twod/Edge.java:     * @param next edge following the instance
./geometry/spherical/twod/Edge.java:     * @param splitCircle circle splitting the edge in several parts
./geometry/spherical/twod/Edge.java:     * @param outsideList list where to put parts that are outside of the split circle
./geometry/spherical/twod/Edge.java:     * @param insideList list where to put parts that are inside the split circle
./geometry/spherical/twod/Edge.java:     * @param subStart start of the sub-edge
./geometry/spherical/twod/Edge.java:     * @param subEnd end of the sub-edge
./geometry/spherical/twod/Edge.java:     * @param subLength length of the sub-edge
./geometry/spherical/twod/Edge.java:     * @param splitCircle circle splitting the edge in several parts
./geometry/spherical/twod/Edge.java:     * @param list list where to put the sub-edge
./geometry/spherical/twod/S2Point.java:     * @param theta azimuthal angle \( \theta \) in the x-y plane
./geometry/spherical/twod/S2Point.java:     * @param phi polar angle \( \varphi \)
./geometry/spherical/twod/S2Point.java:     * @param vector 3D vector
./geometry/spherical/twod/S2Point.java:     * @param theta azimuthal angle \( \theta \) in the x-y plane
./geometry/spherical/twod/S2Point.java:     * @param phi polar angle \( \varphi \)
./geometry/spherical/twod/S2Point.java:     * @param vector corresponding vector
./geometry/spherical/twod/S2Point.java:     * @param theta azimuthal angle \( \theta \) in the x-y plane
./geometry/spherical/twod/S2Point.java:     * @param phi polar angle \( \varphi \)
./geometry/spherical/twod/S2Point.java:     * @param p1 first vector
./geometry/spherical/twod/S2Point.java:     * @param p2 second vector
./geometry/spherical/twod/S2Point.java:     * @param other Object to test for equality to this
./geometry/spherical/twod/SphericalPolygonsSet.java:     * @param tolerance below which points are consider to be identical
./geometry/spherical/twod/SphericalPolygonsSet.java:     * @param pole pole of the hemisphere (the pole is in the inside half)
./geometry/spherical/twod/SphericalPolygonsSet.java:     * @param tolerance below which points are consider to be identical
./geometry/spherical/twod/SphericalPolygonsSet.java:     * @param center center of the polygon (the center is in the inside half)
./geometry/spherical/twod/SphericalPolygonsSet.java:     * @param meridian point defining the reference meridian for first polygon vertex
./geometry/spherical/twod/SphericalPolygonsSet.java:     * @param outsideRadius distance of the vertices to the center
./geometry/spherical/twod/SphericalPolygonsSet.java:     * @param n number of sides of the polygon
./geometry/spherical/twod/SphericalPolygonsSet.java:     * @param tolerance below which points are consider to be identical
./geometry/spherical/twod/SphericalPolygonsSet.java:     * @param tree inside/outside BSP tree representing the region
./geometry/spherical/twod/SphericalPolygonsSet.java:     * @param tolerance below which points are consider to be identical
./geometry/spherical/twod/SphericalPolygonsSet.java:     * @param boundary collection of boundary elements, as a
./geometry/spherical/twod/SphericalPolygonsSet.java:     * @param tolerance below which points are consider to be identical
./geometry/spherical/twod/SphericalPolygonsSet.java:     * @param hyperplaneThickness tolerance below which points are considered to
./geometry/spherical/twod/SphericalPolygonsSet.java:     * @param vertices vertices of the simple loop boundary
./geometry/spherical/twod/SphericalPolygonsSet.java:     * @param center center of the polygon (the center is in the inside half)
./geometry/spherical/twod/SphericalPolygonsSet.java:     * @param meridian point defining the reference meridian for first polygon vertex
./geometry/spherical/twod/SphericalPolygonsSet.java:     * @param outsideRadius distance of the vertices to the center
./geometry/spherical/twod/SphericalPolygonsSet.java:     * @param n number of sides of the polygon
./geometry/spherical/twod/SphericalPolygonsSet.java:     * @param hyperplaneThickness tolerance below which points are consider to
./geometry/spherical/twod/SphericalPolygonsSet.java:     * @param vertices vertices of the simple loop boundary
./geometry/spherical/twod/SphericalPolygonsSet.java:     * @param hyperplaneThickness tolerance below which points are considered to
./geometry/spherical/twod/SphericalPolygonsSet.java:     * @param node current tree node (it is a leaf node at the beginning
./geometry/spherical/twod/SphericalPolygonsSet.java:     * @param edges list of edges to insert in the cell defined by this node
./geometry/spherical/twod/SubCircle.java:     * @param hyperplane underlying hyperplane
./geometry/spherical/twod/SubCircle.java:     * @param remainingRegion remaining region of the hyperplane
./geometry/VectorFormat.java: * @param <S> Type of the space.
./geometry/VectorFormat.java:     * @param format the custom format for components.
./geometry/VectorFormat.java:     * @param prefix prefix to use instead of the default "{"
./geometry/VectorFormat.java:     * @param suffix suffix to use instead of the default "}"
./geometry/VectorFormat.java:     * @param separator separator to use instead of the default "; "
./geometry/VectorFormat.java:     * @param prefix prefix to use instead of the default "{"
./geometry/VectorFormat.java:     * @param suffix suffix to use instead of the default "}"
./geometry/VectorFormat.java:     * @param separator separator to use instead of the default "; "
./geometry/VectorFormat.java:     * @param format the custom format for components.
./geometry/VectorFormat.java:     * @param vector the object to format.
./geometry/VectorFormat.java:     * @param vector the object to format.
./geometry/VectorFormat.java:     * @param toAppendTo where the text is to be appended
./geometry/VectorFormat.java:     * @param pos On input: an alignment field, if desired. On output: the
./geometry/VectorFormat.java:     * @param toAppendTo where the text is to be appended
./geometry/VectorFormat.java:     * @param pos On input: an alignment field, if desired. On output: the
./geometry/VectorFormat.java:     * @param coordinates coordinates of the object to format.
./geometry/VectorFormat.java:     * @param source the string to parse
./geometry/VectorFormat.java:     * @param source the string to parse
./geometry/VectorFormat.java:     * @param pos input/output parsing parameter.
./geometry/VectorFormat.java:     * @param dimension dimension of the space
./geometry/VectorFormat.java:     * @param source the string to parse
./geometry/VectorFormat.java:     * @param pos input/output parsing parameter.
./geometry/enclosing/EnclosingBall.java: * @param <S> Space type.
./geometry/enclosing/EnclosingBall.java: * @param <P> Point type.
./geometry/enclosing/EnclosingBall.java:     * @param center center of the ball
./geometry/enclosing/EnclosingBall.java:     * @param radius radius of the ball
./geometry/enclosing/EnclosingBall.java:     * @param support support points used to define the ball
./geometry/enclosing/EnclosingBall.java:     * @param point point to test
./geometry/enclosing/EnclosingBall.java:     * @param point point to test
./geometry/enclosing/EnclosingBall.java:     * @param margin margin to consider
./geometry/enclosing/Encloser.java: * @param <S> Space type.
./geometry/enclosing/Encloser.java: * @param <P> Point type.
./geometry/enclosing/Encloser.java:     * @param points points to enclose
./geometry/enclosing/WelzlEncloser.java: * @param <S> Space type.
./geometry/enclosing/WelzlEncloser.java: * @param <P> Point type.
./geometry/enclosing/WelzlEncloser.java:     * @param tolerance below which points are consider to be identical
./geometry/enclosing/WelzlEncloser.java:     * @param generator generator for balls on support
./geometry/enclosing/WelzlEncloser.java:     * @param points points to be enclosed
./geometry/enclosing/WelzlEncloser.java:     * @param extreme subset of extreme points
./geometry/enclosing/WelzlEncloser.java:     * @param nbExtreme number of extreme points to consider
./geometry/enclosing/WelzlEncloser.java:     * @param support points that must belong to the ball support
./geometry/enclosing/WelzlEncloser.java:     * @param points points to be enclosed
./geometry/enclosing/WelzlEncloser.java:     * @param ball current ball
./geometry/enclosing/SupportBallGenerator.java: * @param <S> Space type.
./geometry/enclosing/SupportBallGenerator.java: * @param <P> Point type.
./geometry/enclosing/SupportBallGenerator.java:     * @param support support points (may be empty)
./geometry/Vector.java: * @param <S> Type of the space.
./geometry/Vector.java:     * @param v vector to add
./geometry/Vector.java:     * @param factor scale factor to apply to v before adding it
./geometry/Vector.java:     * @param v vector to add
./geometry/Vector.java:     * @param v vector to subtract
./geometry/Vector.java:     * @param factor scale factor to apply to v before subtracting it
./geometry/Vector.java:     * @param v vector to subtract
./geometry/Vector.java:     * @param a scalar
./geometry/Vector.java:     * @param v second vector
./geometry/Vector.java:     * @param v second vector
./geometry/Vector.java:     * @param v second vector
./geometry/Vector.java:     * @param v second vector
./geometry/Vector.java:     * @param v second vector
./geometry/Vector.java:     * @param format the custom format for components
./geometry/hull/ConvexHull.java: * @param <S> Space type.
./geometry/hull/ConvexHull.java: * @param <P> Point type.
./geometry/hull/ConvexHullGenerator.java: * @param <S> Type of the {@link Space}
./geometry/hull/ConvexHullGenerator.java: * @param <P> Type of the {@link Point}
./geometry/hull/ConvexHullGenerator.java:     * @param points the set of input points
./geometry/euclidean/oned/Vector1DFormat.java:     * @param format the custom format for components.
./geometry/euclidean/oned/Vector1DFormat.java:     * @param prefix prefix to use instead of the default "{"
./geometry/euclidean/oned/Vector1DFormat.java:     * @param suffix suffix to use instead of the default "}"
./geometry/euclidean/oned/Vector1DFormat.java:     * @param prefix prefix to use instead of the default "{"
./geometry/euclidean/oned/Vector1DFormat.java:     * @param suffix suffix to use instead of the default "}"
./geometry/euclidean/oned/Vector1DFormat.java:     * @param format the custom format for components.
./geometry/euclidean/oned/Vector1DFormat.java:     * @param locale the specific locale used by the format.
./geometry/euclidean/oned/IntervalsSet.java:     * @param tolerance tolerance below which points are considered identical.
./geometry/euclidean/oned/IntervalsSet.java:     * @param lower lower bound of the interval, must be lesser or equal
./geometry/euclidean/oned/IntervalsSet.java:     * @param upper upper bound of the interval, must be greater or equal
./geometry/euclidean/oned/IntervalsSet.java:     * @param tolerance tolerance below which points are considered identical.
./geometry/euclidean/oned/IntervalsSet.java:     * @param tree inside/outside BSP tree representing the intervals set
./geometry/euclidean/oned/IntervalsSet.java:     * @param tolerance tolerance below which points are considered identical.
./geometry/euclidean/oned/IntervalsSet.java:     * @param boundary collection of boundary elements
./geometry/euclidean/oned/IntervalsSet.java:     * @param tolerance tolerance below which points are considered identical.
./geometry/euclidean/oned/IntervalsSet.java:     * @param lower lower bound of the interval, must be lesser or equal
./geometry/euclidean/oned/IntervalsSet.java:     * @param upper upper bound of the interval, must be greater or equal
./geometry/euclidean/oned/IntervalsSet.java:     * @param tree inside/outside BSP tree representing the intervals set
./geometry/euclidean/oned/IntervalsSet.java:     * @param boundary collection of boundary elements
./geometry/euclidean/oned/IntervalsSet.java:     * @param lower lower bound of the interval, must be lesser or equal
./geometry/euclidean/oned/IntervalsSet.java:     * @param upper upper bound of the interval, must be greater or equal
./geometry/euclidean/oned/IntervalsSet.java:     * @param tolerance tolerance below which points are considered identical.
./geometry/euclidean/oned/IntervalsSet.java:     * @param x abscissa of the point
./geometry/euclidean/oned/IntervalsSet.java:     * @param root tree root
./geometry/euclidean/oned/IntervalsSet.java:     * @param node internal node to check
./geometry/euclidean/oned/IntervalsSet.java:     * @param node internal node to check
./geometry/euclidean/oned/IntervalsSet.java:     * @param node current internal node
./geometry/euclidean/oned/IntervalsSet.java:     * @param node current internal node
./geometry/euclidean/oned/IntervalsSet.java:     * @param node internal node at which the sub-tree starts
./geometry/euclidean/oned/IntervalsSet.java:     * @param node internal node at which the sub-tree starts
./geometry/euclidean/oned/IntervalsSet.java:     * @param node child node considered
./geometry/euclidean/oned/IntervalsSet.java:     * @param node child node considered
./geometry/euclidean/oned/IntervalsSet.java:     * @param node internal node at which the sub-tree starts
./geometry/euclidean/oned/IntervalsSet.java:     * @param node internal node at which the sub-tree starts
./geometry/euclidean/oned/IntervalsSet.java:     * @param node internal node to check
./geometry/euclidean/oned/IntervalsSet.java:     * @param node internal node to check
./geometry/euclidean/oned/OrientedPoint.java:     * @param location location of the hyperplane
./geometry/euclidean/oned/OrientedPoint.java:     * @param direct if true, the plus side of the hyperplane is towards
./geometry/euclidean/oned/OrientedPoint.java:     * @param tolerance tolerance below which points are considered to belong to the hyperplane
./geometry/euclidean/oned/OrientedPoint.java:     * @param location location of the hyperplane
./geometry/euclidean/oned/OrientedPoint.java:     * @param direct if true, the plus side of the hyperplane is towards
./geometry/euclidean/oned/OrientedPoint.java:     * @param vector vector to check
./geometry/euclidean/oned/Vector1D.java:     * @param x abscissa
./geometry/euclidean/oned/Vector1D.java:     * @param a scale factor
./geometry/euclidean/oned/Vector1D.java:     * @param u base (unscaled) vector
./geometry/euclidean/oned/Vector1D.java:     * @param a1 first scale factor
./geometry/euclidean/oned/Vector1D.java:     * @param u1 first base (unscaled) vector
./geometry/euclidean/oned/Vector1D.java:     * @param a2 second scale factor
./geometry/euclidean/oned/Vector1D.java:     * @param u2 second base (unscaled) vector
./geometry/euclidean/oned/Vector1D.java:     * @param a1 first scale factor
./geometry/euclidean/oned/Vector1D.java:     * @param u1 first base (unscaled) vector
./geometry/euclidean/oned/Vector1D.java:     * @param a2 second scale factor
./geometry/euclidean/oned/Vector1D.java:     * @param u2 second base (unscaled) vector
./geometry/euclidean/oned/Vector1D.java:     * @param a3 third scale factor
./geometry/euclidean/oned/Vector1D.java:     * @param u3 third base (unscaled) vector
./geometry/euclidean/oned/Vector1D.java:     * @param a1 first scale factor
./geometry/euclidean/oned/Vector1D.java:     * @param u1 first base (unscaled) vector
./geometry/euclidean/oned/Vector1D.java:     * @param a2 second scale factor
./geometry/euclidean/oned/Vector1D.java:     * @param u2 second base (unscaled) vector
./geometry/euclidean/oned/Vector1D.java:     * @param a3 third scale factor
./geometry/euclidean/oned/Vector1D.java:     * @param u3 third base (unscaled) vector
./geometry/euclidean/oned/Vector1D.java:     * @param a4 fourth scale factor
./geometry/euclidean/oned/Vector1D.java:     * @param u4 fourth base (unscaled) vector
./geometry/euclidean/oned/Vector1D.java:     * @param p1 first vector
./geometry/euclidean/oned/Vector1D.java:     * @param p2 second vector
./geometry/euclidean/oned/Vector1D.java:     * @param p1 first vector
./geometry/euclidean/oned/Vector1D.java:     * @param p2 second vector
./geometry/euclidean/oned/Vector1D.java:     * @param p1 first vector
./geometry/euclidean/oned/Vector1D.java:     * @param p2 second vector
./geometry/euclidean/oned/Vector1D.java:     * @param other Object to test for equality to this
./geometry/euclidean/oned/Interval.java:     * @param lower lower bound of the interval
./geometry/euclidean/oned/Interval.java:     * @param upper upper bound of the interval
./geometry/euclidean/oned/Interval.java:     * @param point point to check
./geometry/euclidean/oned/Interval.java:     * @param tolerance tolerance below which points are considered to
./geometry/euclidean/oned/SubOrientedPoint.java:     * @param hyperplane underlying hyperplane
./geometry/euclidean/oned/SubOrientedPoint.java:     * @param remainingRegion remaining region of the hyperplane
./geometry/euclidean/twod/Vector2DFormat.java:     * @param format the custom format for components.
./geometry/euclidean/twod/Vector2DFormat.java:     * @param prefix prefix to use instead of the default "{"
./geometry/euclidean/twod/Vector2DFormat.java:     * @param suffix suffix to use instead of the default "}"
./geometry/euclidean/twod/Vector2DFormat.java:     * @param separator separator to use instead of the default "; "
./geometry/euclidean/twod/Vector2DFormat.java:     * @param prefix prefix to use instead of the default "{"
./geometry/euclidean/twod/Vector2DFormat.java:     * @param suffix suffix to use instead of the default "}"
./geometry/euclidean/twod/Vector2DFormat.java:     * @param separator separator to use instead of the default "; "
./geometry/euclidean/twod/Vector2DFormat.java:     * @param format the custom format for components.
./geometry/euclidean/twod/Vector2DFormat.java:     * @param locale the specific locale used by the format.
./geometry/euclidean/twod/Line.java:     * @param p1 first point
./geometry/euclidean/twod/Line.java:     * @param p2 second point
./geometry/euclidean/twod/Line.java:     * @param tolerance tolerance below which points are considered identical
./geometry/euclidean/twod/Line.java:     * @param p point belonging to the line
./geometry/euclidean/twod/Line.java:     * @param angle angle of the line with respect to abscissa axis
./geometry/euclidean/twod/Line.java:     * @param tolerance tolerance below which points are considered identical
./geometry/euclidean/twod/Line.java:     * @param angle angle of the line with respect to abscissa axis
./geometry/euclidean/twod/Line.java:     * @param cos cosine of the angle
./geometry/euclidean/twod/Line.java:     * @param sin sine of the angle
./geometry/euclidean/twod/Line.java:     * @param originOffset offset of the origin
./geometry/euclidean/twod/Line.java:     * @param tolerance tolerance below which points are considered identical
./geometry/euclidean/twod/Line.java:     * @param p1 first point
./geometry/euclidean/twod/Line.java:     * @param p2 second point
./geometry/euclidean/twod/Line.java:     * @param p point belonging to the line
./geometry/euclidean/twod/Line.java:     * @param angle angle of the line with respect to abscissa axis
./geometry/euclidean/twod/Line.java:     * @param line line to copy
./geometry/euclidean/twod/Line.java:     * @param p1 first point
./geometry/euclidean/twod/Line.java:     * @param p2 second point
./geometry/euclidean/twod/Line.java:     * @param p point belonging to the line
./geometry/euclidean/twod/Line.java:     * @param alpha angle of the line with respect to abscissa axis
./geometry/euclidean/twod/Line.java:     * @param vector n-dimension point of the space
./geometry/euclidean/twod/Line.java:     * @param vector (n-1)-dimension point of the sub-space
./geometry/euclidean/twod/Line.java:     * @param other other line
./geometry/euclidean/twod/Line.java:     * @param line line to check
./geometry/euclidean/twod/Line.java:     * @param vector vector to check
./geometry/euclidean/twod/Line.java:     * @param abscissa desired abscissa for the point
./geometry/euclidean/twod/Line.java:     * @param offset desired offset for the point
./geometry/euclidean/twod/Line.java:     * @param p point to check
./geometry/euclidean/twod/Line.java:     * @param p to check
./geometry/euclidean/twod/Line.java:     * @param line other line to check
./geometry/euclidean/twod/Line.java:     * @param p point by which the line should pass
./geometry/euclidean/twod/Line.java:     * @param angle new angle of the line with respect to the abscissa axis
./geometry/euclidean/twod/Line.java:     * @param offset offset of the origin
./geometry/euclidean/twod/Line.java:     * @param transform affine transform to embed (must be inversible
./geometry/euclidean/twod/Line.java:     * @param cXX transform factor between input abscissa and output abscissa
./geometry/euclidean/twod/Line.java:     * @param cYX transform factor between input abscissa and output ordinate
./geometry/euclidean/twod/Line.java:     * @param cXY transform factor between input ordinate and output abscissa
./geometry/euclidean/twod/Line.java:     * @param cYY transform factor between input ordinate and output ordinate
./geometry/euclidean/twod/Line.java:     * @param cX1 transform addendum for output abscissa
./geometry/euclidean/twod/Line.java:     * @param cY1 transform addendum for output ordinate
./geometry/euclidean/twod/Line.java:         * @param cXX transform factor between input abscissa and output abscissa
./geometry/euclidean/twod/Line.java:         * @param cYX transform factor between input abscissa and output ordinate
./geometry/euclidean/twod/Line.java:         * @param cXY transform factor between input ordinate and output abscissa
./geometry/euclidean/twod/Line.java:         * @param cYY transform factor between input ordinate and output ordinate
./geometry/euclidean/twod/Line.java:         * @param cX1 transform addendum for output abscissa
./geometry/euclidean/twod/Line.java:         * @param cY1 transform addendum for output ordinate
./geometry/euclidean/twod/SubLine.java:     * @param hyperplane underlying hyperplane
./geometry/euclidean/twod/SubLine.java:     * @param remainingRegion remaining region of the hyperplane
./geometry/euclidean/twod/SubLine.java:     * @param start start point
./geometry/euclidean/twod/SubLine.java:     * @param end end point
./geometry/euclidean/twod/SubLine.java:     * @param tolerance tolerance below which points are considered identical
./geometry/euclidean/twod/SubLine.java:     * @param start start point
./geometry/euclidean/twod/SubLine.java:     * @param end end point
./geometry/euclidean/twod/SubLine.java:     * @param segment single segment forming the sub-line
./geometry/euclidean/twod/SubLine.java:     * @param subLine other sub-line which may intersect instance
./geometry/euclidean/twod/SubLine.java:     * @param includeEndPoints if true, endpoints are considered to belong to
./geometry/euclidean/twod/SubLine.java:     * @param start start point
./geometry/euclidean/twod/SubLine.java:     * @param end end point
./geometry/euclidean/twod/SubLine.java:     * @param tolerance tolerance below which points are considered identical
./geometry/euclidean/twod/Vector2D.java:     * @param x abscissa
./geometry/euclidean/twod/Vector2D.java:     * @param y ordinate
./geometry/euclidean/twod/Vector2D.java:     * @param v coordinates array
./geometry/euclidean/twod/Vector2D.java:     * @param a scale factor
./geometry/euclidean/twod/Vector2D.java:     * @param u base (unscaled) vector
./geometry/euclidean/twod/Vector2D.java:     * @param a1 first scale factor
./geometry/euclidean/twod/Vector2D.java:     * @param u1 first base (unscaled) vector
./geometry/euclidean/twod/Vector2D.java:     * @param a2 second scale factor
./geometry/euclidean/twod/Vector2D.java:     * @param u2 second base (unscaled) vector
./geometry/euclidean/twod/Vector2D.java:     * @param a1 first scale factor
./geometry/euclidean/twod/Vector2D.java:     * @param u1 first base (unscaled) vector
./geometry/euclidean/twod/Vector2D.java:     * @param a2 second scale factor
./geometry/euclidean/twod/Vector2D.java:     * @param u2 second base (unscaled) vector
./geometry/euclidean/twod/Vector2D.java:     * @param a3 third scale factor
./geometry/euclidean/twod/Vector2D.java:     * @param u3 third base (unscaled) vector
./geometry/euclidean/twod/Vector2D.java:     * @param a1 first scale factor
./geometry/euclidean/twod/Vector2D.java:     * @param u1 first base (unscaled) vector
./geometry/euclidean/twod/Vector2D.java:     * @param a2 second scale factor
./geometry/euclidean/twod/Vector2D.java:     * @param u2 second base (unscaled) vector
./geometry/euclidean/twod/Vector2D.java:     * @param a3 third scale factor
./geometry/euclidean/twod/Vector2D.java:     * @param u3 third base (unscaled) vector
./geometry/euclidean/twod/Vector2D.java:     * @param a4 fourth scale factor
./geometry/euclidean/twod/Vector2D.java:     * @param u4 fourth base (unscaled) vector
./geometry/euclidean/twod/Vector2D.java:     * @param v1 first vector
./geometry/euclidean/twod/Vector2D.java:     * @param v2 second vector
./geometry/euclidean/twod/Vector2D.java:     * @param p1 first point of the line
./geometry/euclidean/twod/Vector2D.java:     * @param p2 second point of the line
./geometry/euclidean/twod/Vector2D.java:     * @param p1 first vector
./geometry/euclidean/twod/Vector2D.java:     * @param p2 second vector
./geometry/euclidean/twod/Vector2D.java:     * @param p1 first vector
./geometry/euclidean/twod/Vector2D.java:     * @param p2 second vector
./geometry/euclidean/twod/Vector2D.java:     * @param p1 first vector
./geometry/euclidean/twod/Vector2D.java:     * @param p2 second vector
./geometry/euclidean/twod/Vector2D.java:     * @param other Object to test for equality to this
./geometry/euclidean/twod/hull/AbstractConvexHullGenerator2D.java:     * @param includeCollinearPoints indicates if collinear points on the hull shall be
./geometry/euclidean/twod/hull/AbstractConvexHullGenerator2D.java:     * @param includeCollinearPoints indicates if collinear points on the hull shall be
./geometry/euclidean/twod/hull/AbstractConvexHullGenerator2D.java:     * @param tolerance tolerance below which points are considered identical
./geometry/euclidean/twod/hull/AbstractConvexHullGenerator2D.java:     * @param points the set of input points
./geometry/euclidean/twod/hull/ConvexHull2D.java:     * @param vertices the vertices of the convex hull, must be ordered
./geometry/euclidean/twod/hull/ConvexHull2D.java:     * @param tolerance tolerance below which points are considered identical
./geometry/euclidean/twod/hull/ConvexHull2D.java:     * @param hullVertices the hull vertices
./geometry/euclidean/twod/hull/AklToussaintHeuristic.java:     * @param points the original point set
./geometry/euclidean/twod/hull/AklToussaintHeuristic.java:     * @param points the respective points with min/max x/y coordinate
./geometry/euclidean/twod/hull/AklToussaintHeuristic.java:     * @param point the point to check
./geometry/euclidean/twod/hull/AklToussaintHeuristic.java:     * @param quadrilateralPoints the convex quadrilateral, represented by 4 points
./geometry/euclidean/twod/hull/MonotoneChain.java:     * @param includeCollinearPoints whether collinear points shall be added as hull vertices
./geometry/euclidean/twod/hull/MonotoneChain.java:     * @param includeCollinearPoints whether collinear points shall be added as hull vertices
./geometry/euclidean/twod/hull/MonotoneChain.java:     * @param tolerance tolerance below which points are considered identical
./geometry/euclidean/twod/hull/MonotoneChain.java:     * @param point the current point
./geometry/euclidean/twod/hull/MonotoneChain.java:     * @param hull the partial hull
./geometry/euclidean/twod/Segment.java:     * @param start start point of the segment
./geometry/euclidean/twod/Segment.java:     * @param end end point of the segment
./geometry/euclidean/twod/Segment.java:     * @param line line containing the segment
./geometry/euclidean/twod/Segment.java:     * @param p to check
./geometry/euclidean/twod/PolygonsSet.java:     * @param tolerance tolerance below which points are considered identical
./geometry/euclidean/twod/PolygonsSet.java:     * @param tree inside/outside BSP tree representing the region
./geometry/euclidean/twod/PolygonsSet.java:     * @param tolerance tolerance below which points are considered identical
./geometry/euclidean/twod/PolygonsSet.java:     * @param boundary collection of boundary elements, as a
./geometry/euclidean/twod/PolygonsSet.java:     * @param tolerance tolerance below which points are considered identical
./geometry/euclidean/twod/PolygonsSet.java:     * @param xMin low bound along the x direction
./geometry/euclidean/twod/PolygonsSet.java:     * @param xMax high bound along the x direction
./geometry/euclidean/twod/PolygonsSet.java:     * @param yMin low bound along the y direction
./geometry/euclidean/twod/PolygonsSet.java:     * @param yMax high bound along the y direction
./geometry/euclidean/twod/PolygonsSet.java:     * @param tolerance tolerance below which points are considered identical
./geometry/euclidean/twod/PolygonsSet.java:     * @param hyperplaneThickness tolerance below which points are considered to
./geometry/euclidean/twod/PolygonsSet.java:     * @param vertices vertices of the simple loop boundary
./geometry/euclidean/twod/PolygonsSet.java:     * @param tree inside/outside BSP tree representing the region
./geometry/euclidean/twod/PolygonsSet.java:     * @param boundary collection of boundary elements, as a
./geometry/euclidean/twod/PolygonsSet.java:     * @param xMin low bound along the x direction
./geometry/euclidean/twod/PolygonsSet.java:     * @param xMax high bound along the x direction
./geometry/euclidean/twod/PolygonsSet.java:     * @param yMin low bound along the y direction
./geometry/euclidean/twod/PolygonsSet.java:     * @param yMax high bound along the y direction
./geometry/euclidean/twod/PolygonsSet.java:     * @param xMin low bound along the x direction
./geometry/euclidean/twod/PolygonsSet.java:     * @param xMax high bound along the x direction
./geometry/euclidean/twod/PolygonsSet.java:     * @param yMin low bound along the y direction
./geometry/euclidean/twod/PolygonsSet.java:     * @param yMax high bound along the y direction
./geometry/euclidean/twod/PolygonsSet.java:     * @param tolerance tolerance below which points are considered identical
./geometry/euclidean/twod/PolygonsSet.java:     * @param hyperplaneThickness tolerance below which points are consider to
./geometry/euclidean/twod/PolygonsSet.java:     * @param vertices vertices of the simple loop boundary
./geometry/euclidean/twod/PolygonsSet.java:     * @param hyperplaneThickness tolerance below which points are consider to
./geometry/euclidean/twod/PolygonsSet.java:     * @param node current tree node (it is a leaf node at the beginning
./geometry/euclidean/twod/PolygonsSet.java:     * @param edges list of edges to insert in the cell defined by this node
./geometry/euclidean/twod/PolygonsSet.java:         * @param location vertex location
./geometry/euclidean/twod/PolygonsSet.java:         * @param line line to bind with this vertex
./geometry/euclidean/twod/PolygonsSet.java:         * @param vertex other vertex to check instance against
./geometry/euclidean/twod/PolygonsSet.java:         * @param incoming incoming edge
./geometry/euclidean/twod/PolygonsSet.java:         * @param outgoing outgoing edge
./geometry/euclidean/twod/PolygonsSet.java:         * @param start start vertex
./geometry/euclidean/twod/PolygonsSet.java:         * @param end end vertex
./geometry/euclidean/twod/PolygonsSet.java:         * @param line line supporting the edge
./geometry/euclidean/twod/PolygonsSet.java:         * @param node node whose cut hyperplane contains this edge
./geometry/euclidean/twod/PolygonsSet.java:         * @param splitLine line splitting the edge in two halves
./geometry/euclidean/twod/PolygonsSet.java:     * @param segments segments complete segments list
./geometry/euclidean/twod/PolygonsSet.java:     * @param segments segments complete segments list
./geometry/euclidean/twod/PolygonsSet.java:     * @param segments segments complete segments list
./geometry/euclidean/twod/PolygonsSet.java:     * @param segments segments list
./geometry/euclidean/twod/PolygonsSet.java:     * @param defining segment used to define the loop
./geometry/euclidean/twod/PolygonsSet.java:     * @param loop segments loop to filter (will be modified in-place)
./geometry/euclidean/twod/PolygonsSet.java:         * @param start start point of the segment
./geometry/euclidean/twod/PolygonsSet.java:         * @param end end point of the segment
./geometry/euclidean/twod/PolygonsSet.java:         * @param line line containing the segment
./geometry/euclidean/twod/PolygonsSet.java:         * @param node node containing the segment
./geometry/euclidean/twod/PolygonsSet.java:         * @param startNode node whose intersection with current node defines start point
./geometry/euclidean/twod/PolygonsSet.java:         * @param endNode node whose intersection with current node defines end point
./geometry/euclidean/twod/PolygonsSet.java:         * @param previous previous segment
./geometry/euclidean/twod/PolygonsSet.java:         * @param next previous segment
./geometry/euclidean/twod/PolygonsSet.java:         * @param processed processed flag to set
./geometry/euclidean/twod/PolygonsSet.java:         * @param tolerance tolerance for close nodes connection
./geometry/euclidean/twod/PolygonsSet.java:         * @param sub boundary facet
./geometry/euclidean/twod/PolygonsSet.java:         * @param node node containing segment
./geometry/euclidean/twod/PolygonsSet.java:         * @param splitters splitters for the boundary facet
./geometry/euclidean/twod/PolygonsSet.java:         * @param reversed if true, the facet has the inside on its plus side
./geometry/euclidean/twod/PolygonsSet.java:         * @param point reference point
./geometry/euclidean/twod/PolygonsSet.java:         * @param candidates candidate nodes
./geometry/euclidean/twod/DiskGenerator.java:     * @param c1 first column
./geometry/euclidean/twod/DiskGenerator.java:     * @param c2 second column
./geometry/euclidean/twod/NestedLoops.java:     * @param tolerance tolerance below which points are considered identical
./geometry/euclidean/twod/NestedLoops.java:     * @param loop boundary loop (will be reversed in place if needed)
./geometry/euclidean/twod/NestedLoops.java:     * @param tolerance tolerance below which points are considered identical
./geometry/euclidean/twod/NestedLoops.java:     * @param bLoop boundary loop (will be reversed in place if needed)
./geometry/euclidean/twod/NestedLoops.java:     * @param node boundary loop (will be reversed in place if needed)
./geometry/euclidean/twod/NestedLoops.java:     * @param clockwise if true, the loop should be set to clockwise
./geometry/euclidean/threed/Rotation.java:   * @param q0 scalar part of the quaternion
./geometry/euclidean/threed/Rotation.java:   * @param q1 first coordinate of the vectorial part of the quaternion
./geometry/euclidean/threed/Rotation.java:   * @param q2 second coordinate of the vectorial part of the quaternion
./geometry/euclidean/threed/Rotation.java:   * @param q3 third coordinate of the vectorial part of the quaternion
./geometry/euclidean/threed/Rotation.java:   * @param needsNormalization if true, the coordinates are considered
./geometry/euclidean/threed/Rotation.java:   * @param axis axis around which to rotate
./geometry/euclidean/threed/Rotation.java:   * @param angle rotation angle.
./geometry/euclidean/threed/Rotation.java:   * @param axis axis around which to rotate
./geometry/euclidean/threed/Rotation.java:   * @param angle rotation angle
./geometry/euclidean/threed/Rotation.java:   * @param convention convention to use for the semantics of the angle
./geometry/euclidean/threed/Rotation.java:   * @param m rotation matrix
./geometry/euclidean/threed/Rotation.java:   * @param threshold convergence threshold for the iterative
./geometry/euclidean/threed/Rotation.java:   * @param u1 first vector of the origin pair
./geometry/euclidean/threed/Rotation.java:   * @param u2 second vector of the origin pair
./geometry/euclidean/threed/Rotation.java:   * @param v1 desired image of u1 by the rotation
./geometry/euclidean/threed/Rotation.java:   * @param v2 desired image of u2 by the rotation
./geometry/euclidean/threed/Rotation.java:   * @param u origin vector
./geometry/euclidean/threed/Rotation.java:   * @param v desired image of u by the rotation
./geometry/euclidean/threed/Rotation.java:   * @param order order of rotations to use
./geometry/euclidean/threed/Rotation.java:   * @param alpha1 angle of the first elementary rotation
./geometry/euclidean/threed/Rotation.java:   * @param alpha2 angle of the second elementary rotation
./geometry/euclidean/threed/Rotation.java:   * @param alpha3 angle of the third elementary rotation
./geometry/euclidean/threed/Rotation.java:   * @param order order of rotations to compose, from left to right
./geometry/euclidean/threed/Rotation.java:   * @param convention convention to use for the semantics of the angle
./geometry/euclidean/threed/Rotation.java:   * @param alpha1 angle of the first elementary rotation
./geometry/euclidean/threed/Rotation.java:   * @param alpha2 angle of the second elementary rotation
./geometry/euclidean/threed/Rotation.java:   * @param alpha3 angle of the third elementary rotation
./geometry/euclidean/threed/Rotation.java:   * @param ort orthogonal rotation matrix
./geometry/euclidean/threed/Rotation.java:   * @param convention convention to use for the semantics of the angle
./geometry/euclidean/threed/Rotation.java:   * @param order rotation order to use
./geometry/euclidean/threed/Rotation.java:   * @param order rotation order to use
./geometry/euclidean/threed/Rotation.java:   * @param convention convention to use for the semantics of the angle
./geometry/euclidean/threed/Rotation.java:   * @param u vector to apply the rotation to
./geometry/euclidean/threed/Rotation.java:   * @param in an array with three items which stores vector to rotate
./geometry/euclidean/threed/Rotation.java:   * @param out an array with three items to put result to (it can be the same
./geometry/euclidean/threed/Rotation.java:   * @param u vector to apply the inverse of the rotation to
./geometry/euclidean/threed/Rotation.java:   * @param in an array with three items which stores vector to rotate
./geometry/euclidean/threed/Rotation.java:   * @param out an array with three items to put result to (it can be the same
./geometry/euclidean/threed/Rotation.java:   * @param r rotation to apply the rotation to
./geometry/euclidean/threed/Rotation.java:   * @param r rotation to apply the rotation to
./geometry/euclidean/threed/Rotation.java:   * @param convention convention to use for the semantics of the angle
./geometry/euclidean/threed/Rotation.java:   * @param r rotation to apply the rotation to
./geometry/euclidean/threed/Rotation.java:   * @param r rotation to apply the rotation to
./geometry/euclidean/threed/Rotation.java:   * @param r rotation to apply the rotation to
./geometry/euclidean/threed/Rotation.java:   * @param convention convention to use for the semantics of the angle
./geometry/euclidean/threed/Rotation.java:   * @param r rotation to apply the rotation to
./geometry/euclidean/threed/Rotation.java:   * @param m initial matrix (not exactly orthogonal)
./geometry/euclidean/threed/Rotation.java:   * @param threshold convergence threshold for the iterative
./geometry/euclidean/threed/Rotation.java:   * @param r1 first rotation
./geometry/euclidean/threed/Rotation.java:   * @param r2 second rotation
./geometry/euclidean/threed/Line.java:     * @param p1 first point belonging to the line (this can be any point)
./geometry/euclidean/threed/Line.java:     * @param p2 second point belonging to the line (this can be any point, different from p1)
./geometry/euclidean/threed/Line.java:     * @param tolerance tolerance below which points are considered identical
./geometry/euclidean/threed/Line.java:     * @param line line to copy
./geometry/euclidean/threed/Line.java:     * @param p1 first point belonging to the line (this can be any point)
./geometry/euclidean/threed/Line.java:     * @param p2 second point belonging to the line (this can be any point, different from p1)
./geometry/euclidean/threed/Line.java:     * @param p1 first point belonging to the line (this can be any point)
./geometry/euclidean/threed/Line.java:     * @param p2 second point belonging to the line (this can be any point, different from p1)
./geometry/euclidean/threed/Line.java:     * @param point point to check
./geometry/euclidean/threed/Line.java:     * @param abscissa desired abscissa for the point
./geometry/euclidean/threed/Line.java:     * @param vector n-dimension point of the space
./geometry/euclidean/threed/Line.java:     * @param vector (n-1)-dimension point of the sub-space
./geometry/euclidean/threed/Line.java:     * @param line line to which instance should be compared
./geometry/euclidean/threed/Line.java:     * @param p point to check
./geometry/euclidean/threed/Line.java:     * @param p to check
./geometry/euclidean/threed/Line.java:     * @param line line to check against the instance
./geometry/euclidean/threed/Line.java:     * @param line line to check against the instance
./geometry/euclidean/threed/Line.java:     * @param line other line
./geometry/euclidean/threed/Vector3D.java:     * @param x abscissa
./geometry/euclidean/threed/Vector3D.java:     * @param y ordinate
./geometry/euclidean/threed/Vector3D.java:     * @param z height
./geometry/euclidean/threed/Vector3D.java:     * @param v coordinates array
./geometry/euclidean/threed/Vector3D.java:     * @param alpha azimuth (&alpha;) around Z
./geometry/euclidean/threed/Vector3D.java:     * @param delta elevation (&delta;) above (XY) plane, from -&pi;/2 to +&pi;/2
./geometry/euclidean/threed/Vector3D.java:     * @param a scale factor
./geometry/euclidean/threed/Vector3D.java:     * @param u base (unscaled) vector
./geometry/euclidean/threed/Vector3D.java:     * @param a1 first scale factor
./geometry/euclidean/threed/Vector3D.java:     * @param u1 first base (unscaled) vector
./geometry/euclidean/threed/Vector3D.java:     * @param a2 second scale factor
./geometry/euclidean/threed/Vector3D.java:     * @param u2 second base (unscaled) vector
./geometry/euclidean/threed/Vector3D.java:     * @param a1 first scale factor
./geometry/euclidean/threed/Vector3D.java:     * @param u1 first base (unscaled) vector
./geometry/euclidean/threed/Vector3D.java:     * @param a2 second scale factor
./geometry/euclidean/threed/Vector3D.java:     * @param u2 second base (unscaled) vector
./geometry/euclidean/threed/Vector3D.java:     * @param a3 third scale factor
./geometry/euclidean/threed/Vector3D.java:     * @param u3 third base (unscaled) vector
./geometry/euclidean/threed/Vector3D.java:     * @param a1 first scale factor
./geometry/euclidean/threed/Vector3D.java:     * @param u1 first base (unscaled) vector
./geometry/euclidean/threed/Vector3D.java:     * @param a2 second scale factor
./geometry/euclidean/threed/Vector3D.java:     * @param u2 second base (unscaled) vector
./geometry/euclidean/threed/Vector3D.java:     * @param a3 third scale factor
./geometry/euclidean/threed/Vector3D.java:     * @param u3 third base (unscaled) vector
./geometry/euclidean/threed/Vector3D.java:     * @param a4 fourth scale factor
./geometry/euclidean/threed/Vector3D.java:     * @param u4 fourth base (unscaled) vector
./geometry/euclidean/threed/Vector3D.java:     * @param v1 first vector
./geometry/euclidean/threed/Vector3D.java:     * @param v2 second vector
./geometry/euclidean/threed/Vector3D.java:     * @param other Object to test for equality to this
./geometry/euclidean/threed/Vector3D.java:     * @param v other vector
./geometry/euclidean/threed/Vector3D.java:     * @param v1 first vector
./geometry/euclidean/threed/Vector3D.java:     * @param v2 second vector
./geometry/euclidean/threed/Vector3D.java:     * @param v1 first vector
./geometry/euclidean/threed/Vector3D.java:     * @param v2 second vector
./geometry/euclidean/threed/Vector3D.java:     * @param v1 first vector
./geometry/euclidean/threed/Vector3D.java:     * @param v2 second vector
./geometry/euclidean/threed/Vector3D.java:     * @param v1 first vector
./geometry/euclidean/threed/Vector3D.java:     * @param v2 second vector
./geometry/euclidean/threed/Vector3D.java:     * @param v1 first vector
./geometry/euclidean/threed/Vector3D.java:     * @param v2 second vector
./geometry/euclidean/threed/Vector3D.java:     * @param v1 first vector
./geometry/euclidean/threed/Vector3D.java:     * @param v2 second vector
./geometry/euclidean/threed/SubLine.java:     * @param line underlying line
./geometry/euclidean/threed/SubLine.java:     * @param remainingRegion remaining region of the line
./geometry/euclidean/threed/SubLine.java:     * @param start start point
./geometry/euclidean/threed/SubLine.java:     * @param end end point
./geometry/euclidean/threed/SubLine.java:     * @param tolerance tolerance below which points are considered identical
./geometry/euclidean/threed/SubLine.java:     * @param start start point
./geometry/euclidean/threed/SubLine.java:     * @param end end point
./geometry/euclidean/threed/SubLine.java:     * @param segment single segment forming the sub-line
./geometry/euclidean/threed/SubLine.java:     * @param subLine other sub-line which may intersect instance
./geometry/euclidean/threed/SubLine.java:     * @param includeEndPoints if true, endpoints are considered to belong to
./geometry/euclidean/threed/SubLine.java:     * @param start start point
./geometry/euclidean/threed/SubLine.java:     * @param end end point
./geometry/euclidean/threed/SubLine.java:     * @param tolerance tolerance below which points are considered identical
./geometry/euclidean/threed/Plane.java:     * @param normal normal direction to the plane
./geometry/euclidean/threed/Plane.java:     * @param tolerance tolerance below which points are considered identical
./geometry/euclidean/threed/Plane.java:     * @param p point belonging to the plane
./geometry/euclidean/threed/Plane.java:     * @param normal normal direction to the plane
./geometry/euclidean/threed/Plane.java:     * @param tolerance tolerance below which points are considered identical
./geometry/euclidean/threed/Plane.java:     * @param p1 first point belonging to the plane
./geometry/euclidean/threed/Plane.java:     * @param p2 second point belonging to the plane
./geometry/euclidean/threed/Plane.java:     * @param p3 third point belonging to the plane
./geometry/euclidean/threed/Plane.java:     * @param tolerance tolerance below which points are considered identical
./geometry/euclidean/threed/Plane.java:     * @param normal normal direction to the plane
./geometry/euclidean/threed/Plane.java:     * @param p point belonging to the plane
./geometry/euclidean/threed/Plane.java:     * @param normal normal direction to the plane
./geometry/euclidean/threed/Plane.java:     * @param p1 first point belonging to the plane
./geometry/euclidean/threed/Plane.java:     * @param p2 second point belonging to the plane
./geometry/euclidean/threed/Plane.java:     * @param p3 third point belonging to the plane
./geometry/euclidean/threed/Plane.java:     * @param plane plane to copy
./geometry/euclidean/threed/Plane.java:     * @param p point belonging to the plane
./geometry/euclidean/threed/Plane.java:     * @param normal normal direction to the plane
./geometry/euclidean/threed/Plane.java:     * @param original plane to reset from
./geometry/euclidean/threed/Plane.java:     * @param normal normal direction to the plane (will be copied)
./geometry/euclidean/threed/Plane.java:     * @param vector n-dimension point of the space
./geometry/euclidean/threed/Plane.java:     * @param vector (n-1)-dimension point of the sub-space
./geometry/euclidean/threed/Plane.java:     * @param point point of the space (must be a {@link Vector3D
./geometry/euclidean/threed/Plane.java:     * @param point in-plane point (must be a {@link
./geometry/euclidean/threed/Plane.java:     * @param inPlane desired in-plane coordinates for the point in the
./geometry/euclidean/threed/Plane.java:     * @param offset desired offset for the point
./geometry/euclidean/threed/Plane.java:     * @param plane plane to which the instance is compared
./geometry/euclidean/threed/Plane.java:     * @param center rotation center
./geometry/euclidean/threed/Plane.java:     * @param rotation vectorial rotation operator
./geometry/euclidean/threed/Plane.java:     * @param translation translation to apply
./geometry/euclidean/threed/Plane.java:     * @param line line intersecting the instance
./geometry/euclidean/threed/Plane.java:     * @param other other plane
./geometry/euclidean/threed/Plane.java:     * @param plane1 first plane1
./geometry/euclidean/threed/Plane.java:     * @param plane2 second plane2
./geometry/euclidean/threed/Plane.java:     * @param plane3 third plane2
./geometry/euclidean/threed/Plane.java:     * @param p point to check
./geometry/euclidean/threed/Plane.java:     * @param plane plane to check
./geometry/euclidean/threed/Plane.java:     * @param vector vector to check
./geometry/euclidean/threed/Plane.java:     * @param point point to check
./geometry/euclidean/threed/Plane.java:     * @param other other hyperplane to check against the instance
./geometry/euclidean/threed/CardanEulerSingularityException.java:     * @param isCardan if true, the rotation is related to Cardan angles,
./geometry/euclidean/threed/SubPlane.java:     * @param hyperplane underlying hyperplane
./geometry/euclidean/threed/SubPlane.java:     * @param remainingRegion remaining region of the hyperplane
./geometry/euclidean/threed/SubPlane.java:     * @param hyperplane splitting hyperplane
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param tolerance tolerance below which points are considered identical
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param tree inside/outside BSP tree representing the region
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param tolerance tolerance below which points are considered identical
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param boundary collection of boundary elements, as a
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param tolerance tolerance below which points are considered identical
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param vertices list of polyhedrons set vertices
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param facets list of facets, as vertices indices in the vertices list
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param tolerance tolerance below which points are considered identical
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param xMin low bound along the x direction
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param xMax high bound along the x direction
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param yMin low bound along the y direction
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param yMax high bound along the y direction
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param zMin low bound along the z direction
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param zMax high bound along the z direction
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param tolerance tolerance below which points are considered identical
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param tree inside/outside BSP tree representing the region
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param boundary collection of boundary elements, as a
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param xMin low bound along the x direction
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param xMax high bound along the x direction
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param yMin low bound along the y direction
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param yMax high bound along the y direction
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param zMin low bound along the z direction
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param zMax high bound along the z direction
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param xMin low bound along the x direction
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param xMax high bound along the x direction
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param yMin low bound along the y direction
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param yMax high bound along the y direction
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param zMin low bound along the z direction
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param zMax high bound along the z direction
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param tolerance tolerance below which points are considered identical
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param vertices list of polyhedrons set vertices
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param facets list of facets, as vertices indices in the vertices list
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param tolerance tolerance below which points are considered identical
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param vertices list of polyhedrons set vertices
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param facets list of facets, as vertices indices in the vertices list
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param vertices list of polyhedrons set vertices
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param facets list of facets, as vertices indices in the vertices list
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param references facets references array
./geometry/euclidean/threed/PolyhedronsSet.java:         * @param facet boundary facet
./geometry/euclidean/threed/PolyhedronsSet.java:         * @param reversed if true, the facet has the inside on its plus side
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param point start point of the part of the line considered
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param line line to consider (contains point)
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param node current node
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param point start point of the part of the line considered
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param line line to consider (contains point)
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param point point to check
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param node node containing the boundary facet to check
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param center rotation center
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param rotation vectorial rotation operator
./geometry/euclidean/threed/PolyhedronsSet.java:         * @param center center point of the rotation
./geometry/euclidean/threed/PolyhedronsSet.java:         * @param rotation vectorial rotation
./geometry/euclidean/threed/PolyhedronsSet.java:     * @param translation translation to apply
./geometry/euclidean/threed/PolyhedronsSet.java:         * @param translation translation vector
./geometry/euclidean/threed/OutlineExtractor.java:     * @param u abscissa axis of the projection point
./geometry/euclidean/threed/OutlineExtractor.java:     * @param v ordinate axis of the projection point
./geometry/euclidean/threed/OutlineExtractor.java:     * @param polyhedronsSet polyhedrons set whose outline must be extracted
./geometry/euclidean/threed/OutlineExtractor.java:     * @param loop points array
./geometry/euclidean/threed/OutlineExtractor.java:     * @param n number of points to consider in the array
./geometry/euclidean/threed/OutlineExtractor.java:     * @param i index of the point to check (must be between 0 and n-1)
./geometry/euclidean/threed/OutlineExtractor.java:         * @param tolerance tolerance below which points are considered identical
./geometry/euclidean/threed/OutlineExtractor.java:         * @param facet boundary facet
./geometry/euclidean/threed/OutlineExtractor.java:         * @param reversed if true, the facet has the inside on its plus side
./geometry/euclidean/threed/Segment.java:     * @param start start point of the segment
./geometry/euclidean/threed/Segment.java:     * @param end end point of the segment
./geometry/euclidean/threed/Segment.java:     * @param line line containing the segment
./geometry/euclidean/threed/SphericalCoordinates.java:     * @param v Cartesian coordinates
./geometry/euclidean/threed/SphericalCoordinates.java:     * @param r radius
./geometry/euclidean/threed/SphericalCoordinates.java:     * @param theta azimuthal angle in x-y plane
./geometry/euclidean/threed/SphericalCoordinates.java:     * @param phi polar (co-latitude) angle
./geometry/euclidean/threed/SphericalCoordinates.java:     * @param sGradient gradient with respect to spherical coordinates
./geometry/euclidean/threed/SphericalCoordinates.java:     * @param sHessian Hessian with respect to spherical coordinates
./geometry/euclidean/threed/SphericalCoordinates.java:     * @param sGradient gradient with respect to spherical coordinates
./geometry/euclidean/threed/SphericalCoordinates.java:         * @param x abscissa
./geometry/euclidean/threed/SphericalCoordinates.java:         * @param y ordinate
./geometry/euclidean/threed/SphericalCoordinates.java:         * @param z height
./geometry/euclidean/threed/FieldVector3D.java: * @param <T> the type of the field elements
./geometry/euclidean/threed/FieldVector3D.java:     * @param x abscissa
./geometry/euclidean/threed/FieldVector3D.java:     * @param y ordinate
./geometry/euclidean/threed/FieldVector3D.java:     * @param z height
./geometry/euclidean/threed/FieldVector3D.java:     * @param v coordinates array
./geometry/euclidean/threed/FieldVector3D.java:     * @param alpha azimuth (&alpha;) around Z
./geometry/euclidean/threed/FieldVector3D.java:     * @param delta elevation (&delta;) above (XY) plane, from -&pi;/2 to +&pi;/2
./geometry/euclidean/threed/FieldVector3D.java:     * @param a scale factor
./geometry/euclidean/threed/FieldVector3D.java:     * @param u base (unscaled) vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param a scale factor
./geometry/euclidean/threed/FieldVector3D.java:     * @param u base (unscaled) vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param a scale factor
./geometry/euclidean/threed/FieldVector3D.java:     * @param u base (unscaled) vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param a1 first scale factor
./geometry/euclidean/threed/FieldVector3D.java:     * @param u1 first base (unscaled) vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param a2 second scale factor
./geometry/euclidean/threed/FieldVector3D.java:     * @param u2 second base (unscaled) vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param a1 first scale factor
./geometry/euclidean/threed/FieldVector3D.java:     * @param u1 first base (unscaled) vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param a2 second scale factor
./geometry/euclidean/threed/FieldVector3D.java:     * @param u2 second base (unscaled) vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param a1 first scale factor
./geometry/euclidean/threed/FieldVector3D.java:     * @param u1 first base (unscaled) vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param a2 second scale factor
./geometry/euclidean/threed/FieldVector3D.java:     * @param u2 second base (unscaled) vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param a1 first scale factor
./geometry/euclidean/threed/FieldVector3D.java:     * @param u1 first base (unscaled) vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param a2 second scale factor
./geometry/euclidean/threed/FieldVector3D.java:     * @param u2 second base (unscaled) vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param a3 third scale factor
./geometry/euclidean/threed/FieldVector3D.java:     * @param u3 third base (unscaled) vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param a1 first scale factor
./geometry/euclidean/threed/FieldVector3D.java:     * @param u1 first base (unscaled) vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param a2 second scale factor
./geometry/euclidean/threed/FieldVector3D.java:     * @param u2 second base (unscaled) vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param a3 third scale factor
./geometry/euclidean/threed/FieldVector3D.java:     * @param u3 third base (unscaled) vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param a1 first scale factor
./geometry/euclidean/threed/FieldVector3D.java:     * @param u1 first base (unscaled) vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param a2 second scale factor
./geometry/euclidean/threed/FieldVector3D.java:     * @param u2 second base (unscaled) vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param a3 third scale factor
./geometry/euclidean/threed/FieldVector3D.java:     * @param u3 third base (unscaled) vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param a1 first scale factor
./geometry/euclidean/threed/FieldVector3D.java:     * @param u1 first base (unscaled) vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param a2 second scale factor
./geometry/euclidean/threed/FieldVector3D.java:     * @param u2 second base (unscaled) vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param a3 third scale factor
./geometry/euclidean/threed/FieldVector3D.java:     * @param u3 third base (unscaled) vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param a4 fourth scale factor
./geometry/euclidean/threed/FieldVector3D.java:     * @param u4 fourth base (unscaled) vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param a1 first scale factor
./geometry/euclidean/threed/FieldVector3D.java:     * @param u1 first base (unscaled) vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param a2 second scale factor
./geometry/euclidean/threed/FieldVector3D.java:     * @param u2 second base (unscaled) vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param a3 third scale factor
./geometry/euclidean/threed/FieldVector3D.java:     * @param u3 third base (unscaled) vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param a4 fourth scale factor
./geometry/euclidean/threed/FieldVector3D.java:     * @param u4 fourth base (unscaled) vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param a1 first scale factor
./geometry/euclidean/threed/FieldVector3D.java:     * @param u1 first base (unscaled) vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param a2 second scale factor
./geometry/euclidean/threed/FieldVector3D.java:     * @param u2 second base (unscaled) vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param a3 third scale factor
./geometry/euclidean/threed/FieldVector3D.java:     * @param u3 third base (unscaled) vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param a4 fourth scale factor
./geometry/euclidean/threed/FieldVector3D.java:     * @param u4 fourth base (unscaled) vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param v vector to add
./geometry/euclidean/threed/FieldVector3D.java:     * @param v vector to add
./geometry/euclidean/threed/FieldVector3D.java:     * @param factor scale factor to apply to v before adding it
./geometry/euclidean/threed/FieldVector3D.java:     * @param v vector to add
./geometry/euclidean/threed/FieldVector3D.java:     * @param factor scale factor to apply to v before adding it
./geometry/euclidean/threed/FieldVector3D.java:     * @param v vector to add
./geometry/euclidean/threed/FieldVector3D.java:     * @param factor scale factor to apply to v before adding it
./geometry/euclidean/threed/FieldVector3D.java:     * @param v vector to add
./geometry/euclidean/threed/FieldVector3D.java:     * @param factor scale factor to apply to v before adding it
./geometry/euclidean/threed/FieldVector3D.java:     * @param v vector to add
./geometry/euclidean/threed/FieldVector3D.java:     * @param v vector to subtract
./geometry/euclidean/threed/FieldVector3D.java:     * @param v vector to subtract
./geometry/euclidean/threed/FieldVector3D.java:     * @param factor scale factor to apply to v before subtracting it
./geometry/euclidean/threed/FieldVector3D.java:     * @param v vector to subtract
./geometry/euclidean/threed/FieldVector3D.java:     * @param factor scale factor to apply to v before subtracting it
./geometry/euclidean/threed/FieldVector3D.java:     * @param v vector to subtract
./geometry/euclidean/threed/FieldVector3D.java:     * @param factor scale factor to apply to v before subtracting it
./geometry/euclidean/threed/FieldVector3D.java:     * @param v vector to subtract
./geometry/euclidean/threed/FieldVector3D.java:     * @param factor scale factor to apply to v before subtracting it
./geometry/euclidean/threed/FieldVector3D.java:     * @param v vector to subtract
./geometry/euclidean/threed/FieldVector3D.java:     * @param v1 first vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param v2 second vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param <T> the type of the field elements
./geometry/euclidean/threed/FieldVector3D.java:     * @param v1 first vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param v2 second vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param <T> the type of the field elements
./geometry/euclidean/threed/FieldVector3D.java:     * @param v1 first vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param v2 second vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param <T> the type of the field elements
./geometry/euclidean/threed/FieldVector3D.java:     * @param a scalar
./geometry/euclidean/threed/FieldVector3D.java:     * @param a scalar
./geometry/euclidean/threed/FieldVector3D.java:     * @param other Object to test for equality to this
./geometry/euclidean/threed/FieldVector3D.java:     * @param v second vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param v second vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param v other vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param v other vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param v second vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param v second vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param v second vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param v second vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param v second vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param v second vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param v second vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param v second vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param v1 first vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param v2 second vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param <T> the type of the field elements
./geometry/euclidean/threed/FieldVector3D.java:     * @param v1 first vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param v2 second vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param <T> the type of the field elements
./geometry/euclidean/threed/FieldVector3D.java:     * @param v1 first vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param v2 second vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param <T> the type of the field elements
./geometry/euclidean/threed/FieldVector3D.java:     * @param v1 first vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param v2 second vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param <T> the type of the field elements
./geometry/euclidean/threed/FieldVector3D.java:     * @param v1 first vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param v2 second vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param <T> the type of the field elements
./geometry/euclidean/threed/FieldVector3D.java:     * @param v1 first vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param v2 second vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param <T> the type of the field elements
./geometry/euclidean/threed/FieldVector3D.java:     * @param v1 first vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param v2 second vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param <T> the type of the field elements
./geometry/euclidean/threed/FieldVector3D.java:     * @param v1 first vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param v2 second vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param <T> the type of the field elements
./geometry/euclidean/threed/FieldVector3D.java:     * @param v1 first vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param v2 second vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param <T> the type of the field elements
./geometry/euclidean/threed/FieldVector3D.java:     * @param v1 first vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param v2 second vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param <T> the type of the field elements
./geometry/euclidean/threed/FieldVector3D.java:     * @param v1 first vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param v2 second vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param <T> the type of the field elements
./geometry/euclidean/threed/FieldVector3D.java:     * @param v1 first vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param v2 second vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param <T> the type of the field elements
./geometry/euclidean/threed/FieldVector3D.java:     * @param v1 first vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param v2 second vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param <T> the type of the field elements
./geometry/euclidean/threed/FieldVector3D.java:     * @param v1 first vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param v2 second vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param <T> the type of the field elements
./geometry/euclidean/threed/FieldVector3D.java:     * @param v1 first vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param v2 second vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param <T> the type of the field elements
./geometry/euclidean/threed/FieldVector3D.java:     * @param v1 first vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param v2 second vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param <T> the type of the field elements
./geometry/euclidean/threed/FieldVector3D.java:     * @param v1 first vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param v2 second vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param <T> the type of the field elements
./geometry/euclidean/threed/FieldVector3D.java:     * @param v1 first vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param v2 second vector
./geometry/euclidean/threed/FieldVector3D.java:     * @param <T> the type of the field elements
./geometry/euclidean/threed/FieldVector3D.java:     * @param format the custom format for components
./geometry/euclidean/threed/SphereGenerator.java:     * @param c1 first column
./geometry/euclidean/threed/SphereGenerator.java:     * @param c2 second column
./geometry/euclidean/threed/SphereGenerator.java:     * @param c3 third column
./geometry/euclidean/threed/FieldRotation.java: * @param <T> the type of the field elements
./geometry/euclidean/threed/FieldRotation.java:     * @param q0 scalar part of the quaternion
./geometry/euclidean/threed/FieldRotation.java:     * @param q1 first coordinate of the vectorial part of the quaternion
./geometry/euclidean/threed/FieldRotation.java:     * @param q2 second coordinate of the vectorial part of the quaternion
./geometry/euclidean/threed/FieldRotation.java:     * @param q3 third coordinate of the vectorial part of the quaternion
./geometry/euclidean/threed/FieldRotation.java:     * @param needsNormalization if true, the coordinates are considered
./geometry/euclidean/threed/FieldRotation.java:     * @param axis axis around which to rotate
./geometry/euclidean/threed/FieldRotation.java:     * @param angle rotation angle.
./geometry/euclidean/threed/FieldRotation.java:     * @param axis axis around which to rotate
./geometry/euclidean/threed/FieldRotation.java:     * @param angle rotation angle.
./geometry/euclidean/threed/FieldRotation.java:     * @param convention convention to use for the semantics of the angle
./geometry/euclidean/threed/FieldRotation.java:     * @param m rotation matrix
./geometry/euclidean/threed/FieldRotation.java:     * @param threshold convergence threshold for the iterative
./geometry/euclidean/threed/FieldRotation.java:     * @param u1 first vector of the origin pair
./geometry/euclidean/threed/FieldRotation.java:     * @param u2 second vector of the origin pair
./geometry/euclidean/threed/FieldRotation.java:     * @param v1 desired image of u1 by the rotation
./geometry/euclidean/threed/FieldRotation.java:     * @param v2 desired image of u2 by the rotation
./geometry/euclidean/threed/FieldRotation.java:     * @param u origin vector
./geometry/euclidean/threed/FieldRotation.java:     * @param v desired image of u by the rotation
./geometry/euclidean/threed/FieldRotation.java:     * @param order order of rotations to use
./geometry/euclidean/threed/FieldRotation.java:     * @param alpha1 angle of the first elementary rotation
./geometry/euclidean/threed/FieldRotation.java:     * @param alpha2 angle of the second elementary rotation
./geometry/euclidean/threed/FieldRotation.java:     * @param alpha3 angle of the third elementary rotation
./geometry/euclidean/threed/FieldRotation.java:     * @param order order of rotations to compose, from left to right
./geometry/euclidean/threed/FieldRotation.java:     * @param convention convention to use for the semantics of the angle
./geometry/euclidean/threed/FieldRotation.java:     * @param alpha1 angle of the first elementary rotation
./geometry/euclidean/threed/FieldRotation.java:     * @param alpha2 angle of the second elementary rotation
./geometry/euclidean/threed/FieldRotation.java:     * @param alpha3 angle of the third elementary rotation
./geometry/euclidean/threed/FieldRotation.java:     * @param ort orthogonal rotation matrix
./geometry/euclidean/threed/FieldRotation.java:     * @param convention convention to use for the semantics of the angle
./geometry/euclidean/threed/FieldRotation.java:     * @param order rotation order to use
./geometry/euclidean/threed/FieldRotation.java:     * @param order rotation order to use
./geometry/euclidean/threed/FieldRotation.java:     * @param convention convention to use for the semantics of the angle
./geometry/euclidean/threed/FieldRotation.java:     * @param a0 first array element
./geometry/euclidean/threed/FieldRotation.java:     * @param a1 second array element
./geometry/euclidean/threed/FieldRotation.java:     * @param a2 third array element
./geometry/euclidean/threed/FieldRotation.java:     * @param x abscissa
./geometry/euclidean/threed/FieldRotation.java:     * @param y ordinate
./geometry/euclidean/threed/FieldRotation.java:     * @param z height
./geometry/euclidean/threed/FieldRotation.java:     * @param u vector to apply the rotation to
./geometry/euclidean/threed/FieldRotation.java:     * @param u vector to apply the rotation to
./geometry/euclidean/threed/FieldRotation.java:     * @param in an array with three items which stores vector to rotate
./geometry/euclidean/threed/FieldRotation.java:     * @param out an array with three items to put result to (it can be the same
./geometry/euclidean/threed/FieldRotation.java:     * @param in an array with three items which stores vector to rotate
./geometry/euclidean/threed/FieldRotation.java:     * @param out an array with three items to put result to
./geometry/euclidean/threed/FieldRotation.java:     * @param r rotation to apply
./geometry/euclidean/threed/FieldRotation.java:     * @param u vector to apply the rotation to
./geometry/euclidean/threed/FieldRotation.java:     * @param <T> the type of the field elements
./geometry/euclidean/threed/FieldRotation.java:     * @param u vector to apply the inverse of the rotation to
./geometry/euclidean/threed/FieldRotation.java:     * @param u vector to apply the inverse of the rotation to
./geometry/euclidean/threed/FieldRotation.java:     * @param in an array with three items which stores vector to rotate
./geometry/euclidean/threed/FieldRotation.java:     * @param out an array with three items to put result to (it can be the same
./geometry/euclidean/threed/FieldRotation.java:     * @param in an array with three items which stores vector to rotate
./geometry/euclidean/threed/FieldRotation.java:     * @param out an array with three items to put result to
./geometry/euclidean/threed/FieldRotation.java:     * @param r rotation to apply
./geometry/euclidean/threed/FieldRotation.java:     * @param u vector to apply the inverse of the rotation to
./geometry/euclidean/threed/FieldRotation.java:     * @param <T> the type of the field elements
./geometry/euclidean/threed/FieldRotation.java:     * @param r rotation to apply the rotation to
./geometry/euclidean/threed/FieldRotation.java:     * @param r rotation to apply the rotation to
./geometry/euclidean/threed/FieldRotation.java:     * @param convention convention to use for the semantics of the angle
./geometry/euclidean/threed/FieldRotation.java:     * @param r rotation to apply the rotation to
./geometry/euclidean/threed/FieldRotation.java:     * @param r rotation to apply the rotation to
./geometry/euclidean/threed/FieldRotation.java:     * @param r rotation to apply the rotation to
./geometry/euclidean/threed/FieldRotation.java:     * @param convention convention to use for the semantics of the angle
./geometry/euclidean/threed/FieldRotation.java:     * @param r rotation to apply the rotation to
./geometry/euclidean/threed/FieldRotation.java:     * @param r1 rotation to apply
./geometry/euclidean/threed/FieldRotation.java:     * @param rInner rotation to apply the rotation to
./geometry/euclidean/threed/FieldRotation.java:     * @param <T> the type of the field elements
./geometry/euclidean/threed/FieldRotation.java:     * @param r rotation to apply the rotation to
./geometry/euclidean/threed/FieldRotation.java:     * @param r rotation to apply the rotation to
./geometry/euclidean/threed/FieldRotation.java:     * @param convention convention to use for the semantics of the angle
./geometry/euclidean/threed/FieldRotation.java:     * @param r rotation to apply the rotation to
./geometry/euclidean/threed/FieldRotation.java:     * @param r rotation to apply the rotation to
./geometry/euclidean/threed/FieldRotation.java:     * @param r rotation to apply the rotation to
./geometry/euclidean/threed/FieldRotation.java:     * @param convention convention to use for the semantics of the angle
./geometry/euclidean/threed/FieldRotation.java:     * @param r rotation to apply the rotation to
./geometry/euclidean/threed/FieldRotation.java:     * @param rOuter rotation to apply the rotation to
./geometry/euclidean/threed/FieldRotation.java:     * @param rInner rotation to apply the rotation to
./geometry/euclidean/threed/FieldRotation.java:     * @param <T> the type of the field elements
./geometry/euclidean/threed/FieldRotation.java:     * @param m initial matrix (not exactly orthogonal)
./geometry/euclidean/threed/FieldRotation.java:     * @param threshold convergence threshold for the iterative
./geometry/euclidean/threed/FieldRotation.java:     * @param r1 first rotation
./geometry/euclidean/threed/FieldRotation.java:     * @param r2 second rotation
./geometry/euclidean/threed/FieldRotation.java:     * @param <T> the type of the field elements
./geometry/euclidean/threed/NotARotationMatrixException.java:     * @param specifier format specifier (to be translated)
./geometry/euclidean/threed/NotARotationMatrixException.java:     * @param parts to insert in the format (no translation)
./geometry/euclidean/threed/RotationOrder.java:     * @param name name of the rotation order
./geometry/euclidean/threed/RotationOrder.java:     * @param a1 axis of the first rotation
./geometry/euclidean/threed/RotationOrder.java:     * @param a2 axis of the second rotation
./geometry/euclidean/threed/RotationOrder.java:     * @param a3 axis of the third rotation
./geometry/euclidean/threed/Vector3DFormat.java:     * @param format the custom format for components.
./geometry/euclidean/threed/Vector3DFormat.java:     * @param prefix prefix to use instead of the default "{"
./geometry/euclidean/threed/Vector3DFormat.java:     * @param suffix suffix to use instead of the default "}"
./geometry/euclidean/threed/Vector3DFormat.java:     * @param separator separator to use instead of the default "; "
./geometry/euclidean/threed/Vector3DFormat.java:     * @param prefix prefix to use instead of the default "{"
./geometry/euclidean/threed/Vector3DFormat.java:     * @param suffix suffix to use instead of the default "}"
./geometry/euclidean/threed/Vector3DFormat.java:     * @param separator separator to use instead of the default "; "
./geometry/euclidean/threed/Vector3DFormat.java:     * @param format the custom format for components.
./geometry/euclidean/threed/Vector3DFormat.java:     * @param locale the specific locale used by the format.
./geometry/euclidean/threed/Vector3DFormat.java:     * @param vector the object to format.
./geometry/euclidean/threed/Vector3DFormat.java:     * @param toAppendTo where the text is to be appended
./geometry/euclidean/threed/Vector3DFormat.java:     * @param pos On input: an alignment field, if desired. On output: the
./geometry/euclidean/threed/Vector3DFormat.java:     * @param source the string to parse
./geometry/euclidean/threed/Vector3DFormat.java:     * @param source the string to parse
./geometry/euclidean/threed/Vector3DFormat.java:     * @param pos input/ouput parsing parameter.
./geometry/Point.java: * @param <S> Type of the space.
./geometry/Point.java:     * @param p second point
./geometry/partitioning/BoundarySizeVisitor.java: * @param <S> Type of the space.
./geometry/partitioning/Region.java: * @param <S> Type of the space.
./geometry/partitioning/Region.java:     * @param newTree inside/outside BSP tree representing the new region
./geometry/partitioning/Region.java:     * @param node root node of the sub-tree (<em>must</em> have {@link
./geometry/partitioning/Region.java:     * @param node root node of the sub-tree (<em>must</em> have {@link
./geometry/partitioning/Region.java:     * @param region region to check against the instance
./geometry/partitioning/Region.java:     * @param point point to check
./geometry/partitioning/Region.java:     * @param point point to check
./geometry/partitioning/Region.java:     * @param includeBoundaryAttributes if true, the boundary attributes
./geometry/partitioning/Region.java:     * @param hyperplane reference hyperplane
./geometry/partitioning/Region.java:     * @param sub sub-hyperplane traversing the region
./geometry/partitioning/utilities/AVLTree.java: * @param <T> the type of the elements
./geometry/partitioning/utilities/AVLTree.java:     * @param element element to insert (silently ignored if null)
./geometry/partitioning/utilities/AVLTree.java:     * @param element element to delete (silently ignored if null)
./geometry/partitioning/utilities/AVLTree.java:     * @param reference reference object (may not be in the tree)
./geometry/partitioning/utilities/AVLTree.java:     * @param reference reference object (may not be in the tree)
./geometry/partitioning/utilities/AVLTree.java:         * @param element element
./geometry/partitioning/utilities/AVLTree.java:         * @param parent parent node
./geometry/partitioning/utilities/AVLTree.java:         * @param newElement element to insert
./geometry/partitioning/utilities/OrderedTuple.java:     * @param components double components of the T-uple
./geometry/partitioning/utilities/OrderedTuple.java:     * @param minOffset minimal scale of the offset to add to all
./geometry/partitioning/utilities/OrderedTuple.java:     * @param ot T-uple to compare instance with
./geometry/partitioning/utilities/OrderedTuple.java:     * @param bits binary representation of the double
./geometry/partitioning/utilities/OrderedTuple.java:     * @param bits binary representation of the double
./geometry/partitioning/utilities/OrderedTuple.java:     * @param bits binary representation of the double
./geometry/partitioning/utilities/OrderedTuple.java:     * @param l long from which the most significant bit is requested
./geometry/partitioning/utilities/OrderedTuple.java:     * @param l long from which the least significant bit is requested
./geometry/partitioning/utilities/OrderedTuple.java:     * @param i index of the component
./geometry/partitioning/utilities/OrderedTuple.java:     * @param k scale of the requested bit
./geometry/partitioning/Characterization.java: * @param <S> Type of the space.
./geometry/partitioning/Characterization.java:     * @param node current BSP tree node
./geometry/partitioning/Characterization.java:     * @param sub sub-hyperplane to characterize
./geometry/partitioning/Characterization.java:     * @param node current BSP tree node
./geometry/partitioning/Characterization.java:     * @param sub sub-hyperplane to characterize
./geometry/partitioning/Characterization.java:     * @param splitters nodes that did split the current one
./geometry/partitioning/Characterization.java:     * @param sub part of the cut sub-hyperplane known to touch an outside cell
./geometry/partitioning/Characterization.java:     * @param splitters sub-hyperplanes that did split the current one
./geometry/partitioning/Characterization.java:     * @param sub part of the cut sub-hyperplane known to touch an inside cell
./geometry/partitioning/Characterization.java:     * @param splitters sub-hyperplanes that did split the current one
./geometry/partitioning/BSPTreeVisitor.java: * @param <S> Type of the space.
./geometry/partitioning/BSPTreeVisitor.java:     * @param node BSP node guaranteed to have a non null cut sub-hyperplane
./geometry/partitioning/BSPTreeVisitor.java:     * @param node BSP node guaranteed to have a non null cut sub-hyperplane
./geometry/partitioning/BSPTreeVisitor.java:     * @param node leaf BSP node having a null sub-hyperplane
./geometry/partitioning/Hyperplane.java: * @param <S> Type of the space.
./geometry/partitioning/Hyperplane.java:     * @param point point to check
./geometry/partitioning/Hyperplane.java:     * @param point point to project
./geometry/partitioning/Hyperplane.java:     * @param other other hyperplane to check against the instance
./geometry/partitioning/SubHyperplane.java: * @param <S> Type of the embedding space.
./geometry/partitioning/SubHyperplane.java:     * @param hyperplane hyperplane to check instance against
./geometry/partitioning/SubHyperplane.java:     * @param hyperplane splitting hyperplane
./geometry/partitioning/SubHyperplane.java:     * @param other other sub-hyperplane to union (<em>must</em> be in the
./geometry/partitioning/SubHyperplane.java:     * @param <U> Type of the embedding space.
./geometry/partitioning/SubHyperplane.java:         * @param plus part of the sub-hyperplane on the plus side of the
./geometry/partitioning/SubHyperplane.java:         * @param minus part of the sub-hyperplane on the minus side of the
./geometry/partitioning/BoundaryAttribute.java: * @param <S> Type of the space.
./geometry/partitioning/BoundaryAttribute.java:     * @param plusOutside part of the node cut sub-hyperplane that
./geometry/partitioning/BoundaryAttribute.java:     * @param plusInside part of the node cut sub-hyperplane that
./geometry/partitioning/BoundaryAttribute.java:     * @param plusOutside part of the node cut sub-hyperplane that
./geometry/partitioning/BoundaryAttribute.java:     * @param plusInside part of the node cut sub-hyperplane that
./geometry/partitioning/BoundaryAttribute.java:     * @param splitters sub-hyperplanes that were used to
./geometry/partitioning/BoundaryBuilder.java: * @param <S> Type of the space.
./geometry/partitioning/Embedding.java: * @param <S> Type of the embedding space.
./geometry/partitioning/Embedding.java: * @param <T> Type of the embedded sub-space.
./geometry/partitioning/Embedding.java:     * @param point n-dimension point of the space
./geometry/partitioning/Embedding.java:     * @param point (n-1)-dimension point of the sub-space
./geometry/partitioning/AbstractRegion.java: * @param <S> Type of the space.
./geometry/partitioning/AbstractRegion.java: * @param <T> Type of the sub-space.
./geometry/partitioning/AbstractRegion.java:     * @param tolerance tolerance below which points are considered identical.
./geometry/partitioning/AbstractRegion.java:     * @param tree inside/outside BSP tree representing the region
./geometry/partitioning/AbstractRegion.java:     * @param tolerance tolerance below which points are considered identical.
./geometry/partitioning/AbstractRegion.java:     * @param boundary collection of boundary elements, as a
./geometry/partitioning/AbstractRegion.java:     * @param tolerance tolerance below which points are considered identical.
./geometry/partitioning/AbstractRegion.java:     * @param hyperplanes array of bounding hyperplanes (if null, an
./geometry/partitioning/AbstractRegion.java:     * @param tolerance tolerance below which points are considered identical.
./geometry/partitioning/AbstractRegion.java:     * @param node current tree node (it is a leaf node at the beginning
./geometry/partitioning/AbstractRegion.java:     * @param boundary collection of edges belonging to the cell defined
./geometry/partitioning/AbstractRegion.java:     * @param point point to check
./geometry/partitioning/AbstractRegion.java:     * @param node root node of the region
./geometry/partitioning/AbstractRegion.java:     * @param point point to check
./geometry/partitioning/AbstractRegion.java:     * @param node root node of the region
./geometry/partitioning/AbstractRegion.java:     * @param point point to check
./geometry/partitioning/AbstractRegion.java:     * @param size size of the instance
./geometry/partitioning/AbstractRegion.java:     * @param barycenter barycenter of the instance
./geometry/partitioning/AbstractRegion.java:     * @param barycenter barycenter of the instance
./geometry/partitioning/AbstractRegion.java:     * @param node current BSP tree node
./geometry/partitioning/AbstractRegion.java:     * @param sub sub-hyperplane traversing the region
./geometry/partitioning/AbstractRegion.java:     * @param transform transform to apply
./geometry/partitioning/AbstractRegion.java:     * @param node current BSP tree node
./geometry/partitioning/AbstractRegion.java:     * @param transform transform to apply
./geometry/partitioning/AbstractRegion.java:     * @param map transformed nodes map
./geometry/partitioning/BoundaryProjector.java: * @param <S> Type of the space.
./geometry/partitioning/BoundaryProjector.java: * @param <T> Type of the sub-space.
./geometry/partitioning/BoundaryProjector.java:     * @param original original point
./geometry/partitioning/BoundaryProjector.java:     * @param node internal node
./geometry/partitioning/BoundaryProjector.java:     * @param sub sub-hyperplane defining the region
./geometry/partitioning/BoundaryProjector.java:     * @param list to fill up
./geometry/partitioning/BoundaryProjector.java:     * @param point projected point to check
./geometry/partitioning/BoundaryProjector.java:     * @param hyperplane hyperplane into which the point was projected
./geometry/partitioning/BoundaryProjector.java:     * @param part boundary part
./geometry/partitioning/BoundaryProjector.java:     * @param point projected point to check
./geometry/partitioning/BoundaryProjector.java:     * @param hyperplane hyperplane into which the point was projected
./geometry/partitioning/BoundaryProjector.java:     * @param part boundary part
./geometry/partitioning/Transform.java: * @param <S> Type of the embedding space.
./geometry/partitioning/Transform.java: * @param <T> Type of the embedded sub-space.
./geometry/partitioning/Transform.java:     * @param point point to transform
./geometry/partitioning/Transform.java:     * @param hyperplane hyperplane to transform
./geometry/partitioning/Transform.java:     * @param sub sub-hyperplane to transform
./geometry/partitioning/Transform.java:     * @param original hyperplane in which the sub-hyperplane is
./geometry/partitioning/Transform.java:     * @param transformed hyperplane in which the sub-hyperplane is
./geometry/partitioning/BoundaryProjection.java: * @param <S> Type of the space.
./geometry/partitioning/BoundaryProjection.java:     * @param original original point
./geometry/partitioning/BoundaryProjection.java:     * @param projected projected point
./geometry/partitioning/BoundaryProjection.java:     * @param offset offset of the point with respect to the boundary it is projected on
./geometry/partitioning/AbstractSubHyperplane.java: * @param <S> Type of the embedding space.
./geometry/partitioning/AbstractSubHyperplane.java: * @param <T> Type of the embedded sub-space.
./geometry/partitioning/AbstractSubHyperplane.java:     * @param hyperplane underlying hyperplane
./geometry/partitioning/AbstractSubHyperplane.java:     * @param remainingRegion remaining region of the hyperplane
./geometry/partitioning/AbstractSubHyperplane.java:     * @param hyper underlying hyperplane
./geometry/partitioning/AbstractSubHyperplane.java:     * @param remaining remaining region of the hyperplane
./geometry/partitioning/AbstractSubHyperplane.java:     * @param transform D-dimension transform to apply
./geometry/partitioning/AbstractSubHyperplane.java:     * @param node current BSP tree node
./geometry/partitioning/AbstractSubHyperplane.java:     * @param transformed image of the instance hyperplane by the transform
./geometry/partitioning/AbstractSubHyperplane.java:     * @param transform transform to apply
./geometry/partitioning/AbstractSubHyperplane.java:     * @param map transformed nodes map
./geometry/partitioning/RegionFactory.java: * @param <S> Type of the space.
./geometry/partitioning/RegionFactory.java:     * @param hyperplanes collection of bounding hyperplanes
./geometry/partitioning/RegionFactory.java:     * @param region1 first region (will be unusable after the operation as
./geometry/partitioning/RegionFactory.java:     * @param region2 second region (will be unusable after the operation as
./geometry/partitioning/RegionFactory.java:     * @param region1 first region (will be unusable after the operation as
./geometry/partitioning/RegionFactory.java:     * @param region2 second region (will be unusable after the operation as
./geometry/partitioning/RegionFactory.java:     * @param region1 first region (will be unusable after the operation as
./geometry/partitioning/RegionFactory.java:     * @param region2 second region (will be unusable after the operation as
./geometry/partitioning/RegionFactory.java:     * @param region1 first region (will be unusable after the operation as
./geometry/partitioning/RegionFactory.java:     * @param region2 second region (will be unusable after the operation as
./geometry/partitioning/RegionFactory.java:     * @param region region to complement, it will not modified, a new
./geometry/partitioning/RegionFactory.java:     * @param region region to complement, it will not modified, a new
./geometry/partitioning/RegionFactory.java:     * @param node current node of the original tree
./geometry/partitioning/RegionFactory.java:     * @param node current node of the original tree
./geometry/partitioning/RegionFactory.java:     * @param map transformed nodes map
./geometry/partitioning/RegionFactory.java:         * @param region1 region to subtract from
./geometry/partitioning/RegionFactory.java:         * @param region2 region to subtract
./geometry/partitioning/RegionFactory.java:         * @param inside inside/outside indicator to use for ambiguous nodes
./geometry/partitioning/NodesSet.java: * @param <S> Type of the space.
./geometry/partitioning/NodesSet.java:     * @param node node to add
./geometry/partitioning/NodesSet.java:     * @param iterator nodes iterator
./geometry/partitioning/InsideFinder.java: * @param <S> Type of the space.
./geometry/partitioning/InsideFinder.java:     * @param region region on which to operate
./geometry/partitioning/InsideFinder.java:     * @param node current BSP tree node
./geometry/partitioning/InsideFinder.java:     * @param sub sub-hyperplane
./geometry/partitioning/BSPTree.java: * @param <S> Type of the space.
./geometry/partitioning/BSPTree.java:     * @param attribute attribute of the tree (may be null)
./geometry/partitioning/BSPTree.java:     * @param cut cut sub-hyperplane for the tree
./geometry/partitioning/BSPTree.java:     * @param plus plus side sub-tree
./geometry/partitioning/BSPTree.java:     * @param minus minus side sub-tree
./geometry/partitioning/BSPTree.java:     * @param attribute attribute associated with the node (may be null)
./geometry/partitioning/BSPTree.java:     * @param hyperplane hyperplane to insert, it will be chopped in
./geometry/partitioning/BSPTree.java:     * @param attribute attribute to associate with the node
./geometry/partitioning/BSPTree.java:     * @param visitor object visiting the tree nodes
./geometry/partitioning/BSPTree.java:     * @param sub sub-hyperplane to fit
./geometry/partitioning/BSPTree.java:     * @param point point to check
./geometry/partitioning/BSPTree.java:     * @param point point to check
./geometry/partitioning/BSPTree.java:     * @param tolerance tolerance below which points close to a cut hyperplane
./geometry/partitioning/BSPTree.java:     * @param point point to check
./geometry/partitioning/BSPTree.java:     * @param maxOffset offset below which a cut sub-hyperplane is considered
./geometry/partitioning/BSPTree.java:     * @param point point to check
./geometry/partitioning/BSPTree.java:     * @param maxOffset offset below which a cut sub-hyperplane is considered
./geometry/partitioning/BSPTree.java:     * @param close list to fill
./geometry/partitioning/BSPTree.java:     * @param tree other tree to merge with the instance (will be
./geometry/partitioning/BSPTree.java:     * @param leafMerger object implementing the final merging phase
./geometry/partitioning/BSPTree.java:     * @param tree other tree to merge with the instance (will be
./geometry/partitioning/BSPTree.java:     * @param leafMerger object implementing the final merging phase
./geometry/partitioning/BSPTree.java:     * @param parentTree parent tree to connect to (may be null)
./geometry/partitioning/BSPTree.java:     * @param isPlusChild if true and if parentTree is not null, the
./geometry/partitioning/BSPTree.java:     * @param <S> Type of the space.
./geometry/partitioning/BSPTree.java:         * @param leaf leaf node (its cut hyperplane is guaranteed to be
./geometry/partitioning/BSPTree.java:         * @param tree tree node (its cut hyperplane may be null or not)
./geometry/partitioning/BSPTree.java:         * @param parentTree parent tree to connect to (may be null)
./geometry/partitioning/BSPTree.java:         * @param isPlusChild if true and if parentTree is not null, the
./geometry/partitioning/BSPTree.java:         * @param leafFromInstance if true, the leaf node comes from the
./geometry/partitioning/BSPTree.java:     * @param <S> Type of the space.
./geometry/partitioning/BSPTree.java:         * @param node node to fix
./geometry/partitioning/BSPTree.java:     * @param sub partitioning sub-hyperplane, must be already clipped
./geometry/partitioning/BSPTree.java:     * @param parentTree parent tree to connect to (may be null)
./geometry/partitioning/BSPTree.java:     * @param isPlusChild if true and if parentTree is not null, the
./geometry/partitioning/BSPTree.java:     * @param parentTree parent tree to connect to (may be null)
./geometry/partitioning/BSPTree.java:     * @param isPlusChild if true and if parentTree is not null, the
./geometry/partitioning/BSPTree.java:     * @param vanishingHandler handler to use for handling very rare corner
./geometry/partitioning/BSPTree.java:     * @param cellAttribute attribute to set for the leaf node
./geometry/partitioning/BSPTree.java:     * @param otherLeafsAttributes attribute to set for the other leaf
./geometry/partitioning/BSPTree.java:     * @param internalAttributes attribute to set for the internal nodes
./geometry/partitioning/BSPTree.java:     * @param hyperplane chopping hyperplane
./geometry/partitioning/BSPTree.java:     * @param vanishingHandler handler to use for handling very rare corner
./geometry/partitioning/BSPTree.java:     * @param hyperplane chopping hyperplane
./geometry/partitioning/BSPTree.java:     * @param vanishingHandler handler to use for handling very rare corner
./linear/RRQRDecomposition.java:     * @param matrix The matrix to decompose.
./linear/RRQRDecomposition.java:     * @param matrix The matrix to decompose.
./linear/RRQRDecomposition.java:     * @param threshold Singularity threshold.
./linear/RRQRDecomposition.java:     * @param qrt transposed matrix
./linear/RRQRDecomposition.java:     * @param minor minor index
./linear/RRQRDecomposition.java:     * @param qrt transposed matrix
./linear/RRQRDecomposition.java:     * @param dropThreshold threshold triggering rank computation
./linear/RRQRDecomposition.java:         * @param upper upper level solver.
./linear/RRQRDecomposition.java:         * @param p permutation matrix
./linear/TriDiagonalTransformer.java:     * @param matrix Symmetrical matrix to transform.
./linear/NonPositiveDefiniteMatrixException.java:     * @param wrong Value that fails the positivity check.
./linear/NonPositiveDefiniteMatrixException.java:     * @param index Row (and column) index.
./linear/NonPositiveDefiniteMatrixException.java:     * @param threshold Absolute positivity threshold.
./linear/RectangularCholeskyDecomposition.java:     * @param matrix Symmetric positive semidefinite matrix.
./linear/RectangularCholeskyDecomposition.java:     * @param matrix Symmetric positive semidefinite matrix.
./linear/RectangularCholeskyDecomposition.java:     * @param small Diagonal elements threshold under which columns are
./linear/RealVector.java:     * @param index Index location of entry to be fetched.
./linear/RealVector.java:     * @param index element index.
./linear/RealVector.java:     * @param value new value for the element.
./linear/RealVector.java:     * @param index Index location of entry to be set.
./linear/RealVector.java:     * @param increment Value to add to the vector entry.
./linear/RealVector.java:     * @param v vector to append to this one.
./linear/RealVector.java:     * @param d double to append.
./linear/RealVector.java:     * @param index index of first element.
./linear/RealVector.java:     * @param n number of elements to be retrieved.
./linear/RealVector.java:     * @param index index of first element to be set.
./linear/RealVector.java:     * @param v vector containing the values to set.
./linear/RealVector.java:     * @param v Vector to compare instance with.
./linear/RealVector.java:     * @param n Expected dimension.
./linear/RealVector.java:     * @param index Index to check.
./linear/RealVector.java:     * @param start the index of the first entry of the subvector
./linear/RealVector.java:     * @param end the index of the last entry of the subvector (inclusive)
./linear/RealVector.java:     * @param v Vector to be added.
./linear/RealVector.java:     * @param v Vector to be subtracted.
./linear/RealVector.java:     * @param d Value to be added to each entry.
./linear/RealVector.java:     * @param d Value to be added to each entry.
./linear/RealVector.java:     * @param v Vector with which dot product should be computed
./linear/RealVector.java:     * @param v Vector.
./linear/RealVector.java:     * @param v Vector by which instance elements must be divided.
./linear/RealVector.java:     * @param v Vector by which instance elements must be multiplied
./linear/RealVector.java:     * @param v Vector to which distance is requested.
./linear/RealVector.java:     * @param v Vector to which distance is requested.
./linear/RealVector.java:     * @param v Vector to which distance is requested.
./linear/RealVector.java:     * @param d Multiplication factor.
./linear/RealVector.java:     * @param d Multiplication factor.
./linear/RealVector.java:     * @param d Value to be subtracted.
./linear/RealVector.java:     * @param d Value to be subtracted.
./linear/RealVector.java:     * @param d Value to divide by.
./linear/RealVector.java:     * @param d Value to divide by.
./linear/RealVector.java:     * @param v Vector with which outer product should be computed.
./linear/RealVector.java:     * @param v vector onto which instance must be projected.
./linear/RealVector.java:     * @param value Single value to set for all elements.
./linear/RealVector.java:     * @param function Function to apply to each entry.
./linear/RealVector.java:     * @param function Function to apply to each entry.
./linear/RealVector.java:     * @param a Coefficient of {@code this}.
./linear/RealVector.java:     * @param b Coefficient of {@code y}.
./linear/RealVector.java:     * @param y Vector with which {@code this} is linearly combined.
./linear/RealVector.java:     * @param a Weight of {@code this}.
./linear/RealVector.java:     * @param b Weight of {@code y}.
./linear/RealVector.java:     * @param y Vector with which {@code this} is linearly combined.
./linear/RealVector.java:     * @param visitor the visitor to be used to process the entries of this
./linear/RealVector.java:     * @param visitor visitor to be used to process the entries of this vector
./linear/RealVector.java:     * @param start the index of the first entry to be visited
./linear/RealVector.java:     * @param end the index of the last entry to be visited (inclusive)
./linear/RealVector.java:     * @param visitor the visitor to be used to process the entries of this
./linear/RealVector.java:     * @param visitor visitor to be used to process the entries of this vector
./linear/RealVector.java:     * @param start the index of the first entry to be visited
./linear/RealVector.java:     * @param end the index of the last entry to be visited (inclusive)
./linear/RealVector.java:     * @param visitor the visitor to be used to process and modify the entries
./linear/RealVector.java:     * @param visitor visitor to be used to process the entries of this vector
./linear/RealVector.java:     * @param start the index of the first entry to be visited
./linear/RealVector.java:     * @param end the index of the last entry to be visited (inclusive)
./linear/RealVector.java:     * @param visitor the visitor to be used to process the entries of this
./linear/RealVector.java:     * @param visitor visitor to be used to process the entries of this vector
./linear/RealVector.java:     * @param start the index of the first entry to be visited
./linear/RealVector.java:     * @param end the index of the last entry to be visited (inclusive)
./linear/RealVector.java:         * @param value New value for the entry.
./linear/RealVector.java:         * @param index New index for the entry.
./linear/RealVector.java:     * @param other Object to test for equality.
./linear/RealVector.java:         * @param e entry to advance.
./linear/RealVector.java:     * @param v Vector for which an unmodifiable view is to be returned.
./linear/DefaultIterativeLinearSolverEvent.java:     * @param source the iterative solver which fired this event
./linear/DefaultIterativeLinearSolverEvent.java:     * @param iterations the number of iterations performed at the time
./linear/DefaultIterativeLinearSolverEvent.java:     * @param x the current estimate of the solution
./linear/DefaultIterativeLinearSolverEvent.java:     * @param b the right-hand side vector
./linear/DefaultIterativeLinearSolverEvent.java:     * @param r the current estimate of the residual (can be {@code null})
./linear/DefaultIterativeLinearSolverEvent.java:     * @param rnorm the norm of the current estimate of the residual
./linear/DefaultIterativeLinearSolverEvent.java:     * @param source the iterative solver which fired this event
./linear/DefaultIterativeLinearSolverEvent.java:     * @param iterations the number of iterations performed at the time
./linear/DefaultIterativeLinearSolverEvent.java:     * @param x the current estimate of the solution
./linear/DefaultIterativeLinearSolverEvent.java:     * @param b the right-hand side vector
./linear/DefaultIterativeLinearSolverEvent.java:     * @param rnorm the norm of the current estimate of the residual
./linear/MatrixUtils.java:     * @param rows number of rows of the matrix
./linear/MatrixUtils.java:     * @param columns number of columns of the matrix
./linear/MatrixUtils.java:     * @param <T> the type of the field elements
./linear/MatrixUtils.java:     * @param field field to which the matrix elements belong
./linear/MatrixUtils.java:     * @param rows number of rows of the matrix
./linear/MatrixUtils.java:     * @param columns number of columns of the matrix
./linear/MatrixUtils.java:     * @param data input array
./linear/MatrixUtils.java:     * @param <T> the type of the field elements
./linear/MatrixUtils.java:     * @param data input array
./linear/MatrixUtils.java:     * @param dimension dimension of identity matrix to generate
./linear/MatrixUtils.java:     * @param <T> the type of the field elements
./linear/MatrixUtils.java:     * @param field field to which the elements belong
./linear/MatrixUtils.java:     * @param dimension dimension of identity matrix to generate
./linear/MatrixUtils.java:     * @param diagonal diagonal elements of the matrix (the array elements
./linear/MatrixUtils.java:     * @param <T> the type of the field elements
./linear/MatrixUtils.java:     * @param diagonal diagonal elements of the matrix (the array elements
./linear/MatrixUtils.java:     * @param data the input data
./linear/MatrixUtils.java:     * @param <T> the type of the field elements
./linear/MatrixUtils.java:     * @param data the input data
./linear/MatrixUtils.java:     * @param rowData the input row data
./linear/MatrixUtils.java:     * @param <T> the type of the field elements
./linear/MatrixUtils.java:     * @param rowData the input row data
./linear/MatrixUtils.java:     * @param columnData  the input column data
./linear/MatrixUtils.java:     * @param <T> the type of the field elements
./linear/MatrixUtils.java:     * @param columnData  the input column data
./linear/MatrixUtils.java:     * @param matrix Matrix to check.
./linear/MatrixUtils.java:     * @param relativeTolerance Tolerance of the symmetry check.
./linear/MatrixUtils.java:     * @param raiseException If {@code true}, an exception will be raised if
./linear/MatrixUtils.java:     * @param matrix Matrix to check.
./linear/MatrixUtils.java:     * @param eps Relative tolerance.
./linear/MatrixUtils.java:     * @param matrix Matrix to check.
./linear/MatrixUtils.java:     * @param eps Relative tolerance.
./linear/MatrixUtils.java:     * @param m Matrix.
./linear/MatrixUtils.java:     * @param row Row index to check.
./linear/MatrixUtils.java:     * @param column Column index to check.
./linear/MatrixUtils.java:     * @param m Matrix.
./linear/MatrixUtils.java:     * @param row Row index to check.
./linear/MatrixUtils.java:     * @param m Matrix.
./linear/MatrixUtils.java:     * @param column Column index to check.
./linear/MatrixUtils.java:     * @param m Matrix.
./linear/MatrixUtils.java:     * @param startRow Initial row index.
./linear/MatrixUtils.java:     * @param endRow Final row index.
./linear/MatrixUtils.java:     * @param startColumn Initial column index.
./linear/MatrixUtils.java:     * @param endColumn Final column index.
./linear/MatrixUtils.java:     * @param m Matrix.
./linear/MatrixUtils.java:     * @param selectedRows Array of row indices.
./linear/MatrixUtils.java:     * @param selectedColumns Array of column indices.
./linear/MatrixUtils.java:     * @param left Left hand side matrix.
./linear/MatrixUtils.java:     * @param right Right hand side matrix.
./linear/MatrixUtils.java:     * @param left Left hand side matrix.
./linear/MatrixUtils.java:     * @param right Right hand side matrix.
./linear/MatrixUtils.java:     * @param left Left hand side matrix.
./linear/MatrixUtils.java:     * @param right Right hand side matrix.
./linear/MatrixUtils.java:     * @param m Matrix to convert.
./linear/MatrixUtils.java:     * @param m Matrix to convert.
./linear/MatrixUtils.java:     * @param vector real vector to serialize
./linear/MatrixUtils.java:     * @param oos stream where the real vector should be written
./linear/MatrixUtils.java:     * @param instance instance in which the field must be set up
./linear/MatrixUtils.java:     * @param fieldName name of the field within the class (may be private and final)
./linear/MatrixUtils.java:     * @param ois stream from which the real vector should be read
./linear/MatrixUtils.java:     * @param matrix real matrix to serialize
./linear/MatrixUtils.java:     * @param oos stream where the real matrix should be written
./linear/MatrixUtils.java:     * @param instance instance in which the field must be set up
./linear/MatrixUtils.java:     * @param fieldName name of the field within the class (may be private and final)
./linear/MatrixUtils.java:     * @param ois stream from which the real matrix should be read
./linear/MatrixUtils.java:     * @param rm RealMatrix which is lower triangular
./linear/MatrixUtils.java:     * @param b  RealVector this is overwritten
./linear/MatrixUtils.java:     * @param rm RealMatrix which is upper triangular
./linear/MatrixUtils.java:     * @param b  RealVector this is overwritten
./linear/MatrixUtils.java:     * @param m Matrix whose inverse must be computed.
./linear/MatrixUtils.java:     * @param splitIndex Index that determines the "split" line and
./linear/MatrixUtils.java:     * @param matrix Matrix whose inverse shall be computed
./linear/MatrixUtils.java:     * @param matrix Matrix whose inverse shall be computed
./linear/MatrixUtils.java:     * @param threshold Singularity threshold
./linear/DefaultFieldMatrixChangingVisitor.java: * @param <T> the type of the field elements
./linear/DefaultFieldMatrixChangingVisitor.java:     * @param zero additive identity of the field
./linear/RealVectorFormat.java:     * @param format the custom format for components.
./linear/RealVectorFormat.java:     * @param prefix prefix to use instead of the default "{"
./linear/RealVectorFormat.java:     * @param suffix suffix to use instead of the default "}"
./linear/RealVectorFormat.java:     * @param separator separator to use instead of the default "; "
./linear/RealVectorFormat.java:     * @param prefix prefix to use instead of the default "{"
./linear/RealVectorFormat.java:     * @param suffix suffix to use instead of the default "}"
./linear/RealVectorFormat.java:     * @param separator separator to use instead of the default "; "
./linear/RealVectorFormat.java:     * @param format the custom format for components.
./linear/RealVectorFormat.java:     * @param locale the specific locale used by the format.
./linear/RealVectorFormat.java:     * @param v RealVector object to format.
./linear/RealVectorFormat.java:     * @param vector the object to format.
./linear/RealVectorFormat.java:     * @param toAppendTo where the text is to be appended
./linear/RealVectorFormat.java:     * @param pos On input: an alignment field, if desired. On output: the
./linear/RealVectorFormat.java:     * @param source String to parse.
./linear/RealVectorFormat.java:     * @param source String to parse.
./linear/RealVectorFormat.java:     * @param pos input/ouput parsing parameter.
./linear/FieldMatrixPreservingVisitor.java: * @param <T> the type of the field elements
./linear/FieldMatrixPreservingVisitor.java:     * @param rows number of rows of the matrix
./linear/FieldMatrixPreservingVisitor.java:     * @param columns number of columns of the matrix
./linear/FieldMatrixPreservingVisitor.java:     * @param startRow Initial row index
./linear/FieldMatrixPreservingVisitor.java:     * @param endRow Final row index (inclusive)
./linear/FieldMatrixPreservingVisitor.java:     * @param startColumn Initial column index
./linear/FieldMatrixPreservingVisitor.java:     * @param endColumn Final column index (inclusive)
./linear/FieldMatrixPreservingVisitor.java:     * @param row row index of the entry
./linear/FieldMatrixPreservingVisitor.java:     * @param column column index of the entry
./linear/FieldMatrixPreservingVisitor.java:     * @param value current value of the entry
./linear/BlockRealMatrix.java:     * @param rows  the number of rows in the new matrix
./linear/BlockRealMatrix.java:     * @param columns  the number of columns in the new matrix
./linear/BlockRealMatrix.java:     * @param rawData data for new matrix, in raw layout
./linear/BlockRealMatrix.java:     * @param rows Number of rows in the new matrix.
./linear/BlockRealMatrix.java:     * @param columns Number of columns in the new matrix.
./linear/BlockRealMatrix.java:     * @param blockData data for new matrix
./linear/BlockRealMatrix.java:     * @param copyArray Whether the input array will be copied or referenced.
./linear/BlockRealMatrix.java:     * @param rawData Data array in raw layout.
./linear/BlockRealMatrix.java:     * @param rows Number of rows in the new matrix.
./linear/BlockRealMatrix.java:     * @param columns Number of columns in the new matrix.
./linear/BlockRealMatrix.java:     * @param m Matrix to be added.
./linear/BlockRealMatrix.java:     * @param m Matrix to be subtracted.
./linear/BlockRealMatrix.java:     * @param m Matrix to postmultiply by.
./linear/BlockRealMatrix.java:     * @param srcBlock source block
./linear/BlockRealMatrix.java:     * @param srcWidth source block width ({@link #BLOCK_SIZE} or smaller)
./linear/BlockRealMatrix.java:     * @param srcStartRow start row in the source block
./linear/BlockRealMatrix.java:     * @param srcEndRow end row (exclusive) in the source block
./linear/BlockRealMatrix.java:     * @param srcStartColumn start column in the source block
./linear/BlockRealMatrix.java:     * @param srcEndColumn end column (exclusive) in the source block
./linear/BlockRealMatrix.java:     * @param dstBlock destination block
./linear/BlockRealMatrix.java:     * @param dstWidth destination block width ({@link #BLOCK_SIZE} or smaller)
./linear/BlockRealMatrix.java:     * @param dstStartRow start row in the destination block
./linear/BlockRealMatrix.java:     * @param dstStartColumn start column in the destination block
./linear/BlockRealMatrix.java:     * @param row the row to be set
./linear/BlockRealMatrix.java:     * @param matrix row matrix (must have one row and the same number of columns
./linear/BlockRealMatrix.java:     * @param column the column to be set
./linear/BlockRealMatrix.java:     * @param matrix column matrix (must have one column and the same number of rows
./linear/BlockRealMatrix.java:     * @param blockRow row index (in block sense) of the block
./linear/BlockRealMatrix.java:     * @param blockColumn column index (in block sense) of the block
./linear/EigenDecomposition.java:     * @param matrix Matrix to decompose.
./linear/EigenDecomposition.java:     * @param matrix Matrix to decompose.
./linear/EigenDecomposition.java:     * @param splitTolerance Dummy parameter (present for backward
./linear/EigenDecomposition.java:     * @param main Main diagonal of the symmetric tridiagonal form.
./linear/EigenDecomposition.java:     * @param secondary Secondary of the tridiagonal form.
./linear/EigenDecomposition.java:     * @param main Main diagonal of the symmetric tridiagonal form.
./linear/EigenDecomposition.java:     * @param secondary Secondary of the tridiagonal form.
./linear/EigenDecomposition.java:     * @param splitTolerance Dummy parameter (present for backward
./linear/EigenDecomposition.java:     * @param i index of the eigenvalue (counting from 0)
./linear/EigenDecomposition.java:     * @param i Index of the eigenvalue (counting from 0).
./linear/EigenDecomposition.java:     * @param i Index of the eigenvector (counting from 0).
./linear/EigenDecomposition.java:         * @param realEigenvalues Real parts of the eigenvalues.
./linear/EigenDecomposition.java:         * @param imagEigenvalues Imaginary parts of the eigenvalues.
./linear/EigenDecomposition.java:         * @param eigenvectors Eigenvectors.
./linear/EigenDecomposition.java:         * @param b Right-hand side of the equation A &times; X = B.
./linear/EigenDecomposition.java:         * @param i which eigenvalue to find the norm of
./linear/EigenDecomposition.java:     * @param matrix Matrix to transform.
./linear/EigenDecomposition.java:     * @param householderMatrix Householder matrix of the transformation
./linear/EigenDecomposition.java:     * @param matrix Matrix to transform.
./linear/EigenDecomposition.java:     * @param xr real part of the first number
./linear/EigenDecomposition.java:     * @param xi imaginary part of the first number
./linear/EigenDecomposition.java:     * @param yr real part of the second number
./linear/EigenDecomposition.java:     * @param yi imaginary part of the second number
./linear/EigenDecomposition.java:     * @param schur the schur transformation of the matrix
./linear/AbstractRealMatrix.java:     * @param rowDimension  the number of rows in the new matrix
./linear/AbstractRealMatrix.java:     * @param columnDimension  the number of columns in the new matrix
./linear/AbstractRealMatrix.java:     * @param object the object to test equality against.
./linear/IllConditionedOperatorException.java:     * @param cond An estimate of the condition number of the offending linear
./linear/QRDecomposition.java:     * @param matrix The matrix to decompose.
./linear/QRDecomposition.java:     * @param matrix The matrix to decompose.
./linear/QRDecomposition.java:     * @param threshold Singularity threshold.
./linear/QRDecomposition.java:     * @param matrix transposed matrix
./linear/QRDecomposition.java:     * @param minor minor index
./linear/QRDecomposition.java:     * @param matrix transposed matrix
./linear/QRDecomposition.java:         * @param qrt Packed TRANSPOSED representation of the QR decomposition.
./linear/QRDecomposition.java:         * @param rDiag Diagonal elements of R.
./linear/QRDecomposition.java:         * @param threshold Singularity threshold.
./linear/Array2DRowFieldMatrix.java: * @param <T> the type of the field elements
./linear/Array2DRowFieldMatrix.java:     * @param field field to which the elements belong
./linear/Array2DRowFieldMatrix.java:     * @param field Field to which the elements belong.
./linear/Array2DRowFieldMatrix.java:     * @param rowDimension Number of rows in the new matrix.
./linear/Array2DRowFieldMatrix.java:     * @param columnDimension Number of columns in the new matrix.
./linear/Array2DRowFieldMatrix.java:     * @param d Data for the new matrix.
./linear/Array2DRowFieldMatrix.java:     * @param field Field to which the elements belong.
./linear/Array2DRowFieldMatrix.java:     * @param d Data for the new matrix.
./linear/Array2DRowFieldMatrix.java:     * @param d Data for the new matrix.
./linear/Array2DRowFieldMatrix.java:     * @param copyArray Whether to copy or reference the input array.
./linear/Array2DRowFieldMatrix.java:     * @param field Field to which the elements belong.
./linear/Array2DRowFieldMatrix.java:     * @param d Data for the new matrix.
./linear/Array2DRowFieldMatrix.java:     * @param copyArray Whether to copy or reference the input array.
./linear/Array2DRowFieldMatrix.java:     * @param v Column vector holding data for new matrix.
./linear/Array2DRowFieldMatrix.java:     * @param field Field to which the elements belong.
./linear/Array2DRowFieldMatrix.java:     * @param v Column vector holding data for new matrix.
./linear/Array2DRowFieldMatrix.java:     * @param m Matrix to be added.
./linear/Array2DRowFieldMatrix.java:     * @param m Matrix to be subtracted.
./linear/Array2DRowFieldMatrix.java:     * @param m Matrix to postmultiply by.
./linear/Array2DRowFieldMatrix.java:     * @param in Data to copy.
./linear/OpenMapRealVector.java:     * @param dimension Size of the vector.
./linear/OpenMapRealVector.java:     * @param dimension Size of the vector.
./linear/OpenMapRealVector.java:     * @param epsilon Tolerance below which a value considered zero.
./linear/OpenMapRealVector.java:     * @param v Original vector.
./linear/OpenMapRealVector.java:     * @param resize Amount to add.
./linear/OpenMapRealVector.java:     * @param dimension Size of the vector.
./linear/OpenMapRealVector.java:     * @param expectedSize The expected number of non-zero entries.
./linear/OpenMapRealVector.java:     * @param dimension Size of the vector.
./linear/OpenMapRealVector.java:     * @param expectedSize Expected number of non-zero entries.
./linear/OpenMapRealVector.java:     * @param epsilon Tolerance below which a value is considered zero.
./linear/OpenMapRealVector.java:     * @param values Set of values to create from.
./linear/OpenMapRealVector.java:     * @param values Set of values to create from.
./linear/OpenMapRealVector.java:     * @param epsilon Tolerance below which a value is considered zero.
./linear/OpenMapRealVector.java:     * @param values The set of values to create from
./linear/OpenMapRealVector.java:     * @param values Set of values to create from.
./linear/OpenMapRealVector.java:     * @param epsilon Tolerance below which a value is considered zero.
./linear/OpenMapRealVector.java:     * @param v Instance to copy from.
./linear/OpenMapRealVector.java:     * @param v Instance to copy from.
./linear/OpenMapRealVector.java:     * @param value Value to test
./linear/OpenMapRealVector.java:     * @param v Vector to add.
./linear/OpenMapRealVector.java:     * @param v vector to append
./linear/OpenMapRealVector.java:     * @param v Vector.
./linear/OpenMapRealVector.java:     * @param v Vector to compute distance to.
./linear/OpenMapRealVector.java:     * @param v Vector to which distance is requested.
./linear/OpenMapRealVector.java:     * @param v Vector to compute distance from.
./linear/OpenMapRealVector.java:     * @param v Vector to subtract from {@code this}.
./linear/OpenMapRealVector.java:         * @param iter Iterator pointing to the entry.
./linear/OpenMapRealMatrix.java:     * @param rowDimension Number of rows of the matrix.
./linear/OpenMapRealMatrix.java:     * @param columnDimension Number of columns of the matrix.
./linear/OpenMapRealMatrix.java:     * @param matrix matrix to copy.
./linear/OpenMapRealMatrix.java:     * @param m Matrix to be added.
./linear/OpenMapRealMatrix.java:     * @param m Matrix to be subtracted.
./linear/OpenMapRealMatrix.java:     * @param m Matrix to postmultiply by.
./linear/OpenMapRealMatrix.java:     * @param row row index of the matrix element
./linear/OpenMapRealMatrix.java:     * @param column column index of the matrix element
./linear/SparseFieldMatrix.java: * @param <T> the type of the field elements
./linear/SparseFieldMatrix.java:     * @param field Field to which the elements belong.
./linear/SparseFieldMatrix.java:     * @param field Field to which the elements belong.
./linear/SparseFieldMatrix.java:     * @param rowDimension Number of rows in the new matrix.
./linear/SparseFieldMatrix.java:     * @param columnDimension Number of columns in the new matrix.
./linear/SparseFieldMatrix.java:     * @param other Instance to copy.
./linear/SparseFieldMatrix.java:     * @param other Instance to copy.
./linear/SparseFieldMatrix.java:     * @param row Row index of the matrix element.
./linear/SparseFieldMatrix.java:     * @param column Column index of the matrix element.
./linear/RealVectorPreservingVisitor.java:     * @param dimension the size of the vector
./linear/RealVectorPreservingVisitor.java:     * @param start the index of the first entry to be visited
./linear/RealVectorPreservingVisitor.java:     * @param end the index of the last entry to be visited (inclusive)
./linear/RealVectorPreservingVisitor.java:     * @param index the index of the entry being visited
./linear/RealVectorPreservingVisitor.java:     * @param value the value of the entry being visited
./linear/NonSquareMatrixException.java:     * @param wrong Row dimension.
./linear/NonSquareMatrixException.java:     * @param expected Column dimension.
./linear/RealLinearOperator.java:     * @param x the vector to operate on
./linear/RealLinearOperator.java:     * @param x the vector to operate on
./linear/FieldDecompositionSolver.java: * @param <T> the type of the field elements
./linear/FieldDecompositionSolver.java:     * @param b right-hand side of the equation A &times; X = B
./linear/FieldDecompositionSolver.java:     * @param b right-hand side of the equation A &times; X = B
./linear/FieldLUDecomposition.java: * @param <T> the type of the field elements
./linear/FieldLUDecomposition.java:     * @param matrix The matrix to decompose.
./linear/FieldLUDecomposition.java:     * @param <T> the type of the field elements
./linear/FieldLUDecomposition.java:         * @param field field to which the matrix elements belong
./linear/FieldLUDecomposition.java:         * @param lu entries of LU decomposition
./linear/FieldLUDecomposition.java:         * @param pivot pivot permutation associated with LU decomposition
./linear/FieldLUDecomposition.java:         * @param singular singularity indicator
./linear/FieldLUDecomposition.java:         * @param b right-hand side of the equation A &times; X = B
./linear/RealMatrix.java:     * @param rowDimension the number of rows in the new matrix
./linear/RealMatrix.java:     * @param columnDimension the number of columns in the new matrix
./linear/RealMatrix.java:     * @param m matrix to be added
./linear/RealMatrix.java:     * @param m matrix to be subtracted
./linear/RealMatrix.java:     * @param d value to be added to each entry
./linear/RealMatrix.java:     * @param d value to multiply all entries by
./linear/RealMatrix.java:     * @param m matrix to postmultiply by
./linear/RealMatrix.java:     * @param m matrix to premultiply by
./linear/RealMatrix.java:     * @param p raise {@code this} to power {@code p}
./linear/RealMatrix.java:     * @param startRow Initial row index
./linear/RealMatrix.java:     * @param endRow Final row index (inclusive)
./linear/RealMatrix.java:     * @param startColumn Initial column index
./linear/RealMatrix.java:     * @param endColumn Final column index (inclusive)
./linear/RealMatrix.java:     * @param selectedRows Array of row indices.
./linear/RealMatrix.java:     * @param selectedColumns Array of column indices.
./linear/RealMatrix.java:     * @param startRow Initial row index
./linear/RealMatrix.java:     * @param endRow Final row index (inclusive)
./linear/RealMatrix.java:     * @param startColumn Initial column index
./linear/RealMatrix.java:     * @param endColumn Final column index (inclusive)
./linear/RealMatrix.java:     * @param destination The arrays where the submatrix data should be copied
./linear/RealMatrix.java:     * @param selectedRows Array of row indices.
./linear/RealMatrix.java:     * @param selectedColumns Array of column indices.
./linear/RealMatrix.java:     * @param destination The arrays where the submatrix data should be copied
./linear/RealMatrix.java:    * @param subMatrix  array containing the submatrix replacement data
./linear/RealMatrix.java:    * @param row  row coordinate of the top, left element to be replaced
./linear/RealMatrix.java:    * @param column  column coordinate of the top, left element to be replaced
./linear/RealMatrix.java:    * @param row Row to be fetched.
./linear/RealMatrix.java:     * @param row Row to be set.
./linear/RealMatrix.java:     * @param matrix Row matrix to be copied (must have one row and the same
./linear/RealMatrix.java:     * @param column Column to be fetched.
./linear/RealMatrix.java:     * @param column Column to be set.
./linear/RealMatrix.java:     * @param matrix Column matrix to be copied (must have one column and the
./linear/RealMatrix.java:     * @param row Row to be fetched.
./linear/RealMatrix.java:     * @param row Row to be set.
./linear/RealMatrix.java:     * @param vector row vector to be copied (must have the same number of
./linear/RealMatrix.java:     * @param column Column to be fetched.
./linear/RealMatrix.java:     * @param column Column to be set.
./linear/RealMatrix.java:     * @param vector column vector to be copied (must have the same number of
./linear/RealMatrix.java:     * @param row Row to be fetched.
./linear/RealMatrix.java:     * @param row Row to be set.
./linear/RealMatrix.java:     * @param array Row matrix to be copied (must have the same number of
./linear/RealMatrix.java:     * @param column Column to be fetched.
./linear/RealMatrix.java:     * @param column Column to be set.
./linear/RealMatrix.java:     * @param array Column array to be copied (must have the same number of
./linear/RealMatrix.java:     * @param row Row index of entry to be fetched.
./linear/RealMatrix.java:     * @param column Column index of entry to be fetched.
./linear/RealMatrix.java:     * @param row Row index of entry to be set.
./linear/RealMatrix.java:     * @param column Column index of entry to be set.
./linear/RealMatrix.java:     * @param value the new value of the entry.
./linear/RealMatrix.java:     * @param row Row index of the entry to be modified.
./linear/RealMatrix.java:     * @param column Column index of the entry to be modified.
./linear/RealMatrix.java:     * @param increment value to add to the matrix entry.
./linear/RealMatrix.java:     * @param row Row index of the entry to be modified.
./linear/RealMatrix.java:     * @param column Column index of the entry to be modified.
./linear/RealMatrix.java:     * @param factor Multiplication factor for the matrix entry.
./linear/RealMatrix.java:     * @param v the vector to operate on
./linear/RealMatrix.java:     * @param v the vector to operate on
./linear/RealMatrix.java:     * @param v the row vector to premultiply by
./linear/RealMatrix.java:     * @param v the row vector to premultiply by
./linear/RealMatrix.java:     * @param visitor visitor used to process all matrix entries
./linear/RealMatrix.java:     * @param visitor visitor used to process all matrix entries
./linear/RealMatrix.java:     * @param visitor visitor used to process all matrix entries
./linear/RealMatrix.java:     * @param startRow Initial row index
./linear/RealMatrix.java:     * @param endRow Final row index (inclusive)
./linear/RealMatrix.java:     * @param startColumn Initial column index
./linear/RealMatrix.java:     * @param endColumn Final column index
./linear/RealMatrix.java:     * @param visitor visitor used to process all matrix entries
./linear/RealMatrix.java:     * @param startRow Initial row index
./linear/RealMatrix.java:     * @param endRow Final row index (inclusive)
./linear/RealMatrix.java:     * @param startColumn Initial column index
./linear/RealMatrix.java:     * @param endColumn Final column index
./linear/RealMatrix.java:     * @param visitor visitor used to process all matrix entries
./linear/RealMatrix.java:     * @param visitor visitor used to process all matrix entries
./linear/RealMatrix.java:     * @param visitor visitor used to process all matrix entries
./linear/RealMatrix.java:     * @param startRow Initial row index
./linear/RealMatrix.java:     * @param endRow Final row index (inclusive)
./linear/RealMatrix.java:     * @param startColumn Initial column index
./linear/RealMatrix.java:     * @param endColumn Final column index
./linear/RealMatrix.java:     * @param visitor visitor used to process all matrix entries
./linear/RealMatrix.java:     * @param startRow Initial row index
./linear/RealMatrix.java:     * @param endRow Final row index (inclusive)
./linear/RealMatrix.java:     * @param startColumn Initial column index
./linear/RealMatrix.java:     * @param endColumn Final column index
./linear/RealMatrix.java:     * @param visitor visitor used to process all matrix entries
./linear/RealMatrix.java:     * @param visitor visitor used to process all matrix entries
./linear/RealMatrix.java:     * @param visitor visitor used to process all matrix entries
./linear/RealMatrix.java:     * @param startRow Initial row index
./linear/RealMatrix.java:     * @param endRow Final row index (inclusive)
./linear/RealMatrix.java:     * @param startColumn Initial column index
./linear/RealMatrix.java:     * @param endColumn Final column index (inclusive)
./linear/RealMatrix.java:     * @param visitor visitor used to process all matrix entries
./linear/RealMatrix.java:     * @param startRow Initial row index
./linear/RealMatrix.java:     * @param endRow Final row index (inclusive)
./linear/RealMatrix.java:     * @param startColumn Initial column index
./linear/RealMatrix.java:     * @param endColumn Final column index (inclusive)
./linear/DecompositionSolver.java:     * @param b right-hand side of the equation A &times; X = B
./linear/DecompositionSolver.java:     * @param b right-hand side of the equation A &times; X = B
./linear/DiagonalMatrix.java:     * @param dimension Number of rows and columns in the new matrix.
./linear/DiagonalMatrix.java:     * @param d Data for the new matrix.
./linear/DiagonalMatrix.java:     * @param d Data for new matrix.
./linear/DiagonalMatrix.java:     * @param copyArray if {@code true}, the input array will be copied,
./linear/DiagonalMatrix.java:     * @param m Matrix to be added.
./linear/DiagonalMatrix.java:     * @param m Matrix to be subtracted.
./linear/DiagonalMatrix.java:     * @param m matrix to postmultiply by
./linear/DiagonalMatrix.java:     * @param m matrix to postmultiply by
./linear/DiagonalMatrix.java:     * @param value value to check
./linear/DiagonalMatrix.java:     * @param threshold Singularity threshold.
./linear/DiagonalMatrix.java:     * @param threshold Singularity threshold.
./linear/IterativeLinearSolverEvent.java:     * @param source the iterative algorithm on which the event initially
./linear/IterativeLinearSolverEvent.java:     * @param iterations the number of iterations performed at the time
./linear/AbstractFieldMatrix.java: * @param <T> Type of the field elements.
./linear/AbstractFieldMatrix.java:     * @param field field to which the elements belong
./linear/AbstractFieldMatrix.java:     * @param field Field to which the elements belong.
./linear/AbstractFieldMatrix.java:     * @param rowDimension Number of rows in the new matrix.
./linear/AbstractFieldMatrix.java:     * @param columnDimension Number of columns in the new matrix.
./linear/AbstractFieldMatrix.java:     * @param <T> Type of the field elements.
./linear/AbstractFieldMatrix.java:     * @param d Data array.
./linear/AbstractFieldMatrix.java:     * @param <T> Type of the field elements.
./linear/AbstractFieldMatrix.java:     * @param d Data array.
./linear/AbstractFieldMatrix.java:     * @param <T> Type of the field elements
./linear/AbstractFieldMatrix.java:     * @param field field to which array elements belong
./linear/AbstractFieldMatrix.java:     * @param rows number of rows
./linear/AbstractFieldMatrix.java:     * @param columns number of columns (may be negative to build partial
./linear/AbstractFieldMatrix.java:     * @param <T> the type of the field elements
./linear/AbstractFieldMatrix.java:     * @param field field to which array elements belong
./linear/AbstractFieldMatrix.java:     * @param length of the array
./linear/AbstractFieldMatrix.java:     * @param object the object to test equality against.
./linear/AbstractFieldMatrix.java:     * @param row Row index to check.
./linear/AbstractFieldMatrix.java:     * @param column Column index to check.
./linear/AbstractFieldMatrix.java:     * @param startRow Initial row index.
./linear/AbstractFieldMatrix.java:     * @param endRow Final row index.
./linear/AbstractFieldMatrix.java:     * @param startColumn Initial column index.
./linear/AbstractFieldMatrix.java:     * @param endColumn Final column index.
./linear/AbstractFieldMatrix.java:     * @param selectedRows Array of row indices.
./linear/AbstractFieldMatrix.java:     * @param selectedColumns Array of column indices.
./linear/AbstractFieldMatrix.java:     * @param m Matrix to check.
./linear/AbstractFieldMatrix.java:     * @param m Matrix to check.
./linear/AbstractFieldMatrix.java:     * @param m Matrix to check.
./linear/FieldVector.java: * @param <T> the type of the field elements
./linear/FieldVector.java:     * @param v vector to be added
./linear/FieldVector.java:     * @param v vector to be subtracted
./linear/FieldVector.java:     * @param d value to be added to each entry
./linear/FieldVector.java:     * @param d value to be added to each entry
./linear/FieldVector.java:     * @param d value to be subtracted to each entry
./linear/FieldVector.java:     * @param d value to be subtracted to each entry
./linear/FieldVector.java:     * @param d value to multiply all entries by
./linear/FieldVector.java:     * @param d value to multiply all entries by
./linear/FieldVector.java:     * @param d value to divide all entries by
./linear/FieldVector.java:     * @param d value to divide all entries by
./linear/FieldVector.java:     * @param v vector by which instance elements must be multiplied
./linear/FieldVector.java:     * @param v vector by which instance elements must be divided
./linear/FieldVector.java:     * @param v vector with which dot product should be computed
./linear/FieldVector.java:     * @param v vector onto which {@code this} must be projected
./linear/FieldVector.java:     * @param v vector with which outer product should be computed
./linear/FieldVector.java:     * @param index Index location of entry to be fetched.
./linear/FieldVector.java:     * @param index element index.
./linear/FieldVector.java:     * @param value new value for the element.
./linear/FieldVector.java:     * @param v vector to append to this one.
./linear/FieldVector.java:     * @param d T to append.
./linear/FieldVector.java:     * @param index index of first element.
./linear/FieldVector.java:     * @param n number of elements to be retrieved.
./linear/FieldVector.java:     * @param index index of first element to be set.
./linear/FieldVector.java:     * @param v vector containing the values to set.
./linear/FieldVector.java:     * @param value single value to set for all elements
./linear/SymmLQ.java:         * @param a the linear operator A of the system
./linear/SymmLQ.java:         * @param m the preconditioner, M (can be {@code null})
./linear/SymmLQ.java:         * @param b the right-hand side vector
./linear/SymmLQ.java:         * @param goodb usually {@code false}, except if {@code x} is expected
./linear/SymmLQ.java:         * @param shift the amount to be subtracted to all diagonal elements of
./linear/SymmLQ.java:         * @param delta the &delta; parameter for the default stopping criterion
./linear/SymmLQ.java:         * @param check {@code true} if self-adjointedness of both matrix and
./linear/SymmLQ.java:         * @param l the linear operator L
./linear/SymmLQ.java:         * @param x the candidate vector x
./linear/SymmLQ.java:         * @param y the candidate vector y = L &middot; x
./linear/SymmLQ.java:         * @param z the vector z = L &middot; y
./linear/SymmLQ.java:         * @param l the offending linear operator
./linear/SymmLQ.java:         * @param v the offending vector
./linear/SymmLQ.java:         * @param a the scalar by which {@code x} is to be multiplied
./linear/SymmLQ.java:         * @param x the vector to be added to {@code y}
./linear/SymmLQ.java:         * @param y the vector to be incremented
./linear/SymmLQ.java:         * @param a the scalar by which {@code x} is to be multiplied
./linear/SymmLQ.java:         * @param x the first vector to be added to {@code z}
./linear/SymmLQ.java:         * @param b the scalar by which {@code y} is to be multiplied
./linear/SymmLQ.java:         * @param y the second vector to be added to {@code z}
./linear/SymmLQ.java:         * @param z the vector to be incremented
./linear/SymmLQ.java:         * @param x the vector to be updated with the refined value of xL
./linear/SymmLQ.java:     * @param maxIterations the maximum number of iterations
./linear/SymmLQ.java:     * @param delta the &delta; parameter for the default stopping criterion
./linear/SymmLQ.java:     * @param check {@code true} if self-adjointedness of both matrix and
./linear/SymmLQ.java:     * @param manager the custom iteration manager
./linear/SymmLQ.java:     * @param delta the &delta; parameter for the default stopping criterion
./linear/SymmLQ.java:     * @param check {@code true} if self-adjointedness of both matrix and
./linear/SymmLQ.java:     * @param a the linear operator A of the system
./linear/SymmLQ.java:     * @param m the preconditioner, M (can be {@code null})
./linear/SymmLQ.java:     * @param b the right-hand side vector
./linear/SymmLQ.java:     * @param goodb usually {@code false}, except if {@code x} is expected to
./linear/SymmLQ.java:     * @param shift the amount to be subtracted to all diagonal elements of A
./linear/SymmLQ.java:     * @param x not meaningful in this implementation; should not be considered
./linear/SymmLQ.java:     * @param a the linear operator A of the system
./linear/SymmLQ.java:     * @param b the right-hand side vector
./linear/SymmLQ.java:     * @param goodb usually {@code false}, except if {@code x} is expected to
./linear/SymmLQ.java:     * @param shift the amount to be subtracted to all diagonal elements of A
./linear/SymmLQ.java:     * @param x not meaningful in this implementation; should not be considered
./linear/SymmLQ.java:     * @param x the vector to be updated with the solution; {@code x} should
./linear/SymmLQ.java:     * @param a the linear operator A of the system
./linear/SymmLQ.java:     * @param m the preconditioner, M (can be {@code null})
./linear/SymmLQ.java:     * @param b the right-hand side vector
./linear/SymmLQ.java:     * @param x the vector to be updated with the solution; {@code x} should
./linear/SymmLQ.java:     * @param goodb usually {@code false}, except if {@code x} is expected to
./linear/SymmLQ.java:     * @param shift the amount to be subtracted to all diagonal elements of A
./linear/SymmLQ.java:     * @param x the vector to be updated with the solution; {@code x} should
./linear/SchurTransformer.java:     * @param matrix matrix to transform
./linear/SchurTransformer.java:     * @param startIdx the starting index for the search
./linear/SchurTransformer.java:     * @param norm the L1 norm of the matrix
./linear/SchurTransformer.java:     * @param l the index of the small sub-diagonal element
./linear/SchurTransformer.java:     * @param idx the current eigenvalue index
./linear/SchurTransformer.java:     * @param iteration the current iteration
./linear/SchurTransformer.java:     * @param shift holder for shift information
./linear/SchurTransformer.java:     * @param il the index of the small sub-diagonal element
./linear/SchurTransformer.java:     * @param iu the current eigenvalue index
./linear/SchurTransformer.java:     * @param shift shift information holder
./linear/SchurTransformer.java:     * @param hVec the initial houseHolder vector
./linear/SchurTransformer.java:     * @param il the index of the small sub-diagonal element
./linear/SchurTransformer.java:     * @param im the start index for the QR step
./linear/SchurTransformer.java:     * @param iu the current eigenvalue index
./linear/SchurTransformer.java:     * @param shift shift information holder
./linear/SchurTransformer.java:     * @param hVec the initial houseHolder vector
./linear/RealMatrixPreservingVisitor.java:     * @param rows number of rows of the matrix
./linear/RealMatrixPreservingVisitor.java:     * @param columns number of columns of the matrix
./linear/RealMatrixPreservingVisitor.java:     * @param startRow Initial row index
./linear/RealMatrixPreservingVisitor.java:     * @param endRow Final row index (inclusive)
./linear/RealMatrixPreservingVisitor.java:     * @param startColumn Initial column index
./linear/RealMatrixPreservingVisitor.java:     * @param endColumn Final column index (inclusive)
./linear/RealMatrixPreservingVisitor.java:     * @param row row index of the entry
./linear/RealMatrixPreservingVisitor.java:     * @param column column index of the entry
./linear/RealMatrixPreservingVisitor.java:     * @param value current value of the entry
./linear/NonSquareOperatorException.java:     * @param wrong Row dimension.
./linear/NonSquareOperatorException.java:     * @param expected Column dimension.
./linear/RealVectorChangingVisitor.java:     * @param dimension the size of the vector
./linear/RealVectorChangingVisitor.java:     * @param start the index of the first entry to be visited
./linear/RealVectorChangingVisitor.java:     * @param end the index of the last entry to be visited (inclusive)
./linear/RealVectorChangingVisitor.java:     * @param index the index of the entry being visited
./linear/RealVectorChangingVisitor.java:     * @param value the value of the entry being visited
./linear/FieldMatrixChangingVisitor.java: * @param <T> the type of the field elements
./linear/FieldMatrixChangingVisitor.java:     * @param rows number of rows of the matrix
./linear/FieldMatrixChangingVisitor.java:     * @param columns number of columns of the matrix
./linear/FieldMatrixChangingVisitor.java:     * @param startRow Initial row index
./linear/FieldMatrixChangingVisitor.java:     * @param endRow Final row index (inclusive)
./linear/FieldMatrixChangingVisitor.java:     * @param startColumn Initial column index
./linear/FieldMatrixChangingVisitor.java:     * @param endColumn Final column index (inclusive)
./linear/FieldMatrixChangingVisitor.java:     * @param row row index of the entry
./linear/FieldMatrixChangingVisitor.java:     * @param column column index of the entry
./linear/FieldMatrixChangingVisitor.java:     * @param value current value of the entry
./linear/LUDecomposition.java:     * @param matrix Matrix to decompose.
./linear/LUDecomposition.java:     * @param matrix The matrix to decompose.
./linear/LUDecomposition.java:     * @param singularityThreshold threshold (based on partial row norm)
./linear/LUDecomposition.java:         * @param lu entries of LU decomposition
./linear/LUDecomposition.java:         * @param pivot pivot permutation associated with LU decomposition
./linear/LUDecomposition.java:         * @param singular singularity indicator
./linear/MatrixDimensionMismatchException.java:     * @param wrongRowDim Wrong row dimension.
./linear/MatrixDimensionMismatchException.java:     * @param wrongColDim Wrong column dimension.
./linear/MatrixDimensionMismatchException.java:     * @param expectedRowDim Expected row dimension.
./linear/MatrixDimensionMismatchException.java:     * @param expectedColDim Expected column dimension.
./linear/FieldVectorChangingVisitor.java: * @param <T> the type of the field elements
./linear/FieldVectorChangingVisitor.java:     * @param dimension the size of the vector
./linear/FieldVectorChangingVisitor.java:     * @param start the index of the first entry to be visited
./linear/FieldVectorChangingVisitor.java:     * @param end the index of the last entry to be visited (inclusive)
./linear/FieldVectorChangingVisitor.java:     * @param index the index of the entry being visited
./linear/FieldVectorChangingVisitor.java:     * @param value the value of the entry being visited
./linear/FieldVectorPreservingVisitor.java: * @param <T> the type of the field elements
./linear/FieldVectorPreservingVisitor.java:     * @param dimension the size of the vector
./linear/FieldVectorPreservingVisitor.java:     * @param start the index of the first entry to be visited
./linear/FieldVectorPreservingVisitor.java:     * @param end the index of the last entry to be visited (inclusive)
./linear/FieldVectorPreservingVisitor.java:     * @param index the index of the entry being visited
./linear/FieldVectorPreservingVisitor.java:     * @param value the value of the entry being visited
./linear/HessenbergTransformer.java:     * @param matrix matrix to transform
./linear/CholeskyDecomposition.java:     * @param matrix the matrix to decompose
./linear/CholeskyDecomposition.java:     * @param matrix the matrix to decompose
./linear/CholeskyDecomposition.java:     * @param relativeSymmetryThreshold threshold above which off-diagonal
./linear/CholeskyDecomposition.java:     * @param absolutePositivityThreshold threshold below which diagonal
./linear/CholeskyDecomposition.java:         * @param lTData row-oriented storage for L<sup>T</sup> matrix data
./linear/ArrayFieldVector.java: * @param <T> the type of the field elements
./linear/ArrayFieldVector.java:     * @param field field to which the elements belong
./linear/ArrayFieldVector.java:     * @param field Field to which the elements belong.
./linear/ArrayFieldVector.java:     * @param size Size of the vector.
./linear/ArrayFieldVector.java:     * @param size Size of the vector.
./linear/ArrayFieldVector.java:     * @param preset All entries will be set with this value.
./linear/ArrayFieldVector.java:     * @param d Array.
./linear/ArrayFieldVector.java:     * @param field Field to which the elements belong.
./linear/ArrayFieldVector.java:     * @param d Array.
./linear/ArrayFieldVector.java:     * @param d Data for the new vector.
./linear/ArrayFieldVector.java:     * @param copyArray If {@code true}, the input array will be copied,
./linear/ArrayFieldVector.java:     * @param field Field to which the elements belong.
./linear/ArrayFieldVector.java:     * @param d Data for the new vector.
./linear/ArrayFieldVector.java:     * @param copyArray If {@code true}, the input array will be copied,
./linear/ArrayFieldVector.java:     * @param d Array.
./linear/ArrayFieldVector.java:     * @param pos Position of the first entry.
./linear/ArrayFieldVector.java:     * @param size Number of entries to copy.
./linear/ArrayFieldVector.java:     * @param field Field to which the elements belong.
./linear/ArrayFieldVector.java:     * @param d Array.
./linear/ArrayFieldVector.java:     * @param pos Position of the first entry.
./linear/ArrayFieldVector.java:     * @param size Number of entries to copy.
./linear/ArrayFieldVector.java:     * @param v Vector to copy.
./linear/ArrayFieldVector.java:     * @param v Vector to copy.
./linear/ArrayFieldVector.java:     * @param v Vector to copy.
./linear/ArrayFieldVector.java:     * @param deep If {@code true} perform a deep copy, otherwise perform
./linear/ArrayFieldVector.java:     * @param v1 First vector (will be put in front of the new vector).
./linear/ArrayFieldVector.java:     * @param v2 Second vector (will be put at back of the new vector).
./linear/ArrayFieldVector.java:     * @param v1 First vector (will be put in front of the new vector).
./linear/ArrayFieldVector.java:     * @param v2 Second vector (will be put at back of the new vector).
./linear/ArrayFieldVector.java:     * @param v1 First vector (will be put in front of the new vector).
./linear/ArrayFieldVector.java:     * @param v2 Second vector (will be put at back of the new vector).
./linear/ArrayFieldVector.java:     * @param v1 First vector (will be put in front of the new vector).
./linear/ArrayFieldVector.java:     * @param v2 Second vector (will be put at back of the new vector).
./linear/ArrayFieldVector.java:     * @param v1 First vector (will be put in front of the new vector).
./linear/ArrayFieldVector.java:     * @param v2 Second vector (will be put at back of the new vector).
./linear/ArrayFieldVector.java:     * @param v1 First vector (will be put in front of the new vector).
./linear/ArrayFieldVector.java:     * @param v2 Second vector (will be put at back of the new vector).
./linear/ArrayFieldVector.java:     * @param v1 First vector (will be put in front of the new vector).
./linear/ArrayFieldVector.java:     * @param v2 Second vector (will be put at back of the new vector).
./linear/ArrayFieldVector.java:     * @param field Field to which the elements belong.
./linear/ArrayFieldVector.java:     * @param v1 First vector (will be put in front of the new vector).
./linear/ArrayFieldVector.java:     * @param v2 Second vector (will be put at back of the new vector).
./linear/ArrayFieldVector.java:     * @param v vector to be added
./linear/ArrayFieldVector.java:     * @param v vector to be subtracted
./linear/ArrayFieldVector.java:     * @param v vector by which instance elements must be multiplied
./linear/ArrayFieldVector.java:     * @param v vector by which instance elements must be divided
./linear/ArrayFieldVector.java:     * @param v vector with which dot product should be computed
./linear/ArrayFieldVector.java:     * @param v vector onto which {@code this} must be projected
./linear/ArrayFieldVector.java:     * @param v vector with which outer product should be computed
./linear/ArrayFieldVector.java:     * @param v vector to append to this one.
./linear/ArrayFieldVector.java:     * @param index index of first element to be set.
./linear/ArrayFieldVector.java:     * @param v vector containing the values to set.
./linear/ArrayFieldVector.java:     * @param v vector to compare instance with
./linear/ArrayFieldVector.java:     * @param n Expected dimension.
./linear/ArrayFieldVector.java:     * @param visitor the visitor to be used to process the entries of this
./linear/ArrayFieldVector.java:     * @param visitor visitor to be used to process the entries of this vector
./linear/ArrayFieldVector.java:     * @param start the index of the first entry to be visited
./linear/ArrayFieldVector.java:     * @param end the index of the last entry to be visited (inclusive)
./linear/ArrayFieldVector.java:     * @param visitor the visitor to be used to process the entries of this
./linear/ArrayFieldVector.java:     * @param visitor visitor to be used to process the entries of this vector
./linear/ArrayFieldVector.java:     * @param start the index of the first entry to be visited
./linear/ArrayFieldVector.java:     * @param end the index of the last entry to be visited (inclusive)
./linear/ArrayFieldVector.java:     * @param visitor the visitor to be used to process and modify the entries
./linear/ArrayFieldVector.java:     * @param visitor visitor to be used to process the entries of this vector
./linear/ArrayFieldVector.java:     * @param start the index of the first entry to be visited
./linear/ArrayFieldVector.java:     * @param end the index of the last entry to be visited (inclusive)
./linear/ArrayFieldVector.java:     * @param visitor the visitor to be used to process the entries of this
./linear/ArrayFieldVector.java:     * @param visitor visitor to be used to process the entries of this vector
./linear/ArrayFieldVector.java:     * @param start the index of the first entry to be visited
./linear/ArrayFieldVector.java:     * @param end the index of the last entry to be visited (inclusive)
./linear/ArrayFieldVector.java:     * @param other Object to test for equality.
./linear/ArrayFieldVector.java:     * @param index Index to check.
./linear/ArrayFieldVector.java:     * @param start the index of the first entry of the subvector
./linear/ArrayFieldVector.java:     * @param end the index of the last entry of the subvector (inclusive)
./linear/SingularValueDecomposition.java:     * @param matrix Matrix to decompose.
./linear/SingularValueDecomposition.java:     * @param minSingularValue value below which singular values are ignored
./linear/SingularValueDecomposition.java:         * @param singularValues Singular values.
./linear/SingularValueDecomposition.java:         * @param uT U<sup>T</sup> matrix of the decomposition.
./linear/SingularValueDecomposition.java:         * @param v V matrix of the decomposition.
./linear/SingularValueDecomposition.java:         * @param nonSingular Singularity indicator.
./linear/SingularValueDecomposition.java:         * @param tol tolerance for singular values
./linear/SingularValueDecomposition.java:         * @param b Right-hand side of the equation A &times; X = B
./linear/SingularValueDecomposition.java:         * @param b Right-hand side of the equation A &times; X = B
./linear/ArrayRealVector.java:     * @param size Size of the vector.
./linear/ArrayRealVector.java:     * @param size Size of the vector
./linear/ArrayRealVector.java:     * @param preset All entries will be set with this value.
./linear/ArrayRealVector.java:     * @param d Array.
./linear/ArrayRealVector.java:     * @param d Data for the new vector.
./linear/ArrayRealVector.java:     * @param copyArray if {@code true}, the input array will be copied,
./linear/ArrayRealVector.java:     * @param d Array.
./linear/ArrayRealVector.java:     * @param pos Position of first entry.
./linear/ArrayRealVector.java:     * @param size Number of entries to copy.
./linear/ArrayRealVector.java:     * @param d Array of {@code Double}s.
./linear/ArrayRealVector.java:     * @param d Array.
./linear/ArrayRealVector.java:     * @param pos Position of first entry.
./linear/ArrayRealVector.java:     * @param size Number of entries to copy.
./linear/ArrayRealVector.java:     * @param v vector to copy.
./linear/ArrayRealVector.java:     * @param v Vector to copy.
./linear/ArrayRealVector.java:     * @param v Vector to copy.
./linear/ArrayRealVector.java:     * @param deep If {@code true} perform a deep copy, otherwise perform a
./linear/ArrayRealVector.java:     * @param v1 First vector (will be put in front of the new vector).
./linear/ArrayRealVector.java:     * @param v2 Second vector (will be put at back of the new vector).
./linear/ArrayRealVector.java:     * @param v1 First vector (will be put in front of the new vector).
./linear/ArrayRealVector.java:     * @param v2 Second vector (will be put at back of the new vector).
./linear/ArrayRealVector.java:     * @param v1 First vector (will be put in front of the new vector).
./linear/ArrayRealVector.java:     * @param v2 Second vector (will be put at back of the new vector).
./linear/ArrayRealVector.java:     * @param v1 First vector (will be put in front of the new vector).
./linear/ArrayRealVector.java:     * @param v2 Second vector (will be put at back of the new vector).
./linear/ArrayRealVector.java:     * @param v1 First vector (will be put in front of the new vector).
./linear/ArrayRealVector.java:     * @param v2 Second vector (will be put at back of the new vector).
./linear/ArrayRealVector.java:     * @param v1 first vector (will be put in front of the new vector)
./linear/ArrayRealVector.java:     * @param v2 second vector (will be put at back of the new vector)
./linear/ArrayRealVector.java:     * @param v Vector to append to this one.
./linear/ArrayRealVector.java:     * @param index Index of first element to be set.
./linear/ArrayRealVector.java:     * @param v Vector containing the values to set.
./linear/ArrayRealVector.java:     * @param v Vector to compare instance with.
./linear/ArrayRealVector.java:     * @param n Expected dimension.
./linear/BiDiagonalTransformer.java:     * @param matrix the matrix to transform.
./linear/ConjugateGradient.java:     * @param maxIterations the maximum number of iterations
./linear/ConjugateGradient.java:     * @param delta the &delta; parameter for the default stopping criterion
./linear/ConjugateGradient.java:     * @param check {@code true} if positive definiteness of both matrix and
./linear/ConjugateGradient.java:     * @param manager the custom iteration manager
./linear/ConjugateGradient.java:     * @param delta the &delta; parameter for the default stopping criterion
./linear/ConjugateGradient.java:     * @param check {@code true} if positive definiteness of both matrix and
./linear/RealMatrixChangingVisitor.java:     * @param rows number of rows of the matrix
./linear/RealMatrixChangingVisitor.java:     * @param columns number of columns of the matrix
./linear/RealMatrixChangingVisitor.java:     * @param startRow Initial row index
./linear/RealMatrixChangingVisitor.java:     * @param endRow Final row index (inclusive)
./linear/RealMatrixChangingVisitor.java:     * @param startColumn Initial column index
./linear/RealMatrixChangingVisitor.java:     * @param endColumn Final column index (inclusive)
./linear/RealMatrixChangingVisitor.java:     * @param row row index of the entry
./linear/RealMatrixChangingVisitor.java:     * @param column column index of the entry
./linear/RealMatrixChangingVisitor.java:     * @param value current value of the entry
./linear/IterativeLinearSolver.java:     * @param maxIterations the maximum number of iterations
./linear/IterativeLinearSolver.java:     * @param manager the custom iteration manager
./linear/IterativeLinearSolver.java:     * @param a the linear operator A of the system
./linear/IterativeLinearSolver.java:     * @param b the right-hand side vector
./linear/IterativeLinearSolver.java:     * @param x0 the initial guess of the solution
./linear/IterativeLinearSolver.java:     * @param a the linear operator A of the system
./linear/IterativeLinearSolver.java:     * @param b the right-hand side vector
./linear/IterativeLinearSolver.java:     * @param a the linear operator A of the system
./linear/IterativeLinearSolver.java:     * @param b the right-hand side vector
./linear/IterativeLinearSolver.java:     * @param x0 the initial guess of the solution
./linear/IterativeLinearSolver.java:     * @param a the linear operator A of the system
./linear/IterativeLinearSolver.java:     * @param b the right-hand side vector
./linear/IterativeLinearSolver.java:     * @param x0 initial guess of the solution
./linear/SparseFieldVector.java: * @param <T> the type of the field elements
./linear/SparseFieldVector.java:     * @param field Field to which the elements belong.
./linear/SparseFieldVector.java:     * @param field Field to which the elements belong.
./linear/SparseFieldVector.java:     * @param dimension Size of the vector.
./linear/SparseFieldVector.java:     * @param v Original vector
./linear/SparseFieldVector.java:     * @param resize Amount to add.
./linear/SparseFieldVector.java:     * @param field Field to which the elements belong.
./linear/SparseFieldVector.java:     * @param dimension Size of the vector.
./linear/SparseFieldVector.java:     * @param expectedSize Expected number of non-zero entries.
./linear/SparseFieldVector.java:     * @param field Field to which the elements belong.
./linear/SparseFieldVector.java:     * @param values Set of values to create from.
./linear/SparseFieldVector.java:     * @param v Instance to copy.
./linear/SparseFieldVector.java:     * @param v Vector to add.
./linear/SparseFieldVector.java:     * @param v Vector to append to this one.
./linear/SparseFieldVector.java:     * @param v vector with which outer product should be computed
./linear/SparseFieldVector.java:     * @param v vector to be subtracted
./linear/SparseFieldVector.java:     * @param index Index to check.
./linear/SparseFieldVector.java:     * @param start the index of the first entry of the subvector
./linear/SparseFieldVector.java:     * @param end the index of the last entry of the subvector (inclusive)
./linear/SparseFieldVector.java:     * @param n Expected dimension.
./linear/SparseFieldVector.java:     * @param visitor the visitor to be used to process the entries of this
./linear/SparseFieldVector.java:     * @param visitor visitor to be used to process the entries of this vector
./linear/SparseFieldVector.java:     * @param start the index of the first entry to be visited
./linear/SparseFieldVector.java:     * @param end the index of the last entry to be visited (inclusive)
./linear/SparseFieldVector.java:     * @param visitor the visitor to be used to process the entries of this
./linear/SparseFieldVector.java:     * @param visitor visitor to be used to process the entries of this vector
./linear/SparseFieldVector.java:     * @param start the index of the first entry to be visited
./linear/SparseFieldVector.java:     * @param end the index of the last entry to be visited (inclusive)
./linear/SparseFieldVector.java:     * @param visitor the visitor to be used to process and modify the entries
./linear/SparseFieldVector.java:     * @param visitor visitor to be used to process the entries of this vector
./linear/SparseFieldVector.java:     * @param start the index of the first entry to be visited
./linear/SparseFieldVector.java:     * @param end the index of the last entry to be visited (inclusive)
./linear/SparseFieldVector.java:     * @param visitor the visitor to be used to process the entries of this
./linear/SparseFieldVector.java:     * @param visitor visitor to be used to process the entries of this vector
./linear/SparseFieldVector.java:     * @param start the index of the first entry to be visited
./linear/SparseFieldVector.java:     * @param end the index of the last entry to be visited (inclusive)
./linear/FieldMatrix.java: * @param <T> the type of the field elements
./linear/FieldMatrix.java:     * @param rowDimension  the number of rows in the new matrix
./linear/FieldMatrix.java:     * @param columnDimension  the number of columns in the new matrix
./linear/FieldMatrix.java:     * @param m Matrix to be added.
./linear/FieldMatrix.java:     * @param m Matrix to be subtracted.
./linear/FieldMatrix.java:     * @param d Value to be added to each entry.
./linear/FieldMatrix.java:     * @param d Value to multiply all entries by.
./linear/FieldMatrix.java:     * @param m  Matrix to postmultiply by.
./linear/FieldMatrix.java:     * @param m Matrix to premultiply by.
./linear/FieldMatrix.java:     * @param p raise this to power p
./linear/FieldMatrix.java:     * @param startRow Initial row index
./linear/FieldMatrix.java:     * @param endRow Final row index (inclusive)
./linear/FieldMatrix.java:     * @param startColumn Initial column index
./linear/FieldMatrix.java:     * @param endColumn Final column index (inclusive)
./linear/FieldMatrix.java:    * @param selectedRows Array of row indices.
./linear/FieldMatrix.java:    * @param selectedColumns Array of column indices.
./linear/FieldMatrix.java:    * @param startRow Initial row index.
./linear/FieldMatrix.java:    * @param endRow Final row index (inclusive).
./linear/FieldMatrix.java:    * @param startColumn Initial column index.
./linear/FieldMatrix.java:    * @param endColumn Final column index (inclusive).
./linear/FieldMatrix.java:    * @param destination The array where the submatrix data should be copied
./linear/FieldMatrix.java:   * @param selectedRows Array of row indices.
./linear/FieldMatrix.java:   * @param selectedColumns Array of column indices.
./linear/FieldMatrix.java:   * @param destination Arrays where the submatrix data should be copied
./linear/FieldMatrix.java:     * @param subMatrix Array containing the submatrix replacement data.
./linear/FieldMatrix.java:     * @param row Row coordinate of the top-left element to be replaced.
./linear/FieldMatrix.java:     * @param column Column coordinate of the top-left element to be replaced.
./linear/FieldMatrix.java:    * @param row Row to be fetched.
./linear/FieldMatrix.java:    * @param row Row to be set.
./linear/FieldMatrix.java:    * @param matrix Row matrix (must have one row and the same number
./linear/FieldMatrix.java:    * @param column Column to be fetched.
./linear/FieldMatrix.java:    * @param column Column to be set.
./linear/FieldMatrix.java:    * @param matrix column matrix (must have one column and the same
./linear/FieldMatrix.java:    * @param row Row to be fetched
./linear/FieldMatrix.java:    * @param row Row to be set.
./linear/FieldMatrix.java:    * @param vector row vector (must have the same number of columns
./linear/FieldMatrix.java:    * @param column Column to be fetched.
./linear/FieldMatrix.java:    * @param column Column to be set.
./linear/FieldMatrix.java:    * @param vector Column vector (must have the same number of rows
./linear/FieldMatrix.java:     * @param row Row to be fetched.
./linear/FieldMatrix.java:     * @param row Row to be set.
./linear/FieldMatrix.java:     * @param array Row matrix (must have the same number of columns as
./linear/FieldMatrix.java:     * @param column the column to be fetched
./linear/FieldMatrix.java:     * @param column the column to be set
./linear/FieldMatrix.java:     * @param array column array (must have the same number of rows as the instance)
./linear/FieldMatrix.java:     * @param row  row location of entry to be fetched
./linear/FieldMatrix.java:     * @param column  column location of entry to be fetched
./linear/FieldMatrix.java:     * @param row  row location of entry to be set
./linear/FieldMatrix.java:     * @param column  column location of entry to be set
./linear/FieldMatrix.java:     * @param value matrix entry to be set in row,column
./linear/FieldMatrix.java:     * @param row Row location of entry to be set.
./linear/FieldMatrix.java:     * @param column Column location of entry to be set.
./linear/FieldMatrix.java:     * @param increment Value to add to the current matrix entry in
./linear/FieldMatrix.java:     * @param row Row location of entry to be set.
./linear/FieldMatrix.java:     * @param column Column location of entry to be set.
./linear/FieldMatrix.java:     * @param factor Multiplication factor for the current matrix entry
./linear/FieldMatrix.java:     * @param v the vector to operate on
./linear/FieldMatrix.java:     * @param v the vector to operate on
./linear/FieldMatrix.java:     * @param v the row vector to premultiply by
./linear/FieldMatrix.java:     * @param v the row vector to premultiply by
./linear/FieldMatrix.java:     * @param visitor visitor used to process all matrix entries
./linear/FieldMatrix.java:     * @param visitor visitor used to process all matrix entries
./linear/FieldMatrix.java:     * @param visitor visitor used to process all matrix entries
./linear/FieldMatrix.java:     * @param startRow Initial row index
./linear/FieldMatrix.java:     * @param endRow Final row index (inclusive)
./linear/FieldMatrix.java:     * @param startColumn Initial column index
./linear/FieldMatrix.java:     * @param endColumn Final column index
./linear/FieldMatrix.java:     * @param visitor visitor used to process all matrix entries
./linear/FieldMatrix.java:     * @param startRow Initial row index
./linear/FieldMatrix.java:     * @param endRow Final row index (inclusive)
./linear/FieldMatrix.java:     * @param startColumn Initial column index
./linear/FieldMatrix.java:     * @param endColumn Final column index
./linear/FieldMatrix.java:     * @param visitor visitor used to process all matrix entries
./linear/FieldMatrix.java:     * @param visitor visitor used to process all matrix entries
./linear/FieldMatrix.java:     * @param visitor visitor used to process all matrix entries
./linear/FieldMatrix.java:     * @param startRow Initial row index
./linear/FieldMatrix.java:     * @param endRow Final row index (inclusive)
./linear/FieldMatrix.java:     * @param startColumn Initial column index
./linear/FieldMatrix.java:     * @param endColumn Final column index
./linear/FieldMatrix.java:     * @param visitor visitor used to process all matrix entries
./linear/FieldMatrix.java:     * @param startRow Initial row index
./linear/FieldMatrix.java:     * @param endRow Final row index (inclusive)
./linear/FieldMatrix.java:     * @param startColumn Initial column index
./linear/FieldMatrix.java:     * @param endColumn Final column index
./linear/FieldMatrix.java:     * @param visitor visitor used to process all matrix entries
./linear/FieldMatrix.java:     * @param visitor visitor used to process all matrix entries
./linear/FieldMatrix.java:     * @param visitor visitor used to process all matrix entries
./linear/FieldMatrix.java:     * @param startRow Initial row index
./linear/FieldMatrix.java:     * @param endRow Final row index (inclusive)
./linear/FieldMatrix.java:     * @param startColumn Initial column index
./linear/FieldMatrix.java:     * @param endColumn Final column index (inclusive)
./linear/FieldMatrix.java:     * @param visitor visitor used to process all matrix entries
./linear/FieldMatrix.java:     * @param startRow Initial row index
./linear/FieldMatrix.java:     * @param endRow Final row index (inclusive)
./linear/FieldMatrix.java:     * @param startColumn Initial column index
./linear/FieldMatrix.java:     * @param endColumn Final column index (inclusive)
./linear/PreconditionedIterativeLinearSolver.java:     * @param maxIterations the maximum number of iterations
./linear/PreconditionedIterativeLinearSolver.java:     * @param manager the custom iteration manager
./linear/PreconditionedIterativeLinearSolver.java:     * @param a the linear operator A of the system
./linear/PreconditionedIterativeLinearSolver.java:     * @param m the preconditioner, M (can be {@code null})
./linear/PreconditionedIterativeLinearSolver.java:     * @param b the right-hand side vector
./linear/PreconditionedIterativeLinearSolver.java:     * @param x0 the initial guess of the solution
./linear/PreconditionedIterativeLinearSolver.java:     * @param a the linear operator A of the system
./linear/PreconditionedIterativeLinearSolver.java:     * @param m the preconditioner, M (can be {@code null})
./linear/PreconditionedIterativeLinearSolver.java:     * @param b the right-hand side vector
./linear/PreconditionedIterativeLinearSolver.java:     * @param x0 the initial guess of the solution
./linear/PreconditionedIterativeLinearSolver.java:     * @param a the linear operator A of the system
./linear/PreconditionedIterativeLinearSolver.java:     * @param m the preconditioner, M (can be {@code null})
./linear/PreconditionedIterativeLinearSolver.java:     * @param b the right-hand side vector
./linear/PreconditionedIterativeLinearSolver.java:     * @param a the linear operator A of the system
./linear/PreconditionedIterativeLinearSolver.java:     * @param m the preconditioner, M (can be {@code null})
./linear/PreconditionedIterativeLinearSolver.java:     * @param b the right-hand side vector
./linear/PreconditionedIterativeLinearSolver.java:     * @param x0 the initial guess of the solution
./linear/BlockFieldMatrix.java: * @param <T> the type of the field elements
./linear/BlockFieldMatrix.java:     * @param field Field to which the elements belong.
./linear/BlockFieldMatrix.java:     * @param rows Number of rows in the new matrix.
./linear/BlockFieldMatrix.java:     * @param columns Number of columns in the new matrix.
./linear/BlockFieldMatrix.java:     * @param rawData Data for the new matrix, in raw layout.
./linear/BlockFieldMatrix.java:     * @param rows  the number of rows in the new matrix
./linear/BlockFieldMatrix.java:     * @param columns  the number of columns in the new matrix
./linear/BlockFieldMatrix.java:     * @param blockData data for new matrix
./linear/BlockFieldMatrix.java:     * @param copyArray if true, the input array will be copied, otherwise
./linear/BlockFieldMatrix.java:     * @param <T> Type of the field elements.
./linear/BlockFieldMatrix.java:     * @param rawData Data array in raw layout.
./linear/BlockFieldMatrix.java:     * @param <T> Type of the field elements.
./linear/BlockFieldMatrix.java:     * @param field Field to which the elements belong.
./linear/BlockFieldMatrix.java:     * @param rows Number of rows in the new matrix.
./linear/BlockFieldMatrix.java:     * @param columns Number of columns in the new matrix.
./linear/BlockFieldMatrix.java:     * @param m matrix to be added
./linear/BlockFieldMatrix.java:     * @param m matrix to be subtracted
./linear/BlockFieldMatrix.java:     * @param m matrix to postmultiply by
./linear/BlockFieldMatrix.java:     * @param srcBlock source block
./linear/BlockFieldMatrix.java:     * @param srcWidth source block width ({@link #BLOCK_SIZE} or smaller)
./linear/BlockFieldMatrix.java:     * @param srcStartRow start row in the source block
./linear/BlockFieldMatrix.java:     * @param srcEndRow end row (exclusive) in the source block
./linear/BlockFieldMatrix.java:     * @param srcStartColumn start column in the source block
./linear/BlockFieldMatrix.java:     * @param srcEndColumn end column (exclusive) in the source block
./linear/BlockFieldMatrix.java:     * @param dstBlock destination block
./linear/BlockFieldMatrix.java:     * @param dstWidth destination block width ({@link #BLOCK_SIZE} or smaller)
./linear/BlockFieldMatrix.java:     * @param dstStartRow start row in the destination block
./linear/BlockFieldMatrix.java:     * @param dstStartColumn start column in the destination block
./linear/BlockFieldMatrix.java:     * @param row the row to be set
./linear/BlockFieldMatrix.java:     * @param matrix row matrix (must have one row and the same number of columns
./linear/BlockFieldMatrix.java:     * @param column Column to be set.
./linear/BlockFieldMatrix.java:     * @param matrix Column matrix (must have one column and the same number of rows
./linear/BlockFieldMatrix.java:     * @param blockRow row index (in block sense) of the block
./linear/BlockFieldMatrix.java:     * @param blockColumn column index (in block sense) of the block
./linear/Array2DRowRealMatrix.java:     * @param rowDimension Number of rows in the new matrix.
./linear/Array2DRowRealMatrix.java:     * @param columnDimension Number of columns in the new matrix.
./linear/Array2DRowRealMatrix.java:     * @param d Data for the new matrix.
./linear/Array2DRowRealMatrix.java:     * @param d Data for new matrix.
./linear/Array2DRowRealMatrix.java:     * @param copyArray if {@code true}, the input array will be copied,
./linear/Array2DRowRealMatrix.java:     * @param v Column vector holding data for new matrix.
./linear/Array2DRowRealMatrix.java:     * @param m Matrix to be added.
./linear/Array2DRowRealMatrix.java:     * @param m Matrix to be subtracted.
./linear/Array2DRowRealMatrix.java:     * @param m matrix to postmultiply by
./linear/Array2DRowRealMatrix.java:     * @param in Data to copy.
./linear/NonSymmetricMatrixException.java:     * @param row Row index.
./linear/NonSymmetricMatrixException.java:     * @param column Column index.
./linear/NonSymmetricMatrixException.java:     * @param threshold Relative symmetry threshold.
./linear/RealMatrixFormat.java:     * @param format the custom format for components.
./linear/RealMatrixFormat.java:     * @param prefix prefix to use instead of the default "{"
./linear/RealMatrixFormat.java:     * @param suffix suffix to use instead of the default "}"
./linear/RealMatrixFormat.java:     * @param rowPrefix row prefix to use instead of the default "{"
./linear/RealMatrixFormat.java:     * @param rowSuffix row suffix to use instead of the default "}"
./linear/RealMatrixFormat.java:     * @param rowSeparator tow separator to use instead of the default ";"
./linear/RealMatrixFormat.java:     * @param columnSeparator column separator to use instead of the default ", "
./linear/RealMatrixFormat.java:     * @param prefix prefix to use instead of the default "{"
./linear/RealMatrixFormat.java:     * @param suffix suffix to use instead of the default "}"
./linear/RealMatrixFormat.java:     * @param rowPrefix row prefix to use instead of the default "{"
./linear/RealMatrixFormat.java:     * @param rowSuffix row suffix to use instead of the default "}"
./linear/RealMatrixFormat.java:     * @param rowSeparator tow separator to use instead of the default ";"
./linear/RealMatrixFormat.java:     * @param columnSeparator column separator to use instead of the default ", "
./linear/RealMatrixFormat.java:     * @param format the custom format for components.
./linear/RealMatrixFormat.java:     * @param locale the specific locale used by the format.
./linear/RealMatrixFormat.java:     * @param m RealMatrix object to format.
./linear/RealMatrixFormat.java:     * @param matrix the object to format.
./linear/RealMatrixFormat.java:     * @param toAppendTo where the text is to be appended
./linear/RealMatrixFormat.java:     * @param pos On input: an alignment field, if desired. On output: the
./linear/RealMatrixFormat.java:     * @param source String to parse.
./linear/RealMatrixFormat.java:     * @param source String to parse.
./linear/RealMatrixFormat.java:     * @param pos input/ouput parsing parameter.
./linear/DefaultFieldMatrixPreservingVisitor.java: * @param <T> the type of the field elements
./linear/DefaultFieldMatrixPreservingVisitor.java:     * @param zero additive identity of the field
./linear/JacobiPreconditioner.java:     * @param diag the diagonal coefficients of the linear operator to be
./linear/JacobiPreconditioner.java:     * @param deep {@code true} if a deep copy of the above array should be
./linear/JacobiPreconditioner.java:     * @param a the linear operator for which the preconditioner should be built
./ml/clustering/Cluster.java: * @param <T> the type of points that can be clustered
./ml/clustering/Cluster.java:     * @param point point to add
./ml/clustering/evaluation/ClusterEvaluator.java: * @param <T> type of the clustered points
./ml/clustering/evaluation/ClusterEvaluator.java:     * @param measure the distance measure to use
./ml/clustering/evaluation/ClusterEvaluator.java:     * @param clusters the clusters to evaluate
./ml/clustering/evaluation/ClusterEvaluator.java:     * @param score1 the first score
./ml/clustering/evaluation/ClusterEvaluator.java:     * @param score2 the second score
./ml/clustering/evaluation/ClusterEvaluator.java:     * @param p1 the first clusterable
./ml/clustering/evaluation/ClusterEvaluator.java:     * @param p2 the second clusterable
./ml/clustering/evaluation/ClusterEvaluator.java:     * @param cluster the cluster
./ml/clustering/evaluation/SumOfClusterVariances.java: * @param <T> the type of the clustered points
./ml/clustering/evaluation/SumOfClusterVariances.java:     * @param measure the distance measure to use
./ml/clustering/FuzzyKMeansClusterer.java: * @param <T> type of the points to cluster
./ml/clustering/FuzzyKMeansClusterer.java:     * @param k the number of clusters to split the data into
./ml/clustering/FuzzyKMeansClusterer.java:     * @param fuzziness the fuzziness factor, must be &gt; 1.0
./ml/clustering/FuzzyKMeansClusterer.java:     * @param k the number of clusters to split the data into
./ml/clustering/FuzzyKMeansClusterer.java:     * @param fuzziness the fuzziness factor, must be &gt; 1.0
./ml/clustering/FuzzyKMeansClusterer.java:     * @param maxIterations the maximum number of iterations to run the algorithm for.
./ml/clustering/FuzzyKMeansClusterer.java:     * @param measure the distance measure to use
./ml/clustering/FuzzyKMeansClusterer.java:     * @param k the number of clusters to split the data into
./ml/clustering/FuzzyKMeansClusterer.java:     * @param fuzziness the fuzziness factor, must be &gt; 1.0
./ml/clustering/FuzzyKMeansClusterer.java:     * @param maxIterations the maximum number of iterations to run the algorithm for.
./ml/clustering/FuzzyKMeansClusterer.java:     * @param measure the distance measure to use
./ml/clustering/FuzzyKMeansClusterer.java:     * @param epsilon the convergence criteria (default is 1e-3)
./ml/clustering/FuzzyKMeansClusterer.java:     * @param random random generator to use for choosing initial centers
./ml/clustering/FuzzyKMeansClusterer.java:     * @param dataPoints the points to cluster
./ml/clustering/FuzzyKMeansClusterer.java:     * @param matrix the membership matrix of the previous iteration
./ml/clustering/FuzzyKMeansClusterer.java:     * @param matrix the place to store the membership matrix
./ml/clustering/MultiKMeansPlusPlusClusterer.java: * @param <T> type of the points to cluster
./ml/clustering/MultiKMeansPlusPlusClusterer.java:     * @param clusterer the k-means clusterer to use
./ml/clustering/MultiKMeansPlusPlusClusterer.java:     * @param numTrials number of trial runs
./ml/clustering/MultiKMeansPlusPlusClusterer.java:     * @param clusterer the k-means clusterer to use
./ml/clustering/MultiKMeansPlusPlusClusterer.java:     * @param numTrials number of trial runs
./ml/clustering/MultiKMeansPlusPlusClusterer.java:     * @param evaluator the cluster evaluator to use
./ml/clustering/MultiKMeansPlusPlusClusterer.java:     * @param points the points to cluster
./ml/clustering/Clusterer.java: * @param <T> the type of points that can be clustered
./ml/clustering/Clusterer.java:     * @param measure the distance measure to use
./ml/clustering/Clusterer.java:     * @param points the set of {@link Clusterable} instances
./ml/clustering/Clusterer.java:     * @param p1 the first clusterable
./ml/clustering/Clusterer.java:     * @param p2 the second clusterable
./ml/clustering/KMeansPlusPlusClusterer.java: * @param <T> type of the points to cluster
./ml/clustering/KMeansPlusPlusClusterer.java:     * @param k the number of clusters to split the data into
./ml/clustering/KMeansPlusPlusClusterer.java:     * @param k the number of clusters to split the data into
./ml/clustering/KMeansPlusPlusClusterer.java:     * @param maxIterations the maximum number of iterations to run the algorithm for.
./ml/clustering/KMeansPlusPlusClusterer.java:     * @param k the number of clusters to split the data into
./ml/clustering/KMeansPlusPlusClusterer.java:     * @param maxIterations the maximum number of iterations to run the algorithm for.
./ml/clustering/KMeansPlusPlusClusterer.java:     * @param measure the distance measure to use
./ml/clustering/KMeansPlusPlusClusterer.java:     * @param k the number of clusters to split the data into
./ml/clustering/KMeansPlusPlusClusterer.java:     * @param maxIterations the maximum number of iterations to run the algorithm for.
./ml/clustering/KMeansPlusPlusClusterer.java:     * @param measure the distance measure to use
./ml/clustering/KMeansPlusPlusClusterer.java:     * @param random random generator to use for choosing initial centers
./ml/clustering/KMeansPlusPlusClusterer.java:     * @param k the number of clusters to split the data into
./ml/clustering/KMeansPlusPlusClusterer.java:     * @param maxIterations the maximum number of iterations to run the algorithm for.
./ml/clustering/KMeansPlusPlusClusterer.java:     * @param measure the distance measure to use
./ml/clustering/KMeansPlusPlusClusterer.java:     * @param random random generator to use for choosing initial centers
./ml/clustering/KMeansPlusPlusClusterer.java:     * @param emptyStrategy strategy to use for handling empty clusters that
./ml/clustering/KMeansPlusPlusClusterer.java:     * @param points the points to cluster
./ml/clustering/KMeansPlusPlusClusterer.java:     * @param clusters the {@link Cluster}s to add the points to
./ml/clustering/KMeansPlusPlusClusterer.java:     * @param points the points to add to the given {@link Cluster}s
./ml/clustering/KMeansPlusPlusClusterer.java:     * @param assignments points assignments to clusters
./ml/clustering/KMeansPlusPlusClusterer.java:     * @param points the points to choose the initial centers from
./ml/clustering/KMeansPlusPlusClusterer.java:     * @param clusters the {@link Cluster}s to search
./ml/clustering/KMeansPlusPlusClusterer.java:     * @param clusters the {@link Cluster}s to search
./ml/clustering/KMeansPlusPlusClusterer.java:     * @param clusters the {@link Cluster}s to search
./ml/clustering/KMeansPlusPlusClusterer.java:     * @param clusters the {@link Cluster}s to search
./ml/clustering/KMeansPlusPlusClusterer.java:     * @param point the point to find the nearest {@link Cluster} for
./ml/clustering/KMeansPlusPlusClusterer.java:     * @param points the set of points
./ml/clustering/KMeansPlusPlusClusterer.java:     * @param dimension the point dimension
./ml/clustering/DBSCANClusterer.java: * @param <T> type of the points to cluster
./ml/clustering/DBSCANClusterer.java:     * @param eps maximum radius of the neighborhood to be considered
./ml/clustering/DBSCANClusterer.java:     * @param minPts minimum number of points needed for a cluster
./ml/clustering/DBSCANClusterer.java:     * @param eps maximum radius of the neighborhood to be considered
./ml/clustering/DBSCANClusterer.java:     * @param minPts minimum number of points needed for a cluster
./ml/clustering/DBSCANClusterer.java:     * @param measure the distance measure to use
./ml/clustering/DBSCANClusterer.java:     * @param points the points to cluster
./ml/clustering/DBSCANClusterer.java:     * @param cluster Cluster to expand
./ml/clustering/DBSCANClusterer.java:     * @param point Point to add to cluster
./ml/clustering/DBSCANClusterer.java:     * @param neighbors List of neighbors
./ml/clustering/DBSCANClusterer.java:     * @param points the data set
./ml/clustering/DBSCANClusterer.java:     * @param visited the set of already visited points
./ml/clustering/DBSCANClusterer.java:     * @param point the point to look for
./ml/clustering/DBSCANClusterer.java:     * @param points possible neighbors
./ml/clustering/DBSCANClusterer.java:     * @param one first list
./ml/clustering/DBSCANClusterer.java:     * @param two second list
./ml/clustering/DoublePoint.java:     * @param point the n-dimensional point in double space
./ml/clustering/DoublePoint.java:     * @param point the n-dimensional point in integer space
./ml/clustering/CentroidCluster.java: * @param <T> the type of points that can be clustered
./ml/clustering/CentroidCluster.java:     * @param center the point which is to be the center of this cluster
./ml/distance/DistanceMeasure.java:     * @param a the first vector
./ml/distance/DistanceMeasure.java:     * @param b the second vector
./ml/neuralnet/FeatureInitializerFactory.java:     * @param min Lower bound of the range.
./ml/neuralnet/FeatureInitializerFactory.java:     * @param max Upper bound of the range.
./ml/neuralnet/FeatureInitializerFactory.java:     * @param rng Random number generator used to draw samples from a
./ml/neuralnet/FeatureInitializerFactory.java:     * @param min Lower bound of the range.
./ml/neuralnet/FeatureInitializerFactory.java:     * @param max Upper bound of the range.
./ml/neuralnet/FeatureInitializerFactory.java:     * @param f Function.
./ml/neuralnet/FeatureInitializerFactory.java:     * @param init Initial value.
./ml/neuralnet/FeatureInitializerFactory.java:     * @param inc Increment
./ml/neuralnet/FeatureInitializerFactory.java:     * @param random Random variable distribution.
./ml/neuralnet/FeatureInitializerFactory.java:     * @param orig Original initializer.
./ml/neuralnet/oned/NeuronString.java:     * @param wrap Whether to wrap the dimension (i.e the first and last
./ml/neuralnet/oned/NeuronString.java:     * @param featuresList Arrays that will initialize the features sets of
./ml/neuralnet/oned/NeuronString.java:     * @param num Number of neurons.
./ml/neuralnet/oned/NeuronString.java:     * @param wrap Whether to wrap the dimension (i.e the first and last
./ml/neuralnet/oned/NeuronString.java:     * @param featureInit Arrays that will initialize the features sets of
./ml/neuralnet/oned/NeuronString.java:     * @param i Neuron index.
./ml/neuralnet/oned/NeuronString.java:     * @param in Input stream.
./ml/neuralnet/oned/NeuronString.java:         * @param wrap Whether the dimension is wrapped.
./ml/neuralnet/oned/NeuronString.java:         * @param featuresList List of neurons features.
./ml/neuralnet/sofm/KohonenUpdateAction.java:     * @param distance Distance function.
./ml/neuralnet/sofm/KohonenUpdateAction.java:     * @param learningFactor Learning factor update function.
./ml/neuralnet/sofm/KohonenUpdateAction.java:     * @param neighbourhoodSize Neighbourhood size update function.
./ml/neuralnet/sofm/KohonenUpdateAction.java:     * @param n Neuron to be updated.
./ml/neuralnet/sofm/KohonenUpdateAction.java:     * @param features Training data.
./ml/neuralnet/sofm/KohonenUpdateAction.java:     * @param learningRate Learning factor.
./ml/neuralnet/sofm/KohonenUpdateAction.java:     * @param n Neuron to be updated.
./ml/neuralnet/sofm/KohonenUpdateAction.java:     * @param features Training data.
./ml/neuralnet/sofm/KohonenUpdateAction.java:     * @param learningRate Learning factor.
./ml/neuralnet/sofm/KohonenUpdateAction.java:     * @param net Network.
./ml/neuralnet/sofm/KohonenUpdateAction.java:     * @param features Sample data.
./ml/neuralnet/sofm/KohonenUpdateAction.java:     * @param learningRate Current learning factor.
./ml/neuralnet/sofm/KohonenUpdateAction.java:     * @param current Current values of the features.
./ml/neuralnet/sofm/KohonenUpdateAction.java:     * @param sample Training data.
./ml/neuralnet/sofm/KohonenUpdateAction.java:     * @param learningRate Learning factor.
./ml/neuralnet/sofm/NeighbourhoodSizeFunctionFactory.java:     * @param initValue Initial value, i.e.
./ml/neuralnet/sofm/NeighbourhoodSizeFunctionFactory.java:     * @param valueAtNumCall Value of the function at {@code numCall}.
./ml/neuralnet/sofm/NeighbourhoodSizeFunctionFactory.java:     * @param numCall Argument for which the function returns
./ml/neuralnet/sofm/NeighbourhoodSizeFunctionFactory.java:     * @param initValue Initial value, i.e.
./ml/neuralnet/sofm/NeighbourhoodSizeFunctionFactory.java:     * @param slope Value of the function derivative at {@code numCall}.
./ml/neuralnet/sofm/NeighbourhoodSizeFunctionFactory.java:     * @param numCall Inflexion point.
./ml/neuralnet/sofm/NeighbourhoodSizeFunction.java:     * @param numCall Current step of the training task.
./ml/neuralnet/sofm/util/ExponentialDecayFunction.java:     * @param initValue Initial value, i.e. {@link #value(long) value(0)}.
./ml/neuralnet/sofm/util/ExponentialDecayFunction.java:     * @param valueAtNumCall Value of the function at {@code numCall}.
./ml/neuralnet/sofm/util/ExponentialDecayFunction.java:     * @param numCall Argument for which the function returns
./ml/neuralnet/sofm/util/ExponentialDecayFunction.java:     * @param numCall Current step of the training task.
./ml/neuralnet/sofm/util/QuasiSigmoidDecayFunction.java:     * @param initValue Initial value, i.e. {@link #value(long) value(0)}.
./ml/neuralnet/sofm/util/QuasiSigmoidDecayFunction.java:     * @param slope Value of the function derivative at {@code numCall}.
./ml/neuralnet/sofm/util/QuasiSigmoidDecayFunction.java:     * @param numCall Inflexion point.
./ml/neuralnet/sofm/util/QuasiSigmoidDecayFunction.java:     * @param numCall Current step of the training task.
./ml/neuralnet/sofm/LearningFactorFunctionFactory.java:     * @param initValue Initial value, i.e.
./ml/neuralnet/sofm/LearningFactorFunctionFactory.java:     * @param valueAtNumCall Value of the function at {@code numCall}.
./ml/neuralnet/sofm/LearningFactorFunctionFactory.java:     * @param numCall Argument for which the function returns
./ml/neuralnet/sofm/LearningFactorFunctionFactory.java:     * @param initValue Initial value, i.e.
./ml/neuralnet/sofm/LearningFactorFunctionFactory.java:     * @param slope Value of the function derivative at {@code numCall}.
./ml/neuralnet/sofm/LearningFactorFunctionFactory.java:     * @param numCall Inflexion point.
./ml/neuralnet/sofm/KohonenTrainingTask.java:     * @param net Network to be trained with the SOFM algorithm.
./ml/neuralnet/sofm/KohonenTrainingTask.java:     * @param featuresIterator Training data iterator.
./ml/neuralnet/sofm/KohonenTrainingTask.java:     * @param updateAction SOFM update procedure.
./ml/neuralnet/sofm/LearningFactorFunction.java:     * @param numCall Current step of the training task.
./ml/neuralnet/twod/NeuronSquareMesh2D.java:     * @param wrapRowDim Whether to wrap the first dimension (i.e the first
./ml/neuralnet/twod/NeuronSquareMesh2D.java:     * @param wrapColDim Whether to wrap the second dimension (i.e the first
./ml/neuralnet/twod/NeuronSquareMesh2D.java:     * @param neighbourhoodType Neighbourhood type.
./ml/neuralnet/twod/NeuronSquareMesh2D.java:     * @param featuresList Arrays that will initialize the features sets of
./ml/neuralnet/twod/NeuronSquareMesh2D.java:     * @param numRows Number of neurons in the first dimension.
./ml/neuralnet/twod/NeuronSquareMesh2D.java:     * @param wrapRowDim Whether to wrap the first dimension (i.e the first
./ml/neuralnet/twod/NeuronSquareMesh2D.java:     * @param numCols Number of neurons in the second dimension.
./ml/neuralnet/twod/NeuronSquareMesh2D.java:     * @param wrapColDim Whether to wrap the second dimension (i.e the first
./ml/neuralnet/twod/NeuronSquareMesh2D.java:     * @param neighbourhoodType Neighbourhood type.
./ml/neuralnet/twod/NeuronSquareMesh2D.java:     * @param featureInit Array of functions that will initialize the
./ml/neuralnet/twod/NeuronSquareMesh2D.java:     * @param wrapRowDim Whether to wrap the first dimension (i.e the first
./ml/neuralnet/twod/NeuronSquareMesh2D.java:     * @param wrapColDim Whether to wrap the second dimension (i.e the first
./ml/neuralnet/twod/NeuronSquareMesh2D.java:     * @param neighbourhoodType Neighbourhood type.
./ml/neuralnet/twod/NeuronSquareMesh2D.java:     * @param net Underlying network.
./ml/neuralnet/twod/NeuronSquareMesh2D.java:     * @param idGrid Neuron identifiers.
./ml/neuralnet/twod/NeuronSquareMesh2D.java:     * @param i Row index.
./ml/neuralnet/twod/NeuronSquareMesh2D.java:     * @param j Column index.
./ml/neuralnet/twod/NeuronSquareMesh2D.java:     * @param row Row index.
./ml/neuralnet/twod/NeuronSquareMesh2D.java:     * @param col Column index.
./ml/neuralnet/twod/NeuronSquareMesh2D.java:     * @param alongRowDir Direction along the given {@code row} (i.e. an
./ml/neuralnet/twod/NeuronSquareMesh2D.java:     * @param alongColDir Direction along the given {@code col} (i.e. an
./ml/neuralnet/twod/NeuronSquareMesh2D.java:     * @param row Row index.
./ml/neuralnet/twod/NeuronSquareMesh2D.java:     * @param col Column index.
./ml/neuralnet/twod/NeuronSquareMesh2D.java:     * @param alongRowDir Direction along the given {@code row} (i.e. an
./ml/neuralnet/twod/NeuronSquareMesh2D.java:     * @param alongColDir Direction along the given {@code col} (i.e. an
./ml/neuralnet/twod/NeuronSquareMesh2D.java:     * @param in Input stream.
./ml/neuralnet/twod/NeuronSquareMesh2D.java:         * @param wrapRows Whether the row dimension is wrapped.
./ml/neuralnet/twod/NeuronSquareMesh2D.java:         * @param wrapColumns Whether the column dimension is wrapped.
./ml/neuralnet/twod/NeuronSquareMesh2D.java:         * @param neighbourhood Neighbourhood type.
./ml/neuralnet/twod/NeuronSquareMesh2D.java:         * @param featuresList List of neurons features.
./ml/neuralnet/twod/util/UnifiedDistanceMatrix.java:     * @param individualDistances If {@code true}, the 8 individual
./ml/neuralnet/twod/util/UnifiedDistanceMatrix.java:     * @param distance Distance.
./ml/neuralnet/twod/util/UnifiedDistanceMatrix.java:     * @param map Map.
./ml/neuralnet/twod/util/UnifiedDistanceMatrix.java:     * @param map Map.
./ml/neuralnet/twod/util/MapVisualization.java:     * @param map Map.
./ml/neuralnet/twod/util/QuantizationError.java:     * @param distance Distance.
./ml/neuralnet/twod/util/SmoothedDataHistogram.java:     * @param smoothingBins Number of bins.
./ml/neuralnet/twod/util/SmoothedDataHistogram.java:     * @param distance Distance.
./ml/neuralnet/twod/util/MapDataVisualization.java:     * @param map Map.
./ml/neuralnet/twod/util/MapDataVisualization.java:     * @param data Data.
./ml/neuralnet/twod/util/TopographicErrorHistogram.java:     * @param relativeCount Whether to compute relative bin counts.
./ml/neuralnet/twod/util/TopographicErrorHistogram.java:     * @param distance Distance.
./ml/neuralnet/twod/util/LocationFinder.java:         * @param row Row index.
./ml/neuralnet/twod/util/LocationFinder.java:         * @param column Column index.
./ml/neuralnet/twod/util/LocationFinder.java:     * @param map Map.
./ml/neuralnet/twod/util/LocationFinder.java:     * @param n Neuron.
./ml/neuralnet/twod/util/HitHistogram.java:     * @param normalizeCount Whether to compute relative bin counts.
./ml/neuralnet/twod/util/HitHistogram.java:     * @param distance Distance.
./ml/neuralnet/UpdateAction.java:     * @param net Network.
./ml/neuralnet/UpdateAction.java:     * @param features Training data.
./ml/neuralnet/Neuron.java:     * @param identifier Identifier (assigned by the {@link Network}).
./ml/neuralnet/Neuron.java:     * @param features Initial values of the feature set.
./ml/neuralnet/Neuron.java:     * @param expect Current values of the features, as assumed by the caller.
./ml/neuralnet/Neuron.java:     * @param update Features's new values.
./ml/neuralnet/Neuron.java:     * @param current Current values.
./ml/neuralnet/Neuron.java:     * @param expect Expected values.
./ml/neuralnet/Neuron.java:     * @param in Input stream.
./ml/neuralnet/Neuron.java:         * @param identifier Identifier.
./ml/neuralnet/Neuron.java:         * @param features Features.
./ml/neuralnet/MapUtils.java:     * @param features Data.
./ml/neuralnet/MapUtils.java:     * @param neurons List of neurons to scan. If the list is empty
./ml/neuralnet/MapUtils.java:     * @param distance Distance function. The neuron's features are
./ml/neuralnet/MapUtils.java:     * @param features Data.
./ml/neuralnet/MapUtils.java:     * @param neurons List of neurons to scan. If the list is empty
./ml/neuralnet/MapUtils.java:     * @param distance Distance function. The neuron's features are
./ml/neuralnet/MapUtils.java:     * @param features Data.
./ml/neuralnet/MapUtils.java:     * @param neurons List of neurons to scan. If it is empty, an empty array
./ml/neuralnet/MapUtils.java:     * @param distance Distance function.
./ml/neuralnet/MapUtils.java:     * @param map Network.
./ml/neuralnet/MapUtils.java:     * @param distance Function to use for computing the average
./ml/neuralnet/MapUtils.java:     * @param data Feature vectors.
./ml/neuralnet/MapUtils.java:     * @param map Network.
./ml/neuralnet/MapUtils.java:     * @param distance Function to use for determining the best matching unit.
./ml/neuralnet/MapUtils.java:     * @param data Feature vectors.
./ml/neuralnet/MapUtils.java:     * @param neurons List of neurons to scan.
./ml/neuralnet/MapUtils.java:     * @param distance Distance function.
./ml/neuralnet/MapUtils.java:     * @param data Feature vectors.
./ml/neuralnet/MapUtils.java:     * @param net Network.
./ml/neuralnet/MapUtils.java:     * @param distance Distance function.
./ml/neuralnet/MapUtils.java:         * @param neuron Neuron.
./ml/neuralnet/MapUtils.java:         * @param value Value.
./ml/neuralnet/Network.java:     * @param nextId Next available identifier.
./ml/neuralnet/Network.java:     * @param featureSize Number of features.
./ml/neuralnet/Network.java:     * @param neuronList Neurons.
./ml/neuralnet/Network.java:     * @param neighbourIdList Links associated to each of the neurons in
./ml/neuralnet/Network.java:     * @param initialIdentifier Identifier for the first neuron that
./ml/neuralnet/Network.java:     * @param featureSize Size of the neuron's features.
./ml/neuralnet/Network.java:     * @param comparator {@link Comparator} used for sorting the neurons.
./ml/neuralnet/Network.java:     * @param features Initial values for the neuron's features.
./ml/neuralnet/Network.java:     * @param neuron Neuron to be removed from this network.
./ml/neuralnet/Network.java:     * @param a Neuron.
./ml/neuralnet/Network.java:     * @param b Neuron.
./ml/neuralnet/Network.java:     * @param linkSet Neuron identifier.
./ml/neuralnet/Network.java:     * @param id Neuron identifier.
./ml/neuralnet/Network.java:     * @param a Neuron.
./ml/neuralnet/Network.java:     * @param b Neuron.
./ml/neuralnet/Network.java:     * @param linkSet Neuron identifier.
./ml/neuralnet/Network.java:     * @param id Neuron identifier.
./ml/neuralnet/Network.java:     * @param id Identifier.
./ml/neuralnet/Network.java:     * @param neurons Neurons for which to retrieve the neighbours.
./ml/neuralnet/Network.java:     * @param neurons Neurons for which to retrieve the neighbours.
./ml/neuralnet/Network.java:     * @param exclude Neurons to exclude from the returned list.
./ml/neuralnet/Network.java:     * @param neuron Neuron for which to retrieve the neighbours.
./ml/neuralnet/Network.java:     * @param neuron Neuron for which to retrieve the neighbours.
./ml/neuralnet/Network.java:     * @param exclude Neurons to exclude from the returned list.
./ml/neuralnet/Network.java:     * @param in Input stream.
./ml/neuralnet/Network.java:         * @param nextId Next available identifier.
./ml/neuralnet/Network.java:         * @param featureSize Number of features.
./ml/neuralnet/Network.java:         * @param neuronList Neurons.
./ml/neuralnet/Network.java:         * @param neighbourIdList Links associated to each of the neurons in
./ode/ContinuousOutputFieldModel.java: * @param <T> the type of the field elements
./ode/ContinuousOutputFieldModel.java:     * @param model model to add at the end of the instance
./ode/ContinuousOutputFieldModel.java:     * @param d1 first dimension
./ode/ContinuousOutputFieldModel.java:     * @param d2 second dimansion
./ode/ContinuousOutputFieldModel.java:     * @param interpolator interpolator for the last accepted step.
./ode/ContinuousOutputFieldModel.java:     * @param isLast true if the step is the last one
./ode/ContinuousOutputFieldModel.java:     * @param time time of the interpolated point
./ode/ContinuousOutputFieldModel.java:     * @param time point to locate
./ode/ContinuousOutputFieldModel.java:     * @param interval step interval
./ode/Parameterizable.java:     * @param name parameter name to check
./ode/FirstOrderFieldDifferentialEquations.java: * @param <T> the type of the field elements
./ode/FirstOrderFieldDifferentialEquations.java:     * @param t0 value of the independent <I>time</I> variable at integration start
./ode/FirstOrderFieldDifferentialEquations.java:     * @param y0 array containing the value of the state vector at integration start
./ode/FirstOrderFieldDifferentialEquations.java:     * @param finalTime target time for the integration
./ode/FirstOrderFieldDifferentialEquations.java:     * @param t current value of the independent <I>time</I> variable
./ode/FirstOrderFieldDifferentialEquations.java:     * @param y array containing the current value of the state vector
./ode/FieldEquationsMapper.java: * @param <T> the type of the field elements
./ode/FieldEquationsMapper.java:     * @param mapper former mapper, with one equation less (null for first equation)
./ode/FieldEquationsMapper.java:     * @param dimension dimension of the equation state vector
./ode/FieldEquationsMapper.java:     * @param state state to map
./ode/FieldEquationsMapper.java:     * @param state state to map
./ode/FieldEquationsMapper.java:     * @param t time
./ode/FieldEquationsMapper.java:     * @param y state array to map, including primary and secondary components
./ode/FieldEquationsMapper.java:     * @param yDot state derivative array to map, including primary and secondary components
./ode/FieldEquationsMapper.java:     * @param index index of the equation, must be between 0 included and
./ode/FieldEquationsMapper.java:     * @param complete complete state or derivative array from which
./ode/FieldEquationsMapper.java:     * @param index index of the equation, must be between 0 included and
./ode/FieldEquationsMapper.java:     * @param equationData equation data to be inserted into the complete array
./ode/FieldEquationsMapper.java:     * @param complete placeholder where to put equation data (only the
./ode/FieldEquationsMapper.java:     * @param index index of the equation, must be between 0 included and
./ode/FirstOrderConverter.java:   * @param equations second order equations set to convert
./ode/FirstOrderConverter.java:   * @param t current value of the independent <I>time</I> variable
./ode/FirstOrderConverter.java:   * @param y array containing the current value of the state vector
./ode/FirstOrderConverter.java:   * @param yDot placeholder array where to put the time derivative of the state vector
./ode/EquationsMapper.java:     * @param firstIndex index of the first equation element in complete state arrays
./ode/EquationsMapper.java:     * @param dimension dimension of the secondary state parameters
./ode/EquationsMapper.java:     * @param complete complete state or derivative array from which
./ode/EquationsMapper.java:     * @param equationData placeholder where to put equation data
./ode/EquationsMapper.java:     * @param equationData equation data to be inserted into the complete array
./ode/EquationsMapper.java:     * @param complete placeholder where to put equation data (only the
./ode/JacobianMatrices.java:     * @param fode the primary first order differential equations set to extend
./ode/JacobianMatrices.java:     * @param hY step used for finite difference computation with respect to state vector
./ode/JacobianMatrices.java:     * @param parameters parameters to consider for Jacobian matrices processing
./ode/JacobianMatrices.java:     * @param jode the primary first order differential equations set to extend
./ode/JacobianMatrices.java:     * @param parameters parameters to consider for Jacobian matrices processing
./ode/JacobianMatrices.java:     * @param expandable expandable set into which variational equations should be registered
./ode/JacobianMatrices.java:     * @param provider the parameter Jacobian provider to compute exactly the parameter Jacobian matrix
./ode/JacobianMatrices.java:     * @param parameterizedOde the parameterized ODE to compute the parameter Jacobian matrix using finite differences
./ode/JacobianMatrices.java:     * @param parameter parameter to consider for Jacobian processing
./ode/JacobianMatrices.java:     * @param hP step for Jacobian finite difference computation w.r.t. the specified parameter
./ode/JacobianMatrices.java:     * @param dYdY0 initial Jacobian matrix w.r.t. state
./ode/JacobianMatrices.java:     * @param pName parameter name
./ode/JacobianMatrices.java:     * @param dYdP initial Jacobian column vector with respect to the parameter
./ode/JacobianMatrices.java:     * @param dYdY0 current Jacobian matrix with respect to state.
./ode/JacobianMatrices.java:     * @param pName name of the parameter for the computed Jacobian matrix
./ode/JacobianMatrices.java:     * @param dYdP current Jacobian matrix with respect to the named parameter
./ode/JacobianMatrices.java:     * @param expected expected dimension
./ode/JacobianMatrices.java:     * @param array (may be null if expected is 0)
./ode/JacobianMatrices.java:         * @param ode original ODE problem, without jacobians computation skill
./ode/JacobianMatrices.java:         * @param hY step sizes to compute the jacobian df/dy
./ode/FieldSecondaryEquations.java: * @param <T> the type of the field elements
./ode/FieldSecondaryEquations.java:     * @param t0 value of the independent <I>time</I> variable at integration start
./ode/FieldSecondaryEquations.java:     * @param primary0 array containing the value of the primary state vector at integration start
./ode/FieldSecondaryEquations.java:     * @param secondary0 array containing the value of the secondary state vector at integration start
./ode/FieldSecondaryEquations.java:     * @param finalTime target time for the integration
./ode/FieldSecondaryEquations.java:     * @param t current value of the independent <I>time</I> variable
./ode/FieldSecondaryEquations.java:     * @param primary array containing the current value of the primary state vector
./ode/FieldSecondaryEquations.java:     * @param primaryDot array containing the derivative of the primary state vector
./ode/FieldSecondaryEquations.java:     * @param secondary array containing the current value of the secondary state vector
./ode/ParameterJacobianWrapper.java:     * @param fode main first order differential equations set
./ode/ParameterJacobianWrapper.java:     * @param pode secondary problem, without parameter Jacobian computation skill
./ode/ParameterJacobianWrapper.java:     * @param paramsAndSteps parameters and steps to compute the Jacobians df/dp
./ode/nonstiff/HighamHall54FieldIntegrator.java: * @param <T> the type of the field elements
./ode/nonstiff/HighamHall54FieldIntegrator.java:     * @param field field to which the time and state vector elements belong
./ode/nonstiff/HighamHall54FieldIntegrator.java:     * @param minStep minimal step (sign is irrelevant, regardless of
./ode/nonstiff/HighamHall54FieldIntegrator.java:     * @param maxStep maximal step (sign is irrelevant, regardless of
./ode/nonstiff/HighamHall54FieldIntegrator.java:     * @param scalAbsoluteTolerance allowed absolute error
./ode/nonstiff/HighamHall54FieldIntegrator.java:     * @param scalRelativeTolerance allowed relative error
./ode/nonstiff/HighamHall54FieldIntegrator.java:     * @param field field to which the time and state vector elements belong
./ode/nonstiff/HighamHall54FieldIntegrator.java:     * @param minStep minimal step (sign is irrelevant, regardless of
./ode/nonstiff/HighamHall54FieldIntegrator.java:     * @param maxStep maximal step (sign is irrelevant, regardless of
./ode/nonstiff/HighamHall54FieldIntegrator.java:     * @param vecAbsoluteTolerance allowed absolute error
./ode/nonstiff/HighamHall54FieldIntegrator.java:     * @param vecRelativeTolerance allowed relative error
./ode/nonstiff/HighamHall54Integrator.java:   * @param minStep minimal step (sign is irrelevant, regardless of
./ode/nonstiff/HighamHall54Integrator.java:   * @param maxStep maximal step (sign is irrelevant, regardless of
./ode/nonstiff/HighamHall54Integrator.java:   * @param scalAbsoluteTolerance allowed absolute error
./ode/nonstiff/HighamHall54Integrator.java:   * @param scalRelativeTolerance allowed relative error
./ode/nonstiff/HighamHall54Integrator.java:   * @param minStep minimal step (sign is irrelevant, regardless of
./ode/nonstiff/HighamHall54Integrator.java:   * @param maxStep maximal step (sign is irrelevant, regardless of
./ode/nonstiff/HighamHall54Integrator.java:   * @param vecAbsoluteTolerance allowed absolute error
./ode/nonstiff/HighamHall54Integrator.java:   * @param vecRelativeTolerance allowed relative error
./ode/nonstiff/AdamsNordsieckTransformer.java:     * @param n number of steps of the multistep method
./ode/nonstiff/AdamsNordsieckTransformer.java:     * @param nSteps number of steps of the multistep method
./ode/nonstiff/AdamsNordsieckTransformer.java:     * @param rows number of rows of the matrix
./ode/nonstiff/AdamsNordsieckTransformer.java:     * @param h step size to use for scaling
./ode/nonstiff/AdamsNordsieckTransformer.java:     * @param t first steps times
./ode/nonstiff/AdamsNordsieckTransformer.java:     * @param y first steps states
./ode/nonstiff/AdamsNordsieckTransformer.java:     * @param yDot first steps derivatives
./ode/nonstiff/AdamsNordsieckTransformer.java:     * @param highOrder high order scaled derivatives
./ode/nonstiff/AdamsNordsieckTransformer.java:     * @param start first order scaled derivatives at step start
./ode/nonstiff/AdamsNordsieckTransformer.java:     * @param end first order scaled derivatives at step end
./ode/nonstiff/AdamsNordsieckTransformer.java:     * @param highOrder high order scaled derivatives, will be modified
./ode/nonstiff/ThreeEighthesFieldStepInterpolator.java: * @param <T> the type of the field elements
./ode/nonstiff/ThreeEighthesFieldStepInterpolator.java:     * @param field field to which the time and state vector elements belong
./ode/nonstiff/ThreeEighthesFieldStepInterpolator.java:     * @param forward integration direction indicator
./ode/nonstiff/ThreeEighthesFieldStepInterpolator.java:     * @param yDotK slopes at the intermediate points
./ode/nonstiff/ThreeEighthesFieldStepInterpolator.java:     * @param globalPreviousState start of the global step
./ode/nonstiff/ThreeEighthesFieldStepInterpolator.java:     * @param globalCurrentState end of the global step
./ode/nonstiff/ThreeEighthesFieldStepInterpolator.java:     * @param softPreviousState start of the restricted step
./ode/nonstiff/ThreeEighthesFieldStepInterpolator.java:     * @param softCurrentState end of the restricted step
./ode/nonstiff/ThreeEighthesFieldStepInterpolator.java:     * @param mapper equations mapper for the all equations
./ode/nonstiff/GillStepInterpolator.java:   * @param interpolator interpolator to copy from. The copy is a deep
./ode/nonstiff/ClassicalRungeKuttaIntegrator.java:   * @param step integration step
./ode/nonstiff/HighamHall54FieldStepInterpolator.java: * @param <T> the type of the field elements
./ode/nonstiff/HighamHall54FieldStepInterpolator.java:     * @param field field to which the time and state vector elements belong
./ode/nonstiff/HighamHall54FieldStepInterpolator.java:     * @param forward integration direction indicator
./ode/nonstiff/HighamHall54FieldStepInterpolator.java:     * @param yDotK slopes at the intermediate points
./ode/nonstiff/HighamHall54FieldStepInterpolator.java:     * @param globalPreviousState start of the global step
./ode/nonstiff/HighamHall54FieldStepInterpolator.java:     * @param globalCurrentState end of the global step
./ode/nonstiff/HighamHall54FieldStepInterpolator.java:     * @param softPreviousState start of the restricted step
./ode/nonstiff/HighamHall54FieldStepInterpolator.java:     * @param softCurrentState end of the restricted step
./ode/nonstiff/HighamHall54FieldStepInterpolator.java:     * @param mapper equations mapper for the all equations
./ode/nonstiff/DormandPrince853FieldIntegrator.java: * @param <T> the type of the field elements
./ode/nonstiff/DormandPrince853FieldIntegrator.java:     * @param field field to which the time and state vector elements belong
./ode/nonstiff/DormandPrince853FieldIntegrator.java:     * @param minStep minimal step (sign is irrelevant, regardless of
./ode/nonstiff/DormandPrince853FieldIntegrator.java:     * @param maxStep maximal step (sign is irrelevant, regardless of
./ode/nonstiff/DormandPrince853FieldIntegrator.java:     * @param scalAbsoluteTolerance allowed absolute error
./ode/nonstiff/DormandPrince853FieldIntegrator.java:     * @param scalRelativeTolerance allowed relative error
./ode/nonstiff/DormandPrince853FieldIntegrator.java:     * @param field field to which the time and state vector elements belong
./ode/nonstiff/DormandPrince853FieldIntegrator.java:     * @param minStep minimal step (sign is irrelevant, regardless of
./ode/nonstiff/DormandPrince853FieldIntegrator.java:     * @param maxStep maximal step (sign is irrelevant, regardless of
./ode/nonstiff/DormandPrince853FieldIntegrator.java:     * @param vecAbsoluteTolerance allowed absolute error
./ode/nonstiff/DormandPrince853FieldIntegrator.java:     * @param vecRelativeTolerance allowed relative error
./ode/nonstiff/MidpointFieldStepInterpolator.java: * @param <T> the type of the field elements
./ode/nonstiff/MidpointFieldStepInterpolator.java:     * @param field field to which the time and state vector elements belong
./ode/nonstiff/MidpointFieldStepInterpolator.java:     * @param forward integration direction indicator
./ode/nonstiff/MidpointFieldStepInterpolator.java:     * @param yDotK slopes at the intermediate points
./ode/nonstiff/MidpointFieldStepInterpolator.java:     * @param globalPreviousState start of the global step
./ode/nonstiff/MidpointFieldStepInterpolator.java:     * @param globalCurrentState end of the global step
./ode/nonstiff/MidpointFieldStepInterpolator.java:     * @param softPreviousState start of the restricted step
./ode/nonstiff/MidpointFieldStepInterpolator.java:     * @param softCurrentState end of the restricted step
./ode/nonstiff/MidpointFieldStepInterpolator.java:     * @param mapper equations mapper for the all equations
./ode/nonstiff/DormandPrince54StepInterpolator.java:   * @param interpolator interpolator to copy from. The copy is a deep
./ode/nonstiff/ThreeEighthesStepInterpolator.java:   * @param interpolator interpolator to copy from. The copy is a deep
./ode/nonstiff/RungeKuttaFieldIntegrator.java: * @param <T> the type of the field elements
./ode/nonstiff/RungeKuttaFieldIntegrator.java:     * @param field field to which the time and state vector elements belong
./ode/nonstiff/RungeKuttaFieldIntegrator.java:     * @param name name of the method
./ode/nonstiff/RungeKuttaFieldIntegrator.java:     * @param step integration step
./ode/nonstiff/RungeKuttaFieldIntegrator.java:     * @param p numerator
./ode/nonstiff/RungeKuttaFieldIntegrator.java:     * @param q denominator
./ode/nonstiff/RungeKuttaFieldIntegrator.java:     * @param forward integration direction indicator
./ode/nonstiff/RungeKuttaFieldIntegrator.java:     * @param yDotK slopes at the intermediate points
./ode/nonstiff/RungeKuttaFieldIntegrator.java:     * @param globalPreviousState start of the global step
./ode/nonstiff/RungeKuttaFieldIntegrator.java:     * @param globalCurrentState end of the global step
./ode/nonstiff/RungeKuttaFieldIntegrator.java:     * @param mapper equations mapper for the all equations
./ode/nonstiff/RungeKuttaFieldIntegrator.java:     * @param equations differential equations to integrate
./ode/nonstiff/RungeKuttaFieldIntegrator.java:     * @param t0 initial time
./ode/nonstiff/RungeKuttaFieldIntegrator.java:     * @param y0 initial value of the state vector at t0
./ode/nonstiff/RungeKuttaFieldIntegrator.java:     * @param t target time for the integration
./ode/nonstiff/AdamsFieldStepInterpolator.java: * @param <T> the type of the field elements
./ode/nonstiff/AdamsFieldStepInterpolator.java:     * @param stepSize step size used in the scaled and Nordsieck arrays
./ode/nonstiff/AdamsFieldStepInterpolator.java:     * @param reference reference state from which Taylor expansion are estimated
./ode/nonstiff/AdamsFieldStepInterpolator.java:     * @param scaled first scaled derivative
./ode/nonstiff/AdamsFieldStepInterpolator.java:     * @param nordsieck Nordsieck vector
./ode/nonstiff/AdamsFieldStepInterpolator.java:     * @param isForward integration direction indicator
./ode/nonstiff/AdamsFieldStepInterpolator.java:     * @param globalPreviousState start of the global step
./ode/nonstiff/AdamsFieldStepInterpolator.java:     * @param globalCurrentState end of the global step
./ode/nonstiff/AdamsFieldStepInterpolator.java:     * @param equationsMapper mapper for ODE equations primary and secondary components
./ode/nonstiff/AdamsFieldStepInterpolator.java:     * @param stepSize step size used in the scaled and Nordsieck arrays
./ode/nonstiff/AdamsFieldStepInterpolator.java:     * @param reference reference state from which Taylor expansion are estimated
./ode/nonstiff/AdamsFieldStepInterpolator.java:     * @param scaled first scaled derivative
./ode/nonstiff/AdamsFieldStepInterpolator.java:     * @param nordsieck Nordsieck vector
./ode/nonstiff/AdamsFieldStepInterpolator.java:     * @param isForward integration direction indicator
./ode/nonstiff/AdamsFieldStepInterpolator.java:     * @param globalPreviousState start of the global step
./ode/nonstiff/AdamsFieldStepInterpolator.java:     * @param globalCurrentState end of the global step
./ode/nonstiff/AdamsFieldStepInterpolator.java:     * @param softPreviousState start of the restricted step
./ode/nonstiff/AdamsFieldStepInterpolator.java:     * @param softCurrentState end of the restricted step
./ode/nonstiff/AdamsFieldStepInterpolator.java:     * @param equationsMapper mapper for ODE equations primary and secondary components
./ode/nonstiff/AdamsFieldStepInterpolator.java:     * @param newForward integration direction indicator
./ode/nonstiff/AdamsFieldStepInterpolator.java:     * @param newGlobalPreviousState start of the global step
./ode/nonstiff/AdamsFieldStepInterpolator.java:     * @param newGlobalCurrentState end of the global step
./ode/nonstiff/AdamsFieldStepInterpolator.java:     * @param newSoftPreviousState start of the restricted step
./ode/nonstiff/AdamsFieldStepInterpolator.java:     * @param newSoftCurrentState end of the restricted step
./ode/nonstiff/AdamsFieldStepInterpolator.java:     * @param newMapper equations mapper for the all equations
./ode/nonstiff/AdamsFieldStepInterpolator.java:     * @param reference reference state
./ode/nonstiff/AdamsFieldStepInterpolator.java:     * @param time time at which state must be estimated
./ode/nonstiff/AdamsFieldStepInterpolator.java:     * @param stepSize step size used in the scaled and Nordsieck arrays
./ode/nonstiff/AdamsFieldStepInterpolator.java:     * @param scaled first scaled derivative
./ode/nonstiff/AdamsFieldStepInterpolator.java:     * @param nordsieck Nordsieck vector
./ode/nonstiff/AdamsFieldStepInterpolator.java:     * @param <S> the type of the field elements
./ode/nonstiff/ClassicalRungeKuttaFieldIntegrator.java: * @param <T> the type of the field elements
./ode/nonstiff/ClassicalRungeKuttaFieldIntegrator.java:     * @param field field to which the time and state vector elements belong
./ode/nonstiff/ClassicalRungeKuttaFieldIntegrator.java:     * @param step integration step
./ode/nonstiff/EulerFieldStepInterpolator.java: * @param <T> the type of the field elements
./ode/nonstiff/EulerFieldStepInterpolator.java:     * @param field field to which the time and state vector elements belong
./ode/nonstiff/EulerFieldStepInterpolator.java:     * @param forward integration direction indicator
./ode/nonstiff/EulerFieldStepInterpolator.java:     * @param yDotK slopes at the intermediate points
./ode/nonstiff/EulerFieldStepInterpolator.java:     * @param globalPreviousState start of the global step
./ode/nonstiff/EulerFieldStepInterpolator.java:     * @param globalCurrentState end of the global step
./ode/nonstiff/EulerFieldStepInterpolator.java:     * @param softPreviousState start of the restricted step
./ode/nonstiff/EulerFieldStepInterpolator.java:     * @param softCurrentState end of the restricted step
./ode/nonstiff/EulerFieldStepInterpolator.java:     * @param mapper equations mapper for the all equations
./ode/nonstiff/HighamHall54StepInterpolator.java:   * @param interpolator interpolator to copy from. The copy is a deep
./ode/nonstiff/FieldButcherArrayProvider.java: * @param <T> the type of the field elements
./ode/nonstiff/AdamsIntegrator.java:     * @param name name of the method
./ode/nonstiff/AdamsIntegrator.java:     * @param nSteps number of steps of the method excluding the one being computed
./ode/nonstiff/AdamsIntegrator.java:     * @param order order of the method
./ode/nonstiff/AdamsIntegrator.java:     * @param minStep minimal step (sign is irrelevant, regardless of
./ode/nonstiff/AdamsIntegrator.java:     * @param maxStep maximal step (sign is irrelevant, regardless of
./ode/nonstiff/AdamsIntegrator.java:     * @param scalAbsoluteTolerance allowed absolute error
./ode/nonstiff/AdamsIntegrator.java:     * @param scalRelativeTolerance allowed relative error
./ode/nonstiff/AdamsIntegrator.java:     * @param name name of the method
./ode/nonstiff/AdamsIntegrator.java:     * @param nSteps number of steps of the method excluding the one being computed
./ode/nonstiff/AdamsIntegrator.java:     * @param order order of the method
./ode/nonstiff/AdamsIntegrator.java:     * @param minStep minimal step (sign is irrelevant, regardless of
./ode/nonstiff/AdamsIntegrator.java:     * @param maxStep maximal step (sign is irrelevant, regardless of
./ode/nonstiff/AdamsIntegrator.java:     * @param vecAbsoluteTolerance allowed absolute error
./ode/nonstiff/AdamsIntegrator.java:     * @param vecRelativeTolerance allowed relative error
./ode/nonstiff/AdamsIntegrator.java:     * @param highOrder high order scaled derivatives
./ode/nonstiff/AdamsIntegrator.java:     * @param start first order scaled derivatives at step start
./ode/nonstiff/AdamsIntegrator.java:     * @param end first order scaled derivatives at step end
./ode/nonstiff/AdamsIntegrator.java:     * @param highOrder high order scaled derivatives, will be modified
./ode/nonstiff/LutherFieldIntegrator.java: * @param <T> the type of the field elements
./ode/nonstiff/LutherFieldIntegrator.java:     * @param field field to which the time and state vector elements belong
./ode/nonstiff/LutherFieldIntegrator.java:     * @param step integration step
./ode/nonstiff/AdamsNordsieckFieldTransformer.java: * @param <T> the type of the field elements
./ode/nonstiff/AdamsNordsieckFieldTransformer.java:     * @param field field to which the time and state vector elements belong
./ode/nonstiff/AdamsNordsieckFieldTransformer.java:     * @param n number of steps of the multistep method
./ode/nonstiff/AdamsNordsieckFieldTransformer.java:     * @param field field to which the time and state vector elements belong
./ode/nonstiff/AdamsNordsieckFieldTransformer.java:     * @param nSteps number of steps of the multistep method
./ode/nonstiff/AdamsNordsieckFieldTransformer.java:     * @param <T> the type of the field elements
./ode/nonstiff/AdamsNordsieckFieldTransformer.java:     * @param rows number of rows of the matrix
./ode/nonstiff/AdamsNordsieckFieldTransformer.java:     * @param h step size to use for scaling
./ode/nonstiff/AdamsNordsieckFieldTransformer.java:     * @param t first steps times
./ode/nonstiff/AdamsNordsieckFieldTransformer.java:     * @param y first steps states
./ode/nonstiff/AdamsNordsieckFieldTransformer.java:     * @param yDot first steps derivatives
./ode/nonstiff/AdamsNordsieckFieldTransformer.java:     * @param highOrder high order scaled derivatives
./ode/nonstiff/AdamsNordsieckFieldTransformer.java:     * @param start first order scaled derivatives at step start
./ode/nonstiff/AdamsNordsieckFieldTransformer.java:     * @param end first order scaled derivatives at step end
./ode/nonstiff/AdamsNordsieckFieldTransformer.java:     * @param highOrder high order scaled derivatives, will be modified
./ode/nonstiff/EulerStepInterpolator.java:   * @param interpolator interpolator to copy from. The copy is a deep
./ode/nonstiff/DormandPrince853StepInterpolator.java:   * @param interpolator interpolator to copy from. The copy is a deep
./ode/nonstiff/EmbeddedRungeKuttaIntegrator.java:   * @param name name of the method
./ode/nonstiff/EmbeddedRungeKuttaIntegrator.java:   * @param fsal indicate that the method is an <i>fsal</i>
./ode/nonstiff/EmbeddedRungeKuttaIntegrator.java:   * @param c time steps from Butcher array (without the first zero)
./ode/nonstiff/EmbeddedRungeKuttaIntegrator.java:   * @param a internal weights from Butcher array (without the first empty row)
./ode/nonstiff/EmbeddedRungeKuttaIntegrator.java:   * @param b propagation weights for the high order method from Butcher array
./ode/nonstiff/EmbeddedRungeKuttaIntegrator.java:   * @param prototype prototype of the step interpolator to use
./ode/nonstiff/EmbeddedRungeKuttaIntegrator.java:   * @param minStep minimal step (sign is irrelevant, regardless of
./ode/nonstiff/EmbeddedRungeKuttaIntegrator.java:   * @param maxStep maximal step (sign is irrelevant, regardless of
./ode/nonstiff/EmbeddedRungeKuttaIntegrator.java:   * @param scalAbsoluteTolerance allowed absolute error
./ode/nonstiff/EmbeddedRungeKuttaIntegrator.java:   * @param scalRelativeTolerance allowed relative error
./ode/nonstiff/EmbeddedRungeKuttaIntegrator.java:   * @param name name of the method
./ode/nonstiff/EmbeddedRungeKuttaIntegrator.java:   * @param fsal indicate that the method is an <i>fsal</i>
./ode/nonstiff/EmbeddedRungeKuttaIntegrator.java:   * @param c time steps from Butcher array (without the first zero)
./ode/nonstiff/EmbeddedRungeKuttaIntegrator.java:   * @param a internal weights from Butcher array (without the first empty row)
./ode/nonstiff/EmbeddedRungeKuttaIntegrator.java:   * @param b propagation weights for the high order method from Butcher array
./ode/nonstiff/EmbeddedRungeKuttaIntegrator.java:   * @param prototype prototype of the step interpolator to use
./ode/nonstiff/EmbeddedRungeKuttaIntegrator.java:   * @param minStep minimal step (must be positive even for backward
./ode/nonstiff/EmbeddedRungeKuttaIntegrator.java:   * @param maxStep maximal step (must be positive even for backward
./ode/nonstiff/EmbeddedRungeKuttaIntegrator.java:   * @param vecAbsoluteTolerance allowed absolute error
./ode/nonstiff/EmbeddedRungeKuttaIntegrator.java:   * @param vecRelativeTolerance allowed relative error
./ode/nonstiff/EmbeddedRungeKuttaIntegrator.java:   * @param safety safety factor
./ode/nonstiff/EmbeddedRungeKuttaIntegrator.java:   * @param minReduction minimal reduction factor
./ode/nonstiff/EmbeddedRungeKuttaIntegrator.java:   * @param maxGrowth maximal growth factor
./ode/nonstiff/EmbeddedRungeKuttaIntegrator.java:   * @param yDotK derivatives computed during the first stages
./ode/nonstiff/EmbeddedRungeKuttaIntegrator.java:   * @param y0 estimate of the step at the start of the step
./ode/nonstiff/EmbeddedRungeKuttaIntegrator.java:   * @param y1 estimate of the step at the end of the step
./ode/nonstiff/EmbeddedRungeKuttaIntegrator.java:   * @param h  current step
./ode/nonstiff/LutherStepInterpolator.java:     * @param interpolator interpolator to copy from. The copy is a deep
./ode/nonstiff/GillFieldStepInterpolator.java: * @param <T> the type of the field elements
./ode/nonstiff/GillFieldStepInterpolator.java:     * @param field field to which the time and state vector elements belong
./ode/nonstiff/GillFieldStepInterpolator.java:     * @param forward integration direction indicator
./ode/nonstiff/GillFieldStepInterpolator.java:     * @param yDotK slopes at the intermediate points
./ode/nonstiff/GillFieldStepInterpolator.java:     * @param globalPreviousState start of the global step
./ode/nonstiff/GillFieldStepInterpolator.java:     * @param globalCurrentState end of the global step
./ode/nonstiff/GillFieldStepInterpolator.java:     * @param softPreviousState start of the restricted step
./ode/nonstiff/GillFieldStepInterpolator.java:     * @param softCurrentState end of the restricted step
./ode/nonstiff/GillFieldStepInterpolator.java:     * @param mapper equations mapper for the all equations
./ode/nonstiff/DormandPrince54FieldIntegrator.java: * @param <T> the type of the field elements
./ode/nonstiff/DormandPrince54FieldIntegrator.java:     * @param field field to which the time and state vector elements belong
./ode/nonstiff/DormandPrince54FieldIntegrator.java:     * @param minStep minimal step (sign is irrelevant, regardless of
./ode/nonstiff/DormandPrince54FieldIntegrator.java:     * @param maxStep maximal step (sign is irrelevant, regardless of
./ode/nonstiff/DormandPrince54FieldIntegrator.java:     * @param scalAbsoluteTolerance allowed absolute error
./ode/nonstiff/DormandPrince54FieldIntegrator.java:     * @param scalRelativeTolerance allowed relative error
./ode/nonstiff/DormandPrince54FieldIntegrator.java:     * @param field field to which the time and state vector elements belong
./ode/nonstiff/DormandPrince54FieldIntegrator.java:     * @param minStep minimal step (sign is irrelevant, regardless of
./ode/nonstiff/DormandPrince54FieldIntegrator.java:     * @param maxStep maximal step (sign is irrelevant, regardless of
./ode/nonstiff/DormandPrince54FieldIntegrator.java:     * @param vecAbsoluteTolerance allowed absolute error
./ode/nonstiff/DormandPrince54FieldIntegrator.java:     * @param vecRelativeTolerance allowed relative error
./ode/nonstiff/GillFieldIntegrator.java: * @param <T> the type of the field elements
./ode/nonstiff/GillFieldIntegrator.java:     * @param field field to which the time and state vector elements belong
./ode/nonstiff/GillFieldIntegrator.java:     * @param step integration step
./ode/nonstiff/GillIntegrator.java:   * @param step integration step
./ode/nonstiff/GraggBulirschStoerIntegrator.java:   * @param minStep minimal step (sign is irrelevant, regardless of
./ode/nonstiff/GraggBulirschStoerIntegrator.java:   * @param maxStep maximal step (sign is irrelevant, regardless of
./ode/nonstiff/GraggBulirschStoerIntegrator.java:   * @param scalAbsoluteTolerance allowed absolute error
./ode/nonstiff/GraggBulirschStoerIntegrator.java:   * @param scalRelativeTolerance allowed relative error
./ode/nonstiff/GraggBulirschStoerIntegrator.java:   * @param minStep minimal step (must be positive even for backward
./ode/nonstiff/GraggBulirschStoerIntegrator.java:   * @param maxStep maximal step (must be positive even for backward
./ode/nonstiff/GraggBulirschStoerIntegrator.java:   * @param vecAbsoluteTolerance allowed absolute error
./ode/nonstiff/GraggBulirschStoerIntegrator.java:   * @param vecRelativeTolerance allowed relative error
./ode/nonstiff/GraggBulirschStoerIntegrator.java:   * @param performStabilityCheck if true, stability check will be performed,
./ode/nonstiff/GraggBulirschStoerIntegrator.java:   * @param maxNumIter maximal number of iterations for which checks are
./ode/nonstiff/GraggBulirschStoerIntegrator.java:   * @param maxNumChecks maximal number of checks for each iteration
./ode/nonstiff/GraggBulirschStoerIntegrator.java:   * @param stepsizeReductionFactor stepsize reduction factor in case of
./ode/nonstiff/GraggBulirschStoerIntegrator.java:   * @param control1 first stepsize control factor (the factor is
./ode/nonstiff/GraggBulirschStoerIntegrator.java:   * @param control2 second stepsize control factor (the factor
./ode/nonstiff/GraggBulirschStoerIntegrator.java:   * @param control3 third stepsize control factor (the factor is
./ode/nonstiff/GraggBulirschStoerIntegrator.java:   * @param control4 fourth stepsize control factor (the factor
./ode/nonstiff/GraggBulirschStoerIntegrator.java:   * @param maximalOrder maximal order in the extrapolation table (the
./ode/nonstiff/GraggBulirschStoerIntegrator.java:   * @param control1 first order control factor (the factor is
./ode/nonstiff/GraggBulirschStoerIntegrator.java:   * @param control2 second order control factor (the factor
./ode/nonstiff/GraggBulirschStoerIntegrator.java:   * @param useInterpolationErrorForControl if true, interpolation error is used
./ode/nonstiff/GraggBulirschStoerIntegrator.java:   * @param mudifControlParameter interpolation order control parameter (the parameter
./ode/nonstiff/GraggBulirschStoerIntegrator.java:   * @param y1 first state vector to use for scaling
./ode/nonstiff/GraggBulirschStoerIntegrator.java:   * @param y2 second state vector to use for scaling
./ode/nonstiff/GraggBulirschStoerIntegrator.java:   * @param scale scaling array to update (can be shorter than state)
./ode/nonstiff/GraggBulirschStoerIntegrator.java:   * @param t0 initial time
./ode/nonstiff/GraggBulirschStoerIntegrator.java:   * @param y0 initial value of the state vector at t0
./ode/nonstiff/GraggBulirschStoerIntegrator.java:   * @param step global step
./ode/nonstiff/GraggBulirschStoerIntegrator.java:   * @param k iteration number (from 0 to sequence.length - 1)
./ode/nonstiff/GraggBulirschStoerIntegrator.java:   * @param scale scaling array (can be shorter than state)
./ode/nonstiff/GraggBulirschStoerIntegrator.java:   * @param f placeholder where to put the state vector derivatives at each substep
./ode/nonstiff/GraggBulirschStoerIntegrator.java:   * @param yMiddle placeholder where to put the state vector at the middle of the step
./ode/nonstiff/GraggBulirschStoerIntegrator.java:   * @param yEnd placeholder where to put the state vector at the end
./ode/nonstiff/GraggBulirschStoerIntegrator.java:   * @param yTmp placeholder for one state vector
./ode/nonstiff/GraggBulirschStoerIntegrator.java:   * @param offset offset to use in the coefficients table
./ode/nonstiff/GraggBulirschStoerIntegrator.java:   * @param k index of the last updated point
./ode/nonstiff/GraggBulirschStoerIntegrator.java:   * @param diag working diagonal of the Aitken-Neville's
./ode/nonstiff/GraggBulirschStoerIntegrator.java:   * @param last last element
./ode/nonstiff/RungeKuttaStepInterpolator.java:  * @param interpolator interpolator to copy from.
./ode/nonstiff/RungeKuttaStepInterpolator.java:   * @param rkIntegrator integrator being used
./ode/nonstiff/RungeKuttaStepInterpolator.java:   * @param y reference to the integrator array holding the state at
./ode/nonstiff/RungeKuttaStepInterpolator.java:   * @param yDotArray reference to the integrator array holding all the
./ode/nonstiff/RungeKuttaStepInterpolator.java:   * @param forward integration direction indicator
./ode/nonstiff/RungeKuttaStepInterpolator.java:   * @param primaryMapper equations mapper for the primary equations set
./ode/nonstiff/RungeKuttaStepInterpolator.java:   * @param secondaryMappers equations mappers for the secondary equations sets
./ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java:     * @param interpolator interpolator to copy from. The copy is a deep
./ode/nonstiff/MidpointFieldIntegrator.java: * @param <T> the type of the field elements
./ode/nonstiff/MidpointFieldIntegrator.java:     * @param field field to which the time and state vector elements belong
./ode/nonstiff/MidpointFieldIntegrator.java:     * @param step integration step
./ode/nonstiff/GraggBulirschStoerStepInterpolator.java:   * @param y reference to the integrator array holding the current state
./ode/nonstiff/GraggBulirschStoerStepInterpolator.java:   * @param y0Dot reference to the integrator array holding the slope
./ode/nonstiff/GraggBulirschStoerStepInterpolator.java:   * @param y1 reference to the integrator array holding the state at
./ode/nonstiff/GraggBulirschStoerStepInterpolator.java:   * @param y1Dot reference to the integrator array holding the slope
./ode/nonstiff/GraggBulirschStoerStepInterpolator.java:   * @param yMidDots reference to the integrator array holding the
./ode/nonstiff/GraggBulirschStoerStepInterpolator.java:   * @param forward integration direction indicator
./ode/nonstiff/GraggBulirschStoerStepInterpolator.java:   * @param primaryMapper equations mapper for the primary equations set
./ode/nonstiff/GraggBulirschStoerStepInterpolator.java:   * @param secondaryMappers equations mappers for the secondary equations sets
./ode/nonstiff/GraggBulirschStoerStepInterpolator.java:   * @param interpolator interpolator to copy from. The copy is a deep
./ode/nonstiff/GraggBulirschStoerStepInterpolator.java:   * @param maxDegree maximal degree to handle
./ode/nonstiff/GraggBulirschStoerStepInterpolator.java:   * @param mu degree of the interpolation polynomial
./ode/nonstiff/GraggBulirschStoerStepInterpolator.java:   * @param h current step
./ode/nonstiff/GraggBulirschStoerStepInterpolator.java:   * @param scale scaling array
./ode/nonstiff/LutherIntegrator.java:     * @param step integration step
./ode/nonstiff/AdamsMoultonFieldIntegrator.java: * @param <T> the type of the field elements
./ode/nonstiff/AdamsMoultonFieldIntegrator.java:     * @param field field to which the time and state vector elements belong
./ode/nonstiff/AdamsMoultonFieldIntegrator.java:     * @param nSteps number of steps of the method excluding the one being computed
./ode/nonstiff/AdamsMoultonFieldIntegrator.java:     * @param minStep minimal step (sign is irrelevant, regardless of
./ode/nonstiff/AdamsMoultonFieldIntegrator.java:     * @param maxStep maximal step (sign is irrelevant, regardless of
./ode/nonstiff/AdamsMoultonFieldIntegrator.java:     * @param scalAbsoluteTolerance allowed absolute error
./ode/nonstiff/AdamsMoultonFieldIntegrator.java:     * @param scalRelativeTolerance allowed relative error
./ode/nonstiff/AdamsMoultonFieldIntegrator.java:     * @param field field to which the time and state vector elements belong
./ode/nonstiff/AdamsMoultonFieldIntegrator.java:     * @param nSteps number of steps of the method excluding the one being computed
./ode/nonstiff/AdamsMoultonFieldIntegrator.java:     * @param minStep minimal step (sign is irrelevant, regardless of
./ode/nonstiff/AdamsMoultonFieldIntegrator.java:     * @param maxStep maximal step (sign is irrelevant, regardless of
./ode/nonstiff/AdamsMoultonFieldIntegrator.java:     * @param vecAbsoluteTolerance allowed absolute error
./ode/nonstiff/AdamsMoultonFieldIntegrator.java:     * @param vecRelativeTolerance allowed relative error
./ode/nonstiff/AdamsMoultonFieldIntegrator.java:         * @param previous previous state
./ode/nonstiff/AdamsMoultonFieldIntegrator.java:         * @param scaled current scaled first derivative
./ode/nonstiff/AdamsMoultonFieldIntegrator.java:         * @param state state to correct (will be overwritten after visit)
./ode/nonstiff/RungeKuttaFieldStepInterpolator.java: * @param <T> the type of the field elements
./ode/nonstiff/RungeKuttaFieldStepInterpolator.java:     * @param field field to which the time and state vector elements belong
./ode/nonstiff/RungeKuttaFieldStepInterpolator.java:     * @param forward integration direction indicator
./ode/nonstiff/RungeKuttaFieldStepInterpolator.java:     * @param yDotK slopes at the intermediate points
./ode/nonstiff/RungeKuttaFieldStepInterpolator.java:     * @param globalPreviousState start of the global step
./ode/nonstiff/RungeKuttaFieldStepInterpolator.java:     * @param globalCurrentState end of the global step
./ode/nonstiff/RungeKuttaFieldStepInterpolator.java:     * @param softPreviousState start of the restricted step
./ode/nonstiff/RungeKuttaFieldStepInterpolator.java:     * @param softCurrentState end of the restricted step
./ode/nonstiff/RungeKuttaFieldStepInterpolator.java:     * @param mapper equations mapper for the all equations
./ode/nonstiff/RungeKuttaFieldStepInterpolator.java:     * @param newField field to which the time and state vector elements belong
./ode/nonstiff/RungeKuttaFieldStepInterpolator.java:     * @param newForward integration direction indicator
./ode/nonstiff/RungeKuttaFieldStepInterpolator.java:     * @param newYDotK slopes at the intermediate points
./ode/nonstiff/RungeKuttaFieldStepInterpolator.java:     * @param newGlobalPreviousState start of the global step
./ode/nonstiff/RungeKuttaFieldStepInterpolator.java:     * @param newGlobalCurrentState end of the global step
./ode/nonstiff/RungeKuttaFieldStepInterpolator.java:     * @param newSoftPreviousState start of the restricted step
./ode/nonstiff/RungeKuttaFieldStepInterpolator.java:     * @param newSoftCurrentState end of the restricted step
./ode/nonstiff/RungeKuttaFieldStepInterpolator.java:     * @param newMapper equations mapper for the all equations
./ode/nonstiff/RungeKuttaFieldStepInterpolator.java:     * @param coefficients coefficients to apply to the method staged derivatives
./ode/nonstiff/RungeKuttaFieldStepInterpolator.java:     * @param coefficients coefficients to apply to the method staged derivatives
./ode/nonstiff/RungeKuttaFieldStepInterpolator.java:     * @param coefficients coefficients to apply to the method staged derivatives
./ode/nonstiff/RungeKuttaFieldStepInterpolator.java:     * @param a array to add to
./ode/nonstiff/RungeKuttaFieldStepInterpolator.java:     * @param coefficients coefficients to apply to the method staged derivatives
./ode/nonstiff/RungeKuttaIntegrator.java:   * @param name name of the method
./ode/nonstiff/RungeKuttaIntegrator.java:   * @param c time steps from Butcher array (without the first zero)
./ode/nonstiff/RungeKuttaIntegrator.java:   * @param a internal weights from Butcher array (without the first empty row)
./ode/nonstiff/RungeKuttaIntegrator.java:   * @param b propagation weights for the high order method from Butcher array
./ode/nonstiff/RungeKuttaIntegrator.java:   * @param prototype prototype of the step interpolator to use
./ode/nonstiff/RungeKuttaIntegrator.java:   * @param step integration step
./ode/nonstiff/RungeKuttaIntegrator.java:   * @param equations differential equations to integrate
./ode/nonstiff/RungeKuttaIntegrator.java:   * @param t0 initial time
./ode/nonstiff/RungeKuttaIntegrator.java:   * @param y0 initial value of the state vector at t0
./ode/nonstiff/RungeKuttaIntegrator.java:   * @param t target time for the integration
./ode/nonstiff/AdamsFieldIntegrator.java: * @param <T> the type of the field elements
./ode/nonstiff/AdamsFieldIntegrator.java:     * @param field field to which the time and state vector elements belong
./ode/nonstiff/AdamsFieldIntegrator.java:     * @param name name of the method
./ode/nonstiff/AdamsFieldIntegrator.java:     * @param nSteps number of steps of the method excluding the one being computed
./ode/nonstiff/AdamsFieldIntegrator.java:     * @param order order of the method
./ode/nonstiff/AdamsFieldIntegrator.java:     * @param minStep minimal step (sign is irrelevant, regardless of
./ode/nonstiff/AdamsFieldIntegrator.java:     * @param maxStep maximal step (sign is irrelevant, regardless of
./ode/nonstiff/AdamsFieldIntegrator.java:     * @param scalAbsoluteTolerance allowed absolute error
./ode/nonstiff/AdamsFieldIntegrator.java:     * @param scalRelativeTolerance allowed relative error
./ode/nonstiff/AdamsFieldIntegrator.java:     * @param field field to which the time and state vector elements belong
./ode/nonstiff/AdamsFieldIntegrator.java:     * @param name name of the method
./ode/nonstiff/AdamsFieldIntegrator.java:     * @param nSteps number of steps of the method excluding the one being computed
./ode/nonstiff/AdamsFieldIntegrator.java:     * @param order order of the method
./ode/nonstiff/AdamsFieldIntegrator.java:     * @param minStep minimal step (sign is irrelevant, regardless of
./ode/nonstiff/AdamsFieldIntegrator.java:     * @param maxStep maximal step (sign is irrelevant, regardless of
./ode/nonstiff/AdamsFieldIntegrator.java:     * @param vecAbsoluteTolerance allowed absolute error
./ode/nonstiff/AdamsFieldIntegrator.java:     * @param vecRelativeTolerance allowed relative error
./ode/nonstiff/AdamsFieldIntegrator.java:     * @param highOrder high order scaled derivatives
./ode/nonstiff/AdamsFieldIntegrator.java:     * @param start first order scaled derivatives at step start
./ode/nonstiff/AdamsFieldIntegrator.java:     * @param end first order scaled derivatives at step end
./ode/nonstiff/AdamsFieldIntegrator.java:     * @param highOrder high order scaled derivatives, will be modified
./ode/nonstiff/AdaptiveStepsizeIntegrator.java:   * @param name name of the method
./ode/nonstiff/AdaptiveStepsizeIntegrator.java:   * @param minStep minimal step (sign is irrelevant, regardless of
./ode/nonstiff/AdaptiveStepsizeIntegrator.java:   * @param maxStep maximal step (sign is irrelevant, regardless of
./ode/nonstiff/AdaptiveStepsizeIntegrator.java:   * @param scalAbsoluteTolerance allowed absolute error
./ode/nonstiff/AdaptiveStepsizeIntegrator.java:   * @param scalRelativeTolerance allowed relative error
./ode/nonstiff/AdaptiveStepsizeIntegrator.java:   * @param name name of the method
./ode/nonstiff/AdaptiveStepsizeIntegrator.java:   * @param minStep minimal step (sign is irrelevant, regardless of
./ode/nonstiff/AdaptiveStepsizeIntegrator.java:   * @param maxStep maximal step (sign is irrelevant, regardless of
./ode/nonstiff/AdaptiveStepsizeIntegrator.java:   * @param vecAbsoluteTolerance allowed absolute error
./ode/nonstiff/AdaptiveStepsizeIntegrator.java:   * @param vecRelativeTolerance allowed relative error
./ode/nonstiff/AdaptiveStepsizeIntegrator.java:   * @param minimalStep minimal step (must be positive even for backward
./ode/nonstiff/AdaptiveStepsizeIntegrator.java:   * @param maximalStep maximal step (must be positive even for backward
./ode/nonstiff/AdaptiveStepsizeIntegrator.java:   * @param absoluteTolerance allowed absolute error
./ode/nonstiff/AdaptiveStepsizeIntegrator.java:   * @param relativeTolerance allowed relative error
./ode/nonstiff/AdaptiveStepsizeIntegrator.java:   * @param minimalStep minimal step (must be positive even for backward
./ode/nonstiff/AdaptiveStepsizeIntegrator.java:   * @param maximalStep maximal step (must be positive even for backward
./ode/nonstiff/AdaptiveStepsizeIntegrator.java:   * @param absoluteTolerance allowed absolute error
./ode/nonstiff/AdaptiveStepsizeIntegrator.java:   * @param relativeTolerance allowed relative error
./ode/nonstiff/AdaptiveStepsizeIntegrator.java:   * @param initialStepSize initial step size to use (must be positive even
./ode/nonstiff/AdaptiveStepsizeIntegrator.java:   * @param forward forward integration indicator
./ode/nonstiff/AdaptiveStepsizeIntegrator.java:   * @param order order of the method
./ode/nonstiff/AdaptiveStepsizeIntegrator.java:   * @param scale scaling vector for the state vector (can be shorter than state vector)
./ode/nonstiff/AdaptiveStepsizeIntegrator.java:   * @param t0 start time
./ode/nonstiff/AdaptiveStepsizeIntegrator.java:   * @param y0 state vector at t0
./ode/nonstiff/AdaptiveStepsizeIntegrator.java:   * @param yDot0 first time derivative of y0
./ode/nonstiff/AdaptiveStepsizeIntegrator.java:   * @param y1 work array for a state vector
./ode/nonstiff/AdaptiveStepsizeIntegrator.java:   * @param yDot1 work array for the first time derivative of y1
./ode/nonstiff/AdaptiveStepsizeIntegrator.java:   * @param h signed step
./ode/nonstiff/AdaptiveStepsizeIntegrator.java:   * @param forward forward integration indicator
./ode/nonstiff/AdaptiveStepsizeIntegrator.java:   * @param acceptSmall if true, steps smaller than the minimal value
./ode/nonstiff/LutherFieldStepInterpolator.java: * @param <T> the type of the field elements
./ode/nonstiff/LutherFieldStepInterpolator.java:     * @param field field to which the time and state vector elements belong
./ode/nonstiff/LutherFieldStepInterpolator.java:     * @param forward integration direction indicator
./ode/nonstiff/LutherFieldStepInterpolator.java:     * @param yDotK slopes at the intermediate points
./ode/nonstiff/LutherFieldStepInterpolator.java:     * @param globalPreviousState start of the global step
./ode/nonstiff/LutherFieldStepInterpolator.java:     * @param globalCurrentState end of the global step
./ode/nonstiff/LutherFieldStepInterpolator.java:     * @param softPreviousState start of the restricted step
./ode/nonstiff/LutherFieldStepInterpolator.java:     * @param softCurrentState end of the restricted step
./ode/nonstiff/LutherFieldStepInterpolator.java:     * @param mapper equations mapper for the all equations
./ode/nonstiff/EulerFieldIntegrator.java: * @param <T> the type of the field elements
./ode/nonstiff/EulerFieldIntegrator.java:     * @param field field to which the time and state vector elements belong
./ode/nonstiff/EulerFieldIntegrator.java:     * @param step integration step
./ode/nonstiff/EmbeddedRungeKuttaFieldIntegrator.java: * @param <T> the type of the field elements
./ode/nonstiff/EmbeddedRungeKuttaFieldIntegrator.java:     * @param field field to which the time and state vector elements belong
./ode/nonstiff/EmbeddedRungeKuttaFieldIntegrator.java:     * @param name name of the method
./ode/nonstiff/EmbeddedRungeKuttaFieldIntegrator.java:     * @param fsal index of the pre-computed derivative for <i>fsal</i> methods
./ode/nonstiff/EmbeddedRungeKuttaFieldIntegrator.java:     * @param minStep minimal step (sign is irrelevant, regardless of
./ode/nonstiff/EmbeddedRungeKuttaFieldIntegrator.java:     * @param maxStep maximal step (sign is irrelevant, regardless of
./ode/nonstiff/EmbeddedRungeKuttaFieldIntegrator.java:     * @param scalAbsoluteTolerance allowed absolute error
./ode/nonstiff/EmbeddedRungeKuttaFieldIntegrator.java:     * @param scalRelativeTolerance allowed relative error
./ode/nonstiff/EmbeddedRungeKuttaFieldIntegrator.java:     * @param field field to which the time and state vector elements belong
./ode/nonstiff/EmbeddedRungeKuttaFieldIntegrator.java:     * @param name name of the method
./ode/nonstiff/EmbeddedRungeKuttaFieldIntegrator.java:     * @param fsal index of the pre-computed derivative for <i>fsal</i> methods
./ode/nonstiff/EmbeddedRungeKuttaFieldIntegrator.java:     * @param minStep minimal step (must be positive even for backward
./ode/nonstiff/EmbeddedRungeKuttaFieldIntegrator.java:     * @param maxStep maximal step (must be positive even for backward
./ode/nonstiff/EmbeddedRungeKuttaFieldIntegrator.java:     * @param vecAbsoluteTolerance allowed absolute error
./ode/nonstiff/EmbeddedRungeKuttaFieldIntegrator.java:     * @param vecRelativeTolerance allowed relative error
./ode/nonstiff/EmbeddedRungeKuttaFieldIntegrator.java:     * @param p numerator
./ode/nonstiff/EmbeddedRungeKuttaFieldIntegrator.java:     * @param q denominator
./ode/nonstiff/EmbeddedRungeKuttaFieldIntegrator.java:     * @param p numerator
./ode/nonstiff/EmbeddedRungeKuttaFieldIntegrator.java:     * @param q denominator
./ode/nonstiff/EmbeddedRungeKuttaFieldIntegrator.java:     * @param forward integration direction indicator
./ode/nonstiff/EmbeddedRungeKuttaFieldIntegrator.java:     * @param yDotK slopes at the intermediate points
./ode/nonstiff/EmbeddedRungeKuttaFieldIntegrator.java:     * @param globalPreviousState start of the global step
./ode/nonstiff/EmbeddedRungeKuttaFieldIntegrator.java:     * @param globalCurrentState end of the global step
./ode/nonstiff/EmbeddedRungeKuttaFieldIntegrator.java:     * @param mapper equations mapper for the all equations
./ode/nonstiff/EmbeddedRungeKuttaFieldIntegrator.java:     * @param safety safety factor
./ode/nonstiff/EmbeddedRungeKuttaFieldIntegrator.java:     * @param minReduction minimal reduction factor
./ode/nonstiff/EmbeddedRungeKuttaFieldIntegrator.java:     * @param maxGrowth maximal growth factor
./ode/nonstiff/EmbeddedRungeKuttaFieldIntegrator.java:     * @param yDotK derivatives computed during the first stages
./ode/nonstiff/EmbeddedRungeKuttaFieldIntegrator.java:     * @param y0 estimate of the step at the start of the step
./ode/nonstiff/EmbeddedRungeKuttaFieldIntegrator.java:     * @param y1 estimate of the step at the end of the step
./ode/nonstiff/EmbeddedRungeKuttaFieldIntegrator.java:     * @param h  current step
./ode/nonstiff/MidpointStepInterpolator.java:   * @param interpolator interpolator to copy from. The copy is a deep
./ode/nonstiff/AdamsBashforthFieldIntegrator.java: * @param <T> the type of the field elements
./ode/nonstiff/AdamsBashforthFieldIntegrator.java:     * @param field field to which the time and state vector elements belong
./ode/nonstiff/AdamsBashforthFieldIntegrator.java:     * @param nSteps number of steps of the method excluding the one being computed
./ode/nonstiff/AdamsBashforthFieldIntegrator.java:     * @param minStep minimal step (sign is irrelevant, regardless of
./ode/nonstiff/AdamsBashforthFieldIntegrator.java:     * @param maxStep maximal step (sign is irrelevant, regardless of
./ode/nonstiff/AdamsBashforthFieldIntegrator.java:     * @param scalAbsoluteTolerance allowed absolute error
./ode/nonstiff/AdamsBashforthFieldIntegrator.java:     * @param scalRelativeTolerance allowed relative error
./ode/nonstiff/AdamsBashforthFieldIntegrator.java:     * @param field field to which the time and state vector elements belong
./ode/nonstiff/AdamsBashforthFieldIntegrator.java:     * @param nSteps number of steps of the method excluding the one being computed
./ode/nonstiff/AdamsBashforthFieldIntegrator.java:     * @param minStep minimal step (sign is irrelevant, regardless of
./ode/nonstiff/AdamsBashforthFieldIntegrator.java:     * @param maxStep maximal step (sign is irrelevant, regardless of
./ode/nonstiff/AdamsBashforthFieldIntegrator.java:     * @param vecAbsoluteTolerance allowed absolute error
./ode/nonstiff/AdamsBashforthFieldIntegrator.java:     * @param vecRelativeTolerance allowed relative error
./ode/nonstiff/AdamsBashforthFieldIntegrator.java:     * @param previousState state vector at step start
./ode/nonstiff/AdamsBashforthFieldIntegrator.java:     * @param predictedState predicted state vector at step end
./ode/nonstiff/AdamsBashforthFieldIntegrator.java:     * @param predictedScaled predicted value of the scaled derivatives at step end
./ode/nonstiff/AdamsBashforthFieldIntegrator.java:     * @param predictedNordsieck predicted value of the Nordsieck vector at step end
./ode/nonstiff/EulerIntegrator.java:   * @param step integration step
./ode/nonstiff/ThreeEighthesIntegrator.java:   * @param step integration step
./ode/nonstiff/DormandPrince54Integrator.java:   * @param minStep minimal step (sign is irrelevant, regardless of
./ode/nonstiff/DormandPrince54Integrator.java:   * @param maxStep maximal step (sign is irrelevant, regardless of
./ode/nonstiff/DormandPrince54Integrator.java:   * @param scalAbsoluteTolerance allowed absolute error
./ode/nonstiff/DormandPrince54Integrator.java:   * @param scalRelativeTolerance allowed relative error
./ode/nonstiff/DormandPrince54Integrator.java:   * @param minStep minimal step (sign is irrelevant, regardless of
./ode/nonstiff/DormandPrince54Integrator.java:   * @param maxStep maximal step (sign is irrelevant, regardless of
./ode/nonstiff/DormandPrince54Integrator.java:   * @param vecAbsoluteTolerance allowed absolute error
./ode/nonstiff/DormandPrince54Integrator.java:   * @param vecRelativeTolerance allowed relative error
./ode/nonstiff/AdamsMoultonIntegrator.java:     * @param nSteps number of steps of the method excluding the one being computed
./ode/nonstiff/AdamsMoultonIntegrator.java:     * @param minStep minimal step (sign is irrelevant, regardless of
./ode/nonstiff/AdamsMoultonIntegrator.java:     * @param maxStep maximal step (sign is irrelevant, regardless of
./ode/nonstiff/AdamsMoultonIntegrator.java:     * @param scalAbsoluteTolerance allowed absolute error
./ode/nonstiff/AdamsMoultonIntegrator.java:     * @param scalRelativeTolerance allowed relative error
./ode/nonstiff/AdamsMoultonIntegrator.java:     * @param nSteps number of steps of the method excluding the one being computed
./ode/nonstiff/AdamsMoultonIntegrator.java:     * @param minStep minimal step (sign is irrelevant, regardless of
./ode/nonstiff/AdamsMoultonIntegrator.java:     * @param maxStep maximal step (sign is irrelevant, regardless of
./ode/nonstiff/AdamsMoultonIntegrator.java:     * @param vecAbsoluteTolerance allowed absolute error
./ode/nonstiff/AdamsMoultonIntegrator.java:     * @param vecRelativeTolerance allowed relative error
./ode/nonstiff/AdamsMoultonIntegrator.java:         * @param previous previous state
./ode/nonstiff/AdamsMoultonIntegrator.java:         * @param scaled current scaled first derivative
./ode/nonstiff/AdamsMoultonIntegrator.java:         * @param state state to correct (will be overwritten after visit)
./ode/nonstiff/MidpointIntegrator.java:   * @param step integration step
./ode/nonstiff/ThreeEighthesFieldIntegrator.java: * @param <T> the type of the field elements
./ode/nonstiff/ThreeEighthesFieldIntegrator.java:     * @param field field to which the time and state vector elements belong
./ode/nonstiff/ThreeEighthesFieldIntegrator.java:     * @param step integration step
./ode/nonstiff/ClassicalRungeKuttaFieldStepInterpolator.java: * @param <T> the type of the field elements
./ode/nonstiff/ClassicalRungeKuttaFieldStepInterpolator.java:     * @param field field to which the time and state vector elements belong
./ode/nonstiff/ClassicalRungeKuttaFieldStepInterpolator.java:     * @param forward integration direction indicator
./ode/nonstiff/ClassicalRungeKuttaFieldStepInterpolator.java:     * @param yDotK slopes at the intermediate points
./ode/nonstiff/ClassicalRungeKuttaFieldStepInterpolator.java:     * @param globalPreviousState start of the global step
./ode/nonstiff/ClassicalRungeKuttaFieldStepInterpolator.java:     * @param globalCurrentState end of the global step
./ode/nonstiff/ClassicalRungeKuttaFieldStepInterpolator.java:     * @param softPreviousState start of the restricted step
./ode/nonstiff/ClassicalRungeKuttaFieldStepInterpolator.java:     * @param softCurrentState end of the restricted step
./ode/nonstiff/ClassicalRungeKuttaFieldStepInterpolator.java:     * @param mapper equations mapper for the all equations
./ode/nonstiff/AdamsBashforthIntegrator.java:     * @param nSteps number of steps of the method excluding the one being computed
./ode/nonstiff/AdamsBashforthIntegrator.java:     * @param minStep minimal step (sign is irrelevant, regardless of
./ode/nonstiff/AdamsBashforthIntegrator.java:     * @param maxStep maximal step (sign is irrelevant, regardless of
./ode/nonstiff/AdamsBashforthIntegrator.java:     * @param scalAbsoluteTolerance allowed absolute error
./ode/nonstiff/AdamsBashforthIntegrator.java:     * @param scalRelativeTolerance allowed relative error
./ode/nonstiff/AdamsBashforthIntegrator.java:     * @param nSteps number of steps of the method excluding the one being computed
./ode/nonstiff/AdamsBashforthIntegrator.java:     * @param minStep minimal step (sign is irrelevant, regardless of
./ode/nonstiff/AdamsBashforthIntegrator.java:     * @param maxStep maximal step (sign is irrelevant, regardless of
./ode/nonstiff/AdamsBashforthIntegrator.java:     * @param vecAbsoluteTolerance allowed absolute error
./ode/nonstiff/AdamsBashforthIntegrator.java:     * @param vecRelativeTolerance allowed relative error
./ode/nonstiff/AdamsBashforthIntegrator.java:     * @param previousState state vector at step start
./ode/nonstiff/AdamsBashforthIntegrator.java:     * @param predictedState predicted state vector at step end
./ode/nonstiff/AdamsBashforthIntegrator.java:     * @param predictedScaled predicted value of the scaled derivatives at step end
./ode/nonstiff/AdamsBashforthIntegrator.java:     * @param predictedNordsieck predicted value of the Nordsieck vector at step end
./ode/nonstiff/DormandPrince853Integrator.java:   * @param minStep minimal step (sign is irrelevant, regardless of
./ode/nonstiff/DormandPrince853Integrator.java:   * @param maxStep maximal step (sign is irrelevant, regardless of
./ode/nonstiff/DormandPrince853Integrator.java:   * @param scalAbsoluteTolerance allowed absolute error
./ode/nonstiff/DormandPrince853Integrator.java:   * @param scalRelativeTolerance allowed relative error
./ode/nonstiff/DormandPrince853Integrator.java:   * @param minStep minimal step (sign is irrelevant, regardless of
./ode/nonstiff/DormandPrince853Integrator.java:   * @param maxStep maximal step (sign is irrelevant, regardless of
./ode/nonstiff/DormandPrince853Integrator.java:   * @param vecAbsoluteTolerance allowed absolute error
./ode/nonstiff/DormandPrince853Integrator.java:   * @param vecRelativeTolerance allowed relative error
./ode/nonstiff/DormandPrince54FieldStepInterpolator.java: * @param <T> the type of the field elements
./ode/nonstiff/DormandPrince54FieldStepInterpolator.java:     * @param field field to which the time and state vector elements belong
./ode/nonstiff/DormandPrince54FieldStepInterpolator.java:     * @param forward integration direction indicator
./ode/nonstiff/DormandPrince54FieldStepInterpolator.java:     * @param yDotK slopes at the intermediate points
./ode/nonstiff/DormandPrince54FieldStepInterpolator.java:     * @param globalPreviousState start of the global step
./ode/nonstiff/DormandPrince54FieldStepInterpolator.java:     * @param globalCurrentState end of the global step
./ode/nonstiff/DormandPrince54FieldStepInterpolator.java:     * @param softPreviousState start of the restricted step
./ode/nonstiff/DormandPrince54FieldStepInterpolator.java:     * @param softCurrentState end of the restricted step
./ode/nonstiff/DormandPrince54FieldStepInterpolator.java:     * @param mapper equations mapper for the all equations
./ode/nonstiff/DormandPrince853FieldStepInterpolator.java: * @param <T> the type of the field elements
./ode/nonstiff/DormandPrince853FieldStepInterpolator.java:     * @param field field to which the time and state vector elements belong
./ode/nonstiff/DormandPrince853FieldStepInterpolator.java:     * @param forward integration direction indicator
./ode/nonstiff/DormandPrince853FieldStepInterpolator.java:     * @param yDotK slopes at the intermediate points
./ode/nonstiff/DormandPrince853FieldStepInterpolator.java:     * @param globalPreviousState start of the global step
./ode/nonstiff/DormandPrince853FieldStepInterpolator.java:     * @param globalCurrentState end of the global step
./ode/nonstiff/DormandPrince853FieldStepInterpolator.java:     * @param softPreviousState start of the restricted step
./ode/nonstiff/DormandPrince853FieldStepInterpolator.java:     * @param softCurrentState end of the restricted step
./ode/nonstiff/DormandPrince853FieldStepInterpolator.java:     * @param mapper equations mapper for the all equations
./ode/nonstiff/DormandPrince853FieldStepInterpolator.java:     * @param field field to which the elements belong
./ode/nonstiff/DormandPrince853FieldStepInterpolator.java:     * @param p numerator
./ode/nonstiff/DormandPrince853FieldStepInterpolator.java:     * @param q denominator
./ode/nonstiff/AdaptiveStepsizeFieldIntegrator.java: * @param <T> the type of the field elements
./ode/nonstiff/AdaptiveStepsizeFieldIntegrator.java:     * @param field field to which the time and state vector elements belong
./ode/nonstiff/AdaptiveStepsizeFieldIntegrator.java:     * @param name name of the method
./ode/nonstiff/AdaptiveStepsizeFieldIntegrator.java:     * @param minStep minimal step (sign is irrelevant, regardless of
./ode/nonstiff/AdaptiveStepsizeFieldIntegrator.java:     * @param maxStep maximal step (sign is irrelevant, regardless of
./ode/nonstiff/AdaptiveStepsizeFieldIntegrator.java:     * @param scalAbsoluteTolerance allowed absolute error
./ode/nonstiff/AdaptiveStepsizeFieldIntegrator.java:     * @param scalRelativeTolerance allowed relative error
./ode/nonstiff/AdaptiveStepsizeFieldIntegrator.java:     * @param field field to which the time and state vector elements belong
./ode/nonstiff/AdaptiveStepsizeFieldIntegrator.java:     * @param name name of the method
./ode/nonstiff/AdaptiveStepsizeFieldIntegrator.java:     * @param minStep minimal step (sign is irrelevant, regardless of
./ode/nonstiff/AdaptiveStepsizeFieldIntegrator.java:     * @param maxStep maximal step (sign is irrelevant, regardless of
./ode/nonstiff/AdaptiveStepsizeFieldIntegrator.java:     * @param vecAbsoluteTolerance allowed absolute error
./ode/nonstiff/AdaptiveStepsizeFieldIntegrator.java:     * @param vecRelativeTolerance allowed relative error
./ode/nonstiff/AdaptiveStepsizeFieldIntegrator.java:     * @param minimalStep minimal step (must be positive even for backward
./ode/nonstiff/AdaptiveStepsizeFieldIntegrator.java:     * @param maximalStep maximal step (must be positive even for backward
./ode/nonstiff/AdaptiveStepsizeFieldIntegrator.java:     * @param absoluteTolerance allowed absolute error
./ode/nonstiff/AdaptiveStepsizeFieldIntegrator.java:     * @param relativeTolerance allowed relative error
./ode/nonstiff/AdaptiveStepsizeFieldIntegrator.java:     * @param minimalStep minimal step (must be positive even for backward
./ode/nonstiff/AdaptiveStepsizeFieldIntegrator.java:     * @param maximalStep maximal step (must be positive even for backward
./ode/nonstiff/AdaptiveStepsizeFieldIntegrator.java:     * @param absoluteTolerance allowed absolute error
./ode/nonstiff/AdaptiveStepsizeFieldIntegrator.java:     * @param relativeTolerance allowed relative error
./ode/nonstiff/AdaptiveStepsizeFieldIntegrator.java:     * @param initialStepSize initial step size to use (must be positive even
./ode/nonstiff/AdaptiveStepsizeFieldIntegrator.java:     * @param forward forward integration indicator
./ode/nonstiff/AdaptiveStepsizeFieldIntegrator.java:     * @param order order of the method
./ode/nonstiff/AdaptiveStepsizeFieldIntegrator.java:     * @param scale scaling vector for the state vector (can be shorter than state vector)
./ode/nonstiff/AdaptiveStepsizeFieldIntegrator.java:     * @param state0 state at integration start time
./ode/nonstiff/AdaptiveStepsizeFieldIntegrator.java:     * @param mapper mapper for all the equations
./ode/nonstiff/AdaptiveStepsizeFieldIntegrator.java:     * @param h signed step
./ode/nonstiff/AdaptiveStepsizeFieldIntegrator.java:     * @param forward forward integration indicator
./ode/nonstiff/AdaptiveStepsizeFieldIntegrator.java:     * @param acceptSmall if true, steps smaller than the minimal value
./ode/ParameterJacobianProvider.java:     * @param t current value of the independent <I>time</I> variable
./ode/ParameterJacobianProvider.java:     * @param y array containing the current value of the main state vector
./ode/ParameterJacobianProvider.java:     * @param yDot array containing the current value of the time derivative
./ode/ParameterJacobianProvider.java:     * @param paramName name of the parameter to consider
./ode/ParameterJacobianProvider.java:     * @param dFdP placeholder array where to put the Jacobian matrix of the
./ode/ContinuousOutputModel.java:   * @param model model to add at the end of the instance
./ode/ContinuousOutputModel.java:   * @param interpolator interpolator for the last accepted step.
./ode/ContinuousOutputModel.java:   * @param isLast true if the step is the last one
./ode/ContinuousOutputModel.java:   * @param time time of the interpolated point
./ode/ContinuousOutputModel.java:   * @param secondaryStateIndex index of the secondary set, as returned by {@link
./ode/ContinuousOutputModel.java:   * @param secondaryStateIndex index of the secondary set, as returned by {@link
./ode/ContinuousOutputModel.java:   * @param time point to locate
./ode/ContinuousOutputModel.java:   * @param interval step interval
./ode/sampling/StepNormalizer.java:     * @param h fixed time step (sign is not used)
./ode/sampling/StepNormalizer.java:     * @param handler fixed time step handler to wrap
./ode/sampling/StepNormalizer.java:     * @param h fixed time step (sign is not used)
./ode/sampling/StepNormalizer.java:     * @param handler fixed time step handler to wrap
./ode/sampling/StepNormalizer.java:     * @param mode step normalizer mode to use
./ode/sampling/StepNormalizer.java:     * @param h fixed time step (sign is not used)
./ode/sampling/StepNormalizer.java:     * @param handler fixed time step handler to wrap
./ode/sampling/StepNormalizer.java:     * @param bounds step normalizer bounds setting to use
./ode/sampling/StepNormalizer.java:     * @param h fixed time step (sign is not used)
./ode/sampling/StepNormalizer.java:     * @param handler fixed time step handler to wrap
./ode/sampling/StepNormalizer.java:     * @param mode step normalizer mode to use
./ode/sampling/StepNormalizer.java:     * @param bounds step normalizer bounds setting to use
./ode/sampling/StepNormalizer.java:     * @param interpolator interpolator for the last accepted step. For
./ode/sampling/StepNormalizer.java:     * @param isLast true if the step is the last one
./ode/sampling/StepNormalizer.java:     * @param nextTime the next normalized time
./ode/sampling/StepNormalizer.java:     * @param interpolator interpolator for the last accepted step, to use to
./ode/sampling/StepNormalizer.java:     * @param isLast true if the step is the last one
./ode/sampling/StepNormalizer.java:     * @param interpolator interpolator for the last accepted step, to use to
./ode/sampling/StepNormalizer.java:     * @param t the time for which to store the interpolated information
./ode/sampling/FieldStepHandler.java: * @param <T> the type of the field elements
./ode/sampling/FieldStepHandler.java:     * @param initialState initial time, state vector and derivative
./ode/sampling/FieldStepHandler.java:     * @param finalTime target time for the integration
./ode/sampling/FieldStepHandler.java:     * @param interpolator interpolator for the last accepted step. For
./ode/sampling/FieldStepHandler.java:     * @param isLast true if the step is the last one
./ode/sampling/AbstractStepInterpolator.java:   * @param y reference to the integrator array holding the state at
./ode/sampling/AbstractStepInterpolator.java:   * @param forward integration direction indicator
./ode/sampling/AbstractStepInterpolator.java:   * @param primaryMapper equations mapper for the primary equations set
./ode/sampling/AbstractStepInterpolator.java:   * @param secondaryMappers equations mappers for the secondary equations sets
./ode/sampling/AbstractStepInterpolator.java:   * @param interpolator interpolator to copy from.
./ode/sampling/AbstractStepInterpolator.java:   * @param dimension total dimension (negative if arrays should be set to null)
./ode/sampling/AbstractStepInterpolator.java:   * @param y reference to the integrator array holding the state at the end of the step
./ode/sampling/AbstractStepInterpolator.java:   * @param isForward integration direction indicator
./ode/sampling/AbstractStepInterpolator.java:   * @param primary equations mapper for the primary equations set
./ode/sampling/AbstractStepInterpolator.java:   * @param secondary equations mappers for the secondary equations sets
./ode/sampling/AbstractStepInterpolator.java:   * @param t current time
./ode/sampling/AbstractStepInterpolator.java:   * @param softPreviousTime start of the restricted step
./ode/sampling/AbstractStepInterpolator.java:   * @param softCurrentTime end of the restricted step
./ode/sampling/AbstractStepInterpolator.java:   * @param theta normalized interpolation abscissa within the step
./ode/sampling/AbstractStepInterpolator.java:   * @param oneMinusThetaH time gap between the interpolated time and
./ode/sampling/AbstractStepInterpolator.java:   * @param out stream where to save the state
./ode/sampling/AbstractStepInterpolator.java:   * @param in stream where to read the state from
./ode/sampling/NordsieckStepInterpolator.java:     * @param interpolator interpolator to copy from. The copy is a deep
./ode/sampling/NordsieckStepInterpolator.java:     * @param y reference to the integrator array holding the state at
./ode/sampling/NordsieckStepInterpolator.java:     * @param forward integration direction indicator
./ode/sampling/NordsieckStepInterpolator.java:     * @param primaryMapper equations mapper for the primary equations set
./ode/sampling/NordsieckStepInterpolator.java:     * @param secondaryMappers equations mappers for the secondary equations sets
./ode/sampling/NordsieckStepInterpolator.java:     * @param time time at which all arrays are defined
./ode/sampling/NordsieckStepInterpolator.java:     * @param stepSize step size used in the scaled and Nordsieck arrays
./ode/sampling/NordsieckStepInterpolator.java:     * @param scaledDerivative reference to the integrator array holding the first
./ode/sampling/NordsieckStepInterpolator.java:     * @param nordsieckVector reference to the integrator matrix holding the
./ode/sampling/NordsieckStepInterpolator.java:     * @param stepSize new step size to use in the scaled and Nordsieck arrays
./ode/sampling/StepNormalizerBounds.java:     * @param first Whether the first point should be passed to the
./ode/sampling/StepNormalizerBounds.java:     * @param last Whether the last point should be passed to the
./ode/sampling/FixedStepHandler.java:   * @param t0 start value of the independent <i>time</i> variable
./ode/sampling/FixedStepHandler.java:   * @param y0 array containing the start value of the state vector
./ode/sampling/FixedStepHandler.java:   * @param t target time for the integration
./ode/sampling/FixedStepHandler.java:   * @param t time of the current step
./ode/sampling/FixedStepHandler.java:   * @param y state vector at t. For efficiency purposes, the {@link
./ode/sampling/FixedStepHandler.java:   * @param yDot derivatives of the state vector state vector at t.
./ode/sampling/FixedStepHandler.java:   * @param isLast true if the step is the last one
./ode/sampling/FieldStepNormalizer.java: * @param <T> the type of the field elements
./ode/sampling/FieldStepNormalizer.java:     * @param h fixed time step (sign is not used)
./ode/sampling/FieldStepNormalizer.java:     * @param handler fixed time step handler to wrap
./ode/sampling/FieldStepNormalizer.java:     * @param h fixed time step (sign is not used)
./ode/sampling/FieldStepNormalizer.java:     * @param handler fixed time step handler to wrap
./ode/sampling/FieldStepNormalizer.java:     * @param mode step normalizer mode to use
./ode/sampling/FieldStepNormalizer.java:     * @param h fixed time step (sign is not used)
./ode/sampling/FieldStepNormalizer.java:     * @param handler fixed time step handler to wrap
./ode/sampling/FieldStepNormalizer.java:     * @param bounds step normalizer bounds setting to use
./ode/sampling/FieldStepNormalizer.java:     * @param h fixed time step (sign is not used)
./ode/sampling/FieldStepNormalizer.java:     * @param handler fixed time step handler to wrap
./ode/sampling/FieldStepNormalizer.java:     * @param mode step normalizer mode to use
./ode/sampling/FieldStepNormalizer.java:     * @param bounds step normalizer bounds setting to use
./ode/sampling/FieldStepNormalizer.java:     * @param interpolator interpolator for the last accepted step. For
./ode/sampling/FieldStepNormalizer.java:     * @param isLast true if the step is the last one
./ode/sampling/FieldStepNormalizer.java:     * @param nextTime the next normalized time
./ode/sampling/FieldStepNormalizer.java:     * @param interpolator interpolator for the last accepted step, to use to
./ode/sampling/FieldStepNormalizer.java:     * @param isLast true if the step is the last one
./ode/sampling/StepInterpolator.java:   * @param time time of the interpolated point
./ode/sampling/StepInterpolator.java:   * @param index index of the secondary set, as returned by {@link
./ode/sampling/StepInterpolator.java:   * @param index index of the secondary set, as returned by {@link
./ode/sampling/FieldStepInterpolator.java: * @param <T> the type of the field elements
./ode/sampling/FieldStepInterpolator.java:   * @param time time of the interpolated point
./ode/sampling/AbstractFieldStepInterpolator.java: * @param <T> the type of the field elements
./ode/sampling/AbstractFieldStepInterpolator.java:     * @param isForward integration direction indicator
./ode/sampling/AbstractFieldStepInterpolator.java:     * @param globalPreviousState start of the global step
./ode/sampling/AbstractFieldStepInterpolator.java:     * @param globalCurrentState end of the global step
./ode/sampling/AbstractFieldStepInterpolator.java:     * @param softPreviousState start of the restricted step
./ode/sampling/AbstractFieldStepInterpolator.java:     * @param softCurrentState end of the restricted step
./ode/sampling/AbstractFieldStepInterpolator.java:     * @param equationsMapper mapper for ODE equations primary and secondary components
./ode/sampling/AbstractFieldStepInterpolator.java:     * @param previousState start of the restricted step
./ode/sampling/AbstractFieldStepInterpolator.java:     * @param currentState end of the restricted step
./ode/sampling/AbstractFieldStepInterpolator.java:     * @param newForward integration direction indicator
./ode/sampling/AbstractFieldStepInterpolator.java:     * @param newGlobalPreviousState start of the global step
./ode/sampling/AbstractFieldStepInterpolator.java:     * @param newGlobalCurrentState end of the global step
./ode/sampling/AbstractFieldStepInterpolator.java:     * @param newSoftPreviousState start of the restricted step
./ode/sampling/AbstractFieldStepInterpolator.java:     * @param newSoftCurrentState end of the restricted step
./ode/sampling/AbstractFieldStepInterpolator.java:     * @param newMapper equations mapper for the all equations
./ode/sampling/AbstractFieldStepInterpolator.java:     * @param equationsMapper mapper for ODE equations primary and secondary components
./ode/sampling/AbstractFieldStepInterpolator.java:     * @param time interpolation time
./ode/sampling/AbstractFieldStepInterpolator.java:     * @param theta normalized interpolation abscissa within the step
./ode/sampling/AbstractFieldStepInterpolator.java:     * @param thetaH time gap between the previous time and the interpolated time
./ode/sampling/AbstractFieldStepInterpolator.java:     * @param oneMinusThetaH time gap between the interpolated time and
./ode/sampling/DummyStepHandler.java:     * @param interpolator interpolator for the last accepted step. For
./ode/sampling/DummyStepHandler.java:     * @param isLast true if the step is the last one
./ode/sampling/StepHandler.java:     * @param t0 start value of the independent <i>time</i> variable
./ode/sampling/StepHandler.java:     * @param y0 array containing the start value of the state vector
./ode/sampling/StepHandler.java:     * @param t target time for the integration
./ode/sampling/StepHandler.java:     * @param interpolator interpolator for the last accepted step. For
./ode/sampling/StepHandler.java:     * @param isLast true if the step is the last one
./ode/sampling/FieldFixedStepHandler.java: * @param <T> the type of the field elements
./ode/sampling/FieldFixedStepHandler.java:     * @param initialState initial time, state vector and derivative
./ode/sampling/FieldFixedStepHandler.java:     * @param finalTime target time for the integration
./ode/sampling/FieldFixedStepHandler.java:     * @param state current value of the independent <i>time</i> variable,
./ode/sampling/FieldFixedStepHandler.java:     * @param isLast true if the step is the last one
./ode/SecondOrderDifferentialEquations.java:     * @param t current value of the independent <I>time</I> variable
./ode/SecondOrderDifferentialEquations.java:     * @param y array containing the current value of the state vector
./ode/SecondOrderDifferentialEquations.java:     * @param yDot array containing the current value of the first derivative
./ode/SecondOrderDifferentialEquations.java:     * @param yDDot placeholder array where to put the second time derivative
./ode/MultistepIntegrator.java:     * @param name name of the method
./ode/MultistepIntegrator.java:     * @param nSteps number of steps of the multistep method
./ode/MultistepIntegrator.java:     * @param order order of the method
./ode/MultistepIntegrator.java:     * @param minStep minimal step (must be positive even for backward
./ode/MultistepIntegrator.java:     * @param maxStep maximal step (must be positive even for backward
./ode/MultistepIntegrator.java:     * @param scalAbsoluteTolerance allowed absolute error
./ode/MultistepIntegrator.java:     * @param scalRelativeTolerance allowed relative error
./ode/MultistepIntegrator.java:     * @param name name of the method
./ode/MultistepIntegrator.java:     * @param nSteps number of steps of the multistep method
./ode/MultistepIntegrator.java:     * @param order order of the method
./ode/MultistepIntegrator.java:     * @param minStep minimal step (must be positive even for backward
./ode/MultistepIntegrator.java:     * @param maxStep maximal step (must be positive even for backward
./ode/MultistepIntegrator.java:     * @param vecAbsoluteTolerance allowed absolute error
./ode/MultistepIntegrator.java:     * @param vecRelativeTolerance allowed relative error
./ode/MultistepIntegrator.java:     * @param starterIntegrator starter integrator
./ode/MultistepIntegrator.java:     * @param t0 initial time
./ode/MultistepIntegrator.java:     * @param y0 initial value of the state vector at t0
./ode/MultistepIntegrator.java:     * @param t target time for the integration
./ode/MultistepIntegrator.java:     * @param h step size to use for scaling
./ode/MultistepIntegrator.java:     * @param t first steps times
./ode/MultistepIntegrator.java:     * @param y first steps states
./ode/MultistepIntegrator.java:     * @param yDot first steps derivatives
./ode/MultistepIntegrator.java:     * @param minReduction minimal reduction factor
./ode/MultistepIntegrator.java:     * @param maxGrowth maximal growth factor
./ode/MultistepIntegrator.java:     * @param safety safety factor
./ode/MultistepIntegrator.java:     * @param error normalized error of the current step
./ode/MultistepIntegrator.java:         * @param h step size to use for scaling
./ode/MultistepIntegrator.java:         * @param t first steps times
./ode/MultistepIntegrator.java:         * @param y first steps states
./ode/MultistepIntegrator.java:         * @param yDot first steps derivatives
./ode/MultistepIntegrator.java:         * @param nbStartPoints number of start points (including the initial point)
./ode/MultistepIntegrator.java:         * @param n problem dimension
./ode/FieldExpandableODE.java: * @param <T> the type of the field elements
./ode/FieldExpandableODE.java:     * @param primary the primary set of differential equations to be integrated.
./ode/FieldExpandableODE.java:     * @param secondary secondary equations set
./ode/FieldExpandableODE.java:     * @param t0 value of the independent <I>time</I> variable at integration start
./ode/FieldExpandableODE.java:     * @param y0 array containing the value of the state vector at integration start
./ode/FieldExpandableODE.java:     * @param finalTime target time for the integration
./ode/FieldExpandableODE.java:     * @param t current value of the independent <I>time</I> variable
./ode/FieldExpandableODE.java:     * @param y array containing the current value of the complete state vector
./ode/FieldODEState.java: * @param <T> the type of the field elements
./ode/FieldODEState.java:     * @param time time
./ode/FieldODEState.java:     * @param state state at time
./ode/FieldODEState.java:     * @param time time
./ode/FieldODEState.java:     * @param state state at time
./ode/FieldODEState.java:     * @param secondaryState state at time (may be null)
./ode/FieldODEState.java:     * @param field field to which elements belong
./ode/FieldODEState.java:     * @param original original array (may be null)
./ode/FieldODEState.java:     * @param index index of the secondary set as returned
./ode/FieldODEState.java:     * @param index index of the secondary set as returned
./ode/ODEIntegrator.java:     * @param handler handler for the accepted steps
./ode/ODEIntegrator.java:     * @param handler event handler
./ode/ODEIntegrator.java:     * @param maxCheckInterval maximal time interval between switching
./ode/ODEIntegrator.java:     * @param convergence convergence threshold in the event time search
./ode/ODEIntegrator.java:     * @param maxIterationCount upper limit of the iteration count in
./ode/ODEIntegrator.java:     * @param handler event handler
./ode/ODEIntegrator.java:     * @param maxCheckInterval maximal time interval between switching
./ode/ODEIntegrator.java:     * @param convergence convergence threshold in the event time search
./ode/ODEIntegrator.java:     * @param maxIterationCount upper limit of the iteration count in
./ode/ODEIntegrator.java:     * @param solver The root-finding algorithm to use to detect the state
./ode/ODEIntegrator.java:     * @param maxEvaluations maximal number of function evaluations (negative
./ode/MainStateJacobianProvider.java:     * @param t current value of the independent <I>time</I> variable
./ode/MainStateJacobianProvider.java:     * @param y array containing the current value of the main state vector
./ode/MainStateJacobianProvider.java:     * @param yDot array containing the current value of the time derivative of the main state vector
./ode/MainStateJacobianProvider.java:     * @param dFdY placeholder array where to put the jacobian matrix of the ODE w.r.t. the main state vector
./ode/FirstOrderIntegrator.java:   * @param equations differential equations to integrate
./ode/FirstOrderIntegrator.java:   * @param t0 initial time
./ode/FirstOrderIntegrator.java:   * @param y0 initial value of the state vector at t0
./ode/FirstOrderIntegrator.java:   * @param t target time for the integration
./ode/FirstOrderIntegrator.java:   * @param y placeholder where to put the state vector at each successful
./ode/ParameterConfiguration.java:     * @param parameterName parameter name
./ode/ParameterConfiguration.java:     * @param hP parameter step
./ode/ParameterConfiguration.java:     * @param hParam parameter step
./ode/FirstOrderDifferentialEquations.java:     * @param t current value of the independent <I>time</I> variable
./ode/FirstOrderDifferentialEquations.java:     * @param y array containing the current value of the state vector
./ode/FirstOrderDifferentialEquations.java:     * @param yDot placeholder array where to put the time derivative of the state vector
./ode/UnknownParameterException.java:     * @param name parameter name.
./ode/FieldODEStateAndDerivative.java: * @param <T> the type of the field elements
./ode/FieldODEStateAndDerivative.java:     * @param time time
./ode/FieldODEStateAndDerivative.java:     * @param state state at time
./ode/FieldODEStateAndDerivative.java:     * @param derivative derivative of the state at time
./ode/FieldODEStateAndDerivative.java:     * @param time time
./ode/FieldODEStateAndDerivative.java:     * @param state state at time
./ode/FieldODEStateAndDerivative.java:     * @param derivative derivative of the state at time
./ode/FieldODEStateAndDerivative.java:     * @param secondaryState state at time (may be null)
./ode/FieldODEStateAndDerivative.java:     * @param secondaryDerivative derivative of the state at time (may be null)
./ode/FieldODEStateAndDerivative.java:     * @param index index of the secondary set as returned
./ode/ExpandableStatefulODE.java:     * @param primary the primary set of differential equations to be integrated.
./ode/ExpandableStatefulODE.java:     * @param t current value of the independent <I>time</I> variable
./ode/ExpandableStatefulODE.java:     * @param y array containing the current value of the complete state vector
./ode/ExpandableStatefulODE.java:     * @param yDot placeholder array where to put the time derivative of the complete state vector
./ode/ExpandableStatefulODE.java:     * @param secondary secondary equations set
./ode/ExpandableStatefulODE.java:     * @param time current time
./ode/ExpandableStatefulODE.java:     * @param primaryState primary part of the current state
./ode/ExpandableStatefulODE.java:     * @param index index of the part to set as returned by {@link
./ode/ExpandableStatefulODE.java:     * @param secondaryState secondary part of the current state
./ode/ExpandableStatefulODE.java:     * @param index index of the part to set as returned by {@link
./ode/ExpandableStatefulODE.java:     * @param index index of the part to set as returned by {@link
./ode/ExpandableStatefulODE.java:     * @param completeState complete current state to copy data from
./ode/ExpandableStatefulODE.java:         * @param equation secondary differential equation
./ode/ExpandableStatefulODE.java:         * @param firstIndex index to use for the first element in the complete arrays
./ode/SecondaryEquations.java:     * @param t current value of the independent <I>time</I> variable
./ode/SecondaryEquations.java:     * @param primary array containing the current value of the primary state vector
./ode/SecondaryEquations.java:     * @param primaryDot array containing the derivative of the primary state vector
./ode/SecondaryEquations.java:     * @param secondary array containing the current value of the secondary state vector
./ode/SecondaryEquations.java:     * @param secondaryDot placeholder array where to put the derivative of the secondary state vector
./ode/AbstractParameterizable.java:     * @param names names of the supported parameters
./ode/AbstractParameterizable.java:     * @param names names of the supported parameters
./ode/AbstractParameterizable.java:     * @param name name of the parameter to check
./ode/AbstractFieldIntegrator.java: * @param <T> the type of the field elements
./ode/AbstractFieldIntegrator.java:     * @param field field to which the time and state vector elements belong
./ode/AbstractFieldIntegrator.java:     * @param name name of the method
./ode/AbstractFieldIntegrator.java:     * @param eqn equations to integrate
./ode/AbstractFieldIntegrator.java:     * @param t0 start value of the independent <i>time</i> variable
./ode/AbstractFieldIntegrator.java:     * @param y0 array containing the start value of the state vector
./ode/AbstractFieldIntegrator.java:     * @param t target time for the integration
./ode/AbstractFieldIntegrator.java:     * @param t current value of the independent <I>time</I> variable
./ode/AbstractFieldIntegrator.java:     * @param y array containing the current value of the state vector
./ode/AbstractFieldIntegrator.java:     * @param stateInitialized new value for the flag
./ode/AbstractFieldIntegrator.java:     * @param interpolator step interpolator
./ode/AbstractFieldIntegrator.java:     * @param tEnd final integration time
./ode/AbstractFieldIntegrator.java:     * @param eqn set of differential equations
./ode/AbstractFieldIntegrator.java:     * @param t target time for the integration
./ode/AbstractFieldIntegrator.java:     * @param stepSize step size to set
./ode/AbstractFieldIntegrator.java:     * @param stepStart step start
./ode/AbstractFieldIntegrator.java:     * @param isLastStep if true, this step is the last one
./ode/events/FilterType.java:     * @param previous transformer active on the previous point with respect
./ode/events/FilterType.java:     * @param g current value of the g function
./ode/events/FilterType.java:     * @param forward true if integration goes forward
./ode/events/EventState.java:     * @param handler event handler
./ode/events/EventState.java:     * @param maxCheckInterval maximal time interval between switching
./ode/events/EventState.java:     * @param convergence convergence threshold in the event time search
./ode/events/EventState.java:     * @param maxIterationCount upper limit of the iteration count in
./ode/events/EventState.java:     * @param solver Root-finding algorithm to use to detect state events
./ode/events/EventState.java:     * @param expandable equation being integrated
./ode/events/EventState.java:     * @param interpolator valid for the current step
./ode/events/EventState.java:     * @param interpolator interpolator to use
./ode/events/EventState.java:     * @param interpolator step interpolator for the proposed step
./ode/events/EventState.java:     * @param t value of the independent <i>time</i> variable at the
./ode/events/EventState.java:     * @param y array containing the current value of the state vector
./ode/events/EventState.java:     * @param t value of the independent <i>time</i> variable at the
./ode/events/EventState.java:     * @param y array were to put the desired state vector at the beginning
./ode/events/EventState.java:         * @param exception exception to wrap
./ode/events/EventFilter.java:     * @param rawHandler event handler to wrap
./ode/events/EventFilter.java:     * @param filter filter to use
./ode/events/FieldEventHandler.java: * @param <T> the type of the field elements
./ode/events/FieldEventHandler.java:     * @param initialState initial time, state vector and derivative
./ode/events/FieldEventHandler.java:     * @param finalTime target time for the integration
./ode/events/FieldEventHandler.java:     * @param state current value of the independent <i>time</i> variable, state vector
./ode/events/FieldEventHandler.java:     * @param state current value of the independent <i>time</i> variable, state vector
./ode/events/FieldEventHandler.java:     * @param increasing if true, the value of the switching function increases
./ode/events/FieldEventHandler.java:     * @param state current value of the independent <i>time</i> variable, state vector
./ode/events/Transformer.java:     * @param g raw value of function g
./ode/events/EventHandler.java:     * @param t0 start value of the independent <i>time</i> variable
./ode/events/EventHandler.java:     * @param y0 array containing the start value of the state vector
./ode/events/EventHandler.java:     * @param t target time for the integration
./ode/events/EventHandler.java:   * @param t current value of the independent <i>time</i> variable
./ode/events/EventHandler.java:   * @param y array containing the current value of the state vector
./ode/events/EventHandler.java:   * @param t current value of the independent <i>time</i> variable
./ode/events/EventHandler.java:   * @param y array containing the current value of the state vector
./ode/events/EventHandler.java:   * @param increasing if true, the value of the switching function increases
./ode/events/EventHandler.java:   * @param t current value of the independent <i>time</i> variable
./ode/events/EventHandler.java:   * @param y array containing the current value of the state vector
./ode/events/FieldEventState.java: * @param <T> the type of the field elements
./ode/events/FieldEventState.java:     * @param handler event handler
./ode/events/FieldEventState.java:     * @param maxCheckInterval maximal time interval between switching
./ode/events/FieldEventState.java:     * @param convergence convergence threshold in the event time search
./ode/events/FieldEventState.java:     * @param maxIterationCount upper limit of the iteration count in
./ode/events/FieldEventState.java:     * @param solver Root-finding algorithm to use to detect state events
./ode/events/FieldEventState.java:     * @param interpolator valid for the current step
./ode/events/FieldEventState.java:     * @param interpolator step interpolator for the proposed step
./ode/events/FieldEventState.java:     * @param state state at the end of the step
./ode/events/FieldEventState.java:     * @param state state at the beginning of the next step
./ode/AbstractIntegrator.java:     * @param name name of the method
./ode/AbstractIntegrator.java:     * @param t0 start value of the independent <i>time</i> variable
./ode/AbstractIntegrator.java:     * @param y0 array containing the start value of the state vector
./ode/AbstractIntegrator.java:     * @param t target time for the integration
./ode/AbstractIntegrator.java:     * @param equations equations to set
./ode/AbstractIntegrator.java:     * @param equations complete set of differential equations to integrate
./ode/AbstractIntegrator.java:     * @param t target time for the integration
./ode/AbstractIntegrator.java:     * @param t current value of the independent <I>time</I> variable
./ode/AbstractIntegrator.java:     * @param y array containing the current value of the state vector
./ode/AbstractIntegrator.java:     * @param yDot placeholder array where to put the time derivative of the state vector
./ode/AbstractIntegrator.java:     * @param stateInitialized new value for the flag
./ode/AbstractIntegrator.java:     * @param interpolator step interpolator
./ode/AbstractIntegrator.java:     * @param y state vector at step end time, must be reset if an event
./ode/AbstractIntegrator.java:     * @param yDot placeholder array where to put the time derivative of the state vector
./ode/AbstractIntegrator.java:     * @param tEnd final integration time
./ode/AbstractIntegrator.java:     * @param equations set of differential equations
./ode/AbstractIntegrator.java:     * @param t target time for the integration
./ode/MultistepFieldIntegrator.java: * @param <T> the type of the field elements
./ode/MultistepFieldIntegrator.java:     * @param field field to which the time and state vector elements belong
./ode/MultistepFieldIntegrator.java:     * @param name name of the method
./ode/MultistepFieldIntegrator.java:     * @param nSteps number of steps of the multistep method
./ode/MultistepFieldIntegrator.java:     * @param order order of the method
./ode/MultistepFieldIntegrator.java:     * @param minStep minimal step (must be positive even for backward
./ode/MultistepFieldIntegrator.java:     * @param maxStep maximal step (must be positive even for backward
./ode/MultistepFieldIntegrator.java:     * @param scalAbsoluteTolerance allowed absolute error
./ode/MultistepFieldIntegrator.java:     * @param scalRelativeTolerance allowed relative error
./ode/MultistepFieldIntegrator.java:     * @param field field to which the time and state vector elements belong
./ode/MultistepFieldIntegrator.java:     * @param name name of the method
./ode/MultistepFieldIntegrator.java:     * @param nSteps number of steps of the multistep method
./ode/MultistepFieldIntegrator.java:     * @param order order of the method
./ode/MultistepFieldIntegrator.java:     * @param minStep minimal step (must be positive even for backward
./ode/MultistepFieldIntegrator.java:     * @param maxStep maximal step (must be positive even for backward
./ode/MultistepFieldIntegrator.java:     * @param vecAbsoluteTolerance allowed absolute error
./ode/MultistepFieldIntegrator.java:     * @param vecRelativeTolerance allowed relative error
./ode/MultistepFieldIntegrator.java:     * @param starterIntegrator starter integrator
./ode/MultistepFieldIntegrator.java:     * @param equations complete set of differential equations to integrate
./ode/MultistepFieldIntegrator.java:     * @param initialState initial state (time, primary and secondary state vectors)
./ode/MultistepFieldIntegrator.java:     * @param t target time for the integration
./ode/MultistepFieldIntegrator.java:     * @param h step size to use for scaling
./ode/MultistepFieldIntegrator.java:     * @param t first steps times
./ode/MultistepFieldIntegrator.java:     * @param y first steps states
./ode/MultistepFieldIntegrator.java:     * @param yDot first steps derivatives
./ode/MultistepFieldIntegrator.java:     * @param minReduction minimal reduction factor
./ode/MultistepFieldIntegrator.java:     * @param maxGrowth maximal growth factor
./ode/MultistepFieldIntegrator.java:     * @param safety safety factor
./ode/MultistepFieldIntegrator.java:     * @param newStepSize new step size to use in the scaled and Nordsieck arrays
./ode/MultistepFieldIntegrator.java:     * @param error normalized error of the current step
./ode/MultistepFieldIntegrator.java:         * @param mapper equation mapper
./ode/MultistepFieldIntegrator.java:         * @param nbStartPoints number of start points (including the initial point)
./ode/ParameterizedODE.java:     * @param name parameter name
./ode/ParameterizedODE.java:     * @param name parameter name
./ode/ParameterizedODE.java:     * @param value parameter value
./ode/FirstOrderFieldIntegrator.java: * @param <T> the type of the field elements
./ode/FirstOrderFieldIntegrator.java:     * @param handler handler for the accepted steps
./ode/FirstOrderFieldIntegrator.java:     * @param handler event handler
./ode/FirstOrderFieldIntegrator.java:     * @param maxCheckInterval maximal time interval between switching
./ode/FirstOrderFieldIntegrator.java:     * @param convergence convergence threshold in the event time search
./ode/FirstOrderFieldIntegrator.java:     * @param maxIterationCount upper limit of the iteration count in
./ode/FirstOrderFieldIntegrator.java:     * @param handler event handler
./ode/FirstOrderFieldIntegrator.java:     * @param maxCheckInterval maximal time interval between switching
./ode/FirstOrderFieldIntegrator.java:     * @param convergence convergence threshold in the event time search
./ode/FirstOrderFieldIntegrator.java:     * @param maxIterationCount upper limit of the iteration count in
./ode/FirstOrderFieldIntegrator.java:     * @param solver solver to use to locate the event
./ode/FirstOrderFieldIntegrator.java:     * @param maxEvaluations maximal number of function evaluations (negative
./ode/FirstOrderFieldIntegrator.java:     * @param equations differential equations to integrate
./ode/FirstOrderFieldIntegrator.java:     * @param initialState initial state (time, primary and secondary state vectors)
./ode/FirstOrderFieldIntegrator.java:     * @param finalTime target time for the integration
./ode/ParameterizedWrapper.java:     * @param ode original first order differential equations
./ode/ParameterizedWrapper.java:     * @param t current value of the independent <I>time</I> variable
./ode/ParameterizedWrapper.java:     * @param y array containing the current value of the state vector
./ode/ParameterizedWrapper.java:     * @param yDot placeholder array where to put the time derivative of the state vector
./ode/SecondOrderIntegrator.java:   * @param equations differential equations to integrate
./ode/SecondOrderIntegrator.java:   * @param t0 initial time
./ode/SecondOrderIntegrator.java:   * @param y0 initial value of the state vector at t0
./ode/SecondOrderIntegrator.java:   * @param yDot0 initial value of the first derivative of the state
./ode/SecondOrderIntegrator.java:   * @param t target time for the integration
./ode/SecondOrderIntegrator.java:   * @param y placeholder where to put the state vector at each
./ode/SecondOrderIntegrator.java:   * @param yDot placeholder where to put the first derivative of
./optim/PointVectorValuePair.java:     * @param point Point coordinates. This instance will store
./optim/PointVectorValuePair.java:     * @param value Value of the objective function at the point.
./optim/PointVectorValuePair.java:     * @param point Point coordinates.
./optim/PointVectorValuePair.java:     * @param value Value of the objective function at the point.
./optim/PointVectorValuePair.java:     * @param copyArray if {@code true}, the input arrays will be copied,
./optim/PointVectorValuePair.java:         * @param point Point coordinates.
./optim/PointVectorValuePair.java:         * @param value Value of the objective function at the point.
./optim/SimpleBounds.java:     * @param lB Lower bounds.
./optim/SimpleBounds.java:     * @param uB Upper bounds.
./optim/SimpleBounds.java:     * @param dim Number of parameters.
./optim/AbstractOptimizationProblem.java: * @param <PAIR> Type of the point/value pair returned by the optimization algorithm.
./optim/AbstractOptimizationProblem.java:     * @param maxEvaluations the number of allowed model function evaluations.
./optim/AbstractOptimizationProblem.java:     * @param maxIterations  the number of allowed iterations.
./optim/AbstractOptimizationProblem.java:     * @param checker        the convergence checker.
./optim/MaxIter.java:     * @param max Allowed number of iterations.
./optim/SimplePointChecker.java: * @param <PAIR> Type of the (point, value) pair.
./optim/SimplePointChecker.java:     * @param relativeThreshold relative tolerance threshold
./optim/SimplePointChecker.java:     * @param absoluteThreshold absolute tolerance threshold
./optim/SimplePointChecker.java:     * @param relativeThreshold Relative tolerance threshold.
./optim/SimplePointChecker.java:     * @param absoluteThreshold Absolute tolerance threshold.
./optim/SimplePointChecker.java:     * @param maxIter Maximum iteration count.
./optim/SimplePointChecker.java:     * @param iteration Index of current iteration
./optim/SimplePointChecker.java:     * @param previous Best point in the previous iteration.
./optim/SimplePointChecker.java:     * @param current Best point in the current iteration.
./optim/SimpleValueChecker.java:     * @param relativeThreshold relative tolerance threshold
./optim/SimpleValueChecker.java:     * @param absoluteThreshold absolute tolerance threshold
./optim/SimpleValueChecker.java:     * @param relativeThreshold relative tolerance threshold
./optim/SimpleValueChecker.java:     * @param absoluteThreshold absolute tolerance threshold
./optim/SimpleValueChecker.java:     * @param maxIter Maximum iteration count.
./optim/SimpleValueChecker.java:     * @param iteration Index of current iteration
./optim/SimpleValueChecker.java:     * @param previous Best point in the previous iteration.
./optim/SimpleValueChecker.java:     * @param current Best point in the current iteration.
./optim/nonlinear/vector/ModelFunction.java:     * @param m Model function to be optimized.
./optim/nonlinear/vector/Target.java:     * @param observations Target values.
./optim/nonlinear/vector/ModelFunctionJacobian.java:     * @param j Jacobian of the model function to be optimized.
./optim/nonlinear/vector/JacobianMultivariateVectorOptimizer.java:     * @param checker Convergence checker.
./optim/nonlinear/vector/JacobianMultivariateVectorOptimizer.java:     * @param params Point at which the Jacobian must be evaluated.
./optim/nonlinear/vector/JacobianMultivariateVectorOptimizer.java:     * @param optData Optimization data. In addition to those documented in
./optim/nonlinear/vector/JacobianMultivariateVectorOptimizer.java:     * @param optData Optimization data.
./optim/nonlinear/vector/Weight.java:     * @param weight List of the values of the diagonal.
./optim/nonlinear/vector/Weight.java:     * @param weight Weight matrix.
./optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java:     * @param checker Convergence checker.
./optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java:     * @param useLU If {@code true}, the normal equations will be solved
./optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java:     * @param checker Convergence checker.
./optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java:     * @param checker Convergence checker.
./optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java:     * @param initialStepBoundFactor Positive input variable used in
./optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java:     * @param checker Convergence checker.
./optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java:     * @param costRelativeTolerance Desired relative error in the sum of
./optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java:     * @param parRelativeTolerance Desired relative error in the approximate
./optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java:     * @param orthoTolerance Desired max cosine on the orthogonality between
./optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java:     * @param threshold Desired threshold for QR ranking. If the squared norm
./optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java:     * @param costRelativeTolerance Desired relative error in the sum of
./optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java:     * @param parRelativeTolerance Desired relative error in the approximate
./optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java:     * @param orthoTolerance Desired max cosine on the orthogonality between
./optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java:     * @param initialStepBoundFactor Positive input variable used in
./optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java:     * @param costRelativeTolerance Desired relative error in the sum of
./optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java:     * @param parRelativeTolerance Desired relative error in the approximate
./optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java:     * @param orthoTolerance Desired max cosine on the orthogonality between
./optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java:     * @param threshold Desired threshold for QR ranking. If the squared norm
./optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java:     * @param qy array containing qTy
./optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java:     * @param delta upper bound on the euclidean norm of diagR * lmDir
./optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java:     * @param diag diagonal matrix
./optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java:     * @param work1 work array
./optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java:     * @param work2 work array
./optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java:     * @param work3 work array
./optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java:     * @param qy array containing qTy
./optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java:     * @param diag diagonal matrix
./optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java:     * @param lmDiag diagonal elements associated with lmDir
./optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java:     * @param work work array
./optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java:     * @param jacobian Weighted Jacobian matrix at the current point.
./optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java:     * @param y vector to multiply (will be overwritten with the result)
./optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java:     * @param checker Convergence checker.
./optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java:     * @param params Model parameters at which to compute the Jacobian.
./optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java:     * @param residuals Residuals.
./optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java:     * @param cost Cost value.
./optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java:     * @param params Model parameters.
./optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java:     * @param threshold Singularity threshold.
./optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java:     * @param params Model parameters.
./optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java:     * @param covarianceSingularityThreshold Singularity threshold (see
./optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java:     * @param optData Optimization data. In addition to those documented in
./optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java:     * @param objectiveValue Value of the the objective function. This is
./optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java:     * @param optData Optimization data. The following data will be looked for:
./optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java:     * @param m Symmetric, positive-definite (weight) matrix.
./optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java:     * @param optimizer Single-start optimizer to wrap.
./optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java:     * @param starts Number of starts to perform.
./optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java:     * @param generator Random vector generator to use for restarts.
./optim/nonlinear/vector/MultivariateVectorOptimizer.java:     * @param checker Convergence checker.
./optim/nonlinear/vector/MultivariateVectorOptimizer.java:     * @param params Point at which the objective function must be evaluated.
./optim/nonlinear/vector/MultivariateVectorOptimizer.java:     * @param optData Optimization data. In addition to those documented in
./optim/nonlinear/vector/MultivariateVectorOptimizer.java:     * @param optData Optimization data. The following data will be looked for:
./optim/nonlinear/scalar/MultivariateOptimizer.java:     * @param checker Convergence checker.
./optim/nonlinear/scalar/MultivariateOptimizer.java:     * @param optData Optimization data. In addition to those documented in
./optim/nonlinear/scalar/MultivariateOptimizer.java:     * @param optData Optimization data.
./optim/nonlinear/scalar/MultivariateOptimizer.java:     * @param params Point at which the objective function must be evaluated.
./optim/nonlinear/scalar/MultivariateFunctionPenaltyAdapter.java:     * @param bounded bounded function
./optim/nonlinear/scalar/MultivariateFunctionPenaltyAdapter.java:     * @param lower lower bounds for each element of the input parameters array
./optim/nonlinear/scalar/MultivariateFunctionPenaltyAdapter.java:     * @param upper upper bounds for each element of the input parameters array
./optim/nonlinear/scalar/MultivariateFunctionPenaltyAdapter.java:     * @param offset base offset of the penalty function
./optim/nonlinear/scalar/MultivariateFunctionPenaltyAdapter.java:     * @param scale scale of the penalty function
./optim/nonlinear/scalar/MultivariateFunctionPenaltyAdapter.java:     * @param point unbounded point
./optim/nonlinear/scalar/ObjectiveFunctionGradient.java:     * @param g Gradient of the function to be optimized.
./optim/nonlinear/scalar/MultiStartMultivariateOptimizer.java:     * @param optimizer Single-start optimizer to wrap.
./optim/nonlinear/scalar/MultiStartMultivariateOptimizer.java:     * @param starts Number of starts to perform.
./optim/nonlinear/scalar/MultiStartMultivariateOptimizer.java:     * @param generator Random vector generator to use for restarts.
./optim/nonlinear/scalar/MultivariateFunctionMappingAdapter.java:     * @param bounded bounded function
./optim/nonlinear/scalar/MultivariateFunctionMappingAdapter.java:     * @param lower lower bounds for each element of the input parameters array
./optim/nonlinear/scalar/MultivariateFunctionMappingAdapter.java:     * @param upper upper bounds for each element of the input parameters array
./optim/nonlinear/scalar/MultivariateFunctionMappingAdapter.java:     * @param point Unbounded values.
./optim/nonlinear/scalar/MultivariateFunctionMappingAdapter.java:     * @param point Bounded values.
./optim/nonlinear/scalar/MultivariateFunctionMappingAdapter.java:     * @param point unbounded value
./optim/nonlinear/scalar/MultivariateFunctionMappingAdapter.java:         * @param y Unbounded value.
./optim/nonlinear/scalar/MultivariateFunctionMappingAdapter.java:         * @param x Bounded value.
./optim/nonlinear/scalar/MultivariateFunctionMappingAdapter.java:         * @param lower lower bound
./optim/nonlinear/scalar/MultivariateFunctionMappingAdapter.java:         * @param upper upper bound
./optim/nonlinear/scalar/MultivariateFunctionMappingAdapter.java:         * @param lower lower bound
./optim/nonlinear/scalar/MultivariateFunctionMappingAdapter.java:         * @param upper upper bound
./optim/nonlinear/scalar/LeastSquaresConverter.java:     * @param function vectorial residuals function to wrap
./optim/nonlinear/scalar/LeastSquaresConverter.java:     * @param observations observations to be compared to objective function to compute residuals
./optim/nonlinear/scalar/LeastSquaresConverter.java:     * @param function vectorial residuals function to wrap
./optim/nonlinear/scalar/LeastSquaresConverter.java:     * @param observations observations to be compared to objective function to compute residuals
./optim/nonlinear/scalar/LeastSquaresConverter.java:     * @param weights weights to apply to the residuals
./optim/nonlinear/scalar/LeastSquaresConverter.java:     * @param function vectorial residuals function to wrap
./optim/nonlinear/scalar/LeastSquaresConverter.java:     * @param observations observations to be compared to objective function to compute residuals
./optim/nonlinear/scalar/LeastSquaresConverter.java:     * @param scale scaling matrix
./optim/nonlinear/scalar/LineSearch.java:     * @param optimizer Optimizer on behalf of which the line search
./optim/nonlinear/scalar/LineSearch.java:     * @param relativeTolerance Search will stop when the function relative
./optim/nonlinear/scalar/LineSearch.java:     * @param absoluteTolerance Search will stop when the function absolute
./optim/nonlinear/scalar/LineSearch.java:     * @param initialBracketingRange Extent of the initial interval used to
./optim/nonlinear/scalar/LineSearch.java:     * @param startPoint Starting point.
./optim/nonlinear/scalar/LineSearch.java:     * @param direction Search direction.
./optim/nonlinear/scalar/noderiv/AbstractSimplex.java:     * @param n Dimension of the simplex.
./optim/nonlinear/scalar/noderiv/AbstractSimplex.java:     * @param n Dimension of the simplex.
./optim/nonlinear/scalar/noderiv/AbstractSimplex.java:     * @param sideLength Length of the sides of the hypercube.
./optim/nonlinear/scalar/noderiv/AbstractSimplex.java:     * @param steps Steps along the canonical axes representing box edges. They
./optim/nonlinear/scalar/noderiv/AbstractSimplex.java:     * @param referenceSimplex Reference simplex.
./optim/nonlinear/scalar/noderiv/AbstractSimplex.java:     * @param evaluationFunction Evaluation function.
./optim/nonlinear/scalar/noderiv/AbstractSimplex.java:     * @param comparator Comparator to use to sort simplex vertices from best
./optim/nonlinear/scalar/noderiv/AbstractSimplex.java:     * @param startPoint First point of the simplex.
./optim/nonlinear/scalar/noderiv/AbstractSimplex.java:     * @param evaluationFunction Evaluation function.
./optim/nonlinear/scalar/noderiv/AbstractSimplex.java:     * @param comparator Comparator to use to sort simplex vertices from best to worst.
./optim/nonlinear/scalar/noderiv/AbstractSimplex.java:     * @param pointValuePair Point to insert.
./optim/nonlinear/scalar/noderiv/AbstractSimplex.java:     * @param comparator Comparator to use for sorting the simplex vertices
./optim/nonlinear/scalar/noderiv/AbstractSimplex.java:     * @param index Location.
./optim/nonlinear/scalar/noderiv/AbstractSimplex.java:     * @param index Location.
./optim/nonlinear/scalar/noderiv/AbstractSimplex.java:     * @param point New value.
./optim/nonlinear/scalar/noderiv/AbstractSimplex.java:     * @param points New Points.
./optim/nonlinear/scalar/noderiv/AbstractSimplex.java:     * @param n Dimension of the hypercube.
./optim/nonlinear/scalar/noderiv/AbstractSimplex.java:     * @param sideLength Length of the sides of the hypercube.
./optim/nonlinear/scalar/noderiv/PowellOptimizer.java:     * @param rel Relative threshold.
./optim/nonlinear/scalar/noderiv/PowellOptimizer.java:     * @param abs Absolute threshold.
./optim/nonlinear/scalar/noderiv/PowellOptimizer.java:     * @param checker Convergence checker.
./optim/nonlinear/scalar/noderiv/PowellOptimizer.java:     * @param rel Relative threshold for this optimizer.
./optim/nonlinear/scalar/noderiv/PowellOptimizer.java:     * @param abs Absolute threshold for this optimizer.
./optim/nonlinear/scalar/noderiv/PowellOptimizer.java:     * @param lineRel Relative threshold for the internal line search optimizer.
./optim/nonlinear/scalar/noderiv/PowellOptimizer.java:     * @param lineAbs Absolute threshold for the internal line search optimizer.
./optim/nonlinear/scalar/noderiv/PowellOptimizer.java:     * @param checker Convergence checker.
./optim/nonlinear/scalar/noderiv/PowellOptimizer.java:     * @param rel Relative threshold.
./optim/nonlinear/scalar/noderiv/PowellOptimizer.java:     * @param abs Absolute threshold.
./optim/nonlinear/scalar/noderiv/PowellOptimizer.java:     * @param rel Relative threshold.
./optim/nonlinear/scalar/noderiv/PowellOptimizer.java:     * @param abs Absolute threshold.
./optim/nonlinear/scalar/noderiv/PowellOptimizer.java:     * @param lineRel Relative threshold for the internal line search optimizer.
./optim/nonlinear/scalar/noderiv/PowellOptimizer.java:     * @param lineAbs Absolute threshold for the internal line search optimizer.
./optim/nonlinear/scalar/noderiv/PowellOptimizer.java:     * @param p Point used in the line search.
./optim/nonlinear/scalar/noderiv/PowellOptimizer.java:     * @param d Direction used in the line search.
./optim/nonlinear/scalar/noderiv/PowellOptimizer.java:     * @param optimum Optimum found by the line search.
./optim/nonlinear/scalar/noderiv/SimplexOptimizer.java:     * @param checker Convergence checker.
./optim/nonlinear/scalar/noderiv/SimplexOptimizer.java:     * @param rel Relative threshold.
./optim/nonlinear/scalar/noderiv/SimplexOptimizer.java:     * @param abs Absolute threshold.
./optim/nonlinear/scalar/noderiv/SimplexOptimizer.java:     * @param optData Optimization data. In addition to those documented in
./optim/nonlinear/scalar/noderiv/SimplexOptimizer.java:     * @param optData Optimization data.
./optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java:     * @param numberOfInterpolationPoints Number of interpolation conditions.
./optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java:     * @param numberOfInterpolationPoints Number of interpolation conditions.
./optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java:     * @param initialTrustRegionRadius Initial trust region radius.
./optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java:     * @param stoppingTrustRegionRadius Stopping trust region radius.
./optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java:     * @param lowerBound Lower bounds.
./optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java:     * @param upperBound Upper bounds.
./optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java:     * @param lowerBound Lower bounds.
./optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java:     * @param upperBound Upper bounds.
./optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java:     * @param knew
./optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java:     * @param adelt
./optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java:     * @param lowerBound Lower bounds.
./optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java:     * @param upperBound Upper bounds.
./optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java:     * @param delta
./optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java:     * @param gnew
./optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java:     * @param xbdi
./optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java:     * @param s
./optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java:     * @param hs
./optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java:     * @param hred
./optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java:     * @param beta
./optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java:     * @param denom
./optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java:     * @param knew
./optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java:     * @param lowerBound Lower bounds (constraints) of the objective variables.
./optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java:     * @param upperBound Upperer bounds (constraints) of the objective variables.
./optim/nonlinear/scalar/noderiv/NelderMeadSimplex.java:     * @param n Dimension of the simplex.
./optim/nonlinear/scalar/noderiv/NelderMeadSimplex.java:     * @param n Dimension of the simplex.
./optim/nonlinear/scalar/noderiv/NelderMeadSimplex.java:     * @param sideLength Length of the sides of the default (hypercube)
./optim/nonlinear/scalar/noderiv/NelderMeadSimplex.java:     * @param n Dimension of the simplex. See
./optim/nonlinear/scalar/noderiv/NelderMeadSimplex.java:     * @param sideLength Length of the sides of the default (hypercube)
./optim/nonlinear/scalar/noderiv/NelderMeadSimplex.java:     * @param rho Reflection coefficient.
./optim/nonlinear/scalar/noderiv/NelderMeadSimplex.java:     * @param khi Expansion coefficient.
./optim/nonlinear/scalar/noderiv/NelderMeadSimplex.java:     * @param gamma Contraction coefficient.
./optim/nonlinear/scalar/noderiv/NelderMeadSimplex.java:     * @param sigma Shrinkage coefficient.
./optim/nonlinear/scalar/noderiv/NelderMeadSimplex.java:     * @param n Dimension of the simplex. See
./optim/nonlinear/scalar/noderiv/NelderMeadSimplex.java:     * @param rho Reflection coefficient.
./optim/nonlinear/scalar/noderiv/NelderMeadSimplex.java:     * @param khi Expansion coefficient.
./optim/nonlinear/scalar/noderiv/NelderMeadSimplex.java:     * @param gamma Contraction coefficient.
./optim/nonlinear/scalar/noderiv/NelderMeadSimplex.java:     * @param sigma Shrinkage coefficient.
./optim/nonlinear/scalar/noderiv/NelderMeadSimplex.java:     * @param steps Steps along the canonical axes representing box edges.
./optim/nonlinear/scalar/noderiv/NelderMeadSimplex.java:     * @param steps Steps along the canonical axes representing box edges.
./optim/nonlinear/scalar/noderiv/NelderMeadSimplex.java:     * @param rho Reflection coefficient.
./optim/nonlinear/scalar/noderiv/NelderMeadSimplex.java:     * @param khi Expansion coefficient.
./optim/nonlinear/scalar/noderiv/NelderMeadSimplex.java:     * @param gamma Contraction coefficient.
./optim/nonlinear/scalar/noderiv/NelderMeadSimplex.java:     * @param sigma Shrinkage coefficient.
./optim/nonlinear/scalar/noderiv/NelderMeadSimplex.java:     * @param referenceSimplex Reference simplex. See
./optim/nonlinear/scalar/noderiv/NelderMeadSimplex.java:     * @param referenceSimplex Reference simplex. See
./optim/nonlinear/scalar/noderiv/NelderMeadSimplex.java:     * @param rho Reflection coefficient.
./optim/nonlinear/scalar/noderiv/NelderMeadSimplex.java:     * @param khi Expansion coefficient.
./optim/nonlinear/scalar/noderiv/NelderMeadSimplex.java:     * @param gamma Contraction coefficient.
./optim/nonlinear/scalar/noderiv/NelderMeadSimplex.java:     * @param sigma Shrinkage coefficient.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param maxIterations Maximal number of iterations.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param stopFitness Whether to stop if objective function value is smaller than
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param isActiveCMA Chooses the covariance matrix update method.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param diagonalOnly Number of initial iterations, where the covariance matrix
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param checkFeasableCount Determines how often new random objective variables are
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param random Random generator.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param generateStatistics Whether statistic data is collected.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param checker Convergence checker.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:         * @param s Sigma values.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:         * @param size Population size.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param optData Optimization data. In addition to those documented in
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param optData Optimization data. The following data will be looked for:
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param guess Initial guess for the arguments of the fitness function.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param zmean Weighted row matrix of the gaussian random numbers generating
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param xold xmean matrix of the previous generation.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param hsig Flag indicating a small correction.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param bestArz Fitness-sorted matrix of the gaussian random values of the
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param hsig Flag indicating a small correction.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param bestArx Fitness-sorted matrix of the argument vectors producing the
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param arz Unsorted matrix containing the gaussian random values of the
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param arindex Indices indicating the fitness-order of the current offspring.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param xold xmean matrix of the previous generation.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param negccov Negative covariance factor.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param vals History queue.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param val Current best fitness value.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param doubles Array of values to be sorted.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param vpPairs Array of valuePenaltyPairs to get range from.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:         * @param value Value to compare.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:         * @param index Index into sorted array.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:         * @param value Function value.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:         * @param penalty Out-of-bounds penalty.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:         * @param point Normalized objective variables.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:         * @param x Normalized objective variables.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:         * @param x Normalized objective variables.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:         * @param x Normalized objective variables.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:         * @param repaired Repaired objective variables.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param m Input matrix
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param m Input matrix.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param m Input matrix.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param m Input matrix 1.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param n Input matrix 2.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param m Input matrix 1.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param n Input matrix 2.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param m Input matrix.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param cols Columns to select.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param m Input matrix.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param k Diagonal position.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param m Input matrix.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param m Input matrix.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param m1 Source matrix.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param col1 Source column.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param m2 Target matrix.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param col2 Target column.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param n Number of rows.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param m Number of columns.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param n Number of rows.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param m Number of columns.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param n Number of rows.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param m Number of columns.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param mat Input matrix.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param n Number of row replicates.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param m Number of column replicates.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param start Start value.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param end End value.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param step Step size.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param m Input matrix.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param m Input matrix.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param m Input array.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param m Input array.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param indices Input index array.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param indices Input index array.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param size Length of random array.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param size Number of rows.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @param popSize Population size.
./optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex.java:     * @param n Dimension of the simplex.
./optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex.java:     * @param n Dimension of the simplex.
./optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex.java:     * @param sideLength Length of the sides of the default (hypercube)
./optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex.java:     * @param n Dimension of the simplex. See
./optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex.java:     * @param khi Expansion coefficient.
./optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex.java:     * @param gamma Contraction coefficient.
./optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex.java:     * @param n Dimension of the simplex. See
./optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex.java:     * @param sideLength Length of the sides of the default (hypercube)
./optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex.java:     * @param khi Expansion coefficient.
./optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex.java:     * @param gamma Contraction coefficient.
./optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex.java:     * @param steps Steps along the canonical axes representing box edges.
./optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex.java:     * @param steps Steps along the canonical axes representing box edges.
./optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex.java:     * @param khi Expansion coefficient.
./optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex.java:     * @param gamma Contraction coefficient.
./optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex.java:     * @param referenceSimplex Reference simplex. See
./optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex.java:     * @param referenceSimplex Reference simplex. See
./optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex.java:     * @param khi Expansion coefficient.
./optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex.java:     * @param gamma Contraction coefficient.
./optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex.java:     * @param evaluationFunction Evaluation function.
./optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex.java:     * @param original Original simplex (to be preserved).
./optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex.java:     * @param coeff Linear coefficient.
./optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex.java:     * @param comparator Comparator to use to sort simplex vertices from best
./optim/nonlinear/scalar/ObjectiveFunction.java:     * @param f Function to be optimized.
./optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java:         * @param step Initial step for the bracket search.
./optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java:     * @param updateFormula formula to use for updating the &beta; parameter,
./optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java:     * @param checker Convergence checker.
./optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java:     * @param updateFormula formula to use for updating the &beta; parameter,
./optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java:     * @param checker Convergence checker.
./optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java:     * @param lineSearchSolver Solver to use during line search.
./optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java:     * @param updateFormula formula to use for updating the &beta; parameter,
./optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java:     * @param checker Convergence checker.
./optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java:     * @param relativeTolerance Relative threshold for line search.
./optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java:     * @param absoluteTolerance Absolute threshold for line search.
./optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java:     * @param initialBracketingRange Extent of the initial interval used to
./optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java:     * @param updateFormula formula to use for updating the &beta; parameter,
./optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java:     * @param checker Convergence checker.
./optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java:     * @param lineSearchSolver Solver to use during line search.
./optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java:     * @param preconditioner Preconditioner.
./optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java:     * @param updateFormula formula to use for updating the &beta; parameter,
./optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java:     * @param checker Convergence checker.
./optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java:     * @param preconditioner Preconditioner.
./optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java:     * @param relativeTolerance Relative threshold for line search.
./optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java:     * @param absoluteTolerance Absolute threshold for line search.
./optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java:     * @param initialBracketingRange Extent of the initial interval used to
./optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java://          * @param point Current point.
./optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java://          * @param direction Search direction.
./optim/nonlinear/scalar/gradient/Preconditioner.java:     * @param point current point at which the search direction was computed
./optim/nonlinear/scalar/gradient/Preconditioner.java:     * @param r raw search direction (i.e. opposite of the gradient)
./optim/nonlinear/scalar/GradientMultivariateOptimizer.java:     * @param checker Convergence checker.
./optim/nonlinear/scalar/GradientMultivariateOptimizer.java:     * @param params Point at which the gradient must be evaluated.
./optim/nonlinear/scalar/GradientMultivariateOptimizer.java:     * @param optData Optimization data. In addition to those documented in
./optim/nonlinear/scalar/GradientMultivariateOptimizer.java:     * @param optData Optimization data.
./optim/univariate/UnivariateOptimizer.java:     * @param checker Convergence checker.
./optim/univariate/UnivariateOptimizer.java:     * @param optData Optimization data. In addition to those documented in
./optim/univariate/UnivariateOptimizer.java:     * @param optData Optimization data.
./optim/univariate/UnivariateOptimizer.java:     * @param x Point at which the objective function must be evaluated.
./optim/univariate/SearchInterval.java:     * @param lo Lower bound.
./optim/univariate/SearchInterval.java:     * @param hi Upper bound.
./optim/univariate/SearchInterval.java:     * @param init Start value.
./optim/univariate/SearchInterval.java:     * @param lo Lower bound.
./optim/univariate/SearchInterval.java:     * @param hi Upper bound.
./optim/univariate/BrentOptimizer.java:     * @param rel Relative threshold.
./optim/univariate/BrentOptimizer.java:     * @param abs Absolute threshold.
./optim/univariate/BrentOptimizer.java:     * @param checker Additional, user-defined, convergence checking
./optim/univariate/BrentOptimizer.java:     * @param rel Relative threshold.
./optim/univariate/BrentOptimizer.java:     * @param abs Absolute threshold.
./optim/univariate/BrentOptimizer.java:     * @param a Point and value.
./optim/univariate/BrentOptimizer.java:     * @param b Point and value.
./optim/univariate/BrentOptimizer.java:     * @param isMinim {@code true} if the selected point must be the one with
./optim/univariate/UnivariateObjectiveFunction.java:     * @param f Function to be optimized.
./optim/univariate/UnivariatePointValuePair.java:     * @param point Point.
./optim/univariate/UnivariatePointValuePair.java:     * @param value Value of an objective function at the point
./optim/univariate/BracketFinder.java:     * @param growLimit Expanding factor.
./optim/univariate/BracketFinder.java:     * @param maxEvaluations Maximum number of evaluations allowed for finding
./optim/univariate/BracketFinder.java:     * @param func Function whose optimum should be bracketed.
./optim/univariate/BracketFinder.java:     * @param goal {@link GoalType Goal type}.
./optim/univariate/BracketFinder.java:     * @param xA Initial point.
./optim/univariate/BracketFinder.java:     * @param xB Initial point.
./optim/univariate/BracketFinder.java:     * @param f Function.
./optim/univariate/BracketFinder.java:     * @param x Argument.
./optim/univariate/MultiStartUnivariateOptimizer.java:     * @param optimizer Single-start optimizer to wrap.
./optim/univariate/MultiStartUnivariateOptimizer.java:     * @param starts Number of starts to perform. If {@code starts == 1},
./optim/univariate/MultiStartUnivariateOptimizer.java:     * @param generator Random generator to use for restarts.
./optim/univariate/MultiStartUnivariateOptimizer.java:     * @param goal Goal type.
./optim/univariate/SimpleUnivariateValueChecker.java:     * @param relativeThreshold relative tolerance threshold
./optim/univariate/SimpleUnivariateValueChecker.java:     * @param absoluteThreshold absolute tolerance threshold
./optim/univariate/SimpleUnivariateValueChecker.java:     * @param relativeThreshold relative tolerance threshold
./optim/univariate/SimpleUnivariateValueChecker.java:     * @param absoluteThreshold absolute tolerance threshold
./optim/univariate/SimpleUnivariateValueChecker.java:     * @param maxIter Maximum iteration count.
./optim/univariate/SimpleUnivariateValueChecker.java:     * @param iteration Index of current iteration
./optim/univariate/SimpleUnivariateValueChecker.java:     * @param previous Best point in the previous iteration.
./optim/univariate/SimpleUnivariateValueChecker.java:     * @param current Best point in the current iteration.
./optim/BaseMultiStartMultivariateOptimizer.java: * @param <PAIR> Type of the point/value pair returned by the optimization
./optim/BaseMultiStartMultivariateOptimizer.java:     * @param optimizer Single-start optimizer to wrap.
./optim/BaseMultiStartMultivariateOptimizer.java:     * @param starts Number of starts to perform. If {@code starts == 1},
./optim/BaseMultiStartMultivariateOptimizer.java:     * @param generator Random vector generator to use for restarts.
./optim/BaseMultiStartMultivariateOptimizer.java:     * @param optimum Result of an optimization run.
./optim/SimpleVectorValueChecker.java:     * @param relativeThreshold relative tolerance threshold
./optim/SimpleVectorValueChecker.java:     * @param absoluteThreshold absolute tolerance threshold
./optim/SimpleVectorValueChecker.java:     * @param relativeThreshold Relative tolerance threshold.
./optim/SimpleVectorValueChecker.java:     * @param absoluteThreshold Absolute tolerance threshold.
./optim/SimpleVectorValueChecker.java:     * @param maxIter Maximum iteration count.
./optim/SimpleVectorValueChecker.java:     * @param iteration Index of current iteration
./optim/SimpleVectorValueChecker.java:     * @param previous Best point in the previous iteration.
./optim/SimpleVectorValueChecker.java:     * @param current Best point in the current iteration.
./optim/PointValuePair.java:     * @param point Point coordinates. This instance will store
./optim/PointValuePair.java:     * @param value Value of the objective function at the point.
./optim/PointValuePair.java:     * @param point Point coordinates.
./optim/PointValuePair.java:     * @param value Value of the objective function at the point.
./optim/PointValuePair.java:     * @param copyArray if {@code true}, the input array will be copied,
./optim/PointValuePair.java:         * @param point Point coordinates.
./optim/PointValuePair.java:         * @param value Value of the objective function at the point.
./optim/MaxEval.java:     * @param max Allowed number of evalutations.
./optim/InitialGuess.java:     * @param startPoint Initial guess.
./optim/ConvergenceChecker.java: * @param <PAIR> Type of the (point, objective value) pair.
./optim/ConvergenceChecker.java:     * @param iteration Current iteration.
./optim/ConvergenceChecker.java:     * @param previous Best point in the previous iteration.
./optim/ConvergenceChecker.java:     * @param current Best point in the current iteration.
./optim/linear/LinearConstraintSet.java:     * @param constraints Constraints.
./optim/linear/LinearConstraintSet.java:     * @param constraints Constraints.
./optim/linear/SolutionCallback.java:     * @param tableau the simplex tableau containing a feasible solution
./optim/linear/NonNegativeConstraint.java:     * @param restricted If {@code true}, all the variables must be positive.
./optim/linear/SimplexSolver.java:     * @param epsilon Amount of error to accept for algorithm convergence.
./optim/linear/SimplexSolver.java:     * @param epsilon Amount of error to accept for algorithm convergence.
./optim/linear/SimplexSolver.java:     * @param maxUlps Amount of error to accept in floating point comparisons.
./optim/linear/SimplexSolver.java:     * @param epsilon Amount of error to accept for algorithm convergence.
./optim/linear/SimplexSolver.java:     * @param maxUlps Amount of error to accept in floating point comparisons.
./optim/linear/SimplexSolver.java:     * @param cutOff Values smaller than the cutOff are treated as zero.
./optim/linear/SimplexSolver.java:     * @param optData Optimization data. In addition to those documented in
./optim/linear/SimplexSolver.java:     * @param optData Optimization data.
./optim/linear/SimplexSolver.java:     * @param tableau Simple tableau for the problem.
./optim/linear/SimplexSolver.java:     * @param tableau simplex tableau for the problem
./optim/linear/SimplexSolver.java:     * @param col the column to test
./optim/linear/SimplexSolver.java:     * @param tableau Simplex tableau for the problem.
./optim/linear/SimplexSolver.java:     * @param col Column to test the ratio of (see {@link #getPivotColumn(SimplexTableau)}).
./optim/linear/SimplexSolver.java:     * @param tableau Simple tableau for the problem.
./optim/linear/SimplexSolver.java:     * @param tableau Simple tableau for the problem.
./optim/linear/LinearObjectiveFunction.java:     * @param coefficients Coefficients for the linear equation being optimized.
./optim/linear/LinearObjectiveFunction.java:     * @param constantTerm Constant term of the linear equation.
./optim/linear/LinearObjectiveFunction.java:     * @param coefficients Coefficients for the linear equation being optimized.
./optim/linear/LinearObjectiveFunction.java:     * @param constantTerm Constant term of the linear equation.
./optim/linear/LinearObjectiveFunction.java:     * @param point Point at which linear equation must be evaluated.
./optim/linear/LinearObjectiveFunction.java:     * @param point Point at which linear equation must be evaluated.
./optim/linear/LinearObjectiveFunction.java:     * @param oos stream where object should be written
./optim/linear/LinearObjectiveFunction.java:     * @param ois stream from which the object should be read
./optim/linear/SimplexTableau.java:     * @param f Linear objective function.
./optim/linear/SimplexTableau.java:     * @param constraints Linear constraints.
./optim/linear/SimplexTableau.java:     * @param goalType Optimization goal: either {@link GoalType#MAXIMIZE}
./optim/linear/SimplexTableau.java:     * @param restrictToNonNegative Whether to restrict the variables to non-negative values.
./optim/linear/SimplexTableau.java:     * @param epsilon Amount of error to accept when checking for optimality.
./optim/linear/SimplexTableau.java:     * @param f linear objective function
./optim/linear/SimplexTableau.java:     * @param constraints linear constraints
./optim/linear/SimplexTableau.java:     * @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}
./optim/linear/SimplexTableau.java:     * @param restrictToNonNegative whether to restrict the variables to non-negative values
./optim/linear/SimplexTableau.java:     * @param epsilon amount of error to accept when checking for optimality
./optim/linear/SimplexTableau.java:     * @param maxUlps amount of error to accept in floating point comparisons
./optim/linear/SimplexTableau.java:     * @param maximize if true, goal is to maximize the objective function
./optim/linear/SimplexTableau.java:     * @param originalConstraints original (not normalized) constraints
./optim/linear/SimplexTableau.java:     * @param constraint reference constraint
./optim/linear/SimplexTableau.java:     * @param relationship relationship to count
./optim/linear/SimplexTableau.java:     * @param coefficients coefficients to sum
./optim/linear/SimplexTableau.java:     * @param col index of the column to check
./optim/linear/SimplexTableau.java:     * @param row the index of the row to check
./optim/linear/SimplexTableau.java:     * @param startColumn the column to start
./optim/linear/SimplexTableau.java:     * @param col index of the column
./optim/linear/SimplexTableau.java:     * @param src the source array
./optim/linear/SimplexTableau.java:     * @param dest the destination array
./optim/linear/SimplexTableau.java:     * @param pivotCol the pivot column
./optim/linear/SimplexTableau.java:     * @param pivotRow the pivot row
./optim/linear/SimplexTableau.java:     * @param dividendRowIndex index of the row
./optim/linear/SimplexTableau.java:     * @param divisor value of the divisor
./optim/linear/SimplexTableau.java:     * @param minuendRowIndex row index
./optim/linear/SimplexTableau.java:     * @param subtrahendRowIndex row index
./optim/linear/SimplexTableau.java:     * @param multiplier multiplication factor
./optim/linear/SimplexTableau.java:     * @param row row index
./optim/linear/SimplexTableau.java:     * @param column column index
./optim/linear/SimplexTableau.java:     * @param row row index
./optim/linear/SimplexTableau.java:     * @param column column index
./optim/linear/SimplexTableau.java:     * @param value for the entry
./optim/linear/SimplexTableau.java:     * @param row the row index
./optim/linear/SimplexTableau.java:     * @param oos stream where object should be written
./optim/linear/SimplexTableau.java:     * @param ois stream from which the object should be read
./optim/linear/Relationship.java:     * @param stringValue Display string for the relationship.
./optim/linear/LinearConstraint.java:     * @param coefficients The coefficients of the constraint (left hand side)
./optim/linear/LinearConstraint.java:     * @param relationship The type of (in)equality used in the constraint
./optim/linear/LinearConstraint.java:     * @param value The value of the constraint (right hand side)
./optim/linear/LinearConstraint.java:     * @param coefficients The coefficients of the constraint (left hand side)
./optim/linear/LinearConstraint.java:     * @param relationship The type of (in)equality used in the constraint
./optim/linear/LinearConstraint.java:     * @param value The value of the constraint (right hand side)
./optim/linear/LinearConstraint.java:     * @param lhsCoefficients The coefficients of the linear expression on the left hand side of the constraint
./optim/linear/LinearConstraint.java:     * @param lhsConstant The constant term of the linear expression on the left hand side of the constraint
./optim/linear/LinearConstraint.java:     * @param relationship The type of (in)equality used in the constraint
./optim/linear/LinearConstraint.java:     * @param rhsCoefficients The coefficients of the linear expression on the right hand side of the constraint
./optim/linear/LinearConstraint.java:     * @param rhsConstant The constant term of the linear expression on the right hand side of the constraint
./optim/linear/LinearConstraint.java:     * @param lhsCoefficients The coefficients of the linear expression on the left hand side of the constraint
./optim/linear/LinearConstraint.java:     * @param lhsConstant The constant term of the linear expression on the left hand side of the constraint
./optim/linear/LinearConstraint.java:     * @param relationship The type of (in)equality used in the constraint
./optim/linear/LinearConstraint.java:     * @param rhsCoefficients The coefficients of the linear expression on the right hand side of the constraint
./optim/linear/LinearConstraint.java:     * @param rhsConstant The constant term of the linear expression on the right hand side of the constraint
./optim/linear/LinearConstraint.java:     * @param oos stream where object should be written
./optim/linear/LinearConstraint.java:     * @param ois stream from which the object should be read
./optim/linear/LinearOptimizer.java:     * @param optData Optimization data. In addition to those documented in
./optim/linear/LinearOptimizer.java:     * @param optData Optimization data.
./optim/BaseMultivariateOptimizer.java: * @param <PAIR> Type of the point/value pair returned by the optimization
./optim/BaseMultivariateOptimizer.java:     * @param checker Convergence checker.
./optim/BaseMultivariateOptimizer.java:     * @param optData Optimization data. In addition to those documented in
./optim/BaseMultivariateOptimizer.java:     * @param optData Optimization data. The following data will be looked for:
./optim/BaseOptimizer.java: * @param <PAIR> Type of the point/value pair returned by the optimization
./optim/BaseOptimizer.java:     * @param checker Convergence checker.
./optim/BaseOptimizer.java:     * @param checker Convergence checker.
./optim/BaseOptimizer.java:     * @param maxEval Maximum number of objective function evaluations.
./optim/BaseOptimizer.java:     * @param maxIter Maximum number of algorithm iterations.
./optim/BaseOptimizer.java:     * @param optData Optimization data.
./optim/BaseOptimizer.java:     * @param optData Optimization data.
./optim/OptimizationProblem.java: * @param <PAIR> The type of value the {@link #getConvergenceChecker() convergence
./optim/AbstractConvergenceChecker.java: * @param <PAIR> Type of (point, value) pair.
./optim/AbstractConvergenceChecker.java:     * @param relativeThreshold relative tolerance threshold
./optim/AbstractConvergenceChecker.java:     * @param absoluteThreshold absolute tolerance threshold
./optimization/Target.java:     * @param observations Target values.
./optimization/PointVectorValuePair.java:     * @param point Point coordinates. This instance will store
./optimization/PointVectorValuePair.java:     * @param value Value of the objective function at the point.
./optimization/PointVectorValuePair.java:     * @param point Point coordinates.
./optimization/PointVectorValuePair.java:     * @param value Value of the objective function at the point.
./optimization/PointVectorValuePair.java:     * @param copyArray if {@code true}, the input arrays will be copied,
./optimization/PointVectorValuePair.java:         * @param point Point coordinates.
./optimization/PointVectorValuePair.java:         * @param value Value of the objective function at the point.
./optimization/MultivariateMultiStartOptimizer.java:     * @param optimizer Single-start optimizer to wrap.
./optimization/MultivariateMultiStartOptimizer.java:     * @param starts Number of starts to perform (including the
./optimization/MultivariateMultiStartOptimizer.java:     * @param generator Random vector generator to use for restarts.
./optimization/SimpleBounds.java:     * @param lB Lower bounds.
./optimization/SimpleBounds.java:     * @param uB Upper bounds.
./optimization/BaseMultivariateMultiStartOptimizer.java: * @param <FUNC> Type of the objective function to be optimized.
./optimization/BaseMultivariateMultiStartOptimizer.java:     * @param optimizer Single-start optimizer to wrap.
./optimization/BaseMultivariateMultiStartOptimizer.java:     * @param starts Number of starts to perform. If {@code starts == 1},
./optimization/BaseMultivariateMultiStartOptimizer.java:     * @param generator Random vector generator to use for restarts.
./optimization/BaseMultivariateMultiStartOptimizer.java:     * @param goal Goal type.
./optimization/SimplePointChecker.java: * @param <PAIR> Type of the (point, value) pair.
./optimization/SimplePointChecker.java:     * @param relativeThreshold relative tolerance threshold
./optimization/SimplePointChecker.java:     * @param absoluteThreshold absolute tolerance threshold
./optimization/SimplePointChecker.java:     * @param relativeThreshold Relative tolerance threshold.
./optimization/SimplePointChecker.java:     * @param absoluteThreshold Absolute tolerance threshold.
./optimization/SimplePointChecker.java:     * @param maxIter Maximum iteration count.
./optimization/SimplePointChecker.java:     * @param iteration Index of current iteration
./optimization/SimplePointChecker.java:     * @param previous Best point in the previous iteration.
./optimization/SimplePointChecker.java:     * @param current Best point in the current iteration.
./optimization/fitting/WeightedObservedPoint.java:     * @param weight weight of the measurement in the fitting process
./optimization/fitting/WeightedObservedPoint.java:     * @param x abscissa of the measurement
./optimization/fitting/WeightedObservedPoint.java:     * @param y ordinate of the measurement
./optimization/fitting/HarmonicFitter.java:     * @param optimizer Optimizer to use for the fitting.
./optimization/fitting/HarmonicFitter.java:     * @param initialGuess First guess values in the following order:
./optimization/fitting/HarmonicFitter.java:         * @param observations Sampled observations.
./optimization/fitting/HarmonicFitter.java:         * @param unsorted Input observations.
./optimization/fitting/HarmonicFitter.java:         * @param observations Observations, sorted w.r.t. abscissa.
./optimization/fitting/HarmonicFitter.java:         * @param observations Observations, sorted w.r.t. abscissa.
./optimization/fitting/CurveFitter.java: * @param <T> Function to use for the fit.
./optimization/fitting/CurveFitter.java:     * @param optimizer optimizer to use for the fitting
./optimization/fitting/CurveFitter.java:     * @param optimizer optimizer to use for the fitting
./optimization/fitting/CurveFitter.java:     * @param x abscissa of the point
./optimization/fitting/CurveFitter.java:     * @param y observed value of the point at x, after fitting we should
./optimization/fitting/CurveFitter.java:     * @param weight weight of the observed point in the fit
./optimization/fitting/CurveFitter.java:     * @param x abscissa of the point
./optimization/fitting/CurveFitter.java:     * @param y observed value of the point at x, after fitting we should
./optimization/fitting/CurveFitter.java:     * @param observed observed point to add
./optimization/fitting/CurveFitter.java:     * @param f parametric function to fit.
./optimization/fitting/CurveFitter.java:     * @param initialGuess first guess of the function parameters.
./optimization/fitting/CurveFitter.java:     * @param f parametric function to fit.
./optimization/fitting/CurveFitter.java:     * @param initialGuess first guess of the function parameters.
./optimization/fitting/CurveFitter.java:     * @param maxEval Maximum number of function evaluations.
./optimization/fitting/CurveFitter.java:         * @param f function to fit.
./optimization/fitting/CurveFitter.java:         * @param f function to fit.
./optimization/fitting/GaussianFitter.java:     * @param optimizer Optimizer to use for the fitting.
./optimization/fitting/GaussianFitter.java:     * @param initialGuess First guess values in the following order:
./optimization/fitting/GaussianFitter.java:         * @param observations Observed points from which to guess the
./optimization/fitting/GaussianFitter.java:         * @param unsorted Input observations.
./optimization/fitting/GaussianFitter.java:         * @param points Observed points, sorted.
./optimization/fitting/GaussianFitter.java:         * @param points Points to search.
./optimization/fitting/GaussianFitter.java:         * @param points Points to use for interpolation.
./optimization/fitting/GaussianFitter.java:         * @param startIdx Index within points from which to start the search for
./optimization/fitting/GaussianFitter.java:         * @param idxStep Index step for searching interpolation bounds points.
./optimization/fitting/GaussianFitter.java:         * @param y Y value for which X should be determined.
./optimization/fitting/GaussianFitter.java:         * @param points Points to use for interpolation.
./optimization/fitting/GaussianFitter.java:         * @param startIdx Index within points from which to start search for
./optimization/fitting/GaussianFitter.java:         * @param idxStep Index step for search for interpolation bounds points.
./optimization/fitting/GaussianFitter.java:         * @param y Y value for which X should be determined.
./optimization/fitting/GaussianFitter.java:         * @param value Value to test whether it is between {@code boundary1}
./optimization/fitting/GaussianFitter.java:         * @param boundary1 One end of the range.
./optimization/fitting/GaussianFitter.java:         * @param boundary2 Other end of the range.
./optimization/fitting/PolynomialFitter.java:     * @param degree Maximal degree of the polynomial.
./optimization/fitting/PolynomialFitter.java:     * @param optimizer Optimizer to use for the fitting.
./optimization/fitting/PolynomialFitter.java:     * @param optimizer Optimizer to use for the fitting.
./optimization/fitting/PolynomialFitter.java:     * @param guess First guess for the coefficients. They must be sorted in
./optimization/fitting/PolynomialFitter.java:     * @param maxEval Maximum number of evaluations of the polynomial.
./optimization/fitting/PolynomialFitter.java:     * @param guess First guess for the coefficients. They must be sorted in
./optimization/SimpleValueChecker.java:     * @param relativeThreshold relative tolerance threshold
./optimization/SimpleValueChecker.java:     * @param absoluteThreshold absolute tolerance threshold
./optimization/SimpleValueChecker.java:     * @param relativeThreshold relative tolerance threshold
./optimization/SimpleValueChecker.java:     * @param absoluteThreshold absolute tolerance threshold
./optimization/SimpleValueChecker.java:     * @param maxIter Maximum iteration count.
./optimization/SimpleValueChecker.java:     * @param iteration Index of current iteration
./optimization/SimpleValueChecker.java:     * @param previous Best point in the previous iteration.
./optimization/SimpleValueChecker.java:     * @param current Best point in the current iteration.
./optimization/BaseMultivariateVectorMultiStartOptimizer.java: * @param <FUNC> Type of the objective function to be optimized.
./optimization/BaseMultivariateVectorMultiStartOptimizer.java:     * @param optimizer Single-start optimizer to wrap.
./optimization/BaseMultivariateVectorMultiStartOptimizer.java:     * @param starts Number of starts to perform. If {@code starts == 1},
./optimization/BaseMultivariateVectorMultiStartOptimizer.java:     * @param generator Random vector generator to use for restarts.
./optimization/BaseMultivariateVectorMultiStartOptimizer.java:     * @param target Target value for the objective functions at optimum.
./optimization/BaseMultivariateVectorMultiStartOptimizer.java:     * @param weights Weights for the least-squares cost computation.
./optimization/univariate/BrentOptimizer.java:     * @param rel Relative threshold.
./optimization/univariate/BrentOptimizer.java:     * @param abs Absolute threshold.
./optimization/univariate/BrentOptimizer.java:     * @param checker Additional, user-defined, convergence checking
./optimization/univariate/BrentOptimizer.java:     * @param rel Relative threshold.
./optimization/univariate/BrentOptimizer.java:     * @param abs Absolute threshold.
./optimization/univariate/BrentOptimizer.java:     * @param a Point and value.
./optimization/univariate/BrentOptimizer.java:     * @param b Point and value.
./optimization/univariate/BrentOptimizer.java:     * @param isMinim {@code true} if the selected point must be the one with
./optimization/univariate/UnivariatePointValuePair.java:     * @param point Point.
./optimization/univariate/UnivariatePointValuePair.java:     * @param value Value of an objective function at the point
./optimization/univariate/BracketFinder.java:     * @param growLimit Expanding factor.
./optimization/univariate/BracketFinder.java:     * @param maxEvaluations Maximum number of evaluations allowed for finding
./optimization/univariate/BracketFinder.java:     * @param func Function whose optimum should be bracketed.
./optimization/univariate/BracketFinder.java:     * @param goal {@link GoalType Goal type}.
./optimization/univariate/BracketFinder.java:     * @param xA Initial point.
./optimization/univariate/BracketFinder.java:     * @param xB Initial point.
./optimization/univariate/BracketFinder.java:     * @param f Function.
./optimization/univariate/BracketFinder.java:     * @param x Argument.
./optimization/univariate/BaseUnivariateOptimizer.java: * @param <FUNC> Type of the objective function to be optimized.
./optimization/univariate/BaseUnivariateOptimizer.java:     * @param f Function to optimize.
./optimization/univariate/BaseUnivariateOptimizer.java:     * @param goalType Type of optimization goal: either
./optimization/univariate/BaseUnivariateOptimizer.java:     * @param min Lower bound for the interval.
./optimization/univariate/BaseUnivariateOptimizer.java:     * @param max Upper bound for the interval.
./optimization/univariate/BaseUnivariateOptimizer.java:     * @param maxEval Maximum number of function evaluations.
./optimization/univariate/BaseUnivariateOptimizer.java:     * @param f Function to optimize.
./optimization/univariate/BaseUnivariateOptimizer.java:     * @param goalType Type of optimization goal: either
./optimization/univariate/BaseUnivariateOptimizer.java:     * @param min Lower bound for the interval.
./optimization/univariate/BaseUnivariateOptimizer.java:     * @param max Upper bound for the interval.
./optimization/univariate/BaseUnivariateOptimizer.java:     * @param startValue Start value to use.
./optimization/univariate/BaseUnivariateOptimizer.java:     * @param maxEval Maximum number of function evaluations.
./optimization/univariate/BaseAbstractUnivariateOptimizer.java:     * @param checker Convergence checking procedure.
./optimization/univariate/BaseAbstractUnivariateOptimizer.java:     * @param point Point at which the objective function must be evaluated.
./optimization/univariate/UnivariateMultiStartOptimizer.java: * @param <FUNC> Type of the objective function to be optimized.
./optimization/univariate/UnivariateMultiStartOptimizer.java:     * @param optimizer Single-start optimizer to wrap.
./optimization/univariate/UnivariateMultiStartOptimizer.java:     * @param starts Number of starts to perform. If {@code starts == 1},
./optimization/univariate/UnivariateMultiStartOptimizer.java:     * @param generator Random generator to use for restarts.
./optimization/univariate/UnivariateMultiStartOptimizer.java:     * @param goal Goal type.
./optimization/univariate/SimpleUnivariateValueChecker.java:     * @param relativeThreshold relative tolerance threshold
./optimization/univariate/SimpleUnivariateValueChecker.java:     * @param absoluteThreshold absolute tolerance threshold
./optimization/univariate/SimpleUnivariateValueChecker.java:     * @param relativeThreshold relative tolerance threshold
./optimization/univariate/SimpleUnivariateValueChecker.java:     * @param absoluteThreshold absolute tolerance threshold
./optimization/univariate/SimpleUnivariateValueChecker.java:     * @param maxIter Maximum iteration count.
./optimization/univariate/SimpleUnivariateValueChecker.java:     * @param iteration Index of current iteration
./optimization/univariate/SimpleUnivariateValueChecker.java:     * @param previous Best point in the previous iteration.
./optimization/univariate/SimpleUnivariateValueChecker.java:     * @param current Best point in the current iteration.
./optimization/BaseMultivariateSimpleBoundsOptimizer.java: * @param <FUNC> Type of the objective function to be optimized.
./optimization/BaseMultivariateSimpleBoundsOptimizer.java:     * @param f Objective function.
./optimization/BaseMultivariateSimpleBoundsOptimizer.java:     * @param goalType Type of optimization goal: either
./optimization/BaseMultivariateSimpleBoundsOptimizer.java:     * @param startPoint Start point for optimization.
./optimization/BaseMultivariateSimpleBoundsOptimizer.java:     * @param maxEval Maximum number of function evaluations.
./optimization/BaseMultivariateSimpleBoundsOptimizer.java:     * @param lowerBound Lower bound for each of the parameters.
./optimization/BaseMultivariateSimpleBoundsOptimizer.java:     * @param upperBound Upper bound for each of the parameters.
./optimization/LeastSquaresConverter.java:     * @param function vectorial residuals function to wrap
./optimization/LeastSquaresConverter.java:     * @param observations observations to be compared to objective function to compute residuals
./optimization/LeastSquaresConverter.java:     * @param function vectorial residuals function to wrap
./optimization/LeastSquaresConverter.java:     * @param observations observations to be compared to objective function to compute residuals
./optimization/LeastSquaresConverter.java:     * @param weights weights to apply to the residuals
./optimization/LeastSquaresConverter.java:     * @param function vectorial residuals function to wrap
./optimization/LeastSquaresConverter.java:     * @param observations observations to be compared to objective function to compute residuals
./optimization/LeastSquaresConverter.java:     * @param scale scaling matrix
./optimization/SimpleVectorValueChecker.java:     * @param relativeThreshold relative tolerance threshold
./optimization/SimpleVectorValueChecker.java:     * @param absoluteThreshold absolute tolerance threshold
./optimization/SimpleVectorValueChecker.java:     * @param relativeThreshold Relative tolerance threshold.
./optimization/SimpleVectorValueChecker.java:     * @param absoluteThreshold Absolute tolerance threshold.
./optimization/SimpleVectorValueChecker.java:     * @param maxIter Maximum iteration count.
./optimization/SimpleVectorValueChecker.java:     * @param iteration Index of current iteration
./optimization/SimpleVectorValueChecker.java:     * @param previous Best point in the previous iteration.
./optimization/SimpleVectorValueChecker.java:     * @param current Best point in the current iteration.
./optimization/Weight.java:     * @param weight List of the values of the diagonal.
./optimization/Weight.java:     * @param weight Weight matrix.
./optimization/PointValuePair.java:     * @param point Point coordinates. This instance will store
./optimization/PointValuePair.java:     * @param value Value of the objective function at the point.
./optimization/PointValuePair.java:     * @param point Point coordinates.
./optimization/PointValuePair.java:     * @param value Value of the objective function at the point.
./optimization/PointValuePair.java:     * @param copyArray if {@code true}, the input array will be copied,
./optimization/PointValuePair.java:         * @param point Point coordinates.
./optimization/PointValuePair.java:         * @param value Value of the objective function at the point.
./optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java:     * @param optimizer Single-start optimizer to wrap.
./optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java:     * @param starts Number of starts to perform (including the
./optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java:     * @param generator Random vector generator to use for restarts.
./optimization/general/NonLinearConjugateGradientOptimizer.java:     * @param updateFormula formula to use for updating the &beta; parameter,
./optimization/general/NonLinearConjugateGradientOptimizer.java:     * @param updateFormula formula to use for updating the &beta; parameter,
./optimization/general/NonLinearConjugateGradientOptimizer.java:     * @param checker Convergence checker.
./optimization/general/NonLinearConjugateGradientOptimizer.java:     * @param updateFormula formula to use for updating the &beta; parameter,
./optimization/general/NonLinearConjugateGradientOptimizer.java:     * @param checker Convergence checker.
./optimization/general/NonLinearConjugateGradientOptimizer.java:     * @param lineSearchSolver Solver to use during line search.
./optimization/general/NonLinearConjugateGradientOptimizer.java:     * @param updateFormula formula to use for updating the &beta; parameter,
./optimization/general/NonLinearConjugateGradientOptimizer.java:     * @param checker Convergence checker.
./optimization/general/NonLinearConjugateGradientOptimizer.java:     * @param lineSearchSolver Solver to use during line search.
./optimization/general/NonLinearConjugateGradientOptimizer.java:     * @param preconditioner Preconditioner.
./optimization/general/NonLinearConjugateGradientOptimizer.java:     * @param initialStep initial step used to bracket the optimum in line search,
./optimization/general/NonLinearConjugateGradientOptimizer.java:     * @param f function whose root must be bracketed.
./optimization/general/NonLinearConjugateGradientOptimizer.java:     * @param a lower bound of the interval.
./optimization/general/NonLinearConjugateGradientOptimizer.java:     * @param h initial step to try.
./optimization/general/NonLinearConjugateGradientOptimizer.java:         * @param searchDirection search direction
./optimization/general/GaussNewtonOptimizer.java:     * @param checker Convergence checker.
./optimization/general/GaussNewtonOptimizer.java:     * @param useLU If {@code true}, the normal equations will be solved
./optimization/general/GaussNewtonOptimizer.java:     * @param useLU If {@code true}, the normal equations will be solved
./optimization/general/GaussNewtonOptimizer.java:     * @param checker Convergence checker.
./optimization/general/LevenbergMarquardtOptimizer.java:     * @param checker Convergence checker.
./optimization/general/LevenbergMarquardtOptimizer.java:     * @param initialStepBoundFactor Positive input variable used in
./optimization/general/LevenbergMarquardtOptimizer.java:     * @param checker Convergence checker.
./optimization/general/LevenbergMarquardtOptimizer.java:     * @param costRelativeTolerance Desired relative error in the sum of
./optimization/general/LevenbergMarquardtOptimizer.java:     * @param parRelativeTolerance Desired relative error in the approximate
./optimization/general/LevenbergMarquardtOptimizer.java:     * @param orthoTolerance Desired max cosine on the orthogonality between
./optimization/general/LevenbergMarquardtOptimizer.java:     * @param threshold Desired threshold for QR ranking. If the squared norm
./optimization/general/LevenbergMarquardtOptimizer.java:     * @param costRelativeTolerance Desired relative error in the sum of
./optimization/general/LevenbergMarquardtOptimizer.java:     * @param parRelativeTolerance Desired relative error in the approximate
./optimization/general/LevenbergMarquardtOptimizer.java:     * @param orthoTolerance Desired max cosine on the orthogonality between
./optimization/general/LevenbergMarquardtOptimizer.java:     * @param initialStepBoundFactor Positive input variable used in
./optimization/general/LevenbergMarquardtOptimizer.java:     * @param costRelativeTolerance Desired relative error in the sum of
./optimization/general/LevenbergMarquardtOptimizer.java:     * @param parRelativeTolerance Desired relative error in the approximate
./optimization/general/LevenbergMarquardtOptimizer.java:     * @param orthoTolerance Desired max cosine on the orthogonality between
./optimization/general/LevenbergMarquardtOptimizer.java:     * @param threshold Desired threshold for QR ranking. If the squared norm
./optimization/general/LevenbergMarquardtOptimizer.java:     * @param qy array containing qTy
./optimization/general/LevenbergMarquardtOptimizer.java:     * @param delta upper bound on the euclidean norm of diagR * lmDir
./optimization/general/LevenbergMarquardtOptimizer.java:     * @param diag diagonal matrix
./optimization/general/LevenbergMarquardtOptimizer.java:     * @param work1 work array
./optimization/general/LevenbergMarquardtOptimizer.java:     * @param work2 work array
./optimization/general/LevenbergMarquardtOptimizer.java:     * @param work3 work array
./optimization/general/LevenbergMarquardtOptimizer.java:     * @param qy array containing qTy
./optimization/general/LevenbergMarquardtOptimizer.java:     * @param diag diagonal matrix
./optimization/general/LevenbergMarquardtOptimizer.java:     * @param lmDiag diagonal elements associated with lmDir
./optimization/general/LevenbergMarquardtOptimizer.java:     * @param work work array
./optimization/general/LevenbergMarquardtOptimizer.java:     * @param jacobian Weighted Jacobian matrix at the current point.
./optimization/general/LevenbergMarquardtOptimizer.java:     * @param y vector to multiply (will be overwritten with the result)
./optimization/general/AbstractLeastSquaresOptimizer.java:     * @param checker Convergence checker.
./optimization/general/AbstractLeastSquaresOptimizer.java:     * @param params Model parameters at which to compute the Jacobian.
./optimization/general/AbstractLeastSquaresOptimizer.java:     * @param residuals Residuals.
./optimization/general/AbstractLeastSquaresOptimizer.java:     * @param cost Cost value.
./optimization/general/AbstractLeastSquaresOptimizer.java:     * @param threshold Singularity threshold.
./optimization/general/AbstractLeastSquaresOptimizer.java:     * @param params Model parameters.
./optimization/general/AbstractLeastSquaresOptimizer.java:     * @param threshold Singularity threshold.
./optimization/general/AbstractLeastSquaresOptimizer.java:     * @param params Model parameters.
./optimization/general/AbstractLeastSquaresOptimizer.java:     * @param covarianceSingularityThreshold Singularity threshold (see
./optimization/general/AbstractLeastSquaresOptimizer.java:     * @param f Objective function.
./optimization/general/AbstractLeastSquaresOptimizer.java:     * @param target Target value for the objective functions at optimum.
./optimization/general/AbstractLeastSquaresOptimizer.java:     * @param weights Weights for the least squares cost computation.
./optimization/general/AbstractLeastSquaresOptimizer.java:     * @param startPoint Start point for optimization.
./optimization/general/AbstractLeastSquaresOptimizer.java:     * @param maxEval Maximum number of function evaluations.
./optimization/general/AbstractLeastSquaresOptimizer.java:     * @param maxEval Allowed number of evaluations of the objective function.
./optimization/general/AbstractLeastSquaresOptimizer.java:     * @param f Objective function.
./optimization/general/AbstractLeastSquaresOptimizer.java:     * @param optData Optimization data. The following data will be looked for:
./optimization/general/AbstractLeastSquaresOptimizer.java:     * @param objectiveValue Value of the the objective function. This is
./optimization/general/AbstractLeastSquaresOptimizer.java:     * @param m Symmetric, positive-definite (weight) matrix.
./optimization/general/AbstractDifferentiableOptimizer.java:     * @param checker Convergence checker.
./optimization/general/AbstractDifferentiableOptimizer.java:     * @param evaluationPoint Point at which the gradient must be evaluated.
./optimization/general/AbstractScalarDifferentiableOptimizer.java:     * @param checker Convergence checker.
./optimization/general/AbstractScalarDifferentiableOptimizer.java:     * @param evaluationPoint Point at which the gradient must be evaluated.
./optimization/general/AbstractScalarDifferentiableOptimizer.java:     * @param f Objective function.
./optimization/general/AbstractScalarDifferentiableOptimizer.java:     * @param goalType Type of optimization goal: either
./optimization/general/AbstractScalarDifferentiableOptimizer.java:     * @param startPoint Start point for optimization.
./optimization/general/AbstractScalarDifferentiableOptimizer.java:     * @param maxEval Maximum number of function evaluations.
./optimization/general/Preconditioner.java:     * @param point current point at which the search direction was computed
./optimization/general/Preconditioner.java:     * @param r raw search direction (i.e. opposite of the gradient)
./optimization/InitialGuess.java:     * @param startPoint Initial guess.
./optimization/DifferentiableMultivariateVectorMultiStartOptimizer.java:     * @param optimizer Single-start optimizer to wrap.
./optimization/DifferentiableMultivariateVectorMultiStartOptimizer.java:     * @param starts Number of starts to perform (including the
./optimization/DifferentiableMultivariateVectorMultiStartOptimizer.java:     * @param generator Random vector generator to use for restarts.
./optimization/BaseMultivariateVectorOptimizer.java: * @param <FUNC> Type of the objective function to be optimized.
./optimization/BaseMultivariateVectorOptimizer.java:     * @param f Objective function.
./optimization/BaseMultivariateVectorOptimizer.java:     * @param target Target value for the objective functions at optimum.
./optimization/BaseMultivariateVectorOptimizer.java:     * @param weight Weights for the least squares cost computation.
./optimization/BaseMultivariateVectorOptimizer.java:     * @param startPoint Start point for optimization.
./optimization/BaseMultivariateVectorOptimizer.java:     * @param maxEval Maximum number of function evaluations.
./optimization/DifferentiableMultivariateMultiStartOptimizer.java:     * @param optimizer Single-start optimizer to wrap.
./optimization/DifferentiableMultivariateMultiStartOptimizer.java:     * @param starts Number of starts to perform (including the
./optimization/DifferentiableMultivariateMultiStartOptimizer.java:     * @param generator Random vector generator to use for restarts.
./optimization/direct/AbstractSimplex.java:     * @param n Dimension of the simplex.
./optimization/direct/AbstractSimplex.java:     * @param n Dimension of the simplex.
./optimization/direct/AbstractSimplex.java:     * @param sideLength Length of the sides of the hypercube.
./optimization/direct/AbstractSimplex.java:     * @param steps Steps along the canonical axes representing box edges. They
./optimization/direct/AbstractSimplex.java:     * @param referenceSimplex Reference simplex.
./optimization/direct/AbstractSimplex.java:     * @param evaluationFunction Evaluation function.
./optimization/direct/AbstractSimplex.java:     * @param comparator Comparator to use to sort simplex vertices from best
./optimization/direct/AbstractSimplex.java:     * @param startPoint First point of the simplex.
./optimization/direct/AbstractSimplex.java:     * @param evaluationFunction Evaluation function.
./optimization/direct/AbstractSimplex.java:     * @param comparator Comparator to use to sort simplex vertices from best to worst.
./optimization/direct/AbstractSimplex.java:     * @param pointValuePair Point to insert.
./optimization/direct/AbstractSimplex.java:     * @param comparator Comparator to use for sorting the simplex vertices
./optimization/direct/AbstractSimplex.java:     * @param index Location.
./optimization/direct/AbstractSimplex.java:     * @param index Location.
./optimization/direct/AbstractSimplex.java:     * @param point New value.
./optimization/direct/AbstractSimplex.java:     * @param points New Points.
./optimization/direct/AbstractSimplex.java:     * @param n Dimension of the hypercube.
./optimization/direct/AbstractSimplex.java:     * @param sideLength Length of the sides of the hypercube.
./optimization/direct/MultivariateFunctionPenaltyAdapter.java:     * @param bounded bounded function
./optimization/direct/MultivariateFunctionPenaltyAdapter.java:     * @param lower lower bounds for each element of the input parameters array
./optimization/direct/MultivariateFunctionPenaltyAdapter.java:     * @param upper upper bounds for each element of the input parameters array
./optimization/direct/MultivariateFunctionPenaltyAdapter.java:     * @param offset base offset of the penalty function
./optimization/direct/MultivariateFunctionPenaltyAdapter.java:     * @param scale scale of the penalty function
./optimization/direct/MultivariateFunctionPenaltyAdapter.java:     * @param point unbounded point
./optimization/direct/PowellOptimizer.java:     * @param rel Relative threshold.
./optimization/direct/PowellOptimizer.java:     * @param abs Absolute threshold.
./optimization/direct/PowellOptimizer.java:     * @param checker Convergence checker.
./optimization/direct/PowellOptimizer.java:     * @param rel Relative threshold for this optimizer.
./optimization/direct/PowellOptimizer.java:     * @param abs Absolute threshold for this optimizer.
./optimization/direct/PowellOptimizer.java:     * @param lineRel Relative threshold for the internal line search optimizer.
./optimization/direct/PowellOptimizer.java:     * @param lineAbs Absolute threshold for the internal line search optimizer.
./optimization/direct/PowellOptimizer.java:     * @param checker Convergence checker.
./optimization/direct/PowellOptimizer.java:     * @param rel Relative threshold.
./optimization/direct/PowellOptimizer.java:     * @param abs Absolute threshold.
./optimization/direct/PowellOptimizer.java:     * @param rel Relative threshold.
./optimization/direct/PowellOptimizer.java:     * @param abs Absolute threshold.
./optimization/direct/PowellOptimizer.java:     * @param lineRel Relative threshold for the internal line search optimizer.
./optimization/direct/PowellOptimizer.java:     * @param lineAbs Absolute threshold for the internal line search optimizer.
./optimization/direct/PowellOptimizer.java:     * @param p Point used in the line search.
./optimization/direct/PowellOptimizer.java:     * @param d Direction used in the line search.
./optimization/direct/PowellOptimizer.java:     * @param optimum Optimum found by the line search.
./optimization/direct/PowellOptimizer.java:         * @param rel Relative threshold.
./optimization/direct/PowellOptimizer.java:         * @param abs Absolute threshold.
./optimization/direct/PowellOptimizer.java:         * @param p Starting point.
./optimization/direct/PowellOptimizer.java:         * @param d Search direction.
./optimization/direct/SimplexOptimizer.java:     * @param checker Convergence checker.
./optimization/direct/SimplexOptimizer.java:     * @param rel Relative threshold.
./optimization/direct/SimplexOptimizer.java:     * @param abs Absolute threshold.
./optimization/direct/SimplexOptimizer.java:     * @param simplex Simplex.
./optimization/direct/SimplexOptimizer.java:     * @param maxEval Allowed number of evaluations of the objective function.
./optimization/direct/SimplexOptimizer.java:     * @param f Objective function.
./optimization/direct/SimplexOptimizer.java:     * @param goalType Optimization type.
./optimization/direct/SimplexOptimizer.java:     * @param optData Optimization data. The following data will be looked for:
./optimization/direct/SimplexOptimizer.java:     * @param optData Optimization data. The following data will be looked for:
./optimization/direct/BOBYQAOptimizer.java:     * @param numberOfInterpolationPoints Number of interpolation conditions.
./optimization/direct/BOBYQAOptimizer.java:     * @param numberOfInterpolationPoints Number of interpolation conditions.
./optimization/direct/BOBYQAOptimizer.java:     * @param initialTrustRegionRadius Initial trust region radius.
./optimization/direct/BOBYQAOptimizer.java:     * @param stoppingTrustRegionRadius Stopping trust region radius.
./optimization/direct/BOBYQAOptimizer.java:     * @param lowerBound Lower bounds.
./optimization/direct/BOBYQAOptimizer.java:     * @param upperBound Upper bounds.
./optimization/direct/BOBYQAOptimizer.java:     * @param lowerBound Lower bounds.
./optimization/direct/BOBYQAOptimizer.java:     * @param upperBound Upper bounds.
./optimization/direct/BOBYQAOptimizer.java:     * @param knew
./optimization/direct/BOBYQAOptimizer.java:     * @param adelt
./optimization/direct/BOBYQAOptimizer.java:     * @param lowerBound Lower bounds.
./optimization/direct/BOBYQAOptimizer.java:     * @param upperBound Upper bounds.
./optimization/direct/BOBYQAOptimizer.java:     * @param delta
./optimization/direct/BOBYQAOptimizer.java:     * @param gnew
./optimization/direct/BOBYQAOptimizer.java:     * @param xbdi
./optimization/direct/BOBYQAOptimizer.java:     * @param s
./optimization/direct/BOBYQAOptimizer.java:     * @param hs
./optimization/direct/BOBYQAOptimizer.java:     * @param hred
./optimization/direct/BOBYQAOptimizer.java:     * @param beta
./optimization/direct/BOBYQAOptimizer.java:     * @param denom
./optimization/direct/BOBYQAOptimizer.java:     * @param knew
./optimization/direct/BOBYQAOptimizer.java:     * @param lowerBound Lower bounds (constraints) of the objective variables.
./optimization/direct/BOBYQAOptimizer.java:     * @param upperBound Upperer bounds (constraints) of the objective variables.
./optimization/direct/MultivariateFunctionMappingAdapter.java:     * @param bounded bounded function
./optimization/direct/MultivariateFunctionMappingAdapter.java:     * @param lower lower bounds for each element of the input parameters array
./optimization/direct/MultivariateFunctionMappingAdapter.java:     * @param upper upper bounds for each element of the input parameters array
./optimization/direct/MultivariateFunctionMappingAdapter.java:     * @param point unbounded value
./optimization/direct/MultivariateFunctionMappingAdapter.java:     * @param point bounded value
./optimization/direct/MultivariateFunctionMappingAdapter.java:     * @param point unbounded value
./optimization/direct/MultivariateFunctionMappingAdapter.java:         * @param y unbounded value
./optimization/direct/MultivariateFunctionMappingAdapter.java:         * @param x bounded value
./optimization/direct/MultivariateFunctionMappingAdapter.java:         * @param lower lower bound
./optimization/direct/MultivariateFunctionMappingAdapter.java:         * @param upper upper bound
./optimization/direct/MultivariateFunctionMappingAdapter.java:         * @param lower lower bound
./optimization/direct/MultivariateFunctionMappingAdapter.java:         * @param upper upper bound
./optimization/direct/BaseAbstractMultivariateOptimizer.java: * @param <FUNC> Type of the objective function to be optimized.
./optimization/direct/BaseAbstractMultivariateOptimizer.java:     * @param checker Convergence checker.
./optimization/direct/BaseAbstractMultivariateOptimizer.java:     * @param point Point at which the objective function must be evaluated.
./optimization/direct/BaseAbstractMultivariateOptimizer.java:     * @param maxEval Allowed number of evaluations of the objective function.
./optimization/direct/BaseAbstractMultivariateOptimizer.java:     * @param f Objective function.
./optimization/direct/BaseAbstractMultivariateOptimizer.java:     * @param goalType Optimization type.
./optimization/direct/BaseAbstractMultivariateOptimizer.java:     * @param optData Optimization data. The following data will be looked for:
./optimization/direct/BaseAbstractMultivariateOptimizer.java:     * @param f Objective function.
./optimization/direct/BaseAbstractMultivariateOptimizer.java:     * @param goalType Type of optimization goal: either
./optimization/direct/BaseAbstractMultivariateOptimizer.java:     * @param startPoint Start point for optimization.
./optimization/direct/BaseAbstractMultivariateOptimizer.java:     * @param maxEval Maximum number of function evaluations.
./optimization/direct/BaseAbstractMultivariateOptimizer.java:     * @param maxEval Allowed number of evaluations of the objective function.
./optimization/direct/BaseAbstractMultivariateOptimizer.java:     * @param f Objective function.
./optimization/direct/BaseAbstractMultivariateOptimizer.java:     * @param goalType Optimization type.
./optimization/direct/BaseAbstractMultivariateOptimizer.java:     * @param optData Optimization data. The following data will be looked for:
./optimization/direct/BaseAbstractMultivariateOptimizer.java:     * @param optData Optimization data. The following data will be looked for:
./optimization/direct/NelderMeadSimplex.java:     * @param n Dimension of the simplex.
./optimization/direct/NelderMeadSimplex.java:     * @param n Dimension of the simplex.
./optimization/direct/NelderMeadSimplex.java:     * @param sideLength Length of the sides of the default (hypercube)
./optimization/direct/NelderMeadSimplex.java:     * @param n Dimension of the simplex. See
./optimization/direct/NelderMeadSimplex.java:     * @param sideLength Length of the sides of the default (hypercube)
./optimization/direct/NelderMeadSimplex.java:     * @param rho Reflection coefficient.
./optimization/direct/NelderMeadSimplex.java:     * @param khi Expansion coefficient.
./optimization/direct/NelderMeadSimplex.java:     * @param gamma Contraction coefficient.
./optimization/direct/NelderMeadSimplex.java:     * @param sigma Shrinkage coefficient.
./optimization/direct/NelderMeadSimplex.java:     * @param n Dimension of the simplex. See
./optimization/direct/NelderMeadSimplex.java:     * @param rho Reflection coefficient.
./optimization/direct/NelderMeadSimplex.java:     * @param khi Expansion coefficient.
./optimization/direct/NelderMeadSimplex.java:     * @param gamma Contraction coefficient.
./optimization/direct/NelderMeadSimplex.java:     * @param sigma Shrinkage coefficient.
./optimization/direct/NelderMeadSimplex.java:     * @param steps Steps along the canonical axes representing box edges.
./optimization/direct/NelderMeadSimplex.java:     * @param steps Steps along the canonical axes representing box edges.
./optimization/direct/NelderMeadSimplex.java:     * @param rho Reflection coefficient.
./optimization/direct/NelderMeadSimplex.java:     * @param khi Expansion coefficient.
./optimization/direct/NelderMeadSimplex.java:     * @param gamma Contraction coefficient.
./optimization/direct/NelderMeadSimplex.java:     * @param sigma Shrinkage coefficient.
./optimization/direct/NelderMeadSimplex.java:     * @param referenceSimplex Reference simplex. See
./optimization/direct/NelderMeadSimplex.java:     * @param referenceSimplex Reference simplex. See
./optimization/direct/NelderMeadSimplex.java:     * @param rho Reflection coefficient.
./optimization/direct/NelderMeadSimplex.java:     * @param khi Expansion coefficient.
./optimization/direct/NelderMeadSimplex.java:     * @param gamma Contraction coefficient.
./optimization/direct/NelderMeadSimplex.java:     * @param sigma Shrinkage coefficient.
./optimization/direct/BaseAbstractMultivariateVectorOptimizer.java: * @param <FUNC> the type of the objective function to be optimized
./optimization/direct/BaseAbstractMultivariateVectorOptimizer.java:     * @param checker Convergence checker.
./optimization/direct/BaseAbstractMultivariateVectorOptimizer.java:     * @param point Point at which the objective function must be evaluated.
./optimization/direct/BaseAbstractMultivariateVectorOptimizer.java:     * @param maxEval Allowed number of evaluations of the objective function.
./optimization/direct/BaseAbstractMultivariateVectorOptimizer.java:     * @param f Objective function.
./optimization/direct/BaseAbstractMultivariateVectorOptimizer.java:     * @param optData Optimization data. The following data will be looked for:
./optimization/direct/BaseAbstractMultivariateVectorOptimizer.java:     * @param f Objective function.
./optimization/direct/BaseAbstractMultivariateVectorOptimizer.java:     * @param t Target value for the objective functions at optimum.
./optimization/direct/BaseAbstractMultivariateVectorOptimizer.java:     * @param w Weights for the least squares cost computation.
./optimization/direct/BaseAbstractMultivariateVectorOptimizer.java:     * @param startPoint Start point for optimization.
./optimization/direct/BaseAbstractMultivariateVectorOptimizer.java:     * @param maxEval Maximum number of function evaluations.
./optimization/direct/BaseAbstractMultivariateVectorOptimizer.java:     * @param maxEval Allowed number of evaluations of the objective function.
./optimization/direct/BaseAbstractMultivariateVectorOptimizer.java:     * @param f Objective function.
./optimization/direct/BaseAbstractMultivariateVectorOptimizer.java:     * @param optData Optimization data. The following data will be looked for:
./optimization/direct/BaseAbstractMultivariateVectorOptimizer.java:     * @param optData Optimization data. The following data will be looked for:
./optimization/direct/CMAESOptimizer.java:     * @param lambda Population size.
./optimization/direct/CMAESOptimizer.java:     * @param lambda Population size.
./optimization/direct/CMAESOptimizer.java:     * @param inputSigma Initial standard deviations to sample new points
./optimization/direct/CMAESOptimizer.java:     * @param lambda Population size.
./optimization/direct/CMAESOptimizer.java:     * @param inputSigma Initial standard deviations to sample new points
./optimization/direct/CMAESOptimizer.java:     * @param maxIterations Maximal number of iterations.
./optimization/direct/CMAESOptimizer.java:     * @param stopFitness Whether to stop if objective function value is smaller than
./optimization/direct/CMAESOptimizer.java:     * @param isActiveCMA Chooses the covariance matrix update method.
./optimization/direct/CMAESOptimizer.java:     * @param diagonalOnly Number of initial iterations, where the covariance matrix
./optimization/direct/CMAESOptimizer.java:     * @param checkFeasableCount Determines how often new random objective variables are
./optimization/direct/CMAESOptimizer.java:     * @param random Random generator.
./optimization/direct/CMAESOptimizer.java:     * @param generateStatistics Whether statistic data is collected.
./optimization/direct/CMAESOptimizer.java:     * @param lambda Population size.
./optimization/direct/CMAESOptimizer.java:     * @param inputSigma Initial standard deviations to sample new points
./optimization/direct/CMAESOptimizer.java:     * @param maxIterations Maximal number of iterations.
./optimization/direct/CMAESOptimizer.java:     * @param stopFitness Whether to stop if objective function value is smaller than
./optimization/direct/CMAESOptimizer.java:     * @param isActiveCMA Chooses the covariance matrix update method.
./optimization/direct/CMAESOptimizer.java:     * @param diagonalOnly Number of initial iterations, where the covariance matrix
./optimization/direct/CMAESOptimizer.java:     * @param checkFeasableCount Determines how often new random objective variables are
./optimization/direct/CMAESOptimizer.java:     * @param random Random generator.
./optimization/direct/CMAESOptimizer.java:     * @param generateStatistics Whether statistic data is collected.
./optimization/direct/CMAESOptimizer.java:     * @param checker Convergence checker.
./optimization/direct/CMAESOptimizer.java:     * @param maxIterations Maximal number of iterations.
./optimization/direct/CMAESOptimizer.java:     * @param stopFitness Whether to stop if objective function value is smaller than
./optimization/direct/CMAESOptimizer.java:     * @param isActiveCMA Chooses the covariance matrix update method.
./optimization/direct/CMAESOptimizer.java:     * @param diagonalOnly Number of initial iterations, where the covariance matrix
./optimization/direct/CMAESOptimizer.java:     * @param checkFeasableCount Determines how often new random objective variables are
./optimization/direct/CMAESOptimizer.java:     * @param random Random generator.
./optimization/direct/CMAESOptimizer.java:     * @param generateStatistics Whether statistic data is collected.
./optimization/direct/CMAESOptimizer.java:     * @param checker Convergence checker.
./optimization/direct/CMAESOptimizer.java:         * @param s Sigma values.
./optimization/direct/CMAESOptimizer.java:         * @param size Population size.
./optimization/direct/CMAESOptimizer.java:     * @param maxEval Allowed number of evaluations of the objective function.
./optimization/direct/CMAESOptimizer.java:     * @param f Objective function.
./optimization/direct/CMAESOptimizer.java:     * @param goalType Optimization type.
./optimization/direct/CMAESOptimizer.java:     * @param optData Optimization data. The following data will be looked for:
./optimization/direct/CMAESOptimizer.java:     * @param optData Optimization data. The following data will be looked for:
./optimization/direct/CMAESOptimizer.java:     * @param guess Initial guess for the arguments of the fitness function.
./optimization/direct/CMAESOptimizer.java:     * @param zmean Weighted row matrix of the gaussian random numbers generating
./optimization/direct/CMAESOptimizer.java:     * @param xold xmean matrix of the previous generation.
./optimization/direct/CMAESOptimizer.java:     * @param hsig Flag indicating a small correction.
./optimization/direct/CMAESOptimizer.java:     * @param bestArz Fitness-sorted matrix of the gaussian random values of the
./optimization/direct/CMAESOptimizer.java:     * @param hsig Flag indicating a small correction.
./optimization/direct/CMAESOptimizer.java:     * @param bestArx Fitness-sorted matrix of the argument vectors producing the
./optimization/direct/CMAESOptimizer.java:     * @param arz Unsorted matrix containing the gaussian random values of the
./optimization/direct/CMAESOptimizer.java:     * @param arindex Indices indicating the fitness-order of the current offspring.
./optimization/direct/CMAESOptimizer.java:     * @param xold xmean matrix of the previous generation.
./optimization/direct/CMAESOptimizer.java:     * @param negccov Negative covariance factor.
./optimization/direct/CMAESOptimizer.java:     * @param vals History queue.
./optimization/direct/CMAESOptimizer.java:     * @param val Current best fitness value.
./optimization/direct/CMAESOptimizer.java:     * @param doubles Array of values to be sorted.
./optimization/direct/CMAESOptimizer.java:         * @param value Value to compare.
./optimization/direct/CMAESOptimizer.java:         * @param index Index into sorted array.
./optimization/direct/CMAESOptimizer.java:         * @param point Normalized objective variables.
./optimization/direct/CMAESOptimizer.java:         * @param x Normalized objective variables.
./optimization/direct/CMAESOptimizer.java:         * @param valueRange Adjusts the penalty computation.
./optimization/direct/CMAESOptimizer.java:         * @param x Normalized objective variables.
./optimization/direct/CMAESOptimizer.java:         * @param x Normalized objective variables.
./optimization/direct/CMAESOptimizer.java:         * @param repaired Repaired objective variables.
./optimization/direct/CMAESOptimizer.java:     * @param m Input matrix
./optimization/direct/CMAESOptimizer.java:     * @param m Input matrix.
./optimization/direct/CMAESOptimizer.java:     * @param m Input matrix.
./optimization/direct/CMAESOptimizer.java:     * @param m Input matrix 1.
./optimization/direct/CMAESOptimizer.java:     * @param n Input matrix 2.
./optimization/direct/CMAESOptimizer.java:     * @param m Input matrix 1.
./optimization/direct/CMAESOptimizer.java:     * @param n Input matrix 2.
./optimization/direct/CMAESOptimizer.java:     * @param m Input matrix.
./optimization/direct/CMAESOptimizer.java:     * @param cols Columns to select.
./optimization/direct/CMAESOptimizer.java:     * @param m Input matrix.
./optimization/direct/CMAESOptimizer.java:     * @param k Diagonal position.
./optimization/direct/CMAESOptimizer.java:     * @param m Input matrix.
./optimization/direct/CMAESOptimizer.java:     * @param m Input matrix.
./optimization/direct/CMAESOptimizer.java:     * @param m1 Source matrix.
./optimization/direct/CMAESOptimizer.java:     * @param col1 Source column.
./optimization/direct/CMAESOptimizer.java:     * @param m2 Target matrix.
./optimization/direct/CMAESOptimizer.java:     * @param col2 Target column.
./optimization/direct/CMAESOptimizer.java:     * @param n Number of rows.
./optimization/direct/CMAESOptimizer.java:     * @param m Number of columns.
./optimization/direct/CMAESOptimizer.java:     * @param n Number of rows.
./optimization/direct/CMAESOptimizer.java:     * @param m Number of columns.
./optimization/direct/CMAESOptimizer.java:     * @param n Number of rows.
./optimization/direct/CMAESOptimizer.java:     * @param m Number of columns.
./optimization/direct/CMAESOptimizer.java:     * @param mat Input matrix.
./optimization/direct/CMAESOptimizer.java:     * @param n Number of row replicates.
./optimization/direct/CMAESOptimizer.java:     * @param m Number of column replicates.
./optimization/direct/CMAESOptimizer.java:     * @param start Start value.
./optimization/direct/CMAESOptimizer.java:     * @param end End value.
./optimization/direct/CMAESOptimizer.java:     * @param step Step size.
./optimization/direct/CMAESOptimizer.java:     * @param m Input matrix.
./optimization/direct/CMAESOptimizer.java:     * @param m Input matrix.
./optimization/direct/CMAESOptimizer.java:     * @param m Input array.
./optimization/direct/CMAESOptimizer.java:     * @param m Input array.
./optimization/direct/CMAESOptimizer.java:     * @param indices Input index array.
./optimization/direct/CMAESOptimizer.java:     * @param indices Input index array.
./optimization/direct/CMAESOptimizer.java:     * @param size Length of random array.
./optimization/direct/CMAESOptimizer.java:     * @param size Number of rows.
./optimization/direct/CMAESOptimizer.java:     * @param popSize Population size.
./optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java: * @param <FUNC> Type of the objective function to be optimized.
./optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java:     * @param checker Convergence checker.
./optimization/direct/MultiDirectionalSimplex.java:     * @param n Dimension of the simplex.
./optimization/direct/MultiDirectionalSimplex.java:     * @param n Dimension of the simplex.
./optimization/direct/MultiDirectionalSimplex.java:     * @param sideLength Length of the sides of the default (hypercube)
./optimization/direct/MultiDirectionalSimplex.java:     * @param n Dimension of the simplex. See
./optimization/direct/MultiDirectionalSimplex.java:     * @param khi Expansion coefficient.
./optimization/direct/MultiDirectionalSimplex.java:     * @param gamma Contraction coefficient.
./optimization/direct/MultiDirectionalSimplex.java:     * @param n Dimension of the simplex. See
./optimization/direct/MultiDirectionalSimplex.java:     * @param sideLength Length of the sides of the default (hypercube)
./optimization/direct/MultiDirectionalSimplex.java:     * @param khi Expansion coefficient.
./optimization/direct/MultiDirectionalSimplex.java:     * @param gamma Contraction coefficient.
./optimization/direct/MultiDirectionalSimplex.java:     * @param steps Steps along the canonical axes representing box edges.
./optimization/direct/MultiDirectionalSimplex.java:     * @param steps Steps along the canonical axes representing box edges.
./optimization/direct/MultiDirectionalSimplex.java:     * @param khi Expansion coefficient.
./optimization/direct/MultiDirectionalSimplex.java:     * @param gamma Contraction coefficient.
./optimization/direct/MultiDirectionalSimplex.java:     * @param referenceSimplex Reference simplex. See
./optimization/direct/MultiDirectionalSimplex.java:     * @param referenceSimplex Reference simplex. See
./optimization/direct/MultiDirectionalSimplex.java:     * @param khi Expansion coefficient.
./optimization/direct/MultiDirectionalSimplex.java:     * @param gamma Contraction coefficient.
./optimization/direct/MultiDirectionalSimplex.java:     * @param evaluationFunction Evaluation function.
./optimization/direct/MultiDirectionalSimplex.java:     * @param original Original simplex (to be preserved).
./optimization/direct/MultiDirectionalSimplex.java:     * @param coeff Linear coefficient.
./optimization/direct/MultiDirectionalSimplex.java:     * @param comparator Comparator to use to sort simplex vertices from best
./optimization/ConvergenceChecker.java: * @param <PAIR> Type of the (point, objective value) pair.
./optimization/ConvergenceChecker.java:     * @param iteration Current iteration.
./optimization/ConvergenceChecker.java:     * @param previous Best point in the previous iteration.
./optimization/ConvergenceChecker.java:     * @param current Best point in the current iteration.
./optimization/MultivariateDifferentiableMultiStartOptimizer.java:     * @param optimizer Single-start optimizer to wrap.
./optimization/MultivariateDifferentiableMultiStartOptimizer.java:     * @param starts Number of starts to perform (including the
./optimization/MultivariateDifferentiableMultiStartOptimizer.java:     * @param generator Random vector generator to use for restarts.
./optimization/linear/SimplexSolver.java:     * @param epsilon the amount of error to accept for algorithm convergence
./optimization/linear/SimplexSolver.java:     * @param maxUlps amount of error to accept in floating point comparisons
./optimization/linear/SimplexSolver.java:     * @param tableau simple tableau for the problem
./optimization/linear/SimplexSolver.java:     * @param tableau simple tableau for the problem
./optimization/linear/SimplexSolver.java:     * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
./optimization/linear/SimplexSolver.java:     * @param tableau simple tableau for the problem
./optimization/linear/SimplexSolver.java:     * @param tableau simple tableau for the problem
./optimization/linear/LinearObjectiveFunction.java:     * @param coefficients The coefficients for the linear equation being optimized
./optimization/linear/LinearObjectiveFunction.java:     * @param constantTerm The constant term of the linear equation
./optimization/linear/LinearObjectiveFunction.java:     * @param coefficients The coefficients for the linear equation being optimized
./optimization/linear/LinearObjectiveFunction.java:     * @param constantTerm The constant term of the linear equation
./optimization/linear/LinearObjectiveFunction.java:     * @param point point at which linear equation must be evaluated
./optimization/linear/LinearObjectiveFunction.java:     * @param point point at which linear equation must be evaluated
./optimization/linear/LinearObjectiveFunction.java:     * @param oos stream where object should be written
./optimization/linear/LinearObjectiveFunction.java:     * @param ois stream from which the object should be read
./optimization/linear/SimplexTableau.java:     * @param f linear objective function
./optimization/linear/SimplexTableau.java:     * @param constraints linear constraints
./optimization/linear/SimplexTableau.java:     * @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}
./optimization/linear/SimplexTableau.java:     * @param restrictToNonNegative whether to restrict the variables to non-negative values
./optimization/linear/SimplexTableau.java:     * @param epsilon amount of error to accept when checking for optimality
./optimization/linear/SimplexTableau.java:     * @param f linear objective function
./optimization/linear/SimplexTableau.java:     * @param constraints linear constraints
./optimization/linear/SimplexTableau.java:     * @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}
./optimization/linear/SimplexTableau.java:     * @param restrictToNonNegative whether to restrict the variables to non-negative values
./optimization/linear/SimplexTableau.java:     * @param epsilon amount of error to accept when checking for optimality
./optimization/linear/SimplexTableau.java:     * @param maxUlps amount of error to accept in floating point comparisons
./optimization/linear/SimplexTableau.java:     * @param maximize if true, goal is to maximize the objective function
./optimization/linear/SimplexTableau.java:     * @param originalConstraints original (not normalized) constraints
./optimization/linear/SimplexTableau.java:     * @param constraint reference constraint
./optimization/linear/SimplexTableau.java:     * @param relationship relationship to count
./optimization/linear/SimplexTableau.java:     * @param coefficients coefficients to sum
./optimization/linear/SimplexTableau.java:     * @param col index of the column to check
./optimization/linear/SimplexTableau.java:     * @param src the source array
./optimization/linear/SimplexTableau.java:     * @param dest the destination array
./optimization/linear/SimplexTableau.java:     * @param dividendRow index of the row
./optimization/linear/SimplexTableau.java:     * @param divisor value of the divisor
./optimization/linear/SimplexTableau.java:     * @param minuendRow row index
./optimization/linear/SimplexTableau.java:     * @param subtrahendRow row index
./optimization/linear/SimplexTableau.java:     * @param multiple multiplication factor
./optimization/linear/SimplexTableau.java:     * @param row row index
./optimization/linear/SimplexTableau.java:     * @param column column index
./optimization/linear/SimplexTableau.java:     * @param row row index
./optimization/linear/SimplexTableau.java:     * @param column column index
./optimization/linear/SimplexTableau.java:     * @param value for the entry
./optimization/linear/SimplexTableau.java:     * @param oos stream where object should be written
./optimization/linear/SimplexTableau.java:     * @param ois stream from which the object should be read
./optimization/linear/Relationship.java:     * @param stringValue display string for the relationship
./optimization/linear/LinearConstraint.java:     * @param coefficients The coefficients of the constraint (left hand side)
./optimization/linear/LinearConstraint.java:     * @param relationship The type of (in)equality used in the constraint
./optimization/linear/LinearConstraint.java:     * @param value The value of the constraint (right hand side)
./optimization/linear/LinearConstraint.java:     * @param coefficients The coefficients of the constraint (left hand side)
./optimization/linear/LinearConstraint.java:     * @param relationship The type of (in)equality used in the constraint
./optimization/linear/LinearConstraint.java:     * @param value The value of the constraint (right hand side)
./optimization/linear/LinearConstraint.java:     * @param lhsCoefficients The coefficients of the linear expression on the left hand side of the constraint
./optimization/linear/LinearConstraint.java:     * @param lhsConstant The constant term of the linear expression on the left hand side of the constraint
./optimization/linear/LinearConstraint.java:     * @param relationship The type of (in)equality used in the constraint
./optimization/linear/LinearConstraint.java:     * @param rhsCoefficients The coefficients of the linear expression on the right hand side of the constraint
./optimization/linear/LinearConstraint.java:     * @param rhsConstant The constant term of the linear expression on the right hand side of the constraint
./optimization/linear/LinearConstraint.java:     * @param lhsCoefficients The coefficients of the linear expression on the left hand side of the constraint
./optimization/linear/LinearConstraint.java:     * @param lhsConstant The constant term of the linear expression on the left hand side of the constraint
./optimization/linear/LinearConstraint.java:     * @param relationship The type of (in)equality used in the constraint
./optimization/linear/LinearConstraint.java:     * @param rhsCoefficients The coefficients of the linear expression on the right hand side of the constraint
./optimization/linear/LinearConstraint.java:     * @param rhsConstant The constant term of the linear expression on the right hand side of the constraint
./optimization/linear/LinearConstraint.java:     * @param oos stream where object should be written
./optimization/linear/LinearConstraint.java:     * @param ois stream from which the object should be read
./optimization/linear/LinearOptimizer.java:     * @param maxIterations maximal number of function calls
./optimization/linear/LinearOptimizer.java:     * @param f linear objective function
./optimization/linear/LinearOptimizer.java:     * @param constraints linear constraints
./optimization/linear/LinearOptimizer.java:     * @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}
./optimization/linear/LinearOptimizer.java:     * @param restrictToNonNegative whether to restrict the variables to non-negative values
./optimization/BaseMultivariateOptimizer.java: * @param <FUNC> Type of the objective function to be optimized.
./optimization/BaseMultivariateOptimizer.java:     * @param f Objective function.
./optimization/BaseMultivariateOptimizer.java:     * @param goalType Type of optimization goal: either
./optimization/BaseMultivariateOptimizer.java:     * @param startPoint Start point for optimization.
./optimization/BaseMultivariateOptimizer.java:     * @param maxEval Maximum number of function evaluations.
./optimization/BaseOptimizer.java: * @param <PAIR> Type of the point/objective pair.
./optimization/AbstractConvergenceChecker.java: * @param <PAIR> Type of (point, value) pair.
./optimization/AbstractConvergenceChecker.java:     * @param relativeThreshold relative tolerance threshold
./optimization/AbstractConvergenceChecker.java:     * @param absoluteThreshold absolute tolerance threshold
./primes/SmallPrimes.java:     * @param n the number to factor, must be &gt; 0.
./primes/SmallPrimes.java:     * @param factors the list where to add the factors.
./primes/SmallPrimes.java:     * @param n the number to factorize, must be >= PRIME_LAST+2 and must not contain any factor below PRIME_LAST+2
./primes/SmallPrimes.java:     * @param maxFactor the upper bound of trial division: if it is reached, the method gives up and returns n.
./primes/SmallPrimes.java:     * @param factors the list where to add the factors.
./primes/SmallPrimes.java:     * @param n the number to factor
./primes/SmallPrimes.java:     * @param n number to test: an odd integer &ge; 3
./primes/Primes.java:     * @param n number to test.
./primes/Primes.java:     * @param n a positive number.
./primes/Primes.java:     * @param n number to factorize: must be &ge; 2
./primes/PollardRho.java:     * @param n number to factors, must be &gt; 0
./primes/PollardRho.java:     * @param n number to factor, must be semi-prime.
./primes/PollardRho.java:     * @param a first number, must be &ge; 0
./primes/PollardRho.java:     * @param b second number, must be &ge; 0
./random/AbstractWell.java:     * @param k number of bits in the pool (not necessarily a multiple of 32)
./random/AbstractWell.java:     * @param m1 first parameter of the algorithm
./random/AbstractWell.java:     * @param m2 second parameter of the algorithm
./random/AbstractWell.java:     * @param m3 third parameter of the algorithm
./random/AbstractWell.java:     * @param k number of bits in the pool (not necessarily a multiple of 32)
./random/AbstractWell.java:     * @param m1 first parameter of the algorithm
./random/AbstractWell.java:     * @param m2 second parameter of the algorithm
./random/AbstractWell.java:     * @param m3 third parameter of the algorithm
./random/AbstractWell.java:     * @param seed the initial seed (32 bits integer)
./random/AbstractWell.java:     * @param k number of bits in the pool (not necessarily a multiple of 32)
./random/AbstractWell.java:     * @param m1 first parameter of the algorithm
./random/AbstractWell.java:     * @param m2 second parameter of the algorithm
./random/AbstractWell.java:     * @param m3 third parameter of the algorithm
./random/AbstractWell.java:     * @param seed the initial seed (32 bits integers array), if null
./random/AbstractWell.java:     * @param k number of bits in the pool (not necessarily a multiple of 32)
./random/AbstractWell.java:     * @param m1 first parameter of the algorithm
./random/AbstractWell.java:     * @param m2 second parameter of the algorithm
./random/AbstractWell.java:     * @param m3 third parameter of the algorithm
./random/AbstractWell.java:     * @param seed the initial seed (64 bits integer)
./random/AbstractWell.java:     * @param seed the initial seed (32 bits integer)
./random/AbstractWell.java:     * @param seed the initial seed (32 bits integers array). If null
./random/AbstractWell.java:     * @param seed the initial seed (64 bits integer)
./random/ISAACRandom.java:     * @param seed Initial seed.
./random/ISAACRandom.java:     * @param seed Initial seed. If {@code null}, the seed will be related
./random/ISAACRandom.java:     * @param start First index into {@link #mem} array.
./random/RandomData.java:     * @param len the length of the string to be generated
./random/RandomData.java:     * @param lower lower bound for generated integer
./random/RandomData.java:     * @param upper upper bound for generated integer
./random/RandomData.java:     * @param lower lower bound for generated long integer
./random/RandomData.java:     * @param upper upper bound for generated long integer
./random/RandomData.java:     * @param len the length of the string to be generated
./random/RandomData.java:     * @param lower lower bound for generated integer
./random/RandomData.java:     * @param upper upper bound for generated integer
./random/RandomData.java:     * @param lower lower bound for generated integer
./random/RandomData.java:     * @param upper upper bound for generated integer
./random/RandomData.java:     * @param mean the mean of the Poisson distribution
./random/RandomData.java:     * @param mu the mean of the distribution
./random/RandomData.java:     * @param sigma the standard deviation of the distribution
./random/RandomData.java:     * @param mean the mean of the distribution
./random/RandomData.java:     * @param lower the exclusive lower bound of the support
./random/RandomData.java:     * @param upper the exclusive upper bound of the support
./random/RandomData.java:     * @param lower the lower bound of the support
./random/RandomData.java:     * @param upper the exclusive upper bound of the support
./random/RandomData.java:     * @param lowerInclusive {@code true} if the lower bound is inclusive
./random/RandomData.java:     * @param n the domain of the permutation
./random/RandomData.java:     * @param k the size of the permutation
./random/RandomData.java:     * @param c the collection to be sampled
./random/RandomData.java:     * @param k the size of the sample
./random/SynchronizedRandomGenerator.java:     * @param rng Generator whose methods will be called through
./random/UncorrelatedRandomVectorGenerator.java:   * @param mean expected mean values for each component
./random/UncorrelatedRandomVectorGenerator.java:   * @param standardDeviation standard deviation for each component
./random/UncorrelatedRandomVectorGenerator.java:   * @param generator underlying generator for uncorrelated normalized
./random/UncorrelatedRandomVectorGenerator.java:   * @param dimension dimension of the vectors to generate
./random/UncorrelatedRandomVectorGenerator.java:   * @param generator underlying generator for uncorrelated normalized
./random/Well44497a.java:     * @param seed the initial seed (32 bits integer)
./random/Well44497a.java:     * @param seed the initial seed (32 bits integers array), if null
./random/Well44497a.java:     * @param seed the initial seed (64 bits integer)
./random/BitsStreamGenerator.java:     * @param bits number of random bits to produce
./random/BitsStreamGenerator.java:     * @param n the bound on the random number to be returned.  Must be
./random/BitsStreamGenerator.java:     * @param bytes Array in which to put the generated bytes. Cannot be {@code null}.
./random/BitsStreamGenerator.java:     * @param bytes Array in which to put the generated bytes. Cannot be {@code null}.
./random/BitsStreamGenerator.java:     * @param start Index at which to start inserting the generated bytes.
./random/BitsStreamGenerator.java:     * @param len Number of bytes to insert.
./random/BitsStreamGenerator.java:     * @param bytes Array in which to put the generated bytes. Cannot be {@code null}.
./random/BitsStreamGenerator.java:     * @param start Index at which to start inserting the generated bytes.
./random/BitsStreamGenerator.java:     * @param len Number of bytes to insert.
./random/SobolSequenceGenerator.java:     * @param dimension the space dimension
./random/SobolSequenceGenerator.java:     * @param dimension the space dimension
./random/SobolSequenceGenerator.java:     * @param is the stream to read the direction vectors from
./random/SobolSequenceGenerator.java:     * @param is the input stream to read the direction vector from
./random/SobolSequenceGenerator.java:     * @param d the dimension, zero-based
./random/SobolSequenceGenerator.java:     * @param a the coefficients of the primitive polynomial
./random/SobolSequenceGenerator.java:     * @param m the initial direction numbers
./random/SobolSequenceGenerator.java:     * @param index the index in the sequence to skip to
./random/Well19937c.java:     * @param seed the initial seed (32 bits integer)
./random/Well19937c.java:     * @param seed the initial seed (32 bits integers array), if null
./random/Well19937c.java:     * @param seed the initial seed (64 bits integer)
./random/Well19937a.java:     * @param seed the initial seed (32 bits integer)
./random/Well19937a.java:     * @param seed the initial seed (32 bits integers array), if null
./random/Well19937a.java:     * @param seed the initial seed (64 bits integer)
./random/RandomDataGenerator.java:     * @param rand the source of (non-secure) random data
./random/RandomDataGenerator.java:     * @param len the desired string length.
./random/RandomDataGenerator.java:     * @param rng random generator to use
./random/RandomDataGenerator.java:     * @param n the bound on the random number to be returned.  Must be
./random/RandomDataGenerator.java:     * @param shape the median of the Gamma distribution
./random/RandomDataGenerator.java:     * @param scale the scale parameter of the Gamma distribution
./random/RandomDataGenerator.java:     * @param populationSize the population size of the Hypergeometric distribution
./random/RandomDataGenerator.java:     * @param numberOfSuccesses number of successes in the population of the Hypergeometric distribution
./random/RandomDataGenerator.java:     * @param sampleSize the sample size of the Hypergeometric distribution
./random/RandomDataGenerator.java:     * @param r the number of successes of the Pascal distribution
./random/RandomDataGenerator.java:     * @param p the probability of success of the Pascal distribution
./random/RandomDataGenerator.java:     * @param df the degrees of freedom of the T distribution
./random/RandomDataGenerator.java:     * @param shape the shape parameter of the Weibull distribution
./random/RandomDataGenerator.java:     * @param scale the scale parameter of the Weibull distribution
./random/RandomDataGenerator.java:     * @param numberOfElements the number of elements of the ZipfDistribution
./random/RandomDataGenerator.java:     * @param exponent the exponent of the ZipfDistribution
./random/RandomDataGenerator.java:     * @param alpha first distribution shape parameter
./random/RandomDataGenerator.java:     * @param beta second distribution shape parameter
./random/RandomDataGenerator.java:     * @param numberOfTrials number of trials of the Binomial distribution
./random/RandomDataGenerator.java:     * @param probabilityOfSuccess probability of success of the Binomial distribution
./random/RandomDataGenerator.java:     * @param median the median of the Cauchy distribution
./random/RandomDataGenerator.java:     * @param scale the scale parameter of the Cauchy distribution
./random/RandomDataGenerator.java:     * @param df the degrees of freedom of the ChiSquare distribution
./random/RandomDataGenerator.java:     * @param numeratorDf the numerator degrees of freedom of the F distribution
./random/RandomDataGenerator.java:     * @param denominatorDf the denominator degrees of freedom of the F distribution
./random/RandomDataGenerator.java:     * @param seed the seed value to use
./random/RandomDataGenerator.java:     * @param seed the seed value to use
./random/RandomDataGenerator.java:     * @param algorithm the name of the PRNG algorithm
./random/RandomDataGenerator.java:     * @param provider the name of the provider
./random/EmpiricalDistribution.java:     * @param binCount number of bins. Must be strictly positive.
./random/EmpiricalDistribution.java:     * @param binCount number of bins. Must be strictly positive.
./random/EmpiricalDistribution.java:     * @param generator random data generator (may be null, resulting in default JDK generator)
./random/EmpiricalDistribution.java:     * @param generator random data generator (may be null, resulting in default JDK generator)
./random/EmpiricalDistribution.java:     * @param binCount number of bins
./random/EmpiricalDistribution.java:     * @param randomData random data generator (may be null, resulting in default JDK generator)
./random/EmpiricalDistribution.java:     * @param randomData random data generator (may be null, resulting in default JDK generator)
./random/EmpiricalDistribution.java:     * @param binCount number of bins. Must be strictly positive.
./random/EmpiricalDistribution.java:     * @param randomData Random data generator.
./random/EmpiricalDistribution.java:     * @param in the input data array
./random/EmpiricalDistribution.java:     * @param url url of the input file
./random/EmpiricalDistribution.java:     * @param file the input file
./random/EmpiricalDistribution.java:         * @param in BufferedReader input stream
./random/EmpiricalDistribution.java:         * @param in double[] array holding the data
./random/EmpiricalDistribution.java:     * @param da object providing access to the data
./random/EmpiricalDistribution.java:     * @param value  the value whose bin we are trying to find
./random/EmpiricalDistribution.java:     * @param seed random generator seed
./random/EmpiricalDistribution.java:     * @param i the index of the bin
./random/EmpiricalDistribution.java:     * @param i the index of the bin
./random/EmpiricalDistribution.java:     * @param i index of the bin
./random/EmpiricalDistribution.java:     * @param x the value to locate within a bin
./random/EmpiricalDistribution.java:     * @param binIndex maximum bin index
./random/EmpiricalDistribution.java:     * @param bStats summary statistics for the bin
./random/AbstractRandomGenerator.java:     * @param seed the seed value
./random/AbstractRandomGenerator.java:     * @param bytes the non-null byte array in which to put the
./random/AbstractRandomGenerator.java:     * @param n the bound on the random number to be returned.  Must be
./random/RandomAdaptor.java:     * @param randomGenerator  the wrapped generator
./random/RandomAdaptor.java:     * @param randomGenerator  wrapped RandomGenerator instance
./random/RandomAdaptor.java:     * @param bytes the non-null byte array in which to put the
./random/RandomAdaptor.java:     * @param n the bound on the random number to be returned.  Must be
./random/RandomGeneratorFactory.java:     * @param rng JDK {@link Random} instance that will generate the
./random/RandomGeneratorFactory.java:     * @param seed Original seed.
./random/StableRandomGenerator.java:     * @param generator underlying random generator to use
./random/StableRandomGenerator.java:     * @param alpha Stability parameter. Must be in range (0, 2]
./random/StableRandomGenerator.java:     * @param beta Skewness parameter. Must be in range [-1, 1]
./random/RandomGenerator.java:     * @param seed the seed value
./random/RandomGenerator.java:     * @param seed the seed value
./random/RandomGenerator.java:     * @param seed the seed value
./random/RandomGenerator.java:     * @param bytes the non-null byte array in which to put the
./random/RandomGenerator.java:     * @param n the bound on the random number to be returned.  Must be
./random/MersenneTwister.java:     * @param seed the initial seed (32 bits integer)
./random/MersenneTwister.java:     * @param seed the initial seed (32 bits integers array), if null
./random/MersenneTwister.java:     * @param seed the initial seed (64 bits integer)
./random/MersenneTwister.java:     * @param seed the initial seed (32 bits integer)
./random/MersenneTwister.java:     * @param seed the initial seed (32 bits integers array), if null
./random/MersenneTwister.java:     * @param seed the initial seed (64 bits integer)
./random/MersenneTwister.java:     * @param bits number of random bits to produce
./random/HaltonSequenceGenerator.java:     * @param dimension the space dimension
./random/HaltonSequenceGenerator.java:     * @param dimension the space dimension
./random/HaltonSequenceGenerator.java:     * @param bases the base number for each dimension, entries should be (pairwise) prime, may not be null
./random/HaltonSequenceGenerator.java:     * @param weights the weights used during scrambling, may be null in which case no scrambling will be performed
./random/HaltonSequenceGenerator.java:     * @param i the dimension index
./random/HaltonSequenceGenerator.java:     * @param j the digit index
./random/HaltonSequenceGenerator.java:     * @param b the base for this dimension
./random/HaltonSequenceGenerator.java:     * @param digit the j-th digit
./random/HaltonSequenceGenerator.java:     * @param index the index in the sequence to skip to
./random/JDKRandomGenerator.java:     * @param seed initial seed
./random/UnitSphereRandomVectorGenerator.java:     * @param dimension Space dimension.
./random/UnitSphereRandomVectorGenerator.java:     * @param rand RNG for the individual components of the vectors.
./random/UnitSphereRandomVectorGenerator.java:     * @param dimension Space dimension.
./random/RandomDataImpl.java:     * @param rand the source of (non-secure) random data
./random/RandomDataImpl.java:     * @param len the desired string length.
./random/RandomDataImpl.java:     * @param alpha first distribution shape parameter
./random/RandomDataImpl.java:     * @param beta second distribution shape parameter
./random/RandomDataImpl.java:     * @param numberOfTrials number of trials of the Binomial distribution
./random/RandomDataImpl.java:     * @param probabilityOfSuccess probability of success of the Binomial distribution
./random/RandomDataImpl.java:     * @param median the median of the Cauchy distribution
./random/RandomDataImpl.java:     * @param scale the scale parameter of the Cauchy distribution
./random/RandomDataImpl.java:     * @param df the degrees of freedom of the ChiSquare distribution
./random/RandomDataImpl.java:     * @param numeratorDf the numerator degrees of freedom of the F distribution
./random/RandomDataImpl.java:     * @param denominatorDf the denominator degrees of freedom of the F distribution
./random/RandomDataImpl.java:     * @param shape the median of the Gamma distribution
./random/RandomDataImpl.java:     * @param scale the scale parameter of the Gamma distribution
./random/RandomDataImpl.java:     * @param populationSize the population size of the Hypergeometric distribution
./random/RandomDataImpl.java:     * @param numberOfSuccesses number of successes in the population of the Hypergeometric distribution
./random/RandomDataImpl.java:     * @param sampleSize the sample size of the Hypergeometric distribution
./random/RandomDataImpl.java:     * @param r the number of successes of the Pascal distribution
./random/RandomDataImpl.java:     * @param p the probability of success of the Pascal distribution
./random/RandomDataImpl.java:     * @param df the degrees of freedom of the T distribution
./random/RandomDataImpl.java:     * @param shape the shape parameter of the Weibull distribution
./random/RandomDataImpl.java:     * @param scale the scale parameter of the Weibull distribution
./random/RandomDataImpl.java:     * @param numberOfElements the number of elements of the ZipfDistribution
./random/RandomDataImpl.java:     * @param exponent the exponent of the ZipfDistribution
./random/RandomDataImpl.java:     * @param seed
./random/RandomDataImpl.java:     * @param seed
./random/RandomDataImpl.java:     * @param algorithm
./random/RandomDataImpl.java:     * @param provider
./random/RandomDataImpl.java:     * @param distribution Continuous distribution to generate a random value from
./random/RandomDataImpl.java:     * @param distribution Integer distribution to generate a random value from
./random/GaussianRandomGenerator.java:     * @param generator underlying random generator to use
./random/UniformRandomGenerator.java:     * @param generator underlying random generator to use
./random/ValueServer.java:     * @param randomData the RandomDataImpl instance used to source random data
./random/ValueServer.java:     * @param generator source of random data
./random/ValueServer.java:     * @param values array to be filled
./random/ValueServer.java:     * @param length length of output array
./random/ValueServer.java:     * @param binCount the number of bins used in computing the empirical
./random/ValueServer.java:     * @param mode New value of the data generation mode.
./random/ValueServer.java:     * @param url String representation for new valuesFileURL.
./random/ValueServer.java:     * @param url URL of the values file.
./random/ValueServer.java:     * @param mu new Mean value.
./random/ValueServer.java:     * @param sigma New standard deviation.
./random/ValueServer.java:     * @param seed Value with which to reseed the {@link RandomDataImpl}
./random/CorrelatedRandomVectorGenerator.java:     * @param mean Expected mean values for all components.
./random/CorrelatedRandomVectorGenerator.java:     * @param covariance Covariance matrix.
./random/CorrelatedRandomVectorGenerator.java:     * @param small Diagonal elements threshold under which  column are
./random/CorrelatedRandomVectorGenerator.java:     * @param generator underlying generator for uncorrelated normalized
./random/CorrelatedRandomVectorGenerator.java:     * @param covariance Covariance matrix.
./random/CorrelatedRandomVectorGenerator.java:     * @param small Diagonal elements threshold under which  column are
./random/CorrelatedRandomVectorGenerator.java:     * @param generator Underlying generator for uncorrelated normalized
./random/Well1024a.java:     * @param seed the initial seed (32 bits integer)
./random/Well1024a.java:     * @param seed the initial seed (32 bits integers array), if null
./random/Well1024a.java:     * @param seed the initial seed (64 bits integer)
./random/Well44497b.java:     * @param seed the initial seed (32 bits integer)
./random/Well44497b.java:     * @param seed the initial seed (32 bits integers array), if null
./random/Well44497b.java:     * @param seed the initial seed (64 bits integer)
./random/Well512a.java:     * @param seed the initial seed (32 bits integer)
./random/Well512a.java:     * @param seed the initial seed (32 bits integers array), if null
./random/Well512a.java:     * @param seed the initial seed (64 bits integer)
./RealFieldElement.java: * @param <T> the type of the field elements
./RealFieldElement.java:     * @param a right hand side parameter of the operator
./RealFieldElement.java:     * @param a right hand side parameter of the operator
./RealFieldElement.java:     * @param a right hand side parameter of the operator
./RealFieldElement.java:     * @param a right hand side parameter of the operator
./RealFieldElement.java:     * @param a right hand side parameter of the operator
./RealFieldElement.java:     * @param a right hand side parameter of the operator
./RealFieldElement.java:     * @param sign the sign for the returned value
./RealFieldElement.java:     * @param sign the sign for the returned value
./RealFieldElement.java:     * @param n power of 2
./RealFieldElement.java:     * @param y a value
./RealFieldElement.java:     * @param n order of the root
./RealFieldElement.java:     * @param p power to apply
./RealFieldElement.java:     * @param n power to apply
./RealFieldElement.java:     * @param e exponent
./RealFieldElement.java:     * @param x second argument of the arc tangent
./RealFieldElement.java:     * @param a Factors.
./RealFieldElement.java:     * @param b Factors.
./RealFieldElement.java:     * @param a Factors.
./RealFieldElement.java:     * @param b Factors.
./RealFieldElement.java:     * @param a1 first factor of the first term
./RealFieldElement.java:     * @param b1 second factor of the first term
./RealFieldElement.java:     * @param a2 first factor of the second term
./RealFieldElement.java:     * @param b2 second factor of the second term
./RealFieldElement.java:     * @param a1 first factor of the first term
./RealFieldElement.java:     * @param b1 second factor of the first term
./RealFieldElement.java:     * @param a2 first factor of the second term
./RealFieldElement.java:     * @param b2 second factor of the second term
./RealFieldElement.java:     * @param a1 first factor of the first term
./RealFieldElement.java:     * @param b1 second factor of the first term
./RealFieldElement.java:     * @param a2 first factor of the second term
./RealFieldElement.java:     * @param b2 second factor of the second term
./RealFieldElement.java:     * @param a3 first factor of the third term
./RealFieldElement.java:     * @param b3 second factor of the third term
./RealFieldElement.java:     * @param a1 first factor of the first term
./RealFieldElement.java:     * @param b1 second factor of the first term
./RealFieldElement.java:     * @param a2 first factor of the second term
./RealFieldElement.java:     * @param b2 second factor of the second term
./RealFieldElement.java:     * @param a3 first factor of the third term
./RealFieldElement.java:     * @param b3 second factor of the third term
./RealFieldElement.java:     * @param a1 first factor of the first term
./RealFieldElement.java:     * @param b1 second factor of the first term
./RealFieldElement.java:     * @param a2 first factor of the second term
./RealFieldElement.java:     * @param b2 second factor of the second term
./RealFieldElement.java:     * @param a3 first factor of the third term
./RealFieldElement.java:     * @param b3 second factor of the third term
./RealFieldElement.java:     * @param a4 first factor of the third term
./RealFieldElement.java:     * @param b4 second factor of the third term
./RealFieldElement.java:     * @param a1 first factor of the first term
./RealFieldElement.java:     * @param b1 second factor of the first term
./RealFieldElement.java:     * @param a2 first factor of the second term
./RealFieldElement.java:     * @param b2 second factor of the second term
./RealFieldElement.java:     * @param a3 first factor of the third term
./RealFieldElement.java:     * @param b3 second factor of the third term
./RealFieldElement.java:     * @param a4 first factor of the third term
./RealFieldElement.java:     * @param b4 second factor of the third term
./special/Gamma.java:     * @param x Argument.
./special/Gamma.java:     * @param a Parameter.
./special/Gamma.java:     * @param x Value.
./special/Gamma.java:     * @param a the a parameter.
./special/Gamma.java:     * @param x the value.
./special/Gamma.java:     * @param epsilon When the absolute value of the nth item in the
./special/Gamma.java:     * @param maxIterations Maximum number of "iterations" to complete.
./special/Gamma.java:     * @param a the a parameter.
./special/Gamma.java:     * @param x the value.
./special/Gamma.java:     * @param a the a parameter.
./special/Gamma.java:     * @param x the value.
./special/Gamma.java:     * @param epsilon When the absolute value of the nth item in the
./special/Gamma.java:     * @param maxIterations Maximum number of "iterations" to complete.
./special/Gamma.java:     * @param x Argument.
./special/Gamma.java:     * @param x Argument.
./special/Gamma.java:     * @param x Argument.
./special/Gamma.java:     * @param x Argument.
./special/Gamma.java:     * @param x Argument.
./special/Gamma.java:     * @param x Argument.
./special/Beta.java:     * @param x Value.
./special/Beta.java:     * @param a Parameter {@code a}.
./special/Beta.java:     * @param b Parameter {@code b}.
./special/Beta.java:     * @param x Value.
./special/Beta.java:     * @param a Parameter {@code a}.
./special/Beta.java:     * @param b Parameter {@code b}.
./special/Beta.java:     * @param epsilon When the absolute value of the nth item in the
./special/Beta.java:     * @param x the value.
./special/Beta.java:     * @param a Parameter {@code a}.
./special/Beta.java:     * @param b Parameter {@code b}.
./special/Beta.java:     * @param maxIterations Maximum number of "iterations" to complete.
./special/Beta.java:     * @param x the value.
./special/Beta.java:     * @param a Parameter {@code a}.
./special/Beta.java:     * @param b Parameter {@code b}.
./special/Beta.java:     * @param epsilon When the absolute value of the nth item in the
./special/Beta.java:     * @param maxIterations Maximum number of "iterations" to complete.
./special/Beta.java:     * @param a Parameter {@code a}.
./special/Beta.java:     * @param b Parameter {@code b}.
./special/Beta.java:     * @param epsilon This parameter is ignored.
./special/Beta.java:     * @param maxIterations This parameter is ignored.
./special/Beta.java:     * @param a First argument.
./special/Beta.java:     * @param b Second argument.
./special/Beta.java:     * @param a First argument.
./special/Beta.java:     * @param b Second argument.
./special/Beta.java:     * @param a First argument.
./special/Beta.java:     * @param b Second argument.
./special/Beta.java:     * @param p First argument.
./special/Beta.java:     * @param q Second argument.
./special/Beta.java:     * @param p First argument.
./special/Beta.java:     * @param q Second argument.
./special/Erf.java:     * @param x the value.
./special/Erf.java:     * @param x the value
./special/Erf.java:     * @param x1 the first value
./special/Erf.java:     * @param x2 the second value
./special/Erf.java:     * @param x the value
./special/Erf.java:     * @param x the value
./special/BesselJ.java:     * @param order order of the function computed when using {@link #value(double)}.
./special/BesselJ.java:     * @param x Argument
./special/BesselJ.java:     * @param order Order of the Bessel function
./special/BesselJ.java:     * @param x Argument
./special/BesselJ.java:         * @param b values
./special/BesselJ.java:         * @param n count of valid values
./special/BesselJ.java:     * @param x non-negative real argument for which J's are to be calculated
./special/BesselJ.java:     * @param alpha fractional part of order for which J's or exponentially
./special/BesselJ.java:     * @param nb integer number of functions to be calculated, nb > 0. The first
./stat/interval/ConfidenceInterval.java:     * @param lowerBound lower endpoint of the interval
./stat/interval/ConfidenceInterval.java:     * @param upperBound upper endpoint of the interval
./stat/interval/ConfidenceInterval.java:     * @param confidenceLevel coverage probability
./stat/interval/ConfidenceInterval.java:     * @param lower lower endpoint
./stat/interval/ConfidenceInterval.java:     * @param upper upper endpoint
./stat/interval/ConfidenceInterval.java:     * @param confidence confidence level
./stat/interval/IntervalUtils.java:     * @param numberOfTrials number of trials
./stat/interval/IntervalUtils.java:     * @param numberOfSuccesses number of successes
./stat/interval/IntervalUtils.java:     * @param confidenceLevel desired probability that the true probability of
./stat/interval/IntervalUtils.java:     * @param numberOfTrials number of trials
./stat/interval/IntervalUtils.java:     * @param numberOfSuccesses number of successes
./stat/interval/IntervalUtils.java:     * @param confidenceLevel desired probability that the true probability of
./stat/interval/IntervalUtils.java:     * @param numberOfTrials number of trials
./stat/interval/IntervalUtils.java:     * @param numberOfSuccesses number of successes
./stat/interval/IntervalUtils.java:     * @param confidenceLevel desired probability that the true probability of
./stat/interval/IntervalUtils.java:     * @param numberOfTrials number of trials
./stat/interval/IntervalUtils.java:     * @param numberOfSuccesses number of successes
./stat/interval/IntervalUtils.java:     * @param confidenceLevel desired probability that the true probability of
./stat/interval/IntervalUtils.java:     * @param numberOfTrials number of trials (must be positive)
./stat/interval/IntervalUtils.java:     * @param numberOfSuccesses number of successes (must not exceed numberOfTrials)
./stat/interval/IntervalUtils.java:     * @param confidenceLevel confidence level (must be strictly between 0 and 1)
./stat/interval/BinomialConfidenceInterval.java:     * @param numberOfTrials number of trials
./stat/interval/BinomialConfidenceInterval.java:     * @param numberOfSuccesses number of successes
./stat/interval/BinomialConfidenceInterval.java:     * @param confidenceLevel desired probability that the true probability of
./stat/correlation/PearsonsCorrelation.java:     * @param data rectangular array with columns representing variables
./stat/correlation/PearsonsCorrelation.java:     * @param matrix matrix with columns representing variables to correlate
./stat/correlation/PearsonsCorrelation.java:     * @param covariance Covariance instance
./stat/correlation/PearsonsCorrelation.java:     * @param covarianceMatrix covariance matrix
./stat/correlation/PearsonsCorrelation.java:     * @param numberOfObservations the number of observations in the dataset used to compute
./stat/correlation/PearsonsCorrelation.java:     * @param matrix matrix with columns representing variables to correlate
./stat/correlation/PearsonsCorrelation.java:     * @param data matrix with columns representing variables to correlate
./stat/correlation/PearsonsCorrelation.java:     * @param xArray first data array
./stat/correlation/PearsonsCorrelation.java:     * @param yArray second data array
./stat/correlation/PearsonsCorrelation.java:     * @param covarianceMatrix the covariance matrix
./stat/correlation/PearsonsCorrelation.java:     * @param matrix matrix to check for sufficiency
./stat/correlation/SpearmansCorrelation.java:     * @param rankingAlgorithm ranking algorithm
./stat/correlation/SpearmansCorrelation.java:     * @param dataMatrix matrix of data with columns representing
./stat/correlation/SpearmansCorrelation.java:     * @param dataMatrix matrix of data with columns representing
./stat/correlation/SpearmansCorrelation.java:     * @param rankingAlgorithm ranking algorithm
./stat/correlation/SpearmansCorrelation.java:     * @param matrix matrix with columns representing variables to correlate
./stat/correlation/SpearmansCorrelation.java:     * @param matrix matrix with columns representing variables to correlate
./stat/correlation/SpearmansCorrelation.java:     * @param xArray first data array
./stat/correlation/SpearmansCorrelation.java:     * @param yArray second data array
./stat/correlation/SpearmansCorrelation.java:     * @param matrix matrix to transform
./stat/correlation/SpearmansCorrelation.java:     * @param input the input array
./stat/correlation/SpearmansCorrelation.java:     * @param input the input array
./stat/correlation/SpearmansCorrelation.java:     * @param indices a set containing the indices to be removed
./stat/correlation/StorelessCovariance.java:     * @param dim the dimension of the square covariance matrix
./stat/correlation/StorelessCovariance.java:     * @param dim the dimension of the covariance matrix
./stat/correlation/StorelessCovariance.java:     * @param biasCorrected if <code>true</code> the covariance estimate is corrected
./stat/correlation/StorelessCovariance.java:     * @param biasCorrected if the covariance estimate shall be corrected for bias
./stat/correlation/StorelessCovariance.java:     * @param i the row index
./stat/correlation/StorelessCovariance.java:     * @param j the column index
./stat/correlation/StorelessCovariance.java:     * @param i the row index
./stat/correlation/StorelessCovariance.java:     * @param j the column index
./stat/correlation/StorelessCovariance.java:     * @param i the row index
./stat/correlation/StorelessCovariance.java:     * @param j the column index
./stat/correlation/StorelessCovariance.java:     * @param cov the {@link StorelessBivariateCovariance} element to be set
./stat/correlation/StorelessCovariance.java:     * @param xIndex row index in the covariance matrix
./stat/correlation/StorelessCovariance.java:     * @param yIndex column index in the covariance matrix
./stat/correlation/StorelessCovariance.java:     * @param data array representing one row of data.
./stat/correlation/StorelessCovariance.java:     * @param sc externally computed StorelessCovariance to add to this
./stat/correlation/Covariance.java:     * @param data rectangular array with columns representing covariates
./stat/correlation/Covariance.java:     * @param biasCorrected true means covariances are bias-corrected
./stat/correlation/Covariance.java:     * @param data rectangular array with columns representing covariates
./stat/correlation/Covariance.java:     * @param matrix matrix with columns representing covariates
./stat/correlation/Covariance.java:     * @param biasCorrected true means covariances are bias-corrected
./stat/correlation/Covariance.java:     * @param matrix matrix with columns representing covariates
./stat/correlation/Covariance.java:     * @param matrix input matrix (must have at least one column and two rows)
./stat/correlation/Covariance.java:     * @param biasCorrected determines whether or not covariance estimates are bias-corrected
./stat/correlation/Covariance.java:     * @param matrix input matrix (must have at least one column and two rows)
./stat/correlation/Covariance.java:     * @param data input array (must have at least one column and two rows)
./stat/correlation/Covariance.java:     * @param biasCorrected determines whether or not covariance estimates are bias-corrected
./stat/correlation/Covariance.java:     * @param data input array (must have at least one column and two rows)
./stat/correlation/Covariance.java:     * @param xArray first data array
./stat/correlation/Covariance.java:     * @param yArray second data array
./stat/correlation/Covariance.java:     * @param biasCorrected if true, returned value will be bias-corrected
./stat/correlation/Covariance.java:     * @param xArray first data array
./stat/correlation/Covariance.java:     * @param yArray second data array
./stat/correlation/Covariance.java:     * @param matrix matrix to check
./stat/correlation/KendallsCorrelation.java:     * @param data rectangular array with columns representing variables
./stat/correlation/KendallsCorrelation.java:     * @param matrix matrix with columns representing variables to correlate
./stat/correlation/KendallsCorrelation.java:     * @param matrix matrix with columns representing variables to correlate
./stat/correlation/KendallsCorrelation.java:     * @param matrix matrix with columns representing variables to correlate
./stat/correlation/KendallsCorrelation.java:     * @param xArray first data array
./stat/correlation/KendallsCorrelation.java:     * @param yArray second data array
./stat/correlation/KendallsCorrelation.java:     * @param n the summation end
./stat/correlation/StorelessBivariateCovariance.java:     * @param biasCorrection if <code>true</code> the covariance estimate is corrected
./stat/correlation/StorelessBivariateCovariance.java:     * @param x the x value
./stat/correlation/StorelessBivariateCovariance.java:     * @param y the y value
./stat/correlation/StorelessBivariateCovariance.java:     * @param cov StorelessBivariateCovariance instance to append.
./stat/clustering/Cluster.java: * @param <T> the type of points that can be clustered
./stat/clustering/Cluster.java:     * @param center the point which is to be the center of this cluster
./stat/clustering/Cluster.java:     * @param point point to add
./stat/clustering/EuclideanDoublePoint.java:     * @param point the n-dimensional point in integer space
./stat/clustering/EuclideanIntegerPoint.java:     * @param point the n-dimensional point in integer space
./stat/clustering/Clusterable.java: * @param <T> the type of point that can be clustered
./stat/clustering/Clusterable.java:     * @param p the point to compute the distance from
./stat/clustering/Clusterable.java:     * @param p the Collection of points to compute the centroid of
./stat/clustering/KMeansPlusPlusClusterer.java: * @param <T> type of the points to cluster
./stat/clustering/KMeansPlusPlusClusterer.java:     * @param random random generator to use for choosing initial centers
./stat/clustering/KMeansPlusPlusClusterer.java:     * @param random random generator to use for choosing initial centers
./stat/clustering/KMeansPlusPlusClusterer.java:     * @param emptyStrategy strategy to use for handling empty clusters that
./stat/clustering/KMeansPlusPlusClusterer.java:     * @param points the points to cluster
./stat/clustering/KMeansPlusPlusClusterer.java:     * @param k the number of clusters to split the data into
./stat/clustering/KMeansPlusPlusClusterer.java:     * @param numTrials number of trial runs
./stat/clustering/KMeansPlusPlusClusterer.java:     * @param maxIterationsPerTrial the maximum number of iterations to run the algorithm
./stat/clustering/KMeansPlusPlusClusterer.java:     * @param points the points to cluster
./stat/clustering/KMeansPlusPlusClusterer.java:     * @param k the number of clusters to split the data into
./stat/clustering/KMeansPlusPlusClusterer.java:     * @param maxIterations the maximum number of iterations to run the algorithm
./stat/clustering/KMeansPlusPlusClusterer.java:     * @param <T> type of the points to cluster
./stat/clustering/KMeansPlusPlusClusterer.java:     * @param clusters the {@link Cluster}s to add the points to
./stat/clustering/KMeansPlusPlusClusterer.java:     * @param points the points to add to the given {@link Cluster}s
./stat/clustering/KMeansPlusPlusClusterer.java:     * @param assignments points assignments to clusters
./stat/clustering/KMeansPlusPlusClusterer.java:     * @param <T> type of the points to cluster
./stat/clustering/KMeansPlusPlusClusterer.java:     * @param points the points to choose the initial centers from
./stat/clustering/KMeansPlusPlusClusterer.java:     * @param k the number of centers to choose
./stat/clustering/KMeansPlusPlusClusterer.java:     * @param random random generator to use
./stat/clustering/KMeansPlusPlusClusterer.java:     * @param clusters the {@link Cluster}s to search
./stat/clustering/KMeansPlusPlusClusterer.java:     * @param clusters the {@link Cluster}s to search
./stat/clustering/KMeansPlusPlusClusterer.java:     * @param clusters the {@link Cluster}s to search
./stat/clustering/KMeansPlusPlusClusterer.java:     * @param <T> type of the points to cluster
./stat/clustering/KMeansPlusPlusClusterer.java:     * @param clusters the {@link Cluster}s to search
./stat/clustering/KMeansPlusPlusClusterer.java:     * @param point the point to find the nearest {@link Cluster} for
./stat/clustering/DBSCANClusterer.java: * @param <T> type of the points to cluster
./stat/clustering/DBSCANClusterer.java:     * @param eps maximum radius of the neighborhood to be considered
./stat/clustering/DBSCANClusterer.java:     * @param minPts minimum number of points needed for a cluster
./stat/clustering/DBSCANClusterer.java:     * @param points the points to cluster
./stat/clustering/DBSCANClusterer.java:     * @param cluster Cluster to expand
./stat/clustering/DBSCANClusterer.java:     * @param point Point to add to cluster
./stat/clustering/DBSCANClusterer.java:     * @param neighbors List of neighbors
./stat/clustering/DBSCANClusterer.java:     * @param points the data set
./stat/clustering/DBSCANClusterer.java:     * @param visited the set of already visited points
./stat/clustering/DBSCANClusterer.java:     * @param point the point to look for
./stat/clustering/DBSCANClusterer.java:     * @param points possible neighbors
./stat/clustering/DBSCANClusterer.java:     * @param one first list
./stat/clustering/DBSCANClusterer.java:     * @param two second list
./stat/StatUtils.java:     * @param values  array of values to sum
./stat/StatUtils.java:     * @param values the input array
./stat/StatUtils.java:     * @param begin index of the first array element to include
./stat/StatUtils.java:     * @param length the number of elements to include
./stat/StatUtils.java:     * @param values  input array
./stat/StatUtils.java:     * @param values the input array
./stat/StatUtils.java:     * @param begin index of the first array element to include
./stat/StatUtils.java:     * @param length the number of elements to include
./stat/StatUtils.java:     * @param values the input array
./stat/StatUtils.java:     * @param values the input array
./stat/StatUtils.java:     * @param begin index of the first array element to include
./stat/StatUtils.java:     * @param length the number of elements to include
./stat/StatUtils.java:     * @param values the input array
./stat/StatUtils.java:     * @param values the input array
./stat/StatUtils.java:     * @param begin index of the first array element to include
./stat/StatUtils.java:     * @param length the number of elements to include
./stat/StatUtils.java:     * @param values the input array
./stat/StatUtils.java:     * @param values the input array
./stat/StatUtils.java:     * @param begin index of the first array element to include
./stat/StatUtils.java:     * @param length the number of elements to include
./stat/StatUtils.java:     * @param values the input array
./stat/StatUtils.java:     * @param values the input array
./stat/StatUtils.java:     * @param begin index of the first array element to include
./stat/StatUtils.java:     * @param length the number of elements to include
./stat/StatUtils.java:     * @param values the input array
./stat/StatUtils.java:     * @param values the input array
./stat/StatUtils.java:     * @param begin index of the first array element to include
./stat/StatUtils.java:     * @param length the number of elements to include
./stat/StatUtils.java:     * @param values the input array
./stat/StatUtils.java:     * @param mean the precomputed mean value
./stat/StatUtils.java:     * @param begin index of the first array element to include
./stat/StatUtils.java:     * @param length the number of elements to include
./stat/StatUtils.java:     * @param values the input array
./stat/StatUtils.java:     * @param mean the precomputed mean value
./stat/StatUtils.java:     * @param values the input array
./stat/StatUtils.java:     * @param values the input array
./stat/StatUtils.java:     * @param begin index of the first array element to include
./stat/StatUtils.java:     * @param length the number of elements to include
./stat/StatUtils.java:     * @param values the input array
./stat/StatUtils.java:     * @param mean the precomputed mean value
./stat/StatUtils.java:     * @param begin index of the first array element to include
./stat/StatUtils.java:     * @param length the number of elements to include
./stat/StatUtils.java:     * @param values the input array
./stat/StatUtils.java:     * @param mean the precomputed mean value
./stat/StatUtils.java:     * @param values the input array
./stat/StatUtils.java:     * @param values the input array
./stat/StatUtils.java:     * @param begin index of the first array element to include
./stat/StatUtils.java:     * @param length the number of elements to include
./stat/StatUtils.java:     * @param values the input array
./stat/StatUtils.java:     * @param values the input array
./stat/StatUtils.java:     * @param begin index of the first array element to include
./stat/StatUtils.java:     * @param length the number of elements to include
./stat/StatUtils.java:     * @param values input array of values
./stat/StatUtils.java:     * @param p the percentile value to compute
./stat/StatUtils.java:     * @param values array of input values
./stat/StatUtils.java:     * @param p  the percentile to compute
./stat/StatUtils.java:     * @param begin  the first (0-based) element to include in the computation
./stat/StatUtils.java:     * @param length  the number of array elements to include
./stat/StatUtils.java:     * @param sample1  the first array
./stat/StatUtils.java:     * @param sample2  the second array
./stat/StatUtils.java:     * @param sample1  the first array
./stat/StatUtils.java:     * @param sample2  the second array
./stat/StatUtils.java:     * @param sample1  the first array
./stat/StatUtils.java:     * @param sample2  the second array
./stat/StatUtils.java:     * @param meanDifference   the mean difference between corresponding entries
./stat/StatUtils.java:     * @param sample Sample to normalize.
./stat/StatUtils.java:     * @param sample input data
./stat/StatUtils.java:     * @param sample input data
./stat/StatUtils.java:     * @param begin index (0-based) of the first array element to include
./stat/StatUtils.java:     * @param length the number of elements to include
./stat/StatUtils.java:     * @param values input data
./stat/StatUtils.java:     * @param begin index (0-based) of the first array element to include
./stat/StatUtils.java:     * @param length the number of elements to include
./stat/ranking/NaturalRanking.java:     * @param tiesStrategy the TiesStrategy to use
./stat/ranking/NaturalRanking.java:     * @param nanStrategy the NaNStrategy to use
./stat/ranking/NaturalRanking.java:     * @param nanStrategy NaNStrategy to use
./stat/ranking/NaturalRanking.java:     * @param tiesStrategy TiesStrategy to use
./stat/ranking/NaturalRanking.java:     * @param randomGenerator source of random data
./stat/ranking/NaturalRanking.java:     * @param nanStrategy NaNStrategy to use
./stat/ranking/NaturalRanking.java:     * @param randomGenerator source of random data
./stat/ranking/NaturalRanking.java:     * @param data array to be ranked
./stat/ranking/NaturalRanking.java:     * @param ranks input array
./stat/ranking/NaturalRanking.java:     * @param ranks array to recode
./stat/ranking/NaturalRanking.java:     * @param value the value to replace NaNs with
./stat/ranking/NaturalRanking.java:     * @param ranks array to be searched for NaNs
./stat/ranking/NaturalRanking.java:     * @param ranks array of ranks
./stat/ranking/NaturalRanking.java:     * @param tiesTrace list of indices where <code>ranks</code> is constant
./stat/ranking/NaturalRanking.java:     * @param data array to modify
./stat/ranking/NaturalRanking.java:     * @param tiesTrace list of index values to set
./stat/ranking/NaturalRanking.java:     * @param value value to set
./stat/ranking/NaturalRanking.java:     * @param ranks array to modify
./stat/ranking/NaturalRanking.java:     * @param nanPositions list of index values to set to <code>Double.NaN</code>
./stat/ranking/NaturalRanking.java:     * @param ranks array to search for <code>NaNs</code>
./stat/ranking/NaturalRanking.java:         * @param value the value of the pair
./stat/ranking/NaturalRanking.java:         * @param position the original position
./stat/ranking/NaturalRanking.java:         * @param other the other pair to compare this to
./stat/ranking/RankingAlgorithm.java:     * @param data array of data to be ranked
./stat/regression/OLSMultipleLinearRegression.java:     * @param threshold the singularity threshold
./stat/regression/OLSMultipleLinearRegression.java:     * @param y the [n,1] array representing the y sample
./stat/regression/OLSMultipleLinearRegression.java:     * @param x the [n,k] array representing the x sample
./stat/regression/AbstractMultipleLinearRegression.java:     * @param noIntercept true means the model is to be estimated without an intercept term
./stat/regression/AbstractMultipleLinearRegression.java:     * @param data input data array
./stat/regression/AbstractMultipleLinearRegression.java:     * @param nobs number of observations (rows)
./stat/regression/AbstractMultipleLinearRegression.java:     * @param nvars number of independent variables (columns, not counting y)
./stat/regression/AbstractMultipleLinearRegression.java:     * @param y the array representing the y sample
./stat/regression/AbstractMultipleLinearRegression.java:     * @param x the rectangular array representing the x sample
./stat/regression/AbstractMultipleLinearRegression.java:     * @param x the [n,k] array representing the x data
./stat/regression/AbstractMultipleLinearRegression.java:     * @param y the [n,1] array representing the y data
./stat/regression/AbstractMultipleLinearRegression.java:     * @param x the [n,k] array representing the x sample
./stat/regression/AbstractMultipleLinearRegression.java:     * @param covariance the [n,n] array representing the covariance matrix
./stat/regression/SimpleRegression.java:    * @param includeIntercept whether or not to include an intercept term in
./stat/regression/SimpleRegression.java:     * @param x independent variable value
./stat/regression/SimpleRegression.java:     * @param y dependent variable value
./stat/regression/SimpleRegression.java:     * @param reg model to append data from
./stat/regression/SimpleRegression.java:     * @param x independent variable value
./stat/regression/SimpleRegression.java:     * @param y dependent variable value
./stat/regression/SimpleRegression.java:     * @param data array of observations to be added
./stat/regression/SimpleRegression.java:     * @param x the independent variables which form the design matrix
./stat/regression/SimpleRegression.java:     * @param y the dependent or response variable
./stat/regression/SimpleRegression.java:     * @param x a series of observations on the independent variables
./stat/regression/SimpleRegression.java:     * @param y a series of observations on the dependent variable
./stat/regression/SimpleRegression.java:     * @param data array of observations to be removed
./stat/regression/SimpleRegression.java:     * @param x input <code>x</code> value
./stat/regression/SimpleRegression.java:     * @param alpha the desired significance level
./stat/regression/SimpleRegression.java:    * @param slope current slope
./stat/regression/SimpleRegression.java:     * @param slope regression slope estimate
./stat/regression/SimpleRegression.java:     * @param variablesToInclude an array of indices of regressors to include
./stat/regression/ModelSpecificationException.java:     * @param pattern message pattern describing the specification error.
./stat/regression/ModelSpecificationException.java:     * @param args arguments.
./stat/regression/GLSMultipleLinearRegression.java:     * @param y y values of the sample
./stat/regression/GLSMultipleLinearRegression.java:     * @param x x values of the sample
./stat/regression/GLSMultipleLinearRegression.java:     * @param covariance array representing the covariance matrix
./stat/regression/GLSMultipleLinearRegression.java:     * @param omega the [n,n] array representing the covariance
./stat/regression/MillerUpdatingRegression.java:     * @param numberOfVariables number of regressors to expect, not including constant
./stat/regression/MillerUpdatingRegression.java:     * @param includeConstant include a constant automatically
./stat/regression/MillerUpdatingRegression.java:     * @param errorTolerance  zero tolerance, how machine zero is determined
./stat/regression/MillerUpdatingRegression.java:     * @param numberOfVariables maximum number of potential regressors
./stat/regression/MillerUpdatingRegression.java:     * @param includeConstant include a constant automatically
./stat/regression/MillerUpdatingRegression.java:     * @param x the array with regressor values
./stat/regression/MillerUpdatingRegression.java:     * @param y  the value of dependent variable given these regressors
./stat/regression/MillerUpdatingRegression.java:     * @param x observations on the regressors
./stat/regression/MillerUpdatingRegression.java:     * @param y observations on the regressand
./stat/regression/MillerUpdatingRegression.java:     * @param x observations on the regressors
./stat/regression/MillerUpdatingRegression.java:     * @param wi weight of the this observation (-1,1)
./stat/regression/MillerUpdatingRegression.java:     * @param yi observation on the regressand
./stat/regression/MillerUpdatingRegression.java:     * @param a - an addend
./stat/regression/MillerUpdatingRegression.java:     * @param b - an addend
./stat/regression/MillerUpdatingRegression.java:     * @param nreq how many of the regressors to include (either in canonical
./stat/regression/MillerUpdatingRegression.java:     * @param nreq how many of the regressors to include (either in canonical
./stat/regression/MillerUpdatingRegression.java:     * @param rinv  the storage for the inverse of r
./stat/regression/MillerUpdatingRegression.java:     * @param nreq how many of the regressors to include (either in canonical
./stat/regression/MillerUpdatingRegression.java:     * @param in how many of the regressors to include (either in canonical
./stat/regression/MillerUpdatingRegression.java:     * @param from initial position
./stat/regression/MillerUpdatingRegression.java:     * @param to destination
./stat/regression/MillerUpdatingRegression.java:     * @param list the regressors to move
./stat/regression/MillerUpdatingRegression.java:     * @param pos1 where the list will be placed
./stat/regression/MillerUpdatingRegression.java:     * @param  row_data returns the diagonal of the hat matrix for this observation
./stat/regression/MillerUpdatingRegression.java:     * @param numberOfRegressors many of the regressors to include (either in canonical
./stat/regression/MillerUpdatingRegression.java:     * @param  variablesToInclude array of variables to include in regression
./stat/regression/UpdatingMultipleLinearRegression.java:     * @param x the independent variables which form the design matrix
./stat/regression/UpdatingMultipleLinearRegression.java:     * @param y the dependent or response variable
./stat/regression/UpdatingMultipleLinearRegression.java:     * @param x a series of observations on the independent variables
./stat/regression/UpdatingMultipleLinearRegression.java:     * @param y a series of observations on the dependent variable
./stat/regression/UpdatingMultipleLinearRegression.java:     * @param variablesToInclude an array of indices of regressors to include
./stat/regression/RegressionResults.java:     * @param parameters a double array with the regression slope estimates
./stat/regression/RegressionResults.java:     * @param varcov the variance covariance matrix, stored either in a square matrix
./stat/regression/RegressionResults.java:     * @param isSymmetricCompressed a flag which denotes that the variance covariance
./stat/regression/RegressionResults.java:     * @param nobs the number of observations of the regression estimation
./stat/regression/RegressionResults.java:     * @param rank the number of independent variables in the regression
./stat/regression/RegressionResults.java:     * @param sumy the sum of the independent variable
./stat/regression/RegressionResults.java:     * @param sumysq the sum of the squared independent variable
./stat/regression/RegressionResults.java:     * @param sse sum of squared errors
./stat/regression/RegressionResults.java:     * @param containsConstant true model has constant,  false model does not have constant
./stat/regression/RegressionResults.java:     * @param copyData if true a deep copy of all input data is made, if false only references
./stat/regression/RegressionResults.java:     * @param index Index.
./stat/regression/RegressionResults.java:     * @param index Index.
./stat/regression/RegressionResults.java:     * @param i {@code i}th regression parameter.
./stat/regression/RegressionResults.java:     * @param j {@code j}th regression parameter.
./stat/regression/RegressionResults.java:     * @param i first variable index
./stat/regression/RegressionResults.java:     * @param j second variable index
./stat/descriptive/summary/Sum.java:     * @param original the {@code Sum} instance to copy
./stat/descriptive/summary/Sum.java:     * @param values the input array
./stat/descriptive/summary/Sum.java:     * @param begin index of the first array element to include
./stat/descriptive/summary/Sum.java:     * @param length the number of elements to include
./stat/descriptive/summary/Sum.java:     * @param values the input array
./stat/descriptive/summary/Sum.java:     * @param weights the weights array
./stat/descriptive/summary/Sum.java:     * @param begin index of the first array element to include
./stat/descriptive/summary/Sum.java:     * @param length the number of elements to include
./stat/descriptive/summary/Sum.java:     * @param values the input array
./stat/descriptive/summary/Sum.java:     * @param weights the weights array
./stat/descriptive/summary/Sum.java:     * @param source Sum to copy
./stat/descriptive/summary/Sum.java:     * @param dest Sum to copy to
./stat/descriptive/summary/Product.java:     * @param original the {@code Product} instance to copy
./stat/descriptive/summary/Product.java:     * @param values the input array
./stat/descriptive/summary/Product.java:     * @param begin index of the first array element to include
./stat/descriptive/summary/Product.java:     * @param length the number of elements to include
./stat/descriptive/summary/Product.java:     * @param values the input array
./stat/descriptive/summary/Product.java:     * @param weights the weights array
./stat/descriptive/summary/Product.java:     * @param begin index of the first array element to include
./stat/descriptive/summary/Product.java:     * @param length the number of elements to include
./stat/descriptive/summary/Product.java:     * @param values the input array
./stat/descriptive/summary/Product.java:     * @param weights the weights array
./stat/descriptive/summary/Product.java:     * @param source Product to copy
./stat/descriptive/summary/Product.java:     * @param dest Product to copy to
./stat/descriptive/summary/SumOfSquares.java:     * @param original the {@code SumOfSquares} instance to copy
./stat/descriptive/summary/SumOfSquares.java:     * @param values the input array
./stat/descriptive/summary/SumOfSquares.java:     * @param begin index of the first array element to include
./stat/descriptive/summary/SumOfSquares.java:     * @param length the number of elements to include
./stat/descriptive/summary/SumOfSquares.java:     * @param source SumOfSquares to copy
./stat/descriptive/summary/SumOfSquares.java:     * @param dest SumOfSquares to copy to
./stat/descriptive/summary/SumOfLogs.java:     * @param original the {@code SumOfLogs} instance to copy
./stat/descriptive/summary/SumOfLogs.java:     * @param values the input array
./stat/descriptive/summary/SumOfLogs.java:     * @param begin index of the first array element to include
./stat/descriptive/summary/SumOfLogs.java:     * @param length the number of elements to include
./stat/descriptive/summary/SumOfLogs.java:     * @param source SumOfLogs to copy
./stat/descriptive/summary/SumOfLogs.java:     * @param dest SumOfLogs to copy to
./stat/descriptive/SummaryStatistics.java:     * @param original the {@code SummaryStatistics} instance to copy
./stat/descriptive/SummaryStatistics.java:     * @param value the value to add
./stat/descriptive/SummaryStatistics.java:     * @param object the object to test equality against.
./stat/descriptive/SummaryStatistics.java:     * @param sumImpl the StorelessUnivariateStatistic instance to use for
./stat/descriptive/SummaryStatistics.java:     * @param sumsqImpl the StorelessUnivariateStatistic instance to use for
./stat/descriptive/SummaryStatistics.java:     * @param minImpl the StorelessUnivariateStatistic instance to use for
./stat/descriptive/SummaryStatistics.java:     * @param maxImpl the StorelessUnivariateStatistic instance to use for
./stat/descriptive/SummaryStatistics.java:     * @param sumLogImpl the StorelessUnivariateStatistic instance to use for
./stat/descriptive/SummaryStatistics.java:     * @param geoMeanImpl the StorelessUnivariateStatistic instance to use for
./stat/descriptive/SummaryStatistics.java:     * @param meanImpl the StorelessUnivariateStatistic instance to use for
./stat/descriptive/SummaryStatistics.java:     * @param varianceImpl the StorelessUnivariateStatistic instance to use for
./stat/descriptive/SummaryStatistics.java:     * @param source SummaryStatistics to copy
./stat/descriptive/SummaryStatistics.java:     * @param dest SummaryStatistics to copy to
./stat/descriptive/StorelessUnivariateStatistic.java:     * @param d  the new value.
./stat/descriptive/StorelessUnivariateStatistic.java:     * @param values  array holding the new values to add
./stat/descriptive/StorelessUnivariateStatistic.java:     * @param values  array holding the new values to add
./stat/descriptive/StorelessUnivariateStatistic.java:     * @param start  the array index of the first value to add
./stat/descriptive/StorelessUnivariateStatistic.java:     * @param length  the number of elements to add
./stat/descriptive/AbstractUnivariateStatistic.java:     * @param values data array to store (may be null to remove stored data)
./stat/descriptive/AbstractUnivariateStatistic.java:     * @param values data array to store
./stat/descriptive/AbstractUnivariateStatistic.java:     * @param begin the index of the first element to include
./stat/descriptive/AbstractUnivariateStatistic.java:     * @param length the number of elements to include
./stat/descriptive/AbstractUnivariateStatistic.java:     * @param values the input array
./stat/descriptive/AbstractUnivariateStatistic.java:     * @param begin index of the first array element to include
./stat/descriptive/AbstractUnivariateStatistic.java:     * @param length the number of elements to include
./stat/descriptive/AbstractUnivariateStatistic.java:     * @param values the input array
./stat/descriptive/AbstractUnivariateStatistic.java:     * @param begin index of the first array element to include
./stat/descriptive/AbstractUnivariateStatistic.java:     * @param length the number of elements to include
./stat/descriptive/AbstractUnivariateStatistic.java:     * @param allowEmpty if <code>true</code> then zero length arrays are allowed
./stat/descriptive/AbstractUnivariateStatistic.java:     * @param values the input array
./stat/descriptive/AbstractUnivariateStatistic.java:     * @param weights the weights array
./stat/descriptive/AbstractUnivariateStatistic.java:     * @param begin index of the first array element to include
./stat/descriptive/AbstractUnivariateStatistic.java:     * @param length the number of elements to include
./stat/descriptive/AbstractUnivariateStatistic.java:     * @param values the input array.
./stat/descriptive/AbstractUnivariateStatistic.java:     * @param weights the weights array.
./stat/descriptive/AbstractUnivariateStatistic.java:     * @param begin index of the first array element to include.
./stat/descriptive/AbstractUnivariateStatistic.java:     * @param length the number of elements to include.
./stat/descriptive/AbstractUnivariateStatistic.java:     * @param allowEmpty if {@code true} than allow zero length arrays to pass.
./stat/descriptive/SynchronizedMultivariateSummaryStatistics.java:     * @param k dimension of the data
./stat/descriptive/SynchronizedMultivariateSummaryStatistics.java:     * @param isCovarianceBiasCorrected if true, the unbiased sample
./stat/descriptive/MultivariateSummaryStatistics.java:     * @param k dimension of the data
./stat/descriptive/MultivariateSummaryStatistics.java:     * @param isCovarianceBiasCorrected if true, the unbiased sample
./stat/descriptive/MultivariateSummaryStatistics.java:     * @param value  the n-tuple to add
./stat/descriptive/MultivariateSummaryStatistics.java:     * @param stats univariate statistic array
./stat/descriptive/MultivariateSummaryStatistics.java:     * @param buffer buffer to fill
./stat/descriptive/MultivariateSummaryStatistics.java:     * @param data data array
./stat/descriptive/MultivariateSummaryStatistics.java:     * @param prefix text prefix
./stat/descriptive/MultivariateSummaryStatistics.java:     * @param separator elements separator
./stat/descriptive/MultivariateSummaryStatistics.java:     * @param suffix text suffix
./stat/descriptive/MultivariateSummaryStatistics.java:     * @param object the object to test equality against.
./stat/descriptive/MultivariateSummaryStatistics.java:     * @param newImpl new implementations for statistics
./stat/descriptive/MultivariateSummaryStatistics.java:     * @param oldImpl old implementations for statistics
./stat/descriptive/MultivariateSummaryStatistics.java:     * @param sumImpl the StorelessUnivariateStatistic instance to use
./stat/descriptive/MultivariateSummaryStatistics.java:     * @param sumsqImpl the StorelessUnivariateStatistic instance to use
./stat/descriptive/MultivariateSummaryStatistics.java:     * @param minImpl the StorelessUnivariateStatistic instance to use
./stat/descriptive/MultivariateSummaryStatistics.java:     * @param maxImpl the StorelessUnivariateStatistic instance to use
./stat/descriptive/MultivariateSummaryStatistics.java:     * @param sumLogImpl the StorelessUnivariateStatistic instance to use
./stat/descriptive/MultivariateSummaryStatistics.java:     * @param geoMeanImpl the StorelessUnivariateStatistic instance to use
./stat/descriptive/MultivariateSummaryStatistics.java:     * @param meanImpl the StorelessUnivariateStatistic instance to use
./stat/descriptive/MultivariateSummaryStatistics.java:     * @param dimension dimension to check
./stat/descriptive/StatisticalSummaryValues.java:      * @param mean  the sample mean
./stat/descriptive/StatisticalSummaryValues.java:      * @param variance  the sample variance
./stat/descriptive/StatisticalSummaryValues.java:      * @param n  the number of observations in the sample
./stat/descriptive/StatisticalSummaryValues.java:      * @param max  the maximum value
./stat/descriptive/StatisticalSummaryValues.java:      * @param min  the minimum value
./stat/descriptive/StatisticalSummaryValues.java:      * @param sum  the sum of the values
./stat/descriptive/StatisticalSummaryValues.java:     * @param object the object to test equality against.
./stat/descriptive/SynchronizedDescriptiveStatistics.java:     * @param window the finite window size.
./stat/descriptive/SynchronizedDescriptiveStatistics.java:     * @param original the {@code SynchronizedDescriptiveStatistics} instance to copy
./stat/descriptive/SynchronizedDescriptiveStatistics.java:     * @param source SynchronizedDescriptiveStatistics to copy
./stat/descriptive/SynchronizedDescriptiveStatistics.java:     * @param dest SynchronizedDescriptiveStatistics to copy to
./stat/descriptive/SynchronizedSummaryStatistics.java:     * @param original the {@code SynchronizedSummaryStatistics} instance to copy
./stat/descriptive/SynchronizedSummaryStatistics.java:     * @param source SynchronizedSummaryStatistics to copy
./stat/descriptive/SynchronizedSummaryStatistics.java:     * @param dest SynchronizedSummaryStatistics to copy to
./stat/descriptive/UnivariateStatistic.java:     * @param values input array
./stat/descriptive/UnivariateStatistic.java:     * @param values the input array
./stat/descriptive/UnivariateStatistic.java:     * @param begin the index of the first element to include
./stat/descriptive/UnivariateStatistic.java:     * @param length the number of elements to include
./stat/descriptive/AggregateSummaryStatistics.java:     * @param prototypeStatistics a {@code SummaryStatistics} serving as a
./stat/descriptive/AggregateSummaryStatistics.java:     * @param prototypeStatistics a {@code SummaryStatistics} serving as a
./stat/descriptive/AggregateSummaryStatistics.java:     * @param initialStatistics a {@code SummaryStatistics} to serve as the
./stat/descriptive/AggregateSummaryStatistics.java:     * @param statistics collection of SummaryStatistics to aggregate
./stat/descriptive/AggregateSummaryStatistics.java:         * @param aggregateStatistics a {@code SummaryStatistics} into which
./stat/descriptive/AggregateSummaryStatistics.java:         * @param object the object to test equality against.
./stat/descriptive/moment/SemiVariance.java:     * @param biasCorrected  setting for bias correction - true means
./stat/descriptive/moment/SemiVariance.java:     * @param direction  setting for the direction of the SemiVariance
./stat/descriptive/moment/SemiVariance.java:     * @param corrected  setting for bias correction - true means
./stat/descriptive/moment/SemiVariance.java:     * @param direction  setting for the direction of the SemiVariance
./stat/descriptive/moment/SemiVariance.java:     * @param original the {@code SemiVariance} instance to copy
./stat/descriptive/moment/SemiVariance.java:     * @param source SemiVariance to copy
./stat/descriptive/moment/SemiVariance.java:     * @param dest SemiVariance to copy to
./stat/descriptive/moment/SemiVariance.java:      * @param values the input array
./stat/descriptive/moment/SemiVariance.java:      * @param start index of the first array element to include
./stat/descriptive/moment/SemiVariance.java:      * @param length the number of elements to include
./stat/descriptive/moment/SemiVariance.java:       * @param values the input array
./stat/descriptive/moment/SemiVariance.java:       * @param direction the {@link Direction} of the semivariance
./stat/descriptive/moment/SemiVariance.java:       * @param values the input array
./stat/descriptive/moment/SemiVariance.java:       * @param cutoff the reference point
./stat/descriptive/moment/SemiVariance.java:       * @param values the input array
./stat/descriptive/moment/SemiVariance.java:       * @param cutoff the reference point
./stat/descriptive/moment/SemiVariance.java:       * @param direction the {@link Direction} of the semivariance
./stat/descriptive/moment/SemiVariance.java:      * @param values the input array
./stat/descriptive/moment/SemiVariance.java:      * @param cutoff the reference point
./stat/descriptive/moment/SemiVariance.java:      * @param direction the {@link Direction} of the semivariance
./stat/descriptive/moment/SemiVariance.java:      * @param corrected the BiasCorrection flag
./stat/descriptive/moment/SemiVariance.java:      * @param start index of the first array element to include
./stat/descriptive/moment/SemiVariance.java:      * @param length the number of elements to include
./stat/descriptive/moment/SemiVariance.java:     * @param biasCorrected new biasCorrected property value
./stat/descriptive/moment/SemiVariance.java:     * @param varianceDirection the direction of the semivariance
./stat/descriptive/moment/SemiVariance.java:         * @param b boolean value representing the Direction. True corresponds to UPSIDE.
./stat/descriptive/moment/GeometricMean.java:     * @param original the {@code GeometricMean} instance to copy
./stat/descriptive/moment/GeometricMean.java:     * @param sumOfLogs sum of logs instance to use for computation
./stat/descriptive/moment/GeometricMean.java:     * @param values input array containing the values
./stat/descriptive/moment/GeometricMean.java:     * @param begin first array element to include
./stat/descriptive/moment/GeometricMean.java:     * @param length the number of elements to include
./stat/descriptive/moment/GeometricMean.java:     * @param sumLogImpl the StorelessUnivariateStatistic instance to use
./stat/descriptive/moment/GeometricMean.java:     * @param source GeometricMean to copy
./stat/descriptive/moment/GeometricMean.java:     * @param dest GeometricMean to copy to
./stat/descriptive/moment/StandardDeviation.java:     * @param m2 the external moment
./stat/descriptive/moment/StandardDeviation.java:     * @param original the {@code StandardDeviation} instance to copy
./stat/descriptive/moment/StandardDeviation.java:     * @param isBiasCorrected  whether or not the variance computation will use
./stat/descriptive/moment/StandardDeviation.java:     * @param isBiasCorrected  whether or not the variance computation will use
./stat/descriptive/moment/StandardDeviation.java:      * @param m2 the external moment
./stat/descriptive/moment/StandardDeviation.java:     * @param values the input array
./stat/descriptive/moment/StandardDeviation.java:     * @param values the input array
./stat/descriptive/moment/StandardDeviation.java:     * @param begin index of the first array element to include
./stat/descriptive/moment/StandardDeviation.java:     * @param length the number of elements to include
./stat/descriptive/moment/StandardDeviation.java:     * @param values the input array
./stat/descriptive/moment/StandardDeviation.java:     * @param mean the precomputed mean value
./stat/descriptive/moment/StandardDeviation.java:     * @param begin index of the first array element to include
./stat/descriptive/moment/StandardDeviation.java:     * @param length the number of elements to include
./stat/descriptive/moment/StandardDeviation.java:     * @param values the input array
./stat/descriptive/moment/StandardDeviation.java:     * @param mean the precomputed mean value
./stat/descriptive/moment/StandardDeviation.java:     * @param isBiasCorrected The isBiasCorrected to set.
./stat/descriptive/moment/StandardDeviation.java:     * @param source StandardDeviation to copy
./stat/descriptive/moment/StandardDeviation.java:     * @param dest StandardDeviation to copy to
./stat/descriptive/moment/SecondMoment.java:     * @param original the {@code SecondMoment} instance to copy
./stat/descriptive/moment/SecondMoment.java:     * @param source SecondMoment to copy
./stat/descriptive/moment/SecondMoment.java:     * @param dest SecondMoment to copy to
./stat/descriptive/moment/VectorialCovariance.java:     * @param dimension vectors dimension
./stat/descriptive/moment/VectorialCovariance.java:     * @param isBiasCorrected if true, computed the unbiased sample covariance,
./stat/descriptive/moment/VectorialCovariance.java:     * @param v vector to add
./stat/descriptive/moment/FirstMoment.java:     * @param original the {@code FirstMoment} instance to copy
./stat/descriptive/moment/FirstMoment.java:     * @param source FirstMoment to copy
./stat/descriptive/moment/FirstMoment.java:     * @param dest FirstMoment to copy to
./stat/descriptive/moment/Variance.java:     * @param m2 the SecondMoment (Third or Fourth moments work
./stat/descriptive/moment/Variance.java:     * @param isBiasCorrected  setting for bias correction - true means
./stat/descriptive/moment/Variance.java:     * @param isBiasCorrected  setting for bias correction - true means
./stat/descriptive/moment/Variance.java:     * @param m2 the SecondMoment (Third or Fourth moments work
./stat/descriptive/moment/Variance.java:     * @param original the {@code Variance} instance to copy
./stat/descriptive/moment/Variance.java:     * @param values the input array
./stat/descriptive/moment/Variance.java:     * @param values the input array
./stat/descriptive/moment/Variance.java:     * @param begin index of the first array element to include
./stat/descriptive/moment/Variance.java:     * @param length the number of elements to include
./stat/descriptive/moment/Variance.java:     * @param values the input array
./stat/descriptive/moment/Variance.java:     * @param weights the weights array
./stat/descriptive/moment/Variance.java:     * @param begin index of the first array element to include
./stat/descriptive/moment/Variance.java:     * @param length the number of elements to include
./stat/descriptive/moment/Variance.java:     * @param values the input array
./stat/descriptive/moment/Variance.java:     * @param weights the weights array
./stat/descriptive/moment/Variance.java:     * @param values the input array
./stat/descriptive/moment/Variance.java:     * @param mean the precomputed mean value
./stat/descriptive/moment/Variance.java:     * @param begin index of the first array element to include
./stat/descriptive/moment/Variance.java:     * @param length the number of elements to include
./stat/descriptive/moment/Variance.java:     * @param values the input array
./stat/descriptive/moment/Variance.java:     * @param mean the precomputed mean value
./stat/descriptive/moment/Variance.java:     * @param values the input array
./stat/descriptive/moment/Variance.java:     * @param weights the weights array
./stat/descriptive/moment/Variance.java:     * @param mean the precomputed weighted mean value
./stat/descriptive/moment/Variance.java:     * @param begin index of the first array element to include
./stat/descriptive/moment/Variance.java:     * @param length the number of elements to include
./stat/descriptive/moment/Variance.java:     * @param values the input array
./stat/descriptive/moment/Variance.java:     * @param weights the weights array
./stat/descriptive/moment/Variance.java:     * @param mean the precomputed weighted mean value
./stat/descriptive/moment/Variance.java:     * @param biasCorrected The isBiasCorrected to set.
./stat/descriptive/moment/Variance.java:     * @param source Variance to copy
./stat/descriptive/moment/Variance.java:     * @param dest Variance to copy to
./stat/descriptive/moment/ThirdMoment.java:     * @param original the {@code ThirdMoment} instance to copy
./stat/descriptive/moment/ThirdMoment.java:     * @param source ThirdMoment to copy
./stat/descriptive/moment/ThirdMoment.java:     * @param dest ThirdMoment to copy to
./stat/descriptive/moment/Mean.java:     * @param m1 the moment
./stat/descriptive/moment/Mean.java:     * @param original the {@code Mean} instance to copy
./stat/descriptive/moment/Mean.java:     * @param values the input array
./stat/descriptive/moment/Mean.java:     * @param begin index of the first array element to include
./stat/descriptive/moment/Mean.java:     * @param length the number of elements to include
./stat/descriptive/moment/Mean.java:     * @param values the input array
./stat/descriptive/moment/Mean.java:     * @param weights the weights array
./stat/descriptive/moment/Mean.java:     * @param begin index of the first array element to include
./stat/descriptive/moment/Mean.java:     * @param length the number of elements to include
./stat/descriptive/moment/Mean.java:     * @param values the input array
./stat/descriptive/moment/Mean.java:     * @param weights the weights array
./stat/descriptive/moment/Mean.java:     * @param source Mean to copy
./stat/descriptive/moment/Mean.java:     * @param dest Mean to copy to
./stat/descriptive/moment/FourthMoment.java:     * @param original the {@code FourthMoment} instance to copy
./stat/descriptive/moment/FourthMoment.java:     * @param source FourthMoment to copy
./stat/descriptive/moment/FourthMoment.java:     * @param dest FourthMoment to copy to
./stat/descriptive/moment/Skewness.java:     * @param m3 external moment
./stat/descriptive/moment/Skewness.java:     * @param original the {@code Skewness} instance to copy
./stat/descriptive/moment/Skewness.java:     * @param values the input array
./stat/descriptive/moment/Skewness.java:     * @param begin the index of the first array element to include
./stat/descriptive/moment/Skewness.java:     * @param length the number of elements to include
./stat/descriptive/moment/Skewness.java:     * @param source Skewness to copy
./stat/descriptive/moment/Skewness.java:     * @param dest Skewness to copy to
./stat/descriptive/moment/Kurtosis.java:     * @param m4 external Moment
./stat/descriptive/moment/Kurtosis.java:     * @param original the {@code Kurtosis} instance to copy
./stat/descriptive/moment/Kurtosis.java:     * @param values the input array
./stat/descriptive/moment/Kurtosis.java:     * @param begin index of the first array element to include
./stat/descriptive/moment/Kurtosis.java:     * @param length the number of elements to include
./stat/descriptive/moment/Kurtosis.java:     * @param source Kurtosis to copy
./stat/descriptive/moment/Kurtosis.java:     * @param dest Kurtosis to copy to
./stat/descriptive/moment/VectorialMean.java:     * @param dimension vectors dimension
./stat/descriptive/moment/VectorialMean.java:     * @param v vector to add
./stat/descriptive/DescriptiveStatistics.java:     * @param window the window size.
./stat/descriptive/DescriptiveStatistics.java:     * @param initialDoubleArray the initial double[].
./stat/descriptive/DescriptiveStatistics.java:     * @param original DescriptiveStatistics instance to copy
./stat/descriptive/DescriptiveStatistics.java:     * @param v the value to be added
./stat/descriptive/DescriptiveStatistics.java:     * @param v the value to replace the most recent stored value
./stat/descriptive/DescriptiveStatistics.java:     * @param windowSize sets the size of the window.
./stat/descriptive/DescriptiveStatistics.java:     * @param index The Index of the element
./stat/descriptive/DescriptiveStatistics.java:     * @param p the requested percentile (scaled from 0 - 100)
./stat/descriptive/DescriptiveStatistics.java:     * @param stat the statistic to apply
./stat/descriptive/DescriptiveStatistics.java:     * @param meanImpl the UnivariateStatistic instance to use
./stat/descriptive/DescriptiveStatistics.java:     * @param geometricMeanImpl the UnivariateStatistic instance to use
./stat/descriptive/DescriptiveStatistics.java:     * @param kurtosisImpl the UnivariateStatistic instance to use
./stat/descriptive/DescriptiveStatistics.java:     * @param maxImpl the UnivariateStatistic instance to use
./stat/descriptive/DescriptiveStatistics.java:     * @param minImpl the UnivariateStatistic instance to use
./stat/descriptive/DescriptiveStatistics.java:     * @param percentileImpl the percentileImpl to set
./stat/descriptive/DescriptiveStatistics.java:     * @param skewnessImpl the UnivariateStatistic instance to use
./stat/descriptive/DescriptiveStatistics.java:     * @param varianceImpl the UnivariateStatistic instance to use
./stat/descriptive/DescriptiveStatistics.java:     * @param sumsqImpl the UnivariateStatistic instance to use
./stat/descriptive/DescriptiveStatistics.java:     * @param sumImpl the UnivariateStatistic instance to use
./stat/descriptive/DescriptiveStatistics.java:     * @param source DescriptiveStatistics to copy
./stat/descriptive/DescriptiveStatistics.java:     * @param dest DescriptiveStatistics to copy to
./stat/descriptive/WeightedEvaluation.java:     * @param values input array
./stat/descriptive/WeightedEvaluation.java:     * @param weights array of weights
./stat/descriptive/WeightedEvaluation.java:     * @param values the input array
./stat/descriptive/WeightedEvaluation.java:     * @param weights array of weights
./stat/descriptive/WeightedEvaluation.java:     * @param begin the index of the first element to include
./stat/descriptive/WeightedEvaluation.java:     * @param length the number of elements to include
./stat/descriptive/rank/Max.java:     * @param original the {@code Max} instance to copy
./stat/descriptive/rank/Max.java:     * @param values the input array
./stat/descriptive/rank/Max.java:     * @param begin index of the first array element to include
./stat/descriptive/rank/Max.java:     * @param length the number of elements to include
./stat/descriptive/rank/Max.java:     * @param source Max to copy
./stat/descriptive/rank/Max.java:     * @param dest Max to copy to
./stat/descriptive/rank/Median.java:     * @param original the {@code Median} instance to copy
./stat/descriptive/rank/Median.java:     * @param estimationType one of the percentile {@link EstimationType  estimation types}
./stat/descriptive/rank/Median.java:     * @param nanStrategy one of {@link NaNStrategy} to handle with NaNs
./stat/descriptive/rank/Median.java:     * @param kthSelector {@link KthSelector} to use for pivoting during search
./stat/descriptive/rank/Percentile.java:     * @param quantile the quantile
./stat/descriptive/rank/Percentile.java:     * @param original the {@code Percentile} instance to copy
./stat/descriptive/rank/Percentile.java:     * @param quantile the quantile to be computed
./stat/descriptive/rank/Percentile.java:     * @param estimationType one of the percentile {@link EstimationType  estimation types}
./stat/descriptive/rank/Percentile.java:     * @param nanStrategy one of {@link NaNStrategy} to handle with NaNs
./stat/descriptive/rank/Percentile.java:     * @param kthSelector a {@link KthSelector} to use for pivoting during search
./stat/descriptive/rank/Percentile.java:     * @param p the percentile value to compute
./stat/descriptive/rank/Percentile.java:     * @param values input array of values
./stat/descriptive/rank/Percentile.java:     * @param p the percentile value to compute
./stat/descriptive/rank/Percentile.java:     * @param values the input array
./stat/descriptive/rank/Percentile.java:     * @param start index of the first array element to include
./stat/descriptive/rank/Percentile.java:     * @param length the number of elements to include
./stat/descriptive/rank/Percentile.java:     * @param values array of input values
./stat/descriptive/rank/Percentile.java:     * @param p  the percentile to compute
./stat/descriptive/rank/Percentile.java:     * @param begin  the first (0-based) element to include in the computation
./stat/descriptive/rank/Percentile.java:     * @param length  the number of array elements to include
./stat/descriptive/rank/Percentile.java:     * @param work data array
./stat/descriptive/rank/Percentile.java:     * @param begin index of the first element of the slice
./stat/descriptive/rank/Percentile.java:     * @param end index after the last element of the slice
./stat/descriptive/rank/Percentile.java:     * @param p a value between 0 < p <= 100
./stat/descriptive/rank/Percentile.java:     * @param source Percentile to copy
./stat/descriptive/rank/Percentile.java:     * @param dest Percentile to copy to
./stat/descriptive/rank/Percentile.java:     * @param values the array of numbers
./stat/descriptive/rank/Percentile.java:     * @param begin index to start reading the array
./stat/descriptive/rank/Percentile.java:     * @param length the length of array to be read from the begin index
./stat/descriptive/rank/Percentile.java:     * @param values the input array
./stat/descriptive/rank/Percentile.java:     * @param begin start index of the array to include
./stat/descriptive/rank/Percentile.java:     * @param length number of elements to include from begin
./stat/descriptive/rank/Percentile.java:     * @param values the input array
./stat/descriptive/rank/Percentile.java:     * @param begin start index of the array to include
./stat/descriptive/rank/Percentile.java:     * @param length number of elements to include from begin
./stat/descriptive/rank/Percentile.java:     * @param original the value to be replaced with
./stat/descriptive/rank/Percentile.java:     * @param replacement the value to be used for replacement
./stat/descriptive/rank/Percentile.java:     * @param values the input array
./stat/descriptive/rank/Percentile.java:     * @param begin start index of the array to include
./stat/descriptive/rank/Percentile.java:     * @param length number of elements to include from begin
./stat/descriptive/rank/Percentile.java:     * @param removedValue the value to be removed from the sliced array
./stat/descriptive/rank/Percentile.java:     * @param values array containing the input numbers
./stat/descriptive/rank/Percentile.java:     * @param newEstimationType estimation type for the new instance
./stat/descriptive/rank/Percentile.java:     * @param newNaNStrategy NaN strategy for the new instance
./stat/descriptive/rank/Percentile.java:     * @param newKthSelector KthSelector for the new instance
./stat/descriptive/rank/Percentile.java:         * @param type name of estimation type as per wikipedia
./stat/descriptive/rank/Percentile.java:         * @param p the p<sup>th</sup> quantile
./stat/descriptive/rank/Percentile.java:         * @param length the total number of array elements in the work array
./stat/descriptive/rank/Percentile.java:         * @param work array of numbers to be used for finding the percentile
./stat/descriptive/rank/Percentile.java:         * @param pos indicated positional index prior computed from calling
./stat/descriptive/rank/Percentile.java:         * @param pivotsHeap an earlier populated cache if exists; will be used
./stat/descriptive/rank/Percentile.java:         * @param length size of array considered
./stat/descriptive/rank/Percentile.java:         * @param selector a {@link KthSelector} used for pivoting during search
./stat/descriptive/rank/Percentile.java:         * @param work array of numbers to be used for finding the percentile
./stat/descriptive/rank/Percentile.java:         * @param pivotsHeap a prior cached heap which can speed up estimation
./stat/descriptive/rank/Percentile.java:         * @param p the p<sup>th</sup> quantile to be computed
./stat/descriptive/rank/Percentile.java:         * @param selector a {@link KthSelector} used for pivoting during search
./stat/descriptive/rank/Percentile.java:         * @param work array of numbers to be used for finding the percentile
./stat/descriptive/rank/Percentile.java:         * @param p the p<sup>th</sup> quantile to be computed
./stat/descriptive/rank/Percentile.java:         * @param selector a {@link KthSelector} used for pivoting during search
./stat/descriptive/rank/PSquarePercentile.java:     * @param p the percentile
./stat/descriptive/rank/PSquarePercentile.java:     * @param o object to compare
./stat/descriptive/rank/PSquarePercentile.java:     * @param observation the observation currently being added.
./stat/descriptive/rank/PSquarePercentile.java:         * @param theMarkerArray marker array to be used
./stat/descriptive/rank/PSquarePercentile.java:         * @param initialFive elements required to build Marker
./stat/descriptive/rank/PSquarePercentile.java:         * @param p quantile required to be computed
./stat/descriptive/rank/PSquarePercentile.java:         * @param initialFive list of initial five elements
./stat/descriptive/rank/PSquarePercentile.java:         * @param p the pth quantile
./stat/descriptive/rank/PSquarePercentile.java:         * @param o is the other object
./stat/descriptive/rank/PSquarePercentile.java:         * @param inputDataPoint is the data point passed
./stat/descriptive/rank/PSquarePercentile.java:         * @param observation the input value to be checked for
./stat/descriptive/rank/PSquarePercentile.java:         * @param d The increment value for the position
./stat/descriptive/rank/PSquarePercentile.java:         * @param startIndex start index of the marker array
./stat/descriptive/rank/PSquarePercentile.java:         * @param endIndex end index of the marker array
./stat/descriptive/rank/PSquarePercentile.java:         * @param anInputStream the input stream to be deserialized
./stat/descriptive/rank/PSquarePercentile.java:         * @param markerIndex index of marker within (1,6)
./stat/descriptive/rank/PSquarePercentile.java:         * @param heightOfMarker represent the quantile value
./stat/descriptive/rank/PSquarePercentile.java:         * @param makerPositionDesired represent the desired marker position
./stat/descriptive/rank/PSquarePercentile.java:         * @param markerPositionIncrement represent increments for position
./stat/descriptive/rank/PSquarePercentile.java:         * @param markerPositionNumber represent the position number of marker
./stat/descriptive/rank/PSquarePercentile.java:         * @param previousMarker the previous marker to the current marker in
./stat/descriptive/rank/PSquarePercentile.java:         * @param nextMarker the next marker to the current marker in the array
./stat/descriptive/rank/PSquarePercentile.java:         * @param indexOfMarker the array index of the marker in marker array
./stat/descriptive/rank/PSquarePercentile.java:         * @param d a delta value to increment
./stat/descriptive/rank/PSquarePercentile.java:         * @param y the array to get the bounds
./stat/descriptive/rank/PSquarePercentile.java:         * @param yD the estimate
./stat/descriptive/rank/PSquarePercentile.java:         * @param o Other object
./stat/descriptive/rank/PSquarePercentile.java:         * @param anInstream Stream Object data
./stat/descriptive/rank/PSquarePercentile.java:     * @param <E>
./stat/descriptive/rank/PSquarePercentile.java:         * @param fixedCapacity the capacity to be fixed for this list
./stat/descriptive/rank/PSquarePercentile.java:     * @param initialFive list of initial five elements
./stat/descriptive/rank/PSquarePercentile.java:     * @param p the quantile desired
./stat/descriptive/rank/PSquarePercentile.java:         * @param markerIndex is the index of marker in the marker array
./stat/descriptive/rank/PSquarePercentile.java:         * @param inputDataPoint is the data point passed
./stat/descriptive/rank/PSquarePercentile.java:         * @param index the marker's index in the array of markers
./stat/descriptive/rank/Min.java:     * @param original the {@code Min} instance to copy
./stat/descriptive/rank/Min.java:     * @param values the input array
./stat/descriptive/rank/Min.java:     * @param begin index of the first array element to include
./stat/descriptive/rank/Min.java:     * @param length the number of elements to include
./stat/descriptive/rank/Min.java:     * @param source Min to copy
./stat/descriptive/rank/Min.java:     * @param dest Min to copy to
./stat/descriptive/AbstractStorelessUnivariateStatistic.java:     * @param values input array
./stat/descriptive/AbstractStorelessUnivariateStatistic.java:     * @param values the input array
./stat/descriptive/AbstractStorelessUnivariateStatistic.java:     * @param begin the index of the first element to include
./stat/descriptive/AbstractStorelessUnivariateStatistic.java:     * @param length the number of elements to include
./stat/descriptive/AbstractStorelessUnivariateStatistic.java:     * @param values values to add
./stat/descriptive/AbstractStorelessUnivariateStatistic.java:     * @param values  array holding values to add
./stat/descriptive/AbstractStorelessUnivariateStatistic.java:     * @param begin   index of the first array element to add
./stat/descriptive/AbstractStorelessUnivariateStatistic.java:     * @param length  number of array elements to add
./stat/descriptive/AbstractStorelessUnivariateStatistic.java:     * @param object object to test equality against.
./stat/Frequency.java:     * @param comparator Comparator used to order values
./stat/Frequency.java:     * @param v the value to add.
./stat/Frequency.java:     * @param v the value to add.
./stat/Frequency.java:     * @param v the value to add.
./stat/Frequency.java:     * @param v the value to add.
./stat/Frequency.java:     * @param v the value to add.
./stat/Frequency.java:     * @param increment the amount by which the value should be incremented
./stat/Frequency.java:     * @param v the value to add.
./stat/Frequency.java:     * @param increment the amount by which the value should be incremented
./stat/Frequency.java:     * @param v the value to add.
./stat/Frequency.java:     * @param increment the amount by which the value should be incremented
./stat/Frequency.java:     * @param v the value to add.
./stat/Frequency.java:     * @param increment the amount by which the value should be incremented
./stat/Frequency.java:     * @param v the value to lookup.
./stat/Frequency.java:     * @param v the value to lookup.
./stat/Frequency.java:     * @param v the value to lookup.
./stat/Frequency.java:     * @param v the value to lookup.
./stat/Frequency.java:     * @param v the value to lookup
./stat/Frequency.java:     * @param v the value to lookup
./stat/Frequency.java:     * @param v the value to lookup
./stat/Frequency.java:     * @param v the value to lookup
./stat/Frequency.java:     * @param v the value to lookup.
./stat/Frequency.java:     * @param v the value to lookup
./stat/Frequency.java:     * @param v the value to lookup
./stat/Frequency.java:     * @param v the value to lookup
./stat/Frequency.java:     * @param v the value to lookup
./stat/Frequency.java:     * @param v the value to lookup
./stat/Frequency.java:     * @param v the value to lookup
./stat/Frequency.java:     * @param v the value to lookup
./stat/Frequency.java:     * @param other the other {@link Frequency} object to be merged
./stat/Frequency.java:     * @param others the other {@link Frequency} objects to be merged
./stat/Frequency.java:     * @param <T> the type of the objects compared
./stat/Frequency.java:         * @param  o1 the first object
./stat/Frequency.java:         * @param  o2 the second object
./stat/inference/OneWayAnova.java:     * @param categoryData <code>Collection</code> of <code>double[]</code>
./stat/inference/OneWayAnova.java:     * @param categoryData <code>Collection</code> of <code>double[]</code>
./stat/inference/OneWayAnova.java:     * @param categoryData <code>Collection</code> of {@link SummaryStatistics}
./stat/inference/OneWayAnova.java:     * @param allowOneElementData if true, allow computation for one catagory
./stat/inference/OneWayAnova.java:     * @param categoryData
./stat/inference/OneWayAnova.java:     * @param categoryData <code>Collection</code> of <code>double[]</code>
./stat/inference/OneWayAnova.java:     * @param alpha significance level of the test
./stat/inference/OneWayAnova.java:     * @param categoryData <code>Collection</code> of <code>double[]</code>
./stat/inference/OneWayAnova.java:     * @param allowOneElementData if true, allow computation for one catagory
./stat/inference/OneWayAnova.java:         * @param dfbg degrees of freedom in numerator (between groups)
./stat/inference/OneWayAnova.java:         * @param dfwg degrees of freedom in denominator (within groups)
./stat/inference/OneWayAnova.java:         * @param F statistic
./stat/inference/WilcoxonSignedRankTest.java:     * @param nanStrategy
./stat/inference/WilcoxonSignedRankTest.java:     * @param tiesStrategy
./stat/inference/WilcoxonSignedRankTest.java:     * @param x first sample
./stat/inference/WilcoxonSignedRankTest.java:     * @param y second sample
./stat/inference/WilcoxonSignedRankTest.java:     * @param x first sample
./stat/inference/WilcoxonSignedRankTest.java:     * @param y second sample
./stat/inference/WilcoxonSignedRankTest.java:     * @param z sample
./stat/inference/WilcoxonSignedRankTest.java:     * @param x the first sample
./stat/inference/WilcoxonSignedRankTest.java:     * @param y the second sample
./stat/inference/WilcoxonSignedRankTest.java:     * @param Wmax largest Wilcoxon signed rank value
./stat/inference/WilcoxonSignedRankTest.java:     * @param N number of subjects (corresponding to x.length)
./stat/inference/WilcoxonSignedRankTest.java:     * @param Wmin smallest Wilcoxon signed rank value
./stat/inference/WilcoxonSignedRankTest.java:     * @param N number of subjects (corresponding to x.length)
./stat/inference/WilcoxonSignedRankTest.java:     * @param x the first sample
./stat/inference/WilcoxonSignedRankTest.java:     * @param y the second sample
./stat/inference/WilcoxonSignedRankTest.java:     * @param exactPValue
./stat/inference/TTest.java:     * @param sample1 array of sample data values
./stat/inference/TTest.java:     * @param sample2 array of sample data values
./stat/inference/TTest.java:     * @param sample1 array of sample data values
./stat/inference/TTest.java:     * @param sample2 array of sample data values
./stat/inference/TTest.java:     * @param sample1 array of sample data values
./stat/inference/TTest.java:     * @param sample2 array of sample data values
./stat/inference/TTest.java:     * @param alpha significance level of the test
./stat/inference/TTest.java:     * @param mu comparison constant
./stat/inference/TTest.java:     * @param observed array of values
./stat/inference/TTest.java:     * @param mu comparison constant
./stat/inference/TTest.java:     * @param sampleStats DescriptiveStatistics holding sample summary statitstics
./stat/inference/TTest.java:     * @param sample1 array of sample data values
./stat/inference/TTest.java:     * @param sample2 array of sample data values
./stat/inference/TTest.java:     * @param sample1 array of sample data values
./stat/inference/TTest.java:     * @param sample2 array of sample data values
./stat/inference/TTest.java:     * @param sampleStats1 StatisticalSummary describing data from the first sample
./stat/inference/TTest.java:     * @param sampleStats2 StatisticalSummary describing data from the second sample
./stat/inference/TTest.java:     * @param sampleStats1 StatisticalSummary describing data from the first sample
./stat/inference/TTest.java:     * @param sampleStats2 StatisticalSummary describing data from the second sample
./stat/inference/TTest.java:     * @param mu constant value to compare sample mean against
./stat/inference/TTest.java:     * @param sample array of sample data values
./stat/inference/TTest.java:     * @param mu constant value to compare sample mean against
./stat/inference/TTest.java:     * @param sample array of sample data values
./stat/inference/TTest.java:     * @param alpha significance level of the test
./stat/inference/TTest.java:     * @param mu constant value to compare sample mean against
./stat/inference/TTest.java:     * @param sampleStats StatisticalSummary describing sample data
./stat/inference/TTest.java:     * @param mu constant value to compare sample mean against
./stat/inference/TTest.java:     * @param sampleStats StatisticalSummary describing sample data values
./stat/inference/TTest.java:     * @param alpha significance level of the test
./stat/inference/TTest.java:     * @param sample1 array of sample data values
./stat/inference/TTest.java:     * @param sample2 array of sample data values
./stat/inference/TTest.java:     * @param sample1 array of sample data values
./stat/inference/TTest.java:     * @param sample2 array of sample data values
./stat/inference/TTest.java:     * @param sample1 array of sample data values
./stat/inference/TTest.java:     * @param sample2 array of sample data values
./stat/inference/TTest.java:     * @param alpha significance level of the test
./stat/inference/TTest.java:     * @param sample1 array of sample data values
./stat/inference/TTest.java:     * @param sample2 array of sample data values
./stat/inference/TTest.java:     * @param alpha significance level of the test
./stat/inference/TTest.java:     * @param sampleStats1  StatisticalSummary describing data from the first sample
./stat/inference/TTest.java:     * @param sampleStats2  StatisticalSummary describing data from the second sample
./stat/inference/TTest.java:     * @param sampleStats1  StatisticalSummary describing data from the first sample
./stat/inference/TTest.java:     * @param sampleStats2  StatisticalSummary describing data from the second sample
./stat/inference/TTest.java:     * @param sampleStats1 StatisticalSummary describing sample data values
./stat/inference/TTest.java:     * @param sampleStats2 StatisticalSummary describing sample data values
./stat/inference/TTest.java:     * @param alpha significance level of the test
./stat/inference/TTest.java:     * @param v1 first sample variance
./stat/inference/TTest.java:     * @param v2 second sample variance
./stat/inference/TTest.java:     * @param n1 first sample n
./stat/inference/TTest.java:     * @param n2 second sample n
./stat/inference/TTest.java:     * @param m sample mean
./stat/inference/TTest.java:     * @param mu constant to test against
./stat/inference/TTest.java:     * @param v sample variance
./stat/inference/TTest.java:     * @param n sample n
./stat/inference/TTest.java:     * @param m1 first sample mean
./stat/inference/TTest.java:     * @param m2 second sample mean
./stat/inference/TTest.java:     * @param v1 first sample variance
./stat/inference/TTest.java:     * @param v2 second sample variance
./stat/inference/TTest.java:     * @param n1 first sample n
./stat/inference/TTest.java:     * @param n2 second sample n
./stat/inference/TTest.java:     * @param m1 first sample mean
./stat/inference/TTest.java:     * @param m2 second sample mean
./stat/inference/TTest.java:     * @param v1 first sample variance
./stat/inference/TTest.java:     * @param v2 second sample variance
./stat/inference/TTest.java:     * @param n1 first sample n
./stat/inference/TTest.java:     * @param n2 second sample n
./stat/inference/TTest.java:     * @param m sample mean
./stat/inference/TTest.java:     * @param mu constant to test against
./stat/inference/TTest.java:     * @param v sample variance
./stat/inference/TTest.java:     * @param n sample n
./stat/inference/TTest.java:     * @param m1 first sample mean
./stat/inference/TTest.java:     * @param m2 second sample mean
./stat/inference/TTest.java:     * @param v1 first sample variance
./stat/inference/TTest.java:     * @param v2 second sample variance
./stat/inference/TTest.java:     * @param n1 first sample n
./stat/inference/TTest.java:     * @param n2 second sample n
./stat/inference/TTest.java:     * @param m1 first sample mean
./stat/inference/TTest.java:     * @param m2 second sample mean
./stat/inference/TTest.java:     * @param v1 first sample variance
./stat/inference/TTest.java:     * @param v2 second sample variance
./stat/inference/TTest.java:     * @param n1 first sample n
./stat/inference/TTest.java:     * @param n2 second sample n
./stat/inference/TTest.java:     * @param alpha significance level
./stat/inference/TTest.java:     * @param data Sample data.
./stat/inference/TTest.java:     * @param stat Statistical summary.
./stat/inference/BinomialTest.java:     * @param numberOfTrials number of trials performed
./stat/inference/BinomialTest.java:     * @param numberOfSuccesses number of successes observed
./stat/inference/BinomialTest.java:     * @param probability assumed probability of a single trial under the null hypothesis
./stat/inference/BinomialTest.java:     * @param alternativeHypothesis type of hypothesis being evaluated (one- or two-sided)
./stat/inference/BinomialTest.java:     * @param alpha significance level of the test
./stat/inference/BinomialTest.java:     * @param numberOfTrials number of trials performed
./stat/inference/BinomialTest.java:     * @param numberOfSuccesses number of successes observed
./stat/inference/BinomialTest.java:     * @param probability assumed probability of a single trial under the null hypothesis
./stat/inference/BinomialTest.java:     * @param alternativeHypothesis type of hypothesis being evaluated (one- or two-sided)
./stat/inference/MannWhitneyUTest.java:     * @param nanStrategy
./stat/inference/MannWhitneyUTest.java:     * @param tiesStrategy
./stat/inference/MannWhitneyUTest.java:     * @param x first sample
./stat/inference/MannWhitneyUTest.java:     * @param y second sample
./stat/inference/MannWhitneyUTest.java:     * @param x first sample
./stat/inference/MannWhitneyUTest.java:     * @param y second sample
./stat/inference/MannWhitneyUTest.java:     * @param x the first sample
./stat/inference/MannWhitneyUTest.java:     * @param y the second sample
./stat/inference/MannWhitneyUTest.java:     * @param Umin smallest Mann-Whitney U value
./stat/inference/MannWhitneyUTest.java:     * @param n1 number of subjects in first sample
./stat/inference/MannWhitneyUTest.java:     * @param n2 number of subjects in second sample
./stat/inference/MannWhitneyUTest.java:     * @param x the first sample
./stat/inference/MannWhitneyUTest.java:     * @param y the second sample
./stat/inference/ChiSquareTest.java:     * @param observed array of observed frequency counts
./stat/inference/ChiSquareTest.java:     * @param expected array of expected frequency counts
./stat/inference/ChiSquareTest.java:     * @param observed array of observed frequency counts
./stat/inference/ChiSquareTest.java:     * @param expected array of expected frequency counts
./stat/inference/ChiSquareTest.java:     * @param observed array of observed frequency counts
./stat/inference/ChiSquareTest.java:     * @param expected array of expected frequency counts
./stat/inference/ChiSquareTest.java:     * @param alpha significance level of the test
./stat/inference/ChiSquareTest.java:     * @param counts array representation of 2-way table
./stat/inference/ChiSquareTest.java:     * @param counts array representation of 2-way table
./stat/inference/ChiSquareTest.java:     * @param counts array representation of 2-way table
./stat/inference/ChiSquareTest.java:     * @param alpha significance level of the test
./stat/inference/ChiSquareTest.java:     * @param observed1 array of observed frequency counts of the first data set
./stat/inference/ChiSquareTest.java:     * @param observed2 array of observed frequency counts of the second data set
./stat/inference/ChiSquareTest.java:     * @param observed1 array of observed frequency counts of the first data set
./stat/inference/ChiSquareTest.java:     * @param observed2 array of observed frequency counts of the second data set
./stat/inference/ChiSquareTest.java:     * @param observed1 array of observed frequency counts of the first data set
./stat/inference/ChiSquareTest.java:     * @param observed2 array of observed frequency counts of the second data set
./stat/inference/ChiSquareTest.java:     * @param alpha significance level of the test
./stat/inference/ChiSquareTest.java:     * @param in input 2-way table to check
./stat/inference/GTest.java:     * @param observed array of observed frequency counts
./stat/inference/GTest.java:     * @param expected array of expected frequency counts
./stat/inference/GTest.java:     * @param observed array of observed frequency counts
./stat/inference/GTest.java:     * @param expected array of expected frequency counts
./stat/inference/GTest.java:     * @param observed array of observed frequency counts
./stat/inference/GTest.java:     * @param expected array of expected frequency counts
./stat/inference/GTest.java:     * @param observed array of observed frequency counts
./stat/inference/GTest.java:     * @param expected array of expected frequency counts
./stat/inference/GTest.java:     * @param alpha significance level of the test
./stat/inference/GTest.java:     * @param k 2 Dimensional Matrix of long values (for ex. the counts of a
./stat/inference/GTest.java:     * @param k Vector (for ex. Row Sums of a trials)
./stat/inference/GTest.java:     * @param observed1 array of observed frequency counts of the first data set
./stat/inference/GTest.java:     * @param observed2 array of observed frequency counts of the second data
./stat/inference/GTest.java:     * @param k11 number of times the two events occurred together (AB)
./stat/inference/GTest.java:     * @param k12 number of times the second event occurred WITHOUT the
./stat/inference/GTest.java:     * @param k21 number of times the first event occurred WITHOUT the
./stat/inference/GTest.java:     * @param k22 number of times something else occurred (i.e. was neither
./stat/inference/GTest.java:     * @param observed1 array of observed frequency counts of the first data set
./stat/inference/GTest.java:     * @param observed2 array of observed frequency counts of the second data
./stat/inference/GTest.java:     * @param observed1 array of observed frequency counts of the first data set
./stat/inference/GTest.java:     * @param observed2 array of observed frequency counts of the second data
./stat/inference/GTest.java:     * @param alpha significance level of the test
./stat/inference/KolmogorovSmirnovTest.java:     * @param rng random data generator used by {@link #monteCarloP(double, int, int, boolean, int)}
./stat/inference/KolmogorovSmirnovTest.java:     * @param distribution reference distribution
./stat/inference/KolmogorovSmirnovTest.java:     * @param data sample being being evaluated
./stat/inference/KolmogorovSmirnovTest.java:     * @param exact whether or not to force exact computation of the p-value
./stat/inference/KolmogorovSmirnovTest.java:     * @param distribution reference distribution
./stat/inference/KolmogorovSmirnovTest.java:     * @param data sample being evaluated
./stat/inference/KolmogorovSmirnovTest.java:     * @param x first sample dataset
./stat/inference/KolmogorovSmirnovTest.java:     * @param y second sample dataset
./stat/inference/KolmogorovSmirnovTest.java:     * @param strict whether or not the probability to compute is expressed as a strict inequality
./stat/inference/KolmogorovSmirnovTest.java:     * @param x first sample dataset
./stat/inference/KolmogorovSmirnovTest.java:     * @param y second sample dataset
./stat/inference/KolmogorovSmirnovTest.java:     * @param x first sample
./stat/inference/KolmogorovSmirnovTest.java:     * @param y second sample
./stat/inference/KolmogorovSmirnovTest.java:     * @param x first sample
./stat/inference/KolmogorovSmirnovTest.java:     * @param y second sample
./stat/inference/KolmogorovSmirnovTest.java:     * @param distribution reference distribution
./stat/inference/KolmogorovSmirnovTest.java:     * @param data sample being being evaluated
./stat/inference/KolmogorovSmirnovTest.java:     * @param distribution reference distribution
./stat/inference/KolmogorovSmirnovTest.java:     * @param data sample being being evaluated
./stat/inference/KolmogorovSmirnovTest.java:     * @param alpha significance level of the test
./stat/inference/KolmogorovSmirnovTest.java:     * @param x first sample
./stat/inference/KolmogorovSmirnovTest.java:     * @param y second sample
./stat/inference/KolmogorovSmirnovTest.java:     * @param iterations number of bootstrap resampling iterations
./stat/inference/KolmogorovSmirnovTest.java:     * @param strict whether or not the null hypothesis is expressed as a strict inequality
./stat/inference/KolmogorovSmirnovTest.java:     * @param x first sample
./stat/inference/KolmogorovSmirnovTest.java:     * @param y second sample
./stat/inference/KolmogorovSmirnovTest.java:     * @param iterations number of bootstrap resampling iterations
./stat/inference/KolmogorovSmirnovTest.java:     * @param d statistic
./stat/inference/KolmogorovSmirnovTest.java:     * @param n sample size
./stat/inference/KolmogorovSmirnovTest.java:     * @param d statistic
./stat/inference/KolmogorovSmirnovTest.java:     * @param n sample size
./stat/inference/KolmogorovSmirnovTest.java:     * @param d statistic
./stat/inference/KolmogorovSmirnovTest.java:     * @param n sample size
./stat/inference/KolmogorovSmirnovTest.java:     * @param exact whether the probability should be calculated exact using
./stat/inference/KolmogorovSmirnovTest.java:     * @param d statistic
./stat/inference/KolmogorovSmirnovTest.java:     * @param n sample size
./stat/inference/KolmogorovSmirnovTest.java:     * @param d statistic
./stat/inference/KolmogorovSmirnovTest.java:     * @param n sample size
./stat/inference/KolmogorovSmirnovTest.java:     * @param d value of d-statistic (x in [2])
./stat/inference/KolmogorovSmirnovTest.java:     * @param n sample size
./stat/inference/KolmogorovSmirnovTest.java:     * @param d statistic
./stat/inference/KolmogorovSmirnovTest.java:     * @param n sample size
./stat/inference/KolmogorovSmirnovTest.java:     * @param d statistic
./stat/inference/KolmogorovSmirnovTest.java:     * @param n sample size
./stat/inference/KolmogorovSmirnovTest.java:     * @param array array to test
./stat/inference/KolmogorovSmirnovTest.java:     * @param t argument
./stat/inference/KolmogorovSmirnovTest.java:     * @param tolerance Cauchy criterion for partial sums
./stat/inference/KolmogorovSmirnovTest.java:     * @param maxIterations maximum number of partial sums to compute
./stat/inference/KolmogorovSmirnovTest.java:     * @param d a d-statistic in the range [0, 1]
./stat/inference/KolmogorovSmirnovTest.java:     * @param n first sample size
./stat/inference/KolmogorovSmirnovTest.java:     * @param m second sample size
./stat/inference/KolmogorovSmirnovTest.java:     * @param strict whether the returned value divided by (n*m) is allowed to be equal to d
./stat/inference/KolmogorovSmirnovTest.java:     * @param d D-statistic value
./stat/inference/KolmogorovSmirnovTest.java:     * @param n first sample size
./stat/inference/KolmogorovSmirnovTest.java:     * @param m second sample size
./stat/inference/KolmogorovSmirnovTest.java:     * @param strict whether or not the probability to compute is expressed as a strict inequality
./stat/inference/KolmogorovSmirnovTest.java:     * @param d D-statistic value
./stat/inference/KolmogorovSmirnovTest.java:     * @param n first sample size
./stat/inference/KolmogorovSmirnovTest.java:     * @param m second sample size
./stat/inference/KolmogorovSmirnovTest.java:     * @param b boolean array
./stat/inference/KolmogorovSmirnovTest.java:     * @param numberOfTrueValues number of {@code true} values the boolean array should finally have
./stat/inference/KolmogorovSmirnovTest.java:     * @param rng random data generator
./stat/inference/KolmogorovSmirnovTest.java:     * @param d D-statistic value
./stat/inference/KolmogorovSmirnovTest.java:     * @param n first sample size
./stat/inference/KolmogorovSmirnovTest.java:     * @param m second sample size
./stat/inference/KolmogorovSmirnovTest.java:     * @param iterations number of random partitions to generate
./stat/inference/KolmogorovSmirnovTest.java:     * @param strict whether or not the probability to compute is expressed as a strict inequality
./stat/inference/KolmogorovSmirnovTest.java:     * @param d integral D-statistic
./stat/inference/KolmogorovSmirnovTest.java:     * @param n first sample size
./stat/inference/KolmogorovSmirnovTest.java:     * @param m second sample size
./stat/inference/KolmogorovSmirnovTest.java:     * @param iterations number of random partitions to generate
./stat/inference/KolmogorovSmirnovTest.java:     * @param x first sample
./stat/inference/KolmogorovSmirnovTest.java:     * @param y second sample
./stat/inference/KolmogorovSmirnovTest.java:     * @param x first sample
./stat/inference/KolmogorovSmirnovTest.java:     * @param y second sample
./stat/inference/KolmogorovSmirnovTest.java:     * @param data input/output data array - entries overwritten by the method
./stat/inference/KolmogorovSmirnovTest.java:     * @param dist probability distribution to sample for jitter values
./stat/inference/KolmogorovSmirnovTest.java:     * @param i first path parameter
./stat/inference/KolmogorovSmirnovTest.java:     * @param j second path paramter
./stat/inference/KolmogorovSmirnovTest.java:     * @param m first sample size
./stat/inference/KolmogorovSmirnovTest.java:     * @param n second sample size
./stat/inference/KolmogorovSmirnovTest.java:     * @param cmn integral D-statistic (see {@link #calculateIntegralD(double, int, int, boolean)})
./stat/inference/KolmogorovSmirnovTest.java:     * @param strict whether or not the null hypothesis uses strict inequality
./stat/inference/KolmogorovSmirnovTest.java:     * @param i first path parameter
./stat/inference/KolmogorovSmirnovTest.java:     * @param j second path parameter
./stat/inference/KolmogorovSmirnovTest.java:     * @param m first sample size
./stat/inference/KolmogorovSmirnovTest.java:     * @param n second sample size
./stat/inference/KolmogorovSmirnovTest.java:     * @param cnm integral D-statistic (see {@link #calculateIntegralD(double, int, int, boolean)})
./stat/inference/KolmogorovSmirnovTest.java:     * @param strict whether or not the null hypothesis uses strict inequality
./transform/FastSineTransformer.java:     * @param normalization the type of normalization to be applied to the transformed data
./transform/FastSineTransformer.java:     * @param f the real data array to be transformed
./transform/RealTransformer.java:     * @param f the real data array to be transformed (signal)
./transform/RealTransformer.java:     * @param type the type of transform (forward, inverse) to be performed
./transform/RealTransformer.java:     * @param f the function to be sampled and transformed
./transform/RealTransformer.java:     * @param min the (inclusive) lower bound for the interval
./transform/RealTransformer.java:     * @param max the (exclusive) upper bound for the interval
./transform/RealTransformer.java:     * @param n the number of sample points
./transform/RealTransformer.java:     * @param type the type of transform (forward, inverse) to be performed
./transform/FastHadamardTransformer.java:     * @param f the integer data array to be transformed (signal)
./transform/FastHadamardTransformer.java:     * @param x the real data array to be transformed
./transform/FastHadamardTransformer.java:     * @param x the integer data array to be transformed
./transform/FastFourierTransformer.java:     * @param normalization the type of normalization to be applied to the
./transform/FastFourierTransformer.java:     * @param a the first array to be shuffled
./transform/FastFourierTransformer.java:     * @param b the second array to be shuffled
./transform/FastFourierTransformer.java:     * @param dataRI the unscaled transformed data
./transform/FastFourierTransformer.java:     * @param normalization the normalization to be applied
./transform/FastFourierTransformer.java:     * @param type the type of transform (forward, inverse) which resulted in the specified data
./transform/FastFourierTransformer.java:     * @param dataRI the two dimensional array of real and imaginary parts of the data
./transform/FastFourierTransformer.java:     * @param normalization the normalization to be applied to the transformed data
./transform/FastFourierTransformer.java:     * @param type the type of transform (forward, inverse) to be performed
./transform/FastFourierTransformer.java:     * @param f the real data array to be transformed
./transform/FastFourierTransformer.java:     * @param type the type of transform (forward, inverse) to be performed
./transform/FastFourierTransformer.java:     * @param f the function to be sampled and transformed
./transform/FastFourierTransformer.java:     * @param min the (inclusive) lower bound for the interval
./transform/FastFourierTransformer.java:     * @param max the (exclusive) upper bound for the interval
./transform/FastFourierTransformer.java:     * @param n the number of sample points
./transform/FastFourierTransformer.java:     * @param type the type of transform (forward, inverse) to be performed
./transform/FastFourierTransformer.java:     * @param f the complex data array to be transformed
./transform/FastFourierTransformer.java:     * @param type the type of transform (forward, inverse) to be performed
./transform/FastFourierTransformer.java:     * @param mdca Multi-Dimensional Complex Array, i.e. {@code Complex[][][][]}
./transform/FastFourierTransformer.java:     * @param type the type of transform (forward, inverse) to be performed
./transform/FastFourierTransformer.java:     * @param mdcm input matrix
./transform/FastFourierTransformer.java:     * @param type the type of transform (forward, inverse) to be performed
./transform/FastFourierTransformer.java:     * @param d index of the dimension to process
./transform/FastFourierTransformer.java:     * @param subVector recursion subvector
./transform/FastFourierTransformer.java:         * @param multiDimensionalComplexArray array containing the matrix
./transform/FastFourierTransformer.java:         * @param vector indices of the element
./transform/FastFourierTransformer.java:         * @param magnitude magnitude of the element
./transform/FastFourierTransformer.java:         * @param vector indices of the element
./transform/FastFourierTransformer.java:         * @param mdcm array where to copy data
./transform/TransformUtils.java:     * @param f the real array to be scaled
./transform/TransformUtils.java:     * @param d the real scaling coefficient
./transform/TransformUtils.java:     * @param f the complex array to be scaled
./transform/TransformUtils.java:     * @param d the real scaling coefficient
./transform/TransformUtils.java:     * @param dataC the array of {@link Complex} data to be transformed
./transform/TransformUtils.java:     * @param dataRI the array of real and imaginary parts to be transformed
./transform/TransformUtils.java:     * @param n the {@code int} whose base-2 logarithm is to be evaluated
./transform/FastCosineTransformer.java:     * @param normalization the type of normalization to be applied to the
./transform/FastCosineTransformer.java:     * @param f the real data array to be transformed
./util/Incrementor.java:     * @param max Maximal count.
./util/Incrementor.java:     * @param max Maximal count.
./util/Incrementor.java:     * @param cb Function to be called when the maximal count has been reached.
./util/Incrementor.java:     * @param max Upper limit of the counter.
./util/Incrementor.java:     * @param value Number of increments.
./util/Incrementor.java:         * @param maximalCount Maximal count.
./util/Incrementor.java:     * @param incrementor wrapped {@link IntegerSequence.Incrementor}
./util/FastMath.java:     * @param d the value to split
./util/FastMath.java:     * @param a number on which evaluation is done
./util/FastMath.java:     * @param x number on which evaluation is done
./util/FastMath.java:     * @param x number on which evaluation is done
./util/FastMath.java:     * @param x number on which evaluation is done
./util/FastMath.java:     * @param a number on which evaluation is done
./util/FastMath.java:     * @param a number on which evaluation is done
./util/FastMath.java:     * @param a number on which evaluation is done
./util/FastMath.java:     * @param a number on which evaluation is done
./util/FastMath.java:     * @param a number on which evaluation is done
./util/FastMath.java:     * @param a number to which neighbor should be computed
./util/FastMath.java:     * @param a number to which neighbor should be computed
./util/FastMath.java:     * @param a number to which neighbor should be computed
./util/FastMath.java:     * @param a number to which neighbor should be computed
./util/FastMath.java:     * @param x   a double
./util/FastMath.java:     * @param x original argument of the exponential function
./util/FastMath.java:     * @param extra extra bits of precision on input (To Be Confirmed)
./util/FastMath.java:     * @param hiPrec extra bits of precision on output (To Be Confirmed)
./util/FastMath.java:     * @param x number to compute shifted exponential
./util/FastMath.java:     * @param x number to compute shifted exponential
./util/FastMath.java:     * @param hiPrecOut receive high precision result for -1.0 < x < 1.0
./util/FastMath.java:     * @param x   a double
./util/FastMath.java:     * @param x original argument of the natural logarithm function
./util/FastMath.java:     * @param hiPrec extra bits of precision on output (To Be Confirmed)
./util/FastMath.java:     * @param x Number.
./util/FastMath.java:     * @param x a number
./util/FastMath.java:     * @param base Base of the logarithm, must be greater than 0.
./util/FastMath.java:     * @param x Argument, must be greater than 0.
./util/FastMath.java:     * @param x   a double
./util/FastMath.java:     * @param y   a double
./util/FastMath.java:     * @param d Number to raise.
./util/FastMath.java:     * @param e Exponent.
./util/FastMath.java:     * @param d Number to raise.
./util/FastMath.java:     * @param e Exponent.
./util/FastMath.java:         * @param x number to split
./util/FastMath.java:         * @param high high order bits
./util/FastMath.java:         * @param low low order bits
./util/FastMath.java:         * @param full full number
./util/FastMath.java:         * @param high high order bits
./util/FastMath.java:         * @param low low order bits
./util/FastMath.java:         * @param b other instance to multiply by
./util/FastMath.java:         * @param e exponent (beware, here it MUST be > 0; the only exclusion is Long.MIN_VALUE)
./util/FastMath.java:     *  @param x a number smaller than 1/16
./util/FastMath.java:     *  @param x a number smaller than 1/16
./util/FastMath.java:     *  @param xa number from which sine is requested
./util/FastMath.java:     *  @param xb extra bits for x (may be 0.0)
./util/FastMath.java:     *  @param xa number from which cosine is requested
./util/FastMath.java:     *  @param xb extra bits for x (may be 0.0)
./util/FastMath.java:     *  @param xa number from which sine is requested
./util/FastMath.java:     *  @param xb extra bits for x (may be 0.0)
./util/FastMath.java:     *  @param cotanFlag if true, compute the cotangent instead of the tangent
./util/FastMath.java:     * @param x number to reduce
./util/FastMath.java:     * @param result placeholder where to put the result
./util/FastMath.java:     * @param x Argument.
./util/FastMath.java:     * @param x Argument.
./util/FastMath.java:     * @param x Argument.
./util/FastMath.java:     *  @param x a number
./util/FastMath.java:     * @param xa number from which arctangent is requested
./util/FastMath.java:     * @param xb extra bits for x (may be 0.0)
./util/FastMath.java:     * @param leftPlane if true, result angle must be put in the left half plane
./util/FastMath.java:     * @param y ordinate
./util/FastMath.java:     * @param x abscissa
./util/FastMath.java:     * @param x number on which evaluation is done
./util/FastMath.java:     * @param x number on which evaluation is done
./util/FastMath.java:     * @param x number on which evaluation is done
./util/FastMath.java:     *  @param x angle in degrees
./util/FastMath.java:     *  @param x angle in radians
./util/FastMath.java:     * @param x number from which absolute value is requested
./util/FastMath.java:     * @param x number from which absolute value is requested
./util/FastMath.java:     * @param x number from which absolute value is requested
./util/FastMath.java:     * @param x number from which absolute value is requested
./util/FastMath.java:     * @param x number from which ulp is requested
./util/FastMath.java:     * @param x number from which ulp is requested
./util/FastMath.java:     * @param d number to multiply
./util/FastMath.java:     * @param n power of 2
./util/FastMath.java:     * @param f number to multiply
./util/FastMath.java:     * @param n power of 2
./util/FastMath.java:     * @param d base number
./util/FastMath.java:     * @param direction (the only important thing is whether
./util/FastMath.java:     * @param f base number
./util/FastMath.java:     * @param direction (the only important thing is whether
./util/FastMath.java:     * @param x number from which floor is requested
./util/FastMath.java:     * @param x number from which ceil is requested
./util/FastMath.java:     * @param x number from which nearest whole number is requested
./util/FastMath.java:     * @param x number from which closest long is requested
./util/FastMath.java:     * @param x number from which closest int is requested
./util/FastMath.java:     * @param a first value
./util/FastMath.java:     * @param b second value
./util/FastMath.java:     * @param a first value
./util/FastMath.java:     * @param b second value
./util/FastMath.java:     * @param a first value
./util/FastMath.java:     * @param b second value
./util/FastMath.java:     * @param a first value
./util/FastMath.java:     * @param b second value
./util/FastMath.java:     * @param a first value
./util/FastMath.java:     * @param b second value
./util/FastMath.java:     * @param a first value
./util/FastMath.java:     * @param b second value
./util/FastMath.java:     * @param a first value
./util/FastMath.java:     * @param b second value
./util/FastMath.java:     * @param a first value
./util/FastMath.java:     * @param b second value
./util/FastMath.java:     * @param x a value
./util/FastMath.java:     * @param y a value
./util/FastMath.java:     * @param dividend the number to be divided
./util/FastMath.java:     * @param divisor the number by which to divide
./util/FastMath.java:     * @param n number to convert to int
./util/FastMath.java:     * @param n number to increment
./util/FastMath.java:     * @param n number to increment
./util/FastMath.java:     * @param n number to decrement
./util/FastMath.java:     * @param n number to decrement
./util/FastMath.java:     * @param a first number to add
./util/FastMath.java:     * @param b second number to add
./util/FastMath.java:     * @param a first number to add
./util/FastMath.java:     * @param b second number to add
./util/FastMath.java:     * @param a first number
./util/FastMath.java:     * @param b second number to subtract from a
./util/FastMath.java:     * @param a first number
./util/FastMath.java:     * @param b second number to subtract from a
./util/FastMath.java:     * @param a first number to multiply
./util/FastMath.java:     * @param b second number to multiply
./util/FastMath.java:     * @param a first number to multiply
./util/FastMath.java:     * @param b second number to multiply
./util/FastMath.java:     * @param a dividend
./util/FastMath.java:     * @param b divisor
./util/FastMath.java:     * @param a dividend
./util/FastMath.java:     * @param b divisor
./util/FastMath.java:     * @param a dividend
./util/FastMath.java:     * @param b divisor
./util/FastMath.java:     * @param a dividend
./util/FastMath.java:     * @param b divisor
./util/FastMath.java:     * @param magnitude the value to return
./util/FastMath.java:     * @param sign the sign for the returned value
./util/FastMath.java:     * @param magnitude the value to return
./util/FastMath.java:     * @param sign the sign for the returned value
./util/FastMath.java:     * @param d number from which exponent is requested
./util/FastMath.java:     * @param f number from which exponent is requested
./util/FastMath.java:     * @param a unused
./util/FastMath.java:         * @param xa Argument.
./util/ArithmeticUtils.java:     * @param x an addend
./util/ArithmeticUtils.java:     * @param y an addend
./util/ArithmeticUtils.java:     * @param a an addend
./util/ArithmeticUtils.java:     * @param b an addend
./util/ArithmeticUtils.java:     * @param n the size of the set
./util/ArithmeticUtils.java:     * @param k the size of the subsets to be counted
./util/ArithmeticUtils.java:     * @param n the size of the set
./util/ArithmeticUtils.java:     * @param k the size of the subsets to be counted
./util/ArithmeticUtils.java:     * @param n the size of the set
./util/ArithmeticUtils.java:     * @param k the size of the subsets to be counted
./util/ArithmeticUtils.java:     * @param n argument
./util/ArithmeticUtils.java:     * @param n Argument.
./util/ArithmeticUtils.java:     * @param n Argument.
./util/ArithmeticUtils.java:     * @param p Number.
./util/ArithmeticUtils.java:     * @param q Number.
./util/ArithmeticUtils.java:     * @param a Positive number.
./util/ArithmeticUtils.java:     * @param b Positive number.
./util/ArithmeticUtils.java:     * @param p Number.
./util/ArithmeticUtils.java:     * @param q Number.
./util/ArithmeticUtils.java:     * @param a Number.
./util/ArithmeticUtils.java:     * @param b Number.
./util/ArithmeticUtils.java:     * @param a Number.
./util/ArithmeticUtils.java:     * @param b Number.
./util/ArithmeticUtils.java:     * @param x Factor.
./util/ArithmeticUtils.java:     * @param y Factor.
./util/ArithmeticUtils.java:     * @param a Factor.
./util/ArithmeticUtils.java:     * @param b Factor.
./util/ArithmeticUtils.java:     * @param x Minuend.
./util/ArithmeticUtils.java:     * @param y Subtrahend.
./util/ArithmeticUtils.java:     * @param a Value.
./util/ArithmeticUtils.java:     * @param b Value.
./util/ArithmeticUtils.java:     * @param k Number to raise.
./util/ArithmeticUtils.java:     * @param e Exponent (must be positive or zero).
./util/ArithmeticUtils.java:     * @param k Number to raise.
./util/ArithmeticUtils.java:     * @param e Exponent (must be positive or zero).
./util/ArithmeticUtils.java:     * @param k Number to raise.
./util/ArithmeticUtils.java:     * @param e Exponent (must be positive or zero).
./util/ArithmeticUtils.java:     * @param k Number to raise.
./util/ArithmeticUtils.java:     * @param e Exponent (must be positive or zero).
./util/ArithmeticUtils.java:     * @param k Number to raise.
./util/ArithmeticUtils.java:     * @param e Exponent (must be positive or zero).
./util/ArithmeticUtils.java:     * @param k Number to raise.
./util/ArithmeticUtils.java:     * @param e Exponent (must be positive or zero).
./util/ArithmeticUtils.java:     * @param k Number to raise.
./util/ArithmeticUtils.java:     * @param e Exponent (must be positive or zero).
./util/ArithmeticUtils.java:     * @param n the size of the set
./util/ArithmeticUtils.java:     * @param k the number of non-empty subsets
./util/ArithmeticUtils.java:     * @param a Addend.
./util/ArithmeticUtils.java:     * @param b Addend.
./util/ArithmeticUtils.java:     * @param pattern Pattern to use for any thrown exception.
./util/ArithmeticUtils.java:     * @param n the number to test
./util/ContinuedFraction.java:     * @param n the coefficient index to retrieve.
./util/ContinuedFraction.java:     * @param x the evaluation point.
./util/ContinuedFraction.java:     * @param n the coefficient index to retrieve.
./util/ContinuedFraction.java:     * @param x the evaluation point.
./util/ContinuedFraction.java:     * @param x the evaluation point.
./util/ContinuedFraction.java:     * @param x the evaluation point.
./util/ContinuedFraction.java:     * @param epsilon maximum error allowed.
./util/ContinuedFraction.java:     * @param x the evaluation point.
./util/ContinuedFraction.java:     * @param maxIterations maximum number of convergents
./util/ContinuedFraction.java:     * @param x the evaluation point.
./util/ContinuedFraction.java:     * @param epsilon maximum error allowed.
./util/ContinuedFraction.java:     * @param maxIterations maximum number of convergents
./util/TransformerMap.java:     * @param key Class to check
./util/TransformerMap.java:     * @param value NumberTransformer to check
./util/TransformerMap.java:     * @param key The Class of the object
./util/TransformerMap.java:     * @param key The Class
./util/TransformerMap.java:     * @param transformer The NumberTransformer
./util/TransformerMap.java:     * @param key The Class
./util/TransformerMap.java:     * @param o the Object to be transformed.
./util/BigReal.java:     * @param val value of the instance
./util/BigReal.java:     * @param val value of the instance
./util/BigReal.java:     * @param unscaledVal unscaled value
./util/BigReal.java:     * @param scale scale to use
./util/BigReal.java:     * @param unscaledVal unscaled value
./util/BigReal.java:     * @param scale scale to use
./util/BigReal.java:     * @param mc to used
./util/BigReal.java:     * @param val value of the instance
./util/BigReal.java:     * @param mc context to use
./util/BigReal.java:     * @param in character representation of the value
./util/BigReal.java:     * @param in character representation of the value
./util/BigReal.java:     * @param offset offset of the first character to analyze
./util/BigReal.java:     * @param len length of the array slice to analyze
./util/BigReal.java:     * @param in character representation of the value
./util/BigReal.java:     * @param offset offset of the first character to analyze
./util/BigReal.java:     * @param len length of the array slice to analyze
./util/BigReal.java:     * @param mc context to use
./util/BigReal.java:     * @param in character representation of the value
./util/BigReal.java:     * @param mc context to use
./util/BigReal.java:     * @param val value of the instance
./util/BigReal.java:     * @param val value of the instance
./util/BigReal.java:     * @param mc context to use
./util/BigReal.java:     * @param val value of the instance
./util/BigReal.java:     * @param val value of the instance
./util/BigReal.java:     * @param mc context to use
./util/BigReal.java:     * @param val value of the instance
./util/BigReal.java:     * @param val value of the instance
./util/BigReal.java:     * @param mc context to use
./util/BigReal.java:     * @param val character representation of the value
./util/BigReal.java:     * @param val character representation of the value
./util/BigReal.java:     * @param mc context to use
./util/BigReal.java:     * @param roundingMode rounding mode for decimal divisions
./util/BigReal.java:     * @param scale scale for division operations
./util/RandomPivotingStrategy.java:     * @param random random generator to use for selecting pivot
./util/IterationListener.java:     * @param e The {@link IterationEvent} object.
./util/IterationListener.java:     * @param e The {@link IterationEvent} object.
./util/IterationListener.java:     * @param e The {@link IterationEvent} object.
./util/IterationListener.java:     * @param e The {@link IterationEvent} object.
./util/PivotingStrategyInterface.java:     * @param work data array
./util/PivotingStrategyInterface.java:     * @param begin index of the first element of the slice
./util/PivotingStrategyInterface.java:     * @param end index after the last element of the slice
./util/Combinations.java:     * @param n Size of the set from which subsets are selected.
./util/Combinations.java:     * @param k Size of the subsets to be enumerated.
./util/Combinations.java:     * @param n Size of the set from which subsets are selected.
./util/Combinations.java:     * @param k Size of the subsets to be enumerated.
./util/Combinations.java:     * @param iterationOrder Specifies the {@link #iterator() iteration order}.
./util/Combinations.java:         * @param n size of the set from which subsets are enumerated
./util/Combinations.java:         * @param k size of the subsets to enumerate
./util/Combinations.java:         * @param singleton array returned by the iterator
./util/Combinations.java:         * @param n Size of the set from which subsets are selected.
./util/Combinations.java:         * @param k Size of the subsets to be enumerated.
./util/Combinations.java:         * @param c Input array.
./util/IterationEvent.java:     * @param source the iterative algorithm on which the event initially
./util/IterationEvent.java:     * @param iterations the number of iterations performed at the time
./util/KthSelector.java:     * @param pivotingStrategy pivoting strategy to use
./util/KthSelector.java:     * @param work work array to use to find out the K<sup>th</sup> value
./util/KthSelector.java:     * @param pivotsHeap cached pivots heap that can be used for efficient estimation
./util/KthSelector.java:     * @param k the index whose value in the array is of interest
./util/KthSelector.java:     * @param work work array
./util/KthSelector.java:     * @param begin index of the first element of the slice of work array
./util/KthSelector.java:     * @param end index after the last element of the slice of work array
./util/KthSelector.java:     * @param pivot initial index of the pivot
./util/Precision.java:     * @param x the first number
./util/Precision.java:     * @param y the second number
./util/Precision.java:     * @param eps the amount of error to allow when checking for equality
./util/Precision.java:     * @param x first value
./util/Precision.java:     * @param y second value
./util/Precision.java:     * @param maxUlps {@code (maxUlps - 1)} is the number of floating point
./util/Precision.java:     * @param x first value
./util/Precision.java:     * @param y second value
./util/Precision.java:     * @param x first value
./util/Precision.java:     * @param y second value
./util/Precision.java:     * @param x first value
./util/Precision.java:     * @param y second value
./util/Precision.java:     * @param eps the amount of absolute error to allow.
./util/Precision.java:     * @param x first value
./util/Precision.java:     * @param y second value
./util/Precision.java:     * @param eps the amount of absolute error to allow.
./util/Precision.java:     * @param x first value
./util/Precision.java:     * @param y second value
./util/Precision.java:     * @param maxUlps {@code (maxUlps - 1)} is the number of floating point
./util/Precision.java:     * @param x first value
./util/Precision.java:     * @param y second value
./util/Precision.java:     * @param maxUlps {@code (maxUlps - 1)} is the number of floating point
./util/Precision.java:     * @param x first value
./util/Precision.java:     * @param y second value
./util/Precision.java:     * @param x first value
./util/Precision.java:     * @param y second value
./util/Precision.java:     * @param x First value.
./util/Precision.java:     * @param y Second value.
./util/Precision.java:     * @param eps Amount of allowed absolute error.
./util/Precision.java:     * @param x First value.
./util/Precision.java:     * @param y Second value.
./util/Precision.java:     * @param eps Amount of allowed relative error.
./util/Precision.java:     * @param x first value
./util/Precision.java:     * @param y second value
./util/Precision.java:     * @param eps the amount of absolute error to allow.
./util/Precision.java:     * @param x first value
./util/Precision.java:     * @param y second value
./util/Precision.java:     * @param maxUlps {@code (maxUlps - 1)} is the number of floating point
./util/Precision.java:     * @param x first value
./util/Precision.java:     * @param y second value
./util/Precision.java:     * @param maxUlps {@code (maxUlps - 1)} is the number of floating point
./util/Precision.java:     * @param x Value to round.
./util/Precision.java:     * @param scale Number of digits to the right of the decimal point.
./util/Precision.java:     * @param x Value to round.
./util/Precision.java:     * @param scale Number of digits to the right of the decimal point.
./util/Precision.java:     * @param roundingMethod Rounding method as defined in {@link BigDecimal}.
./util/Precision.java:     * @param x Value to round.
./util/Precision.java:     * @param scale Number of digits to the right of the decimal point.
./util/Precision.java:     * @param x Value to round.
./util/Precision.java:     * @param scale Number of digits to the right of the decimal point.
./util/Precision.java:     * @param roundingMethod Rounding method as defined in {@link BigDecimal}.
./util/Precision.java:     * @param unscaled Value to round.
./util/Precision.java:     * @param sign Sign of the original, scaled value.
./util/Precision.java:     * @param roundingMethod Rounding method, as defined in {@link BigDecimal}.
./util/Precision.java:     * @param x Value.
./util/Precision.java:     * @param originalDelta Offset value.
./util/CombinatoricsUtils.java:     * @param n the size of the set
./util/CombinatoricsUtils.java:     * @param k the size of the subsets to be counted
./util/CombinatoricsUtils.java:     * @param n the size of the set
./util/CombinatoricsUtils.java:     * @param k the size of the subsets to be counted
./util/CombinatoricsUtils.java:     * @param n the size of the set
./util/CombinatoricsUtils.java:     * @param k the size of the subsets to be counted
./util/CombinatoricsUtils.java:     * @param n argument
./util/CombinatoricsUtils.java:     * @param n Argument.
./util/CombinatoricsUtils.java:     * @param n Argument.
./util/CombinatoricsUtils.java:     * @param n the size of the set
./util/CombinatoricsUtils.java:     * @param k the number of non-empty subsets
./util/CombinatoricsUtils.java:     * @param n Size of the set from which subsets are selected.
./util/CombinatoricsUtils.java:     * @param k Size of the subsets to be enumerated.
./util/CombinatoricsUtils.java:     * @param n Size of the set.
./util/CombinatoricsUtils.java:     * @param k Size of the subsets to be counted.
./util/OpenIntToFieldHashMap.java: * @param <T> the type of the field elements
./util/OpenIntToFieldHashMap.java:     * @param field field to which the elements belong
./util/OpenIntToFieldHashMap.java:     * @param field field to which the elements belong
./util/OpenIntToFieldHashMap.java:     * @param missingEntries value to return when a missing entry is fetched
./util/OpenIntToFieldHashMap.java:     * @param field field to which the elements belong
./util/OpenIntToFieldHashMap.java:     * @param expectedSize expected number of elements in the map
./util/OpenIntToFieldHashMap.java:     * @param field field to which the elements belong
./util/OpenIntToFieldHashMap.java:     * @param expectedSize expected number of elements in the map
./util/OpenIntToFieldHashMap.java:     * @param missingEntries value to return when a missing entry is fetched
./util/OpenIntToFieldHashMap.java:     * @param source map to copy
./util/OpenIntToFieldHashMap.java:     * @param expectedSize expected size of the map
./util/OpenIntToFieldHashMap.java:     * @param i input value
./util/OpenIntToFieldHashMap.java:     * @param key key associated with the data
./util/OpenIntToFieldHashMap.java:     * @param key key to check
./util/OpenIntToFieldHashMap.java:     * @param hash initial hash
./util/OpenIntToFieldHashMap.java:     * @param key key to lookup
./util/OpenIntToFieldHashMap.java:     * @param keys keys table
./util/OpenIntToFieldHashMap.java:     * @param states states table
./util/OpenIntToFieldHashMap.java:     * @param key key to lookup
./util/OpenIntToFieldHashMap.java:     * @param mask bit mask for hash values
./util/OpenIntToFieldHashMap.java:     * @param perturb perturbed hash
./util/OpenIntToFieldHashMap.java:     * @param j previous probe
./util/OpenIntToFieldHashMap.java:     * @param index initial index
./util/OpenIntToFieldHashMap.java:     * @param key key to which the value is associated
./util/OpenIntToFieldHashMap.java:     * @param key key to check
./util/OpenIntToFieldHashMap.java:     * @param index index to check
./util/OpenIntToFieldHashMap.java:     * @param index index of the element to remove
./util/OpenIntToFieldHashMap.java:     * @param key key to which value is associated
./util/OpenIntToFieldHashMap.java:     * @param value value to put in the map
./util/OpenIntToFieldHashMap.java:     * @param key key to hash
./util/OpenIntToFieldHashMap.java:     * @param stream input stream
./util/OpenIntToFieldHashMap.java:     * @param length size of the array to build
./util/DoubleArray.java:     * @param index index to fetch a value from
./util/DoubleArray.java:     * @param index index to store a value in
./util/DoubleArray.java:     * @param value value to store at the specified index
./util/DoubleArray.java:     * @param value to be added to end of array
./util/DoubleArray.java:     * @param values to be added to end of array
./util/DoubleArray.java:     * @param value the value to be added to the array
./util/FastMathCalc.java:     * @param SINE_TABLE_A table of the most significant part of the sines
./util/FastMathCalc.java:     * @param SINE_TABLE_B table of the least significant part of the sines
./util/FastMathCalc.java:     * @param COSINE_TABLE_A table of the most significant part of the cosines
./util/FastMathCalc.java:     * @param COSINE_TABLE_B table of the most significant part of the cosines
./util/FastMathCalc.java:     * @param SINE_TABLE_LEN length of the tables
./util/FastMathCalc.java:     * @param TANGENT_TABLE_A table of the most significant part of the tangents
./util/FastMathCalc.java:     * @param TANGENT_TABLE_B table of the most significant part of the tangents
./util/FastMathCalc.java:     * @param x number from which cosine is requested
./util/FastMathCalc.java:     * @param result placeholder where to put the result in extended precision
./util/FastMathCalc.java:     * @param x number from which sine is requested
./util/FastMathCalc.java:     * @param result placeholder where to put the result in extended precision
./util/FastMathCalc.java:     *  @param x argument of exponential
./util/FastMathCalc.java:     *  @param result placeholder where to place exp(x) split in two terms
./util/FastMathCalc.java:     * @param d number to split
./util/FastMathCalc.java:     * @param split placeholder where to place the result
./util/FastMathCalc.java:     * @param a input/out array containing the split, changed
./util/FastMathCalc.java:     * @param a first term of multiplication
./util/FastMathCalc.java:     * @param b second term of multiplication
./util/FastMathCalc.java:     * @param ans placeholder where to put the result
./util/FastMathCalc.java:     * @param a first term of addition
./util/FastMathCalc.java:     * @param b second term of addition
./util/FastMathCalc.java:     * @param ans placeholder where to put the result
./util/FastMathCalc.java:     *  @param in initial number, in split form
./util/FastMathCalc.java:     *  @param result placeholder where to put the result
./util/FastMathCalc.java:     * @param a first term of the multiplication
./util/FastMathCalc.java:     * @param b second term of the multiplication
./util/FastMathCalc.java:     * @param result placeholder where to put the result
./util/FastMathCalc.java:     * @param p integer whose exponential is requested
./util/FastMathCalc.java:     * @param result placeholder where to put the result in extended precision
./util/FastMathCalc.java:     * @param xi number from which log is requested
./util/FastMathCalc.java:     * @param out text output stream where output should be printed
./util/FastMathCalc.java:     * @param name array name
./util/FastMathCalc.java:     * @param expectedLen expected length of the array
./util/FastMathCalc.java:     * @param array2d array data
./util/FastMathCalc.java:     * @param out text output stream where output should be printed
./util/FastMathCalc.java:     * @param name array name
./util/FastMathCalc.java:     * @param expectedLen expected length of the array
./util/FastMathCalc.java:     * @param array array data
./util/FastMathCalc.java:     * @param d double number to format
./util/FastMathCalc.java:     * @param expectedLen expected length
./util/FastMathCalc.java:     * @param actual actual length
./util/CompositeFormat.java:     * @param locale the specific locale used by the format.
./util/CompositeFormat.java:     * @param source the string to parse
./util/CompositeFormat.java:     * @param pos input/output parsing parameter.  On output, <code>pos</code>
./util/CompositeFormat.java:     * @param source the string to parse
./util/CompositeFormat.java:     * @param pos input/output parsing parameter.
./util/CompositeFormat.java:     * @param source the string to parse
./util/CompositeFormat.java:     * @param value the special value to parse.
./util/CompositeFormat.java:     * @param pos input/output parsing parameter.
./util/CompositeFormat.java:     * @param source the string to parse
./util/CompositeFormat.java:     * @param format the number format used to parse normal, numeric values.
./util/CompositeFormat.java:     * @param pos input/output parsing parameter.
./util/CompositeFormat.java:     * @param source the string to parse
./util/CompositeFormat.java:     * @param expected expected string
./util/CompositeFormat.java:     * @param pos input/output parsing parameter.
./util/CompositeFormat.java:     * @param value the double to format.
./util/CompositeFormat.java:     * @param format the format used.
./util/CompositeFormat.java:     * @param toAppendTo where the text is to be appended
./util/CompositeFormat.java:     * @param pos On input: an alignment field, if desired. On output: the
./util/Pair.java: * @param <K> Key type.
./util/Pair.java: * @param <V> Value type.
./util/Pair.java:     * @param k Key (first element of the pair).
./util/Pair.java:     * @param v Value (second element of the pair).
./util/Pair.java:     * @param entry Entry to copy.
./util/Pair.java:     * @param o Object.
./util/Pair.java:     * @param <K> the key type
./util/Pair.java:     * @param <V> the value type
./util/Pair.java:     * @param k First element of the pair.
./util/Pair.java:     * @param v Second element of the pair.
./util/MathUtils.java:     * @param value the value to be hashed
./util/MathUtils.java:     * @param x Value
./util/MathUtils.java:     * @param y Value
./util/MathUtils.java:     * @param value the value to be hashed (may be null)
./util/MathUtils.java:     * @param a angle to normalize
./util/MathUtils.java:     * @param center center of the desired 2&pi; interval for the result
./util/MathUtils.java:      * @param <T> the type of the field elements
./util/MathUtils.java:      * @param e1 first element
./util/MathUtils.java:      * @param e2 second element
./util/MathUtils.java:      * @param <T> the type of the field elements
./util/MathUtils.java:      * @param e1 first element
./util/MathUtils.java:      * @param e2 second element
./util/MathUtils.java:     * @param a Value to reduce.
./util/MathUtils.java:     * @param period Period.
./util/MathUtils.java:     * @param offset Value that will be mapped to {@code 0}.
./util/MathUtils.java:     * @param magnitude Magnitude of the returned value.
./util/MathUtils.java:     * @param sign Sign of the returned value.
./util/MathUtils.java:     * @param magnitude Magnitude of the returned value.
./util/MathUtils.java:     * @param sign Sign of the returned value.
./util/MathUtils.java:     * @param magnitude Magnitude of the returned value.
./util/MathUtils.java:     * @param sign Sign of the returned value.
./util/MathUtils.java:     * @param magnitude Magnitude of the returned value.
./util/MathUtils.java:     * @param sign Sign of the returned value.
./util/MathUtils.java:     * @param x Argument.
./util/MathUtils.java:     * @param val Arguments.
./util/MathUtils.java:     * @param o Object to be checked.
./util/MathUtils.java:     * @param pattern Message pattern.
./util/MathUtils.java:     * @param args Arguments to replace the placeholders in {@code pattern}.
./util/MathUtils.java:     * @param o Object to be checked.
./util/Decimal64.java:     * @param x the primitive {@code double} value of the object to be created
./util/IntegerSequence.java:     * @param start First value of the range.
./util/IntegerSequence.java:     * @param end Last value of the range.
./util/IntegerSequence.java:     * @param start First value of the range.
./util/IntegerSequence.java:     * @param max Last value of the range that satisfies the above
./util/IntegerSequence.java:     * @param step Increment.
./util/IntegerSequence.java:         * @param start First value of the range.
./util/IntegerSequence.java:         * @param max Last value of the range that satisfies the above
./util/IntegerSequence.java:         * @param step Increment.
./util/IntegerSequence.java:             * @param maximalCount Maximal count.
./util/IntegerSequence.java:         * @param start Initial value.
./util/IntegerSequence.java:         * @param max Maximal count.
./util/IntegerSequence.java:         * @param step Increment.
./util/IntegerSequence.java:         * @param cb Function to be called when the maximal count has been reached.
./util/IntegerSequence.java:         * @param start Initial value of the counter.
./util/IntegerSequence.java:         * @param max Maximal count.
./util/IntegerSequence.java:         * @param step Increment.
./util/IntegerSequence.java:         * @param cb Callback to be called at counter exhaustion.
./util/IntegerSequence.java:         * @param nTimes Number of increments.
./util/IntegerSequence.java:         * @param nTimes Number of increments.
./util/OpenIntToDoubleHashMap.java:     * @param missingEntries value to return when a missing entry is fetched
./util/OpenIntToDoubleHashMap.java:     * @param expectedSize expected number of elements in the map
./util/OpenIntToDoubleHashMap.java:     * @param expectedSize expected number of elements in the map
./util/OpenIntToDoubleHashMap.java:     * @param missingEntries value to return when a missing entry is fetched
./util/OpenIntToDoubleHashMap.java:     * @param source map to copy
./util/OpenIntToDoubleHashMap.java:     * @param expectedSize expected size of the map
./util/OpenIntToDoubleHashMap.java:     * @param i input value
./util/OpenIntToDoubleHashMap.java:     * @param key key associated with the data
./util/OpenIntToDoubleHashMap.java:     * @param key key to check
./util/OpenIntToDoubleHashMap.java:     * @param hash initial hash
./util/OpenIntToDoubleHashMap.java:     * @param key key to lookup
./util/OpenIntToDoubleHashMap.java:     * @param keys keys table
./util/OpenIntToDoubleHashMap.java:     * @param states states table
./util/OpenIntToDoubleHashMap.java:     * @param key key to lookup
./util/OpenIntToDoubleHashMap.java:     * @param mask bit mask for hash values
./util/OpenIntToDoubleHashMap.java:     * @param perturb perturbed hash
./util/OpenIntToDoubleHashMap.java:     * @param j previous probe
./util/OpenIntToDoubleHashMap.java:     * @param index initial index
./util/OpenIntToDoubleHashMap.java:     * @param key key to which the value is associated
./util/OpenIntToDoubleHashMap.java:     * @param key key to check
./util/OpenIntToDoubleHashMap.java:     * @param index index to check
./util/OpenIntToDoubleHashMap.java:     * @param index index of the element to remove
./util/OpenIntToDoubleHashMap.java:     * @param key key to which value is associated
./util/OpenIntToDoubleHashMap.java:     * @param value value to put in the map
./util/OpenIntToDoubleHashMap.java:     * @param key key to hash
./util/OpenIntToDoubleHashMap.java:     * @param stream input stream
./util/DefaultTransformer.java:     * @param o  the object that gets transformed.
./util/MultidimensionalCounter.java:         * @param dim Dimension index.
./util/MultidimensionalCounter.java:     * @param size Counter sizes (number of slots in each dimension).
./util/MultidimensionalCounter.java:     * @param index Index in unidimensional counter.
./util/MultidimensionalCounter.java:     * @param c Indices in multidimensional counter.
./util/MathArrays.java:         * @param array Array to operate on.
./util/MathArrays.java:         * @param array Array to operate on.
./util/MathArrays.java:         * @param startIndex Index of the first element to take into account.
./util/MathArrays.java:         * @param numElements Number of elements to take into account.
./util/MathArrays.java:     * @param arr Array to scale.
./util/MathArrays.java:     * @param val Scalar.
./util/MathArrays.java:     * @param arr Array to scale
./util/MathArrays.java:     * @param val Scalar
./util/MathArrays.java:     * @param a First term of the addition.
./util/MathArrays.java:     * @param b Second term of the addition.
./util/MathArrays.java:     * @param a First term.
./util/MathArrays.java:     * @param b Element to be subtracted.
./util/MathArrays.java:     * @param a First factor of the multiplication.
./util/MathArrays.java:     * @param b Second factor of the multiplication.
./util/MathArrays.java:     * @param a Numerator of the division.
./util/MathArrays.java:     * @param b Denominator of the division.
./util/MathArrays.java:     * @param p1 the first point
./util/MathArrays.java:     * @param p2 the second point
./util/MathArrays.java:     * @param p1 the first point
./util/MathArrays.java:     * @param p2 the second point
./util/MathArrays.java:     * @param p1 the first point
./util/MathArrays.java:     * @param p2 the second point
./util/MathArrays.java:     * @param v1 Cartesian coordinates of the first vector.
./util/MathArrays.java:     * @param v2 Cartesian coordinates of the second vector.
./util/MathArrays.java:     * @param p1 the first point
./util/MathArrays.java:     * @param p2 the second point
./util/MathArrays.java:     * @param p1 the first point
./util/MathArrays.java:     * @param p2 the second point
./util/MathArrays.java:     * @param p1 the first point
./util/MathArrays.java:     * @param p2 the second point
./util/MathArrays.java:     * @param <T> the type of the elements in the specified array
./util/MathArrays.java:     * @param val Values.
./util/MathArrays.java:     * @param dir Ordering direction.
./util/MathArrays.java:     * @param strict Whether the order should be strict.
./util/MathArrays.java:     * @param val Values.
./util/MathArrays.java:     * @param dir Ordering direction.
./util/MathArrays.java:     * @param strict Whether the order should be strict.
./util/MathArrays.java:     * @param a Array.
./util/MathArrays.java:     * @param b Array.
./util/MathArrays.java:     * @param abort Whether to throw an exception if the check fails.
./util/MathArrays.java:     * @param a Array.
./util/MathArrays.java:     * @param b Array.
./util/MathArrays.java:     * @param a Array.
./util/MathArrays.java:     * @param b Array.
./util/MathArrays.java:     * @param abort Whether to throw an exception if the check fails.
./util/MathArrays.java:     * @param a Array.
./util/MathArrays.java:     * @param b Array.
./util/MathArrays.java:     * @param val Values.
./util/MathArrays.java:     * @param dir Ordering direction.
./util/MathArrays.java:     * @param strict Whether the order should be strict.
./util/MathArrays.java:     * @param abort Whether to throw an exception if the check fails.
./util/MathArrays.java:     * @param val Values.
./util/MathArrays.java:     * @param dir Ordering direction.
./util/MathArrays.java:     * @param strict Whether the order should be strict.
./util/MathArrays.java:     * @param val Values.
./util/MathArrays.java:     * @param in array to be tested
./util/MathArrays.java:     * @param in Array to be tested
./util/MathArrays.java:     * @param in Array to be tested.
./util/MathArrays.java:     * @param in Array to be tested
./util/MathArrays.java:     * @param in Array to be tested
./util/MathArrays.java:     * @param v Vector of doubles.
./util/MathArrays.java:         * @param key Key.
./util/MathArrays.java:         * @param value Value.
./util/MathArrays.java:     * @param x Array to be sorted and used as a pattern for permutation
./util/MathArrays.java:     * @param yList Set of arrays whose permutations of entries will follow
./util/MathArrays.java:     * @param x Array to be sorted and used as a pattern for permutation
./util/MathArrays.java:     * @param dir Order direction.
./util/MathArrays.java:     * @param yList Set of arrays whose permutations of entries will follow
./util/MathArrays.java:     * @param source Array to be copied.
./util/MathArrays.java:     * @param source Array to be copied.
./util/MathArrays.java:     * @param source Array to be copied.
./util/MathArrays.java:     * @param len Number of entries to copy. If smaller then the source
./util/MathArrays.java:     * @param source Array to be copied.
./util/MathArrays.java:     * @param len Number of entries to copy. If smaller then the source
./util/MathArrays.java:     * @param source Array to be copied.
./util/MathArrays.java:     * @param from Initial index of the range to be copied, inclusive.
./util/MathArrays.java:     * @param to Final index of the range to be copied, exclusive. (This index may lie outside the array.)
./util/MathArrays.java:     * @param a Factors.
./util/MathArrays.java:     * @param b Factors.
./util/MathArrays.java:     * @param a1 first factor of the first term
./util/MathArrays.java:     * @param b1 second factor of the first term
./util/MathArrays.java:     * @param a2 first factor of the second term
./util/MathArrays.java:     * @param b2 second factor of the second term
./util/MathArrays.java:     * @param a1 first factor of the first term
./util/MathArrays.java:     * @param b1 second factor of the first term
./util/MathArrays.java:     * @param a2 first factor of the second term
./util/MathArrays.java:     * @param b2 second factor of the second term
./util/MathArrays.java:     * @param a3 first factor of the third term
./util/MathArrays.java:     * @param b3 second factor of the third term
./util/MathArrays.java:     * @param a1 first factor of the first term
./util/MathArrays.java:     * @param b1 second factor of the first term
./util/MathArrays.java:     * @param a2 first factor of the second term
./util/MathArrays.java:     * @param b2 second factor of the second term
./util/MathArrays.java:     * @param a3 first factor of the third term
./util/MathArrays.java:     * @param b3 second factor of the third term
./util/MathArrays.java:     * @param a4 first factor of the third term
./util/MathArrays.java:     * @param b4 second factor of the third term
./util/MathArrays.java:     * @param x first array
./util/MathArrays.java:     * @param y second array
./util/MathArrays.java:     * @param x first array
./util/MathArrays.java:     * @param y second array
./util/MathArrays.java:     * @param x First array.
./util/MathArrays.java:     * @param y Second array.
./util/MathArrays.java:     * @param x First array.
./util/MathArrays.java:     * @param y Second array.
./util/MathArrays.java:     * @param values Input array to be normalized
./util/MathArrays.java:     * @param normalizedSum Target sum for the normalized array
./util/MathArrays.java:     * @param <T> the type of the field elements
./util/MathArrays.java:     * @param field field to which array elements belong
./util/MathArrays.java:     * @param length of the array
./util/MathArrays.java:     * @param <T> the type of the field elements
./util/MathArrays.java:     * @param field field to which array elements belong
./util/MathArrays.java:     * @param rows number of rows in the array
./util/MathArrays.java:     * @param columns number of columns (may be negative to build partial
./util/MathArrays.java:     * @param x First sequence.
./util/MathArrays.java:     * @param h Second sequence.
./util/MathArrays.java:     * @param list Array whose entries will be shuffled (in-place).
./util/MathArrays.java:     * @param start Index at which shuffling begins.
./util/MathArrays.java:     * @param pos Shuffling is performed for index positions between
./util/MathArrays.java:     * @param list Array whose entries will be shuffled (in-place).
./util/MathArrays.java:     * @param start Index at which shuffling begins.
./util/MathArrays.java:     * @param pos Shuffling is performed for index positions between
./util/MathArrays.java:     * @param rng Random number generator.
./util/MathArrays.java:     * @param list Array whose entries will be shuffled (in-place).
./util/MathArrays.java:     * @param rng Random number generator.
./util/MathArrays.java:     * @param list Array whose entries will be shuffled (in-place).
./util/MathArrays.java:     * @param n Natural number.
./util/MathArrays.java:     * @param size Natural number.
./util/MathArrays.java:     * @param start Natural number.
./util/MathArrays.java:     * @param stride Natural number.
./util/MathArrays.java:     * @param values the input array
./util/MathArrays.java:     * @param begin index of the first array element to include
./util/MathArrays.java:     * @param length the number of elements to include
./util/MathArrays.java:     * @param values the input array
./util/MathArrays.java:     * @param begin index of the first array element to include
./util/MathArrays.java:     * @param length the number of elements to include
./util/MathArrays.java:     * @param allowEmpty if <code>true</code> then zero length arrays are allowed
./util/MathArrays.java:     * @param values the input array
./util/MathArrays.java:     * @param weights the weights array
./util/MathArrays.java:     * @param begin index of the first array element to include
./util/MathArrays.java:     * @param length the number of elements to include
./util/MathArrays.java:     * @param values the input array.
./util/MathArrays.java:     * @param weights the weights array.
./util/MathArrays.java:     * @param begin index of the first array element to include.
./util/MathArrays.java:     * @param length the number of elements to include.
./util/MathArrays.java:     * @param allowEmpty if {@code true} than allow zero length arrays to pass.
./util/MathArrays.java:     * @param x list of double[] arrays to concatenate
./util/MathArrays.java:     * @param data array to scan
./util/ResizableDoubleArray.java:     * @param initialCapacity Initial size of the internal storage array.
./util/ResizableDoubleArray.java:     * @param initialArray initial array
./util/ResizableDoubleArray.java:     * @param initialCapacity Initial size of the internal storage array.
./util/ResizableDoubleArray.java:     * @param expansionFactor The array will be expanded based on this
./util/ResizableDoubleArray.java:     * @param initialCapacity Initial size of the internal storage array.
./util/ResizableDoubleArray.java:     * @param expansionFactor The array will be expanded based on this
./util/ResizableDoubleArray.java:     * @param initialCapacity Initial size of the internal storage array..
./util/ResizableDoubleArray.java:     * @param expansionFactor The array will be expanded based on this
./util/ResizableDoubleArray.java:     * @param contractionCriteria Contraction criteria.
./util/ResizableDoubleArray.java:     * @param initialCapacity Initial size of the internal storage array..
./util/ResizableDoubleArray.java:     * @param expansionFactor The array will be expanded based on this
./util/ResizableDoubleArray.java:     * @param contractionCriterion Contraction criterion.
./util/ResizableDoubleArray.java:     * @param initialCapacity the initial size of the internal storage array
./util/ResizableDoubleArray.java:     * @param expansionFactor the array will be expanded based on this
./util/ResizableDoubleArray.java:     * @param contractionCriteria the contraction Criteria
./util/ResizableDoubleArray.java:     * @param expansionMode  the expansion mode
./util/ResizableDoubleArray.java:     * @param initialCapacity Initial size of the internal storage array.
./util/ResizableDoubleArray.java:     * @param expansionFactor The array will be expanded based on this
./util/ResizableDoubleArray.java:     * @param contractionCriterion Contraction criteria.
./util/ResizableDoubleArray.java:     * @param expansionMode Expansion mode.
./util/ResizableDoubleArray.java:     * @param data Initial contents of the array.
./util/ResizableDoubleArray.java:     * @param original array to copy
./util/ResizableDoubleArray.java:     * @param value Value to be added to end of array.
./util/ResizableDoubleArray.java:     * @param values Values to be added to end of array.
./util/ResizableDoubleArray.java:     * @param value Value to be added to the array.
./util/ResizableDoubleArray.java:     * @param value New value to substitute for the most recently added value
./util/ResizableDoubleArray.java:     * @param expansion factor to be checked
./util/ResizableDoubleArray.java:     * @param contraction criteria to be checked
./util/ResizableDoubleArray.java:     * @param contraction Criterion to be checked.
./util/ResizableDoubleArray.java:     * @param expansion Factor to be checked.
./util/ResizableDoubleArray.java:     * @param i  the number of elements to discard from the front of the array
./util/ResizableDoubleArray.java:     * @param i  the number of elements to discard from the end of the array
./util/ResizableDoubleArray.java:     * @param i  the number of elements to discard from the front/end of the array
./util/ResizableDoubleArray.java:     * @param front true if elements are to be discarded from the front
./util/ResizableDoubleArray.java:     * @param size Size of the new internal storage array.
./util/ResizableDoubleArray.java:     * @param index index to fetch a value from
./util/ResizableDoubleArray.java:     * @param contractionCriteria contraction criteria
./util/ResizableDoubleArray.java:     * @param f Function to be applied on this array.
./util/ResizableDoubleArray.java:     * @param index index to store a value in
./util/ResizableDoubleArray.java:     * @param value value to store at the specified index
./util/ResizableDoubleArray.java:     * @param expansionFactor the new expansion factor value.
./util/ResizableDoubleArray.java:     * @param expansionMode The expansionMode to set.
./util/ResizableDoubleArray.java:     * @param expansionMode Expansion mode to use for resizing the array.
./util/ResizableDoubleArray.java:     * @param initialCapacity of the array
./util/ResizableDoubleArray.java:     * @param i a new number of elements
./util/ResizableDoubleArray.java:     * @param source ResizableDoubleArray to copy
./util/ResizableDoubleArray.java:     * @param dest ResizableArray to replace with a copy of the source array
./util/ResizableDoubleArray.java:     * @param object object to be compared for equality with this
./util/NumberTransformer.java:     * @param o the Object to be transformed.
./util/IterationManager.java:     * @param maxIterations the maximum number of iterations
./util/IterationManager.java:     * @param maxIterations the maximum number of iterations
./util/IterationManager.java:     * @param callBack the function to be called when the maximum number of
./util/IterationManager.java:     * @param maxIterations the maximum number of iterations
./util/IterationManager.java:     * @param callBack the function to be called when the maximum number of
./util/IterationManager.java:     * @param listener A {@code IterationListener} object.
./util/IterationManager.java:     * @param e The {@link IterationEvent} object.
./util/IterationManager.java:     * @param e The {@link IterationEvent} object.
./util/IterationManager.java:     * @param e The {@link IterationEvent} object.
./util/IterationManager.java:     * @param e The {@link IterationEvent} object.
./util/IterationManager.java:     * @param listener The {@link IterationListener} to be removed.
