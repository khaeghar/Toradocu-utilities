./ArrayStack.java:     * @param initialSize  the initial size to use
./ArrayStack.java:     * @param n  the number of items down to go
./ArrayStack.java:     * @param item  the item to be added
./ArrayStack.java:     * @param object  the object to be searched for
./bag/UnmodifiableBag.java:     * @param <E> the type of the elements in the bag
./bag/UnmodifiableBag.java:     * @param bag  the bag to decorate, must not be null
./bag/UnmodifiableBag.java:     * @param bag  the bag to decorate, must not be null
./bag/UnmodifiableBag.java:     * @param out  the output stream
./bag/UnmodifiableBag.java:     * @param in  the input stream
./bag/PredicatedSortedBag.java:     * @param <E> the type of the elements in the bag
./bag/PredicatedSortedBag.java:     * @param bag  the bag to decorate, must not be null
./bag/PredicatedSortedBag.java:     * @param predicate  the predicate to use for validation, must not be null
./bag/PredicatedSortedBag.java:     * @param bag  the bag to decorate, must not be null
./bag/PredicatedSortedBag.java:     * @param predicate  the predicate to use for validation, must not be null
./bag/AbstractSortedBagDecorator.java:     * @param bag  the bag to decorate, must not be null
./bag/TransformedSortedBag.java:     * @param <E> the type of the elements in the bag
./bag/TransformedSortedBag.java:     * @param bag  the bag to decorate, must not be null
./bag/TransformedSortedBag.java:     * @param transformer  the transformer to use for conversion, must not be null
./bag/TransformedSortedBag.java:     * @param <E> the type of the elements in the bag
./bag/TransformedSortedBag.java:     * @param bag  the bag to decorate, must not be null
./bag/TransformedSortedBag.java:     * @param transformer  the transformer to use for conversion, must not be null
./bag/TransformedSortedBag.java:     * @param bag  the bag to decorate, must not be null
./bag/TransformedSortedBag.java:     * @param transformer  the transformer to use for conversion, must not be null
./bag/TransformedBag.java:     * @param <E> the type of the elements in the bag
./bag/TransformedBag.java:     * @param bag  the bag to decorate, must not be null
./bag/TransformedBag.java:     * @param transformer  the transformer to use for conversion, must not be null
./bag/TransformedBag.java:     * @param <E> the type of the elements in the bag
./bag/TransformedBag.java:     * @param bag  the bag to decorate, must not be null
./bag/TransformedBag.java:     * @param transformer  the transformer to use for conversion, must not be null
./bag/TransformedBag.java:     * @param bag  the bag to decorate, must not be null
./bag/TransformedBag.java:     * @param transformer  the transformer to use for conversion, must not be null
./bag/CollectionSortedBag.java:     * @param <E> the type of the elements in the bag
./bag/CollectionSortedBag.java:     * @param bag  the sorted bag to decorate, must not be null
./bag/CollectionSortedBag.java:     * @param bag  the sorted bag to decorate, must not be null
./bag/CollectionSortedBag.java:     * @param out  the output stream
./bag/CollectionSortedBag.java:     * @param in  the input stream
./bag/CollectionBag.java: * @param <E> the type held in the bag
./bag/CollectionBag.java:     * @param <E> the type of the elements in the bag
./bag/CollectionBag.java:     * @param bag  the bag to decorate, must not be null
./bag/CollectionBag.java:     * @param bag  the bag to decorate, must not be null
./bag/CollectionBag.java:     * @param out  the output stream
./bag/CollectionBag.java:     * @param in  the input stream
./bag/CollectionBag.java:     * @param coll  the collection to check against
./bag/CollectionBag.java:     * @param object  the object to add
./bag/CollectionBag.java:     * @param object  the object to remove
./bag/CollectionBag.java:     * @param coll  the collection to remove
./bag/CollectionBag.java:     * @param coll  the collection to retain
./bag/CollectionBag.java:     * @param object  the object to add
./bag/CollectionBag.java:     * @param count  the number of copies to add
./bag/UnmodifiableSortedBag.java:     * @param <E> the type of the elements in the bag
./bag/UnmodifiableSortedBag.java:     * @param bag  the bag to decorate, must not be null
./bag/UnmodifiableSortedBag.java:     * @param bag  the bag to decorate, must not be null
./bag/UnmodifiableSortedBag.java:     * @param out  the output stream
./bag/UnmodifiableSortedBag.java:     * @param in  the input stream
./bag/TreeBag.java:     * @param comparator the comparator to use
./bag/TreeBag.java:     * @param coll the collection to copy into the bag
./bag/AbstractBagDecorator.java:     * @param bag  the bag to decorate, must not be null
./bag/PredicatedBag.java:     * @param <E> the type of the elements in the bag
./bag/PredicatedBag.java:     * @param bag  the bag to decorate, must not be null
./bag/PredicatedBag.java:     * @param predicate  the predicate to use for validation, must not be null
./bag/PredicatedBag.java:     * @param bag  the bag to decorate, must not be null
./bag/PredicatedBag.java:     * @param predicate  the predicate to use for validation, must not be null
./bag/SynchronizedSortedBag.java:     * @param <E> the type of the elements in the bag
./bag/SynchronizedSortedBag.java:     * @param bag  the bag to decorate, must not be null
./bag/SynchronizedSortedBag.java:     * @param bag  the bag to decorate, must not be null
./bag/SynchronizedSortedBag.java:     * @param bag  the bag to decorate, must not be null
./bag/SynchronizedSortedBag.java:     * @param lock  the lock to use, must not be null
./bag/HashBag.java:     * @param coll  a collection to copy into this bag
./bag/AbstractMapBag.java:     * @param map the map to assign
./bag/AbstractMapBag.java:     * @param object the object to search for
./bag/AbstractMapBag.java:     * @param object the object to search for
./bag/AbstractMapBag.java:     * @param coll the collection to check against
./bag/AbstractMapBag.java:     * @param other the bag to check against
./bag/AbstractMapBag.java:         * @param parent the parent bag
./bag/AbstractMapBag.java:     * @param object the object to add
./bag/AbstractMapBag.java:     * @param object the object to search for
./bag/AbstractMapBag.java:     * @param nCopies the number of copies to add
./bag/AbstractMapBag.java:     * @param coll the collection to add
./bag/AbstractMapBag.java:     * @param object the object to remove
./bag/AbstractMapBag.java:     * @param object the object to remove
./bag/AbstractMapBag.java:     * @param nCopies the number of copies to remove
./bag/AbstractMapBag.java:     * @param coll the collection to use
./bag/AbstractMapBag.java:     * @param coll the collection to retain
./bag/AbstractMapBag.java:     * @param other the bag to retain
./bag/AbstractMapBag.java:         * @param value the initial value
./bag/AbstractMapBag.java:     * @param <T> the type of the array elements
./bag/AbstractMapBag.java:     * @param array the array to populate
./bag/AbstractMapBag.java:     * @param out the output stream
./bag/AbstractMapBag.java:     * @param map the map to use
./bag/AbstractMapBag.java:     * @param in the input stream
./bag/AbstractMapBag.java:     * @param object the Bag to compare to
./bag/SynchronizedBag.java:     * @param <E> the type of the elements in the bag
./bag/SynchronizedBag.java:     * @param bag  the bag to decorate, must not be null
./bag/SynchronizedBag.java:     * @param bag  the bag to decorate, must not be null
./bag/SynchronizedBag.java:     * @param bag  the bag to decorate, must not be null
./bag/SynchronizedBag.java:     * @param lock  the lock to use, must not be null
./bag/SynchronizedBag.java:         * @param set  the set to decorate
./bag/SynchronizedBag.java:         * @param lock  the lock to use, shared with the bag
./Bag.java: * @param <E> the type held in the bag
./Bag.java:     * @param object  the object to search for
./Bag.java:     * @param object  the object to add
./Bag.java:     * @param object  the object to add
./Bag.java:     * @param nCopies  the number of copies to add
./Bag.java:     * @param object  the object to remove
./Bag.java:     * @param object  the object to remove
./Bag.java:     * @param nCopies  the number of copies to remove
./Bag.java:     * @param coll  the collection to check against
./Bag.java:     * @param coll  the collection to remove
./Bag.java:     * @param coll  the collection to retain
./Bag.java://     * @param obj  the Bag to compare to
./BagUtils.java:     * @param <E> the element type
./BagUtils.java:     * @param bag the bag to synchronize, must not be null
./BagUtils.java:     * @param <E> the element type
./BagUtils.java:     * @param bag the bag whose unmodifiable view is to be returned, must not be null
./BagUtils.java:     * @param <E> the element type
./BagUtils.java:     * @param bag the bag to predicate, must not be null
./BagUtils.java:     * @param predicate the predicate for the bag, must not be null
./BagUtils.java:     * @param <E> the element type
./BagUtils.java:     * @param bag the bag to predicate, must not be null
./BagUtils.java:     * @param transformer the transformer for the bag, must not be null
./BagUtils.java:     * @param <E> the element type
./BagUtils.java:     * @param bag the bag to decorate, must not be null
./BagUtils.java:     * @param <E> the element type
./BagUtils.java:     * @param bag the bag to synchronize, must not be null
./BagUtils.java:     * @param <E> the element type
./BagUtils.java:     * @param bag the bag whose unmodifiable view is to be returned, must not be null
./BagUtils.java:     * @param <E> the element type
./BagUtils.java:     * @param bag the sorted bag to predicate, must not be null
./BagUtils.java:     * @param predicate the predicate for the bag, must not be null
./BagUtils.java:     * @param <E> the element type
./BagUtils.java:     * @param bag the bag to predicate, must not be null
./BagUtils.java:     * @param transformer the transformer for the bag, must not be null
./BagUtils.java:     * @param <E> the element type
./BagUtils.java:     * @param <E> the element type
./bidimap/AbstractSortedBidiMapDecorator.java:     * @param map  the map to decorate, must not be null
./bidimap/AbstractOrderedBidiMapDecorator.java:     * @param map  the map to decorate, must not be null
./bidimap/UnmodifiableBidiMap.java:     * @param <K> the key type
./bidimap/UnmodifiableBidiMap.java:     * @param <V> the value type
./bidimap/UnmodifiableBidiMap.java:     * @param map  the map to decorate, must not be null
./bidimap/UnmodifiableBidiMap.java:     * @param map  the map to decorate, must not be null
./bidimap/AbstractDualBidiMap.java:     * @param normalMap  the normal direction map
./bidimap/AbstractDualBidiMap.java:     * @param reverseMap  the reverse direction map
./bidimap/AbstractDualBidiMap.java:     * @param normalMap  the normal direction map
./bidimap/AbstractDualBidiMap.java:     * @param reverseMap  the reverse direction map
./bidimap/AbstractDualBidiMap.java:     * @param inverseBidiMap  the inverse BidiMap
./bidimap/AbstractDualBidiMap.java:     * @param normalMap  the normal direction map
./bidimap/AbstractDualBidiMap.java:     * @param reverseMap  the reverse direction map
./bidimap/AbstractDualBidiMap.java:     * @param inverseMap  this map, which is the inverse in the new map
./bidimap/AbstractDualBidiMap.java:     * @param iterator  the iterator to decorate
./bidimap/AbstractDualBidiMap.java:     * @param iterator  the iterator to decorate
./bidimap/AbstractDualBidiMap.java:     * @param iterator  the iterator to decorate
./bidimap/AbstractDualBidiMap.java:         * @param coll  the collection view being decorated
./bidimap/AbstractDualBidiMap.java:         * @param parent  the parent BidiMap
./bidimap/AbstractDualBidiMap.java:         * @param parent  the parent BidiMap
./bidimap/AbstractDualBidiMap.java:         * @param iterator  the iterator to decorate
./bidimap/AbstractDualBidiMap.java:         * @param parent  the parent map
./bidimap/AbstractDualBidiMap.java:         * @param parent  the parent BidiMap
./bidimap/AbstractDualBidiMap.java:         * @param iterator  the iterator to decorate
./bidimap/AbstractDualBidiMap.java:         * @param parent  the parent map
./bidimap/AbstractDualBidiMap.java:         * @param parent  the parent BidiMap
./bidimap/AbstractDualBidiMap.java:         * @param iterator  the iterator to decorate
./bidimap/AbstractDualBidiMap.java:         * @param parent  the parent map
./bidimap/AbstractDualBidiMap.java:         * @param entry  the entry to decorate
./bidimap/AbstractDualBidiMap.java:         * @param parent  the parent map
./bidimap/AbstractDualBidiMap.java:         * @param parent  the parent map
./bidimap/AbstractBidiMapDecorator.java:     * @param map  the map to decorate, must not be null
./bidimap/DualHashBidiMap.java:     * @param map  the map whose mappings are to be placed in this map
./bidimap/DualHashBidiMap.java:     * @param normalMap  the normal direction map
./bidimap/DualHashBidiMap.java:     * @param reverseMap  the reverse direction map
./bidimap/DualHashBidiMap.java:     * @param inverseBidiMap  the inverse BidiMap
./bidimap/DualHashBidiMap.java:     * @param normalMap  the normal direction map
./bidimap/DualHashBidiMap.java:     * @param reverseMap  the reverse direction map
./bidimap/DualHashBidiMap.java:     * @param inverseBidiMap  the inverse BidiMap
./bidimap/DualLinkedHashBidiMap.java:     * @param map the map whose mappings are to be placed in this map
./bidimap/DualLinkedHashBidiMap.java:     * @param normalMap      the normal direction map
./bidimap/DualLinkedHashBidiMap.java:     * @param reverseMap     the reverse direction map
./bidimap/DualLinkedHashBidiMap.java:     * @param inverseBidiMap the inverse BidiMap
./bidimap/DualLinkedHashBidiMap.java:     * @param normalMap      the normal direction map
./bidimap/DualLinkedHashBidiMap.java:     * @param reverseMap     the reverse direction map
./bidimap/DualLinkedHashBidiMap.java:     * @param inverseBidiMap the inverse BidiMap
./bidimap/UnmodifiableSortedBidiMap.java:     * @param <K> the key type
./bidimap/UnmodifiableSortedBidiMap.java:     * @param <V> the value type
./bidimap/UnmodifiableSortedBidiMap.java:     * @param map  the map to decorate, must not be null
./bidimap/UnmodifiableSortedBidiMap.java:     * @param map  the map to decorate, must not be null
./bidimap/DualTreeBidiMap.java:     * @param map  the map whose mappings are to be placed in this map
./bidimap/DualTreeBidiMap.java:     * @param keyComparator  the comparator
./bidimap/DualTreeBidiMap.java:     * @param valueComparator  the values comparator to use
./bidimap/DualTreeBidiMap.java:     * @param normalMap  the normal direction map
./bidimap/DualTreeBidiMap.java:     * @param reverseMap  the reverse direction map
./bidimap/DualTreeBidiMap.java:     * @param inverseBidiMap  the inverse BidiMap
./bidimap/DualTreeBidiMap.java:     * @param normalMap  the normal direction map
./bidimap/DualTreeBidiMap.java:     * @param reverseMap  the reverse direction map
./bidimap/DualTreeBidiMap.java:     * @param inverseMap  the inverse BidiMap
./bidimap/DualTreeBidiMap.java:         * @param bidi  the parent bidi map
./bidimap/DualTreeBidiMap.java:         * @param sm  the subMap sorted map
./bidimap/DualTreeBidiMap.java:         * @param parent  the parent map
./bidimap/UnmodifiableOrderedBidiMap.java:     * @param <K> the key type
./bidimap/UnmodifiableOrderedBidiMap.java:     * @param <V> the value type
./bidimap/UnmodifiableOrderedBidiMap.java:     * @param map  the map to decorate, must not be null
./bidimap/UnmodifiableOrderedBidiMap.java:     * @param map  the map to decorate, must not be null
./bidimap/TreeBidiMap.java:         * @param description  the description for the element
./bidimap/TreeBidiMap.java:     * @param map  the map to copy
./bidimap/TreeBidiMap.java:     * @param key  key whose presence in this map is to be tested
./bidimap/TreeBidiMap.java:     * @param value  value whose presence in this map is to be tested
./bidimap/TreeBidiMap.java:     * @param key  key whose associated value is to be returned
./bidimap/TreeBidiMap.java:     * @param key  key with which the specified value is to be  associated
./bidimap/TreeBidiMap.java:     * @param value  value to be associated with the specified key
./bidimap/TreeBidiMap.java:     * @param map  the map to copy from
./bidimap/TreeBidiMap.java:     * @param key  key whose mapping is to be removed from the map.
./bidimap/TreeBidiMap.java:     * @param value  value whose associated key is to be returned.
./bidimap/TreeBidiMap.java:     * @param value  value whose mapping is to be removed from the map
./bidimap/TreeBidiMap.java:     * @param key the key to search for next from
./bidimap/TreeBidiMap.java:     * @param key the key to search for previous from
./bidimap/TreeBidiMap.java:     * @param obj  the object to compare to
./bidimap/TreeBidiMap.java:     * @param key  the key, always the main map key
./bidimap/TreeBidiMap.java:     * @param value  the value, always the main map value
./bidimap/TreeBidiMap.java:     * @param data the key or value to be looked up
./bidimap/TreeBidiMap.java:     * @param index  the KEY or VALUE int
./bidimap/TreeBidiMap.java:     * @param node the node to be searched from
./bidimap/TreeBidiMap.java:     * @param index  the KEY or VALUE int
./bidimap/TreeBidiMap.java:     * @param node the node to be searched from
./bidimap/TreeBidiMap.java:     * @param index  the KEY or VALUE int
./bidimap/TreeBidiMap.java:     * @param o1  the first object
./bidimap/TreeBidiMap.java:     * @param o2  the second object
./bidimap/TreeBidiMap.java:     * @param node  the node from which we will start searching
./bidimap/TreeBidiMap.java:     * @param index  the KEY or VALUE int
./bidimap/TreeBidiMap.java:     * @param node  the node from which we will start searching
./bidimap/TreeBidiMap.java:     * @param index  the KEY or VALUE int
./bidimap/TreeBidiMap.java:     * @param from the node whose color we're copying; may be null
./bidimap/TreeBidiMap.java:     * @param to the node whose color we're changing; may be null
./bidimap/TreeBidiMap.java:     * @param index  the KEY or VALUE int
./bidimap/TreeBidiMap.java:     * @param node the node (may be null) in question
./bidimap/TreeBidiMap.java:     * @param index  the KEY or VALUE int
./bidimap/TreeBidiMap.java:     * @param node the node (may be null) in question
./bidimap/TreeBidiMap.java:     * @param index  the KEY or VALUE int
./bidimap/TreeBidiMap.java:     * @param node the node (may be null) in question
./bidimap/TreeBidiMap.java:     * @param index  the KEY or VALUE int
./bidimap/TreeBidiMap.java:     * @param node the node (may be null) in question
./bidimap/TreeBidiMap.java:     * @param index  the KEY or VALUE int
./bidimap/TreeBidiMap.java:     * @param node the node (may be null) in question
./bidimap/TreeBidiMap.java:     * @param index  the KEY or VALUE int
./bidimap/TreeBidiMap.java:     * @param node the node (may be null) in question
./bidimap/TreeBidiMap.java:     * @param index  the KEY or VALUE int
./bidimap/TreeBidiMap.java:     * @param node the node (may be null) in question
./bidimap/TreeBidiMap.java:     * @param index  the KEY or VALUE int
./bidimap/TreeBidiMap.java:     * @param node the node (may be null) in question
./bidimap/TreeBidiMap.java:     * @param index  the KEY or VALUE int
./bidimap/TreeBidiMap.java:     * @param node the node to be rotated
./bidimap/TreeBidiMap.java:     * @param index  the KEY or VALUE int
./bidimap/TreeBidiMap.java:     * @param node the node to be rotated
./bidimap/TreeBidiMap.java:     * @param index  the KEY or VALUE int
./bidimap/TreeBidiMap.java:     * @param insertedNode the node to be inserted
./bidimap/TreeBidiMap.java:     * @param dataElement  the KEY or VALUE int
./bidimap/TreeBidiMap.java:     * @param deletedNode the node to be deleted
./bidimap/TreeBidiMap.java:     * @param replacementNode the node being replaced
./bidimap/TreeBidiMap.java:     * @param dataElement  the KEY or VALUE int
./bidimap/TreeBidiMap.java:     * @param x one node
./bidimap/TreeBidiMap.java:     * @param y another node
./bidimap/TreeBidiMap.java:     * @param dataElement  the KEY or VALUE int
./bidimap/TreeBidiMap.java:     * @param o the object being checked
./bidimap/TreeBidiMap.java:     * @param index  the KEY or VALUE int (used to put the right word in the
./bidimap/TreeBidiMap.java:     * @param key the key to be checked
./bidimap/TreeBidiMap.java:     * @param value the value to be checked
./bidimap/TreeBidiMap.java:     * @param key the key to be checked
./bidimap/TreeBidiMap.java:     * @param value the value to be checked
./bidimap/TreeBidiMap.java:     * @param newNode the node to be inserted
./bidimap/TreeBidiMap.java:     * @param obj  the object to compare to
./bidimap/TreeBidiMap.java:     * @param type  the KEY or VALUE int
./bidimap/TreeBidiMap.java:     * @param type  the KEY or VALUE int
./bidimap/TreeBidiMap.java:     * @param type  the KEY or VALUE int
./bidimap/TreeBidiMap.java:         * @param orderType  the KEY or VALUE int for the order
./bidimap/TreeBidiMap.java:         * @param main  the main map
./bidimap/TreeBidiMap.java:         * @param orderType  the KEY or VALUE int for the order
./bidimap/TreeBidiMap.java:         * @param main  the main map
./bidimap/TreeBidiMap.java:         * @param key
./bidimap/TreeBidiMap.java:         * @param value
./bidimap/TreeBidiMap.java:         * @param node  the new parent node
./bidimap/TreeBidiMap.java:         * @param index  the KEY or VALUE int
./bidimap/TreeBidiMap.java:         * @param index  the KEY or VALUE int
./bidimap/TreeBidiMap.java:         * @param node  the node to swap with
./bidimap/TreeBidiMap.java:         * @param index  the KEY or VALUE int
./bidimap/TreeBidiMap.java:         * @param index  the KEY or VALUE int
./bidimap/TreeBidiMap.java:         * @param index  the KEY or VALUE int
./bidimap/TreeBidiMap.java:         * @param index  the KEY or VALUE int
./bidimap/TreeBidiMap.java:         * @param index  the KEY or VALUE int
./bidimap/TreeBidiMap.java:         * @param node  the node whose color we're adopting
./bidimap/TreeBidiMap.java:         * @param index  the KEY or VALUE int
./bidimap/TreeBidiMap.java:         * @param ignored
./bidimap/TreeBidiMap.java:         * @param obj  the object to be compared for equality with this entry.
./BidiMap.java: * @param <K> the type of the keys in the map
./BidiMap.java: * @param <V> the type of the values in the map
./BidiMap.java:     * @param key  the key to store
./BidiMap.java:     * @param value  the value to store
./BidiMap.java:     * @param value  the value to find the key for
./BidiMap.java:     * @param value  the value to find the key-value pair for
./Closure.java: * @param <T> the type that the closure acts on
./Closure.java:     * @param input  the input to execute on
./ClosureUtils.java:     * @param <E>  the type that the closure acts on
./ClosureUtils.java:     * @param <E>  the type that the closure acts on
./ClosureUtils.java:     * @param <E>  the type that the closure acts on
./ClosureUtils.java:     * @param transformer  the transformer to run each time in the closure, null means nop
./ClosureUtils.java:     * @param <E>  the type that the closure acts on
./ClosureUtils.java:     * @param count  the number of times to loop
./ClosureUtils.java:     * @param closure  the closure to call repeatedly
./ClosureUtils.java:     * @param <E>  the type that the closure acts on
./ClosureUtils.java:     * @param predicate  the predicate to use as an end of loop test, not null
./ClosureUtils.java:     * @param closure  the closure to call repeatedly, not null
./ClosureUtils.java:     * @param <E>  the type that the closure acts on
./ClosureUtils.java:     * @param closure  the closure to call repeatedly, not null
./ClosureUtils.java:     * @param predicate  the predicate to use as an end of loop test, not null
./ClosureUtils.java:     * @param <E>  the type that the closure acts on
./ClosureUtils.java:     * @param methodName  the name of the method
./ClosureUtils.java:     * @param <E>  the type that the closure acts on
./ClosureUtils.java:     * @param methodName  the name of the method
./ClosureUtils.java:     * @param paramTypes  the parameter types
./ClosureUtils.java:     * @param args  the arguments
./ClosureUtils.java:     * @param <E>  the type that the closure acts on
./ClosureUtils.java:     * @param closures  an array of closures to chain
./ClosureUtils.java:     * @param <E>  the type that the closure acts on
./ClosureUtils.java:     * @param closures  a collection of closures to chain
./ClosureUtils.java:     * @param <E>  the type that the closure acts on
./ClosureUtils.java:     * @param predicate  the validating predicate
./ClosureUtils.java:     * @param trueClosure  the closure called if the predicate is true
./ClosureUtils.java:     * @param <E>  the type that the closure acts on
./ClosureUtils.java:     * @param predicate  the predicate to switch on
./ClosureUtils.java:     * @param trueClosure  the closure called if the predicate is true
./ClosureUtils.java:     * @param falseClosure  the closure called if the predicate is false
./ClosureUtils.java:     * @param <E>  the type that the closure acts on
./ClosureUtils.java:     * @param predicates  an array of predicates to check, not null
./ClosureUtils.java:     * @param closures  an array of closures to call, not null
./ClosureUtils.java:     * @param <E>  the type that the closure acts on
./ClosureUtils.java:     * @param predicates  an array of predicates to check, not null
./ClosureUtils.java:     * @param closures  an array of closures to call, not null
./ClosureUtils.java:     * @param defaultClosure  the default to call if no predicate matches
./ClosureUtils.java:     * @param <E>  the type that the closure acts on
./ClosureUtils.java:     * @param predicatesAndClosures  a map of predicates to closures
./ClosureUtils.java:     * @param <E>  the type that the closure acts on
./ClosureUtils.java:     * @param objectsAndClosures  a map of objects to closures
./collection/SynchronizedCollection.java: * @param <E> the type of the elements in the collection
./collection/SynchronizedCollection.java:     * @param <T> the type of the elements in the collection
./collection/SynchronizedCollection.java:     * @param coll  the collection to decorate, must not be null
./collection/SynchronizedCollection.java:     * @param collection  the collection to decorate, must not be null
./collection/SynchronizedCollection.java:     * @param collection  the collection to decorate, must not be null
./collection/SynchronizedCollection.java:     * @param lock  the lock object to use, must not be null
./collection/AbstractCollectionDecorator.java: * @param <E> the type of the elements in the collection
./collection/AbstractCollectionDecorator.java:     * @param coll  the collection to decorate, must not be null
./collection/AbstractCollectionDecorator.java:     * @param coll  the decorated collection
./collection/CompositeCollection.java: * @param <E> the type of the elements in the collection
./collection/CompositeCollection.java:     * @param compositeCollection  the Collection to be appended to the composite
./collection/CompositeCollection.java:     * @param compositeCollection1  the Collection to be appended to the composite
./collection/CompositeCollection.java:     * @param compositeCollection2  the Collection to be appended to the composite
./collection/CompositeCollection.java:     * @param compositeCollections  the collections to composite
./collection/CompositeCollection.java:     * @param obj  the object to search for
./collection/CompositeCollection.java:     * @param <T>  the type of the elements in the collection
./collection/CompositeCollection.java:     * @param array  the array to use, populating if possible
./collection/CompositeCollection.java:     * @param obj  the object to add
./collection/CompositeCollection.java:     * @param obj  the object being removed
./collection/CompositeCollection.java:     * @param coll  the collection to check for
./collection/CompositeCollection.java:     * @param coll  the collection to add
./collection/CompositeCollection.java:     * @param coll  the collection to remove
./collection/CompositeCollection.java:     * @param coll  the collection to remove
./collection/CompositeCollection.java:     * @param mutator  the mutator to use
./collection/CompositeCollection.java:     * @param compositeCollection  the Collection to be appended to the composite
./collection/CompositeCollection.java:     * @param compositeCollection1  the Collection to be appended to the composite
./collection/CompositeCollection.java:     * @param compositeCollection2  the Collection to be appended to the composite
./collection/CompositeCollection.java:     * @param compositeCollections  the Collections to be appended to the composite
./collection/CompositeCollection.java:     * @param coll  collection to be removed
./collection/CompositeCollection.java:     * @param <E> the element being held in the collection
./collection/CompositeCollection.java:         * @param composite  the CompositeCollection being changed
./collection/CompositeCollection.java:         * @param collections  all of the Collection instances in this CompositeCollection
./collection/CompositeCollection.java:         * @param obj  the object being added
./collection/CompositeCollection.java:         * @param composite  the CompositeCollection being changed
./collection/CompositeCollection.java:         * @param collections  all of the Collection instances in this CompositeCollection
./collection/CompositeCollection.java:         * @param coll  the collection being added
./collection/CompositeCollection.java:         * @param composite  the CompositeCollection being changed
./collection/CompositeCollection.java:         * @param collections  all of the Collection instances in this CompositeCollection
./collection/CompositeCollection.java:         * @param obj  the object being removed
./collection/UnmodifiableBoundedCollection.java:     * @param <E> the type of the elements in the collection
./collection/UnmodifiableBoundedCollection.java:     * @param coll  the <code>BoundedCollection</code> to decorate, must not be null
./collection/UnmodifiableBoundedCollection.java:     * @param <E> the type of the elements in the collection
./collection/UnmodifiableBoundedCollection.java:     * @param coll  the <code>BoundedCollection</code> to decorate, must not be null
./collection/UnmodifiableBoundedCollection.java:     * @param coll  the collection to decorate, must not be null
./collection/UnmodifiableCollection.java: * @param <E> the type of the elements in the collection
./collection/UnmodifiableCollection.java:     * @param <T> the type of the elements in the collection
./collection/UnmodifiableCollection.java:     * @param coll  the collection to decorate, must not be null
./collection/UnmodifiableCollection.java:     * @param coll  the collection to decorate, must not be null
./collection/TransformedCollection.java: * @param <E> the type of the elements in the collection
./collection/TransformedCollection.java:     * @param <E> the type of the elements in the collection
./collection/TransformedCollection.java:     * @param coll  the collection to decorate, must not be null
./collection/TransformedCollection.java:     * @param transformer  the transformer to use for conversion, must not be null
./collection/TransformedCollection.java:     * @param <E> the type of the elements in the collection
./collection/TransformedCollection.java:     * @param collection  the collection to decorate, must not be null
./collection/TransformedCollection.java:     * @param transformer  the transformer to use for conversion, must not be null
./collection/TransformedCollection.java:     * @param coll  the collection to decorate, must not be null
./collection/TransformedCollection.java:     * @param transformer  the transformer to use for conversion, must not be null
./collection/TransformedCollection.java:     * @param object  the object to transform
./collection/TransformedCollection.java:     * @param coll  the collection to transform
./collection/PredicatedCollection.java: * @param <E> the type of the elements in the collection
./collection/PredicatedCollection.java:     * @param <E>  the element type
./collection/PredicatedCollection.java:     * @param predicate  the predicate to use
./collection/PredicatedCollection.java:     * @param <E>  the element type
./collection/PredicatedCollection.java:     * @param <T> the type of the elements in the collection
./collection/PredicatedCollection.java:     * @param coll  the collection to decorate, must not be null
./collection/PredicatedCollection.java:     * @param predicate  the predicate to use for validation, must not be null
./collection/PredicatedCollection.java:     * @param coll  the collection to decorate, must not be null
./collection/PredicatedCollection.java:     * @param predicate  the predicate to use for validation, must not be null
./collection/PredicatedCollection.java:     * @param object  the object being added
./collection/PredicatedCollection.java:     * @param object  the object being added
./collection/PredicatedCollection.java:     * @param coll  the collection being added
./collection/PredicatedCollection.java:     * @param <E>  the element type
./collection/PredicatedCollection.java:         * @param predicate  the predicate to use
./collection/PredicatedCollection.java:         * @param item  the element to add
./collection/PredicatedCollection.java:         * @param items  the elements to add to the builder
./collection/PredicatedCollection.java:         * @param list  the List to decorate, must not be null
./collection/PredicatedCollection.java:         * @param set  the set to decorate, must not be null
./collection/PredicatedCollection.java:         * @param multiset  the multiset to decorate, must not be null
./collection/PredicatedCollection.java:         * @param bag  the bag to decorate, must not be null
./collection/PredicatedCollection.java:         * @param queue  the queue to decorate, must not be null
./collection/IndexedCollection.java: * @param <K> the type of object in the index.
./collection/IndexedCollection.java: * @param <C> the type of object in the collection.
./collection/IndexedCollection.java:     * @param <K> the index object type.
./collection/IndexedCollection.java:     * @param <C> the collection type.
./collection/IndexedCollection.java:     * @param coll the decorated {@link Collection}.
./collection/IndexedCollection.java:     * @param keyTransformer the {@link Transformer} for generating index keys.
./collection/IndexedCollection.java:     * @param <K> the index object type.
./collection/IndexedCollection.java:     * @param <C> the collection type.
./collection/IndexedCollection.java:     * @param coll the decorated {@link Collection}.
./collection/IndexedCollection.java:     * @param keyTransformer the {@link Transformer} for generating index keys.
./collection/IndexedCollection.java:     * @param coll  decorated {@link Collection}
./collection/IndexedCollection.java:     * @param keyTransformer  {@link Transformer} for generating index keys
./collection/IndexedCollection.java:     * @param map  map to use as index
./collection/IndexedCollection.java:     * @param uniqueIndex  if the index shall enforce uniqueness of index keys
./collection/IndexedCollection.java:     * @param key  key to look up
./collection/IndexedCollection.java:     * @param key  key to look up
./collection/IndexedCollection.java:     * @param object the object to index
./collection/IndexedCollection.java:     * @param object the object to remove
./CollectionUtils.java:     * @param <O>  the element type
./CollectionUtils.java:         * @param a  the first collection
./CollectionUtils.java:         * @param b  the second collection
./CollectionUtils.java:         * @param obj  the object
./CollectionUtils.java:         * @param obj  the object
./CollectionUtils.java:         * @param obj  the object
./CollectionUtils.java:         * @param obj  the object
./CollectionUtils.java:     * @param <O>  the element type
./CollectionUtils.java:         * @param a  the first collection
./CollectionUtils.java:         * @param b  the second collection
./CollectionUtils.java:         * @param obj  the object to add
./CollectionUtils.java:         * @param count  the count
./CollectionUtils.java:     * @param <T> the element type
./CollectionUtils.java:     * @param <T> the element type
./CollectionUtils.java:     * @param collection the collection, possibly <code>null</code>
./CollectionUtils.java:     * @param a the first collection, must not be null
./CollectionUtils.java:     * @param b the second collection, must not be null
./CollectionUtils.java:     * @param <O> the generic type that is able to represent the types contained
./CollectionUtils.java:     * @param a the first collection, must not be null
./CollectionUtils.java:     * @param b the second collection, must not be null
./CollectionUtils.java:     * @param <O> the generic type that is able to represent the types contained
./CollectionUtils.java:     * @param a the first collection, must not be null
./CollectionUtils.java:     * @param b the second collection, must not be null
./CollectionUtils.java:     * @param <O> the generic type that is able to represent the types contained
./CollectionUtils.java:     * @param a  the collection to subtract from, must not be null
./CollectionUtils.java:     * @param b  the collection to subtract, must not be null
./CollectionUtils.java:     * @param <O> the generic type that is able to represent the types contained
./CollectionUtils.java:     * @param a  the collection to subtract from, must not be null
./CollectionUtils.java:     * @param b  the collection to subtract, must not be null
./CollectionUtils.java:     * @param p  the condition used to determine which elements of <i>b</i> are
./CollectionUtils.java:     * @param <O> the generic type that is able to represent the types contained
./CollectionUtils.java:     * @param coll1  the first collection, must not be null
./CollectionUtils.java:     * @param coll2  the second collection, must not be null
./CollectionUtils.java:     * @param coll1  the first collection, must not be null
./CollectionUtils.java:     * @param coll2  the second collection, must not be null
./CollectionUtils.java:     * @param <O>  the type of object in the returned {@link Map}. This is a super type of <I>.
./CollectionUtils.java:     * @param coll  the collection to get the cardinality map for, must not be null
./CollectionUtils.java:     * @param a the first (sub?) collection, must not be null
./CollectionUtils.java:     * @param b the second (super?) collection, must not be null
./CollectionUtils.java:     * @param a  the first (sub?) collection, must not be null
./CollectionUtils.java:     * @param b  the second (super?) collection, must not be null
./CollectionUtils.java:     * @param a  the first collection, must not be null
./CollectionUtils.java:     * @param b  the second collection, must not be null
./CollectionUtils.java:     * @param <E>  the element type
./CollectionUtils.java:     * @param a  the first collection, must not be null
./CollectionUtils.java:     * @param b  the second collection, must not be null
./CollectionUtils.java:     * @param equator  the Equator used for testing equality
./CollectionUtils.java:     * @param <O>  the element type
./CollectionUtils.java:     * @param obj the object to find the cardinality of
./CollectionUtils.java:     * @param coll the {@link Iterable} to search
./CollectionUtils.java:     * @param <O> the type of object that the {@link Iterable} may contain.
./CollectionUtils.java:     * @param <T>  the type of object the {@link Iterable} contains
./CollectionUtils.java:     * @param collection  the collection to search, may be null
./CollectionUtils.java:     * @param predicate  the predicate to use, may be null
./CollectionUtils.java:     * @param <T>  the type of object the {@link Iterable} contains
./CollectionUtils.java:     * @param <C>  the closure type
./CollectionUtils.java:     * @param collection  the collection to get the input from, may be null
./CollectionUtils.java:     * @param closure  the closure to perform, may be null
./CollectionUtils.java:     * @param <T>  the type of object the {@link Iterator} contains
./CollectionUtils.java:     * @param <C>  the closure type
./CollectionUtils.java:     * @param iterator  the iterator to get the input from, may be null
./CollectionUtils.java:     * @param closure  the closure to perform, may be null
./CollectionUtils.java:     * @param <T>  the type of object the {@link Iterable} contains
./CollectionUtils.java:     * @param <C>  the closure type
./CollectionUtils.java:     * @param collection  the collection to get the input from, may be null
./CollectionUtils.java:     * @param closure  the closure to perform, may be null
./CollectionUtils.java:     * @param <T>  the type of object the {@link Collection} contains
./CollectionUtils.java:     * @param <C>  the closure type
./CollectionUtils.java:     * @param iterator  the iterator to get the input from, may be null
./CollectionUtils.java:     * @param closure  the closure to perform, may be null
./CollectionUtils.java:     * @param <T>  the type of object the {@link Iterable} contains
./CollectionUtils.java:     * @param collection  the collection to get the input from, may be null
./CollectionUtils.java:     * @param predicate  the predicate to use as a filter, may be null
./CollectionUtils.java:     * @param <T>  the type of object the {@link Iterable} contains
./CollectionUtils.java:     * @param collection  the collection to get the input from, may be null
./CollectionUtils.java:     * @param predicate  the predicate to use as a filter, may be null
./CollectionUtils.java:     * @param <C>  the type of object the {@link Collection} contains
./CollectionUtils.java:     * @param collection  the {@link Collection} to get the input from, may be null
./CollectionUtils.java:     * @param transformer  the transformer to perform, may be null
./CollectionUtils.java:     * @param <C>  the type of object the {@link Iterable} contains
./CollectionUtils.java:     * @param input  the {@link Iterable} to get the input from, may be null
./CollectionUtils.java:     * @param predicate  the predicate to use, may be null
./CollectionUtils.java:     * @param <C>  the type of object the {@link Iterable} contains
./CollectionUtils.java:     * @param input  the {@link Iterable} to get the input from, may be null
./CollectionUtils.java:     * @param predicate  the predicate to use, may be null
./CollectionUtils.java:     * @param <C>  the type of object the {@link Iterable} contains
./CollectionUtils.java:     * @param input  the {@link Iterable} to get the input from, may be null
./CollectionUtils.java:     * @param predicate  the predicate to use, may be null
./CollectionUtils.java:     * @param <O>  the type of object the {@link Iterable} contains
./CollectionUtils.java:     * @param inputCollection  the collection to get the input from, may not be null
./CollectionUtils.java:     * @param predicate  the predicate to use, may be null
./CollectionUtils.java:     * @param <O>  the type of object the {@link Iterable} contains
./CollectionUtils.java:     * @param <R>  the type of the output {@link Collection}
./CollectionUtils.java:     * @param inputCollection  the collection to get the input from, may be null
./CollectionUtils.java:     * @param predicate  the predicate to use, may be null
./CollectionUtils.java:     * @param outputCollection  the collection to output into, may not be null if the inputCollection
./CollectionUtils.java:     * @param <O>  the type of object the {@link Iterable} contains
./CollectionUtils.java:     * @param <R>  the type of the output {@link Collection}
./CollectionUtils.java:     * @param inputCollection  the collection to get the input from, may be null
./CollectionUtils.java:     * @param predicate  the predicate to use, may be null
./CollectionUtils.java:     * @param outputCollection  the collection to output selected elements into, may not be null if the
./CollectionUtils.java:     * @param rejectedCollection  the collection to output rejected elements into, may not be null if the
./CollectionUtils.java:     * @param <O>  the type of object the {@link Iterable} contains
./CollectionUtils.java:     * @param inputCollection  the collection to get the input from, may not be null
./CollectionUtils.java:     * @param predicate  the predicate to use, may be null
./CollectionUtils.java:     * @param <O>  the type of object the {@link Iterable} contains
./CollectionUtils.java:     * @param <R>  the type of the output {@link Collection}
./CollectionUtils.java:     * @param inputCollection  the collection to get the input from, may be null
./CollectionUtils.java:     * @param predicate  the predicate to use, may be null
./CollectionUtils.java:     * @param outputCollection  the collection to output into, may not be null if the inputCollection
./CollectionUtils.java:     * @param <I>  the type of object in the input collection
./CollectionUtils.java:     * @param <O>  the type of object in the output collection
./CollectionUtils.java:     * @param inputCollection  the collection to get the input from, may not be null
./CollectionUtils.java:     * @param transformer  the transformer to use, may be null
./CollectionUtils.java:     * @param <I>  the type of object in the input collection
./CollectionUtils.java:     * @param <O>  the type of object in the output collection
./CollectionUtils.java:     * @param inputIterator  the iterator to get the input from, may be null
./CollectionUtils.java:     * @param transformer  the transformer to use, may be null
./CollectionUtils.java:     * @param <I>  the type of object in the input collection
./CollectionUtils.java:     * @param <O>  the type of object in the output collection
./CollectionUtils.java:     * @param <R>  the type of the output collection
./CollectionUtils.java:     * @param inputCollection  the collection to get the input from, may be null
./CollectionUtils.java:     * @param transformer  the transformer to use, may be null
./CollectionUtils.java:     * @param outputCollection  the collection to output into, may not be null if inputCollection
./CollectionUtils.java:     * @param <I>  the type of object in the input collection
./CollectionUtils.java:     * @param <O>  the type of object in the output collection
./CollectionUtils.java:     * @param <R>  the type of the output collection
./CollectionUtils.java:     * @param inputIterator  the iterator to get the input from, may be null
./CollectionUtils.java:     * @param transformer  the transformer to use, may be null
./CollectionUtils.java:     * @param outputCollection  the collection to output into, may not be null if inputIterator
./CollectionUtils.java:     * @param <T>  the type of object the {@link Collection} contains
./CollectionUtils.java:     * @param collection  the collection to add to, must not be null
./CollectionUtils.java:     * @param object  the object to add, if null it will not be added
./CollectionUtils.java:     * @param <C>  the type of object the {@link Collection} contains
./CollectionUtils.java:     * @param collection  the collection to add to, must not be null
./CollectionUtils.java:     * @param iterable  the iterable of elements to add, must not be null
./CollectionUtils.java:     * @param <C>  the type of object the {@link Collection} contains
./CollectionUtils.java:     * @param collection  the collection to add to, must not be null
./CollectionUtils.java:     * @param iterator  the iterator of elements to add, must not be null
./CollectionUtils.java:     * @param <C>  the type of object the {@link Collection} contains
./CollectionUtils.java:     * @param collection  the collection to add to, must not be null
./CollectionUtils.java:     * @param enumeration  the enumeration of elements to add, must not be null
./CollectionUtils.java:     * @param <C>  the type of object the {@link Collection} contains
./CollectionUtils.java:     * @param collection  the collection to add to, must not be null
./CollectionUtils.java:     * @param elements  the array of elements to add, must not be null
./CollectionUtils.java:     * @param iterator  the iterator to get a value from
./CollectionUtils.java:     * @param index  the index to get
./CollectionUtils.java:     * @param <T> the type of object in the {@link Iterator}
./CollectionUtils.java:     * @param index the index to check.
./CollectionUtils.java:     * @param iterable  the {@link Iterable} to get a value from
./CollectionUtils.java:     * @param index  the index to get
./CollectionUtils.java:     * @param <T> the type of object in the {@link Iterable}.
./CollectionUtils.java:     * @param object  the object to get a value from
./CollectionUtils.java:     * @param index  the index to get
./CollectionUtils.java:     * @param <K>  the key type in the {@link Map}
./CollectionUtils.java:     * @param <V>  the key type in the {@link Map}
./CollectionUtils.java:     * @param map  the object to get a value from
./CollectionUtils.java:     * @param index  the index to get
./CollectionUtils.java:     * @param object  the object to get the size of, may be null
./CollectionUtils.java:     * @param object  the object to get the size of, may be null
./CollectionUtils.java:     * @param coll  the collection to check, may be null
./CollectionUtils.java:     * @param coll  the collection to check, may be null
./CollectionUtils.java:     * @param array  the array to reverse
./CollectionUtils.java:     * @param coll  the collection to check
./CollectionUtils.java:     * @param coll  the collection to check
./CollectionUtils.java:     * @param <O>  the element type
./CollectionUtils.java:     * @param a  the first collection, must not be null
./CollectionUtils.java:     * @param b  the second collection, must not be null
./CollectionUtils.java:     * @param <O>  the element type
./CollectionUtils.java:     * @param a  the first collection, must not be null
./CollectionUtils.java:     * @param b  the second collection, must not be null
./CollectionUtils.java:     * @param includeDuplicates  if {@code true} duplicate elements will be retained, otherwise
./CollectionUtils.java:     * @param <O>  the element type
./CollectionUtils.java:     * @param a  the first collection, must not be null
./CollectionUtils.java:     * @param b  the second collection, must not be null
./CollectionUtils.java:     * @param c  the comparator to use for the merge.
./CollectionUtils.java:     * @param <O>  the element type
./CollectionUtils.java:     * @param a  the first collection, must not be null
./CollectionUtils.java:     * @param b  the second collection, must not be null
./CollectionUtils.java:     * @param c  the comparator to use for the merge.
./CollectionUtils.java:     * @param includeDuplicates  if {@code true} duplicate elements will be retained, otherwise
./CollectionUtils.java:     * @param <E>  the element type
./CollectionUtils.java:     * @param collection  the collection to create permutations for, may not be null
./CollectionUtils.java:     * @param <C>  the type of object the {@link Collection} contains
./CollectionUtils.java:     * @param collection  the collection whose contents are the target of the #retailAll operation
./CollectionUtils.java:     * @param retain  the collection containing the elements to be retained in the returned collection
./CollectionUtils.java:     * @param <E> the type of object the {@link Collection} contains
./CollectionUtils.java:     * @param collection the collection whose contents are the target of the {@code retainAll} operation
./CollectionUtils.java:     * @param retain the collection containing the elements to be retained in the returned collection
./CollectionUtils.java:     * @param equator the Equator used for testing equality
./CollectionUtils.java:     * @param <E>  the type of object the {@link Collection} contains
./CollectionUtils.java:     * @param collection  the collection from which items are removed (in the returned collection)
./CollectionUtils.java:     * @param remove  the items to be removed from the returned <code>collection</code>
./CollectionUtils.java:     * @param <E> the type of object the {@link Collection} contains
./CollectionUtils.java:     * @param collection the collection from which items are removed (in the returned collection)
./CollectionUtils.java:     * @param remove the items to be removed from the returned collection
./CollectionUtils.java:     * @param equator the Equator used for testing equality
./CollectionUtils.java:     * @param <C>  the type of object the {@link Collection} contains
./CollectionUtils.java:     * @param collection  the collection to synchronize, must not be null
./CollectionUtils.java:     * @param <C>  the type of object the {@link Collection} contains
./CollectionUtils.java:     * @param collection  the collection to make unmodifiable, must not be null
./CollectionUtils.java:     * @param <C> the type of objects in the Collection.
./CollectionUtils.java:     * @param collection  the collection to predicate, must not be null
./CollectionUtils.java:     * @param predicate  the predicate for the collection, must not be null
./CollectionUtils.java:     * @param <E> the type of object the {@link Collection} contains
./CollectionUtils.java:     * @param collection  the collection to predicate, must not be null
./CollectionUtils.java:     * @param transformer  the transformer for the collection, must not be null
./CollectionUtils.java:     * @param <E> collection type
./CollectionUtils.java:     * @param collection to read
./comparators/NullComparator.java:     *  @param nonNullComparator the comparator to use when comparing two
./comparators/NullComparator.java:     *  @param nullsAreHigh a <code>true</code> value indicates that
./comparators/NullComparator.java:     *  @param nonNullComparator the comparator to use when comparing two
./comparators/NullComparator.java:     *  @param nullsAreHigh a <code>true</code> value indicates that
./comparators/NullComparator.java:     *  @param o1  the first object to compare
./comparators/NullComparator.java:     *  @param o2  the object to compare it to.
./comparators/NullComparator.java:     *  @param obj  the object to compare this comparator with.
./comparators/ComparatorChain.java:     * @param comparator First comparator in the Comparator chain
./comparators/ComparatorChain.java:     * @param comparator First Comparator in the ComparatorChain
./comparators/ComparatorChain.java:     * @param reverse    false = forward sort; true = reverse sort
./comparators/ComparatorChain.java:     * @param list   List of Comparators
./comparators/ComparatorChain.java:     * @param list   List of Comparators.  NOTE: This constructor does not perform a
./comparators/ComparatorChain.java:     * @param bits   Sort order for each Comparator.  Extra bits are ignored,
./comparators/ComparatorChain.java:     * @param comparator Comparator with the forward sort order
./comparators/ComparatorChain.java:     * @param comparator Comparator to add to the end of the chain
./comparators/ComparatorChain.java:     * @param reverse    false = forward sort order; true = reverse sort order
./comparators/ComparatorChain.java:     * @param index      index of the Comparator to replace
./comparators/ComparatorChain.java:     * @param comparator Comparator to place at the given index
./comparators/ComparatorChain.java:     * @param index      index of the Comparator to replace
./comparators/ComparatorChain.java:     * @param comparator Comparator to set
./comparators/ComparatorChain.java:     * @param reverse    false = forward sort order; true = reverse sort order
./comparators/ComparatorChain.java:     * @param index  Index of the ComparatorChain
./comparators/ComparatorChain.java:     * @param index  Index of the ComparatorChain
./comparators/ComparatorChain.java:     * @param o1  the first object to compare
./comparators/ComparatorChain.java:     * @param o2  the second object to compare
./comparators/ComparatorChain.java:     * @param object  the object to compare with
./comparators/ComparableComparator.java:     * @param <E>  the element type
./comparators/ComparableComparator.java:     * @param obj1  the first object to compare
./comparators/ComparableComparator.java:     * @param obj2  the second object to compare
./comparators/ComparableComparator.java:     * @param object  the object to compare with
./comparators/FixedOrderComparator.java:     * @param items  the items that the comparator can compare in order
./comparators/FixedOrderComparator.java:     * @param items  the items that the comparator can compare in order
./comparators/FixedOrderComparator.java:     * @param unknownObjectBehavior  the flag for unknown behaviour -
./comparators/FixedOrderComparator.java:     * @param obj  the item to be added to the Comparator.
./comparators/FixedOrderComparator.java:     * @param existingObj  an item already in the Comparator's set of
./comparators/FixedOrderComparator.java:     * @param newObj  an item to be added to the Comparator's set of
./comparators/FixedOrderComparator.java:     * @param obj1  the first object to compare
./comparators/FixedOrderComparator.java:     * @param obj2  the second object to compare
./comparators/FixedOrderComparator.java:     * @param object  the object to compare to
./comparators/BooleanComparator.java:     * @param trueFirst when <code>true</code>, sort
./comparators/BooleanComparator.java:     * @param trueFirst when <code>true</code>, sort
./comparators/BooleanComparator.java:     * @param b1  the first boolean to compare
./comparators/BooleanComparator.java:     * @param b2  the second boolean to compare
./comparators/BooleanComparator.java:     * @param object  the object to compare to
./comparators/ReverseComparator.java:     * @param comparator Comparator to reverse
./comparators/ReverseComparator.java:     * @param obj1  the first object to compare
./comparators/ReverseComparator.java:     * @param obj2  the second object to compare
./comparators/ReverseComparator.java:     * @param object  the object to compare to
./comparators/TransformingComparator.java:     * @param transformer what will transform the arguments to <code>compare</code>
./comparators/TransformingComparator.java:     * @param transformer  what will transform the arguments to <code>compare</code>
./comparators/TransformingComparator.java:     * @param decorated  the decorated Comparator
./comparators/TransformingComparator.java:     * @param obj1  the first object to transform then compare
./comparators/TransformingComparator.java:     * @param obj2  the second object to transform then compare
./comparators/TransformingComparator.java:     * @param object  the object to compare to
./ComparatorUtils.java:     * @param <E>  the object type to compare
./ComparatorUtils.java:     * @param <E>  the object type to compare
./ComparatorUtils.java:     * @param comparators  the comparators to use, not null or empty or containing nulls
./ComparatorUtils.java:     * @param <E>  the object type to compare
./ComparatorUtils.java:     * @param comparators  the comparators to use, not null or empty or containing nulls
./ComparatorUtils.java:     * @param <E>  the object type to compare
./ComparatorUtils.java:     * @param comparator  the comparator to reverse
./ComparatorUtils.java:     * @param trueFirst  when <code>true</code>, sort
./ComparatorUtils.java:     * @param <E>  the object type to compare
./ComparatorUtils.java:     * @param comparator the comparator that wants to allow nulls
./ComparatorUtils.java:     * @param <E>  the object type to compare
./ComparatorUtils.java:     * @param comparator the comparator that wants to allow nulls
./ComparatorUtils.java:     * @param <I>  the input object type of the transformed comparator
./ComparatorUtils.java:     * @param <O>  the object type of the decorated comparator
./ComparatorUtils.java:     * @param comparator  the sort order to use
./ComparatorUtils.java:     * @param transformer  the transformer to use
./ComparatorUtils.java:     * @param <E>  the object type to compare
./ComparatorUtils.java:     * @param o1  the first object to compare
./ComparatorUtils.java:     * @param o2  the second object to compare
./ComparatorUtils.java:     * @param comparator  the sort order to use
./ComparatorUtils.java:     * @param <E>  the object type to compare
./ComparatorUtils.java:     * @param o1  the first object to compare
./ComparatorUtils.java:     * @param o2  the second object to compare
./ComparatorUtils.java:     * @param comparator  the sort order to use
./EnumerationUtils.java:     * @param e  the enumeration to get a value from
./EnumerationUtils.java:     * @param index  the index to get
./EnumerationUtils.java:     * @param <T> the type of object in the {@link Enumeration}
./EnumerationUtils.java:     * @param <E> the element type
./EnumerationUtils.java:     * @param enumeration  the enumeration to traverse, which should not be <code>null</code>.
./EnumerationUtils.java:     * @param stringTokenizer  the tokenizer to convert to a {@link List}&lt;{@link String}&gt;
./Equator.java: * @param <T> the types of object this {@link Equator} can evaluate.
./Equator.java:     * @param o1 the first object to be equated.
./Equator.java:     * @param o2 the second object to be equated.
./Equator.java:     * @param o the object to calculate the hash for.
./Factory.java: * @param <T> the type that the factory creates
./FactoryUtils.java:     * @param <T> the type that the factory creates
./FactoryUtils.java:     * @param <T> the "type" of null object the factory should return.
./FactoryUtils.java:     * @param <T> the type that the factory creates
./FactoryUtils.java:     * @param constantToReturn  the constant object to return each time in the factory
./FactoryUtils.java:     * @param <T> the type that the factory creates
./FactoryUtils.java:     * @param prototype  the object to clone each time in the factory
./FactoryUtils.java:     * @param <T> the type that the factory creates
./FactoryUtils.java:     * @param classToInstantiate  the Class to instantiate each time in the factory
./FactoryUtils.java:     * @param <T> the type that the factory creates
./FactoryUtils.java:     * @param classToInstantiate  the Class to instantiate each time in the factory
./FactoryUtils.java:     * @param paramTypes  parameter types for the constructor, can be null
./FactoryUtils.java:     * @param args  the arguments to pass to the constructor, can be null
./FluentIterable.java: * @param <E>  the element type
./FluentIterable.java:     * @param <T>  the element type
./FluentIterable.java:     * @param <T>  the element type
./FluentIterable.java:     * @param singleton  the singleton element
./FluentIterable.java:     * @param <T>  the element type
./FluentIterable.java:     * @param elements  the elements to be contained in the FluentIterable
./FluentIterable.java:     * @param <T>  the element type
./FluentIterable.java:     * @param iterable  the iterable to wrap into a FluentIterable, may not be null
./FluentIterable.java:     * @param iterable  the iterable to wrap
./FluentIterable.java:     * @param elements  the elements to append to the iterable
./FluentIterable.java:     * @param other  the other iterable to combine, may not be null
./FluentIterable.java:     * @param other  the other iterable to collate, may not be null
./FluentIterable.java:     * @param comparator  the comparator to define an ordering, may be null,
./FluentIterable.java:     * @param other  the other iterable to collate, may not be null
./FluentIterable.java:     * @param predicate  the predicate used to filter elements
./FluentIterable.java:     * @param maxSize  the maximum number of elements
./FluentIterable.java:     * @param elementsToSkip  the number of elements to skip
./FluentIterable.java:     * @param <O>  the output element type
./FluentIterable.java:     * @param transformer  the transformer applied to each element
./FluentIterable.java:     * @param other  the other iterable to interleave, may not be null
./FluentIterable.java:     * @param others  the iterables to interleave, may not be null
./FluentIterable.java:     * @param predicate  the predicate to use, may not be null
./FluentIterable.java:     * @param predicate  the predicate to use, may not be null
./FluentIterable.java:     * @param object  the object to check
./FluentIterable.java:     * @param closure  the closure to apply to each element, may not be null
./FluentIterable.java:     * @param position  the position of the element to return
./FluentIterable.java:     * @param collection  the collection to add the elements
./FluentIterable.java:     * @param arrayClass  the class of array to create
./FunctorException.java:     * @param msg  the error message.
./FunctorException.java:     * @param rootCause  the exception or error that caused this exception
./FunctorException.java:     * @param msg        the error message.
./FunctorException.java:     * @param rootCause  the exception or error that caused this exception
./functors/StringValueTransformer.java:     * @param <T>  the input type
./functors/StringValueTransformer.java:     * @param input  the input object to transform
./functors/NOPClosure.java:     * @param <E> the type that the closure acts on
./functors/NOPClosure.java:     * @param input  the input object
./functors/UniquePredicate.java:     * @param <T> the type that the predicate queries
./functors/UniquePredicate.java:     * @param object  the input object
./functors/IfClosure.java:     * @param <E> the type that the closure acts on
./functors/IfClosure.java:     * @param predicate  predicate to switch on
./functors/IfClosure.java:     * @param trueClosure  closure used if true
./functors/IfClosure.java:     * @param <E> the type that the closure acts on
./functors/IfClosure.java:     * @param predicate  predicate to switch on
./functors/IfClosure.java:     * @param trueClosure  closure used if true
./functors/IfClosure.java:     * @param falseClosure  closure used if false
./functors/IfClosure.java:     * @param predicate  predicate to switch on, not null
./functors/IfClosure.java:     * @param trueClosure  closure used if true, not null
./functors/IfClosure.java:     * @param predicate  predicate to switch on, not null
./functors/IfClosure.java:     * @param trueClosure  closure used if true, not null
./functors/IfClosure.java:     * @param falseClosure  closure used if false, not null
./functors/IfClosure.java:     * @param input  the input object
./functors/NullIsFalsePredicate.java:     * @param <T> the type that the predicate queries
./functors/NullIsFalsePredicate.java:     * @param predicate  the predicate to decorate, not null
./functors/NullIsFalsePredicate.java:     * @param predicate  the predicate to call after the null check
./functors/NullIsFalsePredicate.java:     * @param object  the input object
./functors/IdentityPredicate.java:     * @param <T> the type that the predicate queries
./functors/IdentityPredicate.java:     * @param object  the object to compare to
./functors/IdentityPredicate.java:     * @param object  the object to compare to
./functors/IdentityPredicate.java:     * @param object  the input object
./functors/AbstractQuantifierPredicate.java:     * @param predicates  the predicates to check, not cloned, not null
./functors/FactoryTransformer.java:     * @param <I>  the input type
./functors/FactoryTransformer.java:     * @param <O>  the output type
./functors/FactoryTransformer.java:     * @param factory  the factory to call, not null
./functors/FactoryTransformer.java:     * @param factory  the factory to call, not null
./functors/FactoryTransformer.java:     * @param input  the input object to transform
./functors/NonePredicate.java:     * @param <T> the type that the predicate queries
./functors/NonePredicate.java:     * @param predicates  the predicates to check, cloned, not null
./functors/NonePredicate.java:     * @param <T> the type that the predicate queries
./functors/NonePredicate.java:     * @param predicates  the predicates to check, cloned, not null
./functors/NonePredicate.java:     * @param predicates  the predicates to check, not cloned, not null
./functors/NonePredicate.java:     * @param object  the input object
./functors/PrototypeFactory.java:     * @param <T>  the type the factory creates
./functors/PrototypeFactory.java:     * @param prototype  the object to clone each time in the factory
./functors/TransformerPredicate.java:     * @param <T> the type that the predicate queries
./functors/TransformerPredicate.java:     * @param transformer  the transformer to decorate
./functors/TransformerPredicate.java:     * @param transformer  the transformer to decorate
./functors/TransformerPredicate.java:     * @param object  the input object
./functors/AnyPredicate.java:     * @param <T> the type that the predicate queries
./functors/AnyPredicate.java:     * @param predicates  the predicates to check, cloned, not null
./functors/AnyPredicate.java:     * @param <T> the type that the predicate queries
./functors/AnyPredicate.java:     * @param predicates  the predicates to check, cloned, not null
./functors/AnyPredicate.java:     * @param predicates  the predicates to check, not cloned, not null
./functors/AnyPredicate.java:     * @param object  the input object
./functors/MapTransformer.java:     * @param <I>  the input type
./functors/MapTransformer.java:     * @param <O>  the output type
./functors/MapTransformer.java:     * @param map the map, not cloned
./functors/MapTransformer.java:     * @param map  the map to use for lookup, not cloned
./functors/MapTransformer.java:     * @param input  the input object to transform
./functors/CatchAndRethrowClosure.java:     * @param input the input to execute on
./functors/CatchAndRethrowClosure.java:     * @param input the input to execute on
./functors/DefaultEquator.java: * @param <T>  the types of object this {@link Equator} can evaluate.
./functors/DefaultEquator.java:     * @param <T>  the object type
./functors/TruePredicate.java:     * @param <T> the type that the predicate queries
./functors/TruePredicate.java:     * @param object  the input object
./functors/ExceptionPredicate.java:     * @param <T>  the object type
./functors/ExceptionPredicate.java:     * @param object  the input object
./functors/OnePredicate.java:     * @param <T> the type that the predicate queries
./functors/OnePredicate.java:     * @param predicates  the predicates to check, cloned, not null
./functors/OnePredicate.java:     * @param <T> the type that the predicate queries
./functors/OnePredicate.java:     * @param predicates  the predicates to check, cloned, not null
./functors/OnePredicate.java:     * @param predicates  the predicates to check, not cloned, not null
./functors/OnePredicate.java:     * @param object  the input object
./functors/ClosureTransformer.java:     * @param <T>  the type of the object to transform
./functors/ClosureTransformer.java:     * @param closure  the closure to call, not null
./functors/ClosureTransformer.java:     * @param closure  the closure to call, not null
./functors/ClosureTransformer.java:     * @param input  the input object to transform
./functors/ConstantTransformer.java:     * @param <I>  the input type
./functors/ConstantTransformer.java:     * @param <O>  the output type
./functors/ConstantTransformer.java:     * @param <I>  the input type
./functors/ConstantTransformer.java:     * @param <O>  the output type
./functors/ConstantTransformer.java:     * @param constantToReturn  the constant object to return each time in the factory
./functors/ConstantTransformer.java:     * @param constantToReturn  the constant to return each time
./functors/ConstantTransformer.java:     * @param input  the input object which is ignored
./functors/AllPredicate.java:     * @param <T> the type that the predicate queries
./functors/AllPredicate.java:     * @param predicates  the predicates to check, cloned, not null
./functors/AllPredicate.java:     * @param <T> the type that the predicate queries
./functors/AllPredicate.java:     * @param predicates  the predicates to check, cloned, not null
./functors/AllPredicate.java:     * @param predicates  the predicates to check, not cloned, not null
./functors/AllPredicate.java:     * @param object  the input object
./functors/FunctorUtils.java:     * @param predicates  the predicates to copy
./functors/FunctorUtils.java:     * @param <T> the type of object the returned predicate should "accept"
./functors/FunctorUtils.java:     * @param predicate the predicate to coerce.
./functors/FunctorUtils.java:     * @param predicates  the predicates to validate
./functors/FunctorUtils.java:     * @param predicates  the predicates to validate
./functors/FunctorUtils.java:     * @param closures  the closures to copy
./functors/FunctorUtils.java:     * @param closures  the closures to validate
./functors/FunctorUtils.java:     * @param <T> the type of object the returned closure should "accept"
./functors/FunctorUtils.java:     * @param closure the closure to coerce.
./functors/FunctorUtils.java:     * @param transformers  the transformers to copy
./functors/FunctorUtils.java:     * @param transformers  the transformers to validate
./functors/FunctorUtils.java:     * @param <T> the type of object the returned transformer should "accept"
./functors/FunctorUtils.java:     * @param transformer the transformer to coerce.
./functors/TransformerClosure.java:     * @param <E> the type that the closure acts on
./functors/TransformerClosure.java:     * @param transformer  the transformer to call, null means nop
./functors/TransformerClosure.java:     * @param transformer  the transformer to call, not null
./functors/TransformerClosure.java:     * @param input  the input object
./functors/NotPredicate.java:     * @param <T> the type that the predicate queries
./functors/NotPredicate.java:     * @param predicate  the predicate to decorate, not null
./functors/NotPredicate.java:     * @param predicate  the predicate to call after the null check
./functors/NotPredicate.java:     * @param object  the input object
./functors/OrPredicate.java:     * @param <T> the type that the predicate queries
./functors/OrPredicate.java:     * @param predicate1  the first predicate to check, not null
./functors/OrPredicate.java:     * @param predicate2  the second predicate to check, not null
./functors/OrPredicate.java:     * @param predicate1  the first predicate to check, not null
./functors/OrPredicate.java:     * @param predicate2  the second predicate to check, not null
./functors/OrPredicate.java:     * @param object  the input object
./functors/IfTransformer.java: * @param <I> The input type for the transformer
./functors/IfTransformer.java: * @param <O> The output type for the transformer
./functors/IfTransformer.java:     * @param <I>  input type for the transformer
./functors/IfTransformer.java:     * @param <O>  output type for the transformer
./functors/IfTransformer.java:     * @param predicate  predicate to switch on
./functors/IfTransformer.java:     * @param trueTransformer  transformer used if true
./functors/IfTransformer.java:     * @param falseTransformer  transformer used if false
./functors/IfTransformer.java:     * @param <T>  input and output type for the transformer
./functors/IfTransformer.java:     * @param predicate  predicate to switch on
./functors/IfTransformer.java:     * @param trueTransformer  transformer used if true
./functors/IfTransformer.java:     * @param predicate  predicate to switch on, not null
./functors/IfTransformer.java:     * @param trueTransformer  transformer used if true, not null
./functors/IfTransformer.java:     * @param falseTransformer  transformer used if false, not null
./functors/IfTransformer.java:     * @param input  the input object to transform
./functors/ExceptionClosure.java:     * @param <E> the type that the closure acts on
./functors/ExceptionClosure.java:     * @param input  the input object
./functors/ChainedTransformer.java:     * @param <T>  the object type
./functors/ChainedTransformer.java:     * @param transformers  the transformers to chain, copied, no nulls
./functors/ChainedTransformer.java:     * @param <T>  the object type
./functors/ChainedTransformer.java:     * @param transformers  a collection of transformers to chain
./functors/ChainedTransformer.java:     * @param clone  if {@code true} the input argument will be cloned
./functors/ChainedTransformer.java:     * @param transformers  the transformers to chain, no nulls
./functors/ChainedTransformer.java:     * @param transformers  the transformers to chain, copied, no nulls
./functors/ChainedTransformer.java:     * @param object  the input object passed to the first transformer
./functors/EqualPredicate.java:     * @param <T> the type that the predicate queries
./functors/EqualPredicate.java:     * @param object  the object to compare to
./functors/EqualPredicate.java:     * @param <T> the type that the predicate queries
./functors/EqualPredicate.java:     * @param object  the object to compare to
./functors/EqualPredicate.java:     * @param equator  the equator to use for comparison
./functors/EqualPredicate.java:     * @param object  the object to compare to
./functors/EqualPredicate.java:     * @param object  the object to compare to
./functors/EqualPredicate.java:     * @param equator  the equator to use for comparison
./functors/EqualPredicate.java:     * @param object  the input object
./functors/TransformedPredicate.java:     * @param <T> the type that the predicate queries
./functors/TransformedPredicate.java:     * @param transformer  the transformer to call
./functors/TransformedPredicate.java:     * @param predicate  the predicate to call with the result of the transform
./functors/TransformedPredicate.java:     * @param transformer  the transformer to use
./functors/TransformedPredicate.java:     * @param predicate  the predicate to decorate
./functors/TransformedPredicate.java:     * @param object  the input object which will be transformed
./functors/ExceptionFactory.java:     * @param <T>  the type the factory creates
./functors/AndPredicate.java:     * @param <T> the type that the predicate queries
./functors/AndPredicate.java:     * @param predicate1  the first predicate to check, not null
./functors/AndPredicate.java:     * @param predicate2  the second predicate to check, not null
./functors/AndPredicate.java:     * @param predicate1  the first predicate to check, not null
./functors/AndPredicate.java:     * @param predicate2  the second predicate to check, not null
./functors/AndPredicate.java:     * @param object  the input object
./functors/SwitchClosure.java:     * @param <E> the type that the closure acts on
./functors/SwitchClosure.java:     * @param predicates  array of predicates, cloned, no nulls
./functors/SwitchClosure.java:     * @param closures  matching array of closures, cloned, no nulls
./functors/SwitchClosure.java:     * @param defaultClosure  the closure to use if no match, null means nop
./functors/SwitchClosure.java:     * @param <E> the type that the closure acts on
./functors/SwitchClosure.java:     * @param predicatesAndClosures  a map of predicates to closures
./functors/SwitchClosure.java:     * @param clone  if {@code true} the input arguments will be cloned
./functors/SwitchClosure.java:     * @param predicates  array of predicates, no nulls
./functors/SwitchClosure.java:     * @param closures  matching array of closures, no nulls
./functors/SwitchClosure.java:     * @param defaultClosure  the closure to use if no match, null means nop
./functors/SwitchClosure.java:     * @param predicates  array of predicates, cloned, no nulls
./functors/SwitchClosure.java:     * @param closures  matching array of closures, cloned, no nulls
./functors/SwitchClosure.java:     * @param defaultClosure  the closure to use if no match, null means nop
./functors/SwitchClosure.java:     * @param input  the input object
./functors/InstantiateFactory.java:     * @param <T>  the type the factory creates
./functors/InstantiateFactory.java:     * @param classToInstantiate  the class to instantiate, not null
./functors/InstantiateFactory.java:     * @param paramTypes  the constructor parameter types, cloned
./functors/InstantiateFactory.java:     * @param args  the constructor arguments, cloned
./functors/InstantiateFactory.java:     * @param classToInstantiate  the class to instantiate
./functors/InstantiateFactory.java:     * @param classToInstantiate  the class to instantiate
./functors/InstantiateFactory.java:     * @param paramTypes  the constructor parameter types, cloned
./functors/InstantiateFactory.java:     * @param args  the constructor arguments, cloned
./functors/ComparatorPredicate.java:     * @param <T> the type that the predicate queries
./functors/ComparatorPredicate.java:     * @param object  the object to compare to
./functors/ComparatorPredicate.java:     * @param comparator  the comparator to use for comparison
./functors/ComparatorPredicate.java:     * @param <T> the type that the predicate queries
./functors/ComparatorPredicate.java:     * @param object  the object to compare to
./functors/ComparatorPredicate.java:     * @param comparator  the comparator to use for comparison
./functors/ComparatorPredicate.java:     * @param criterion  the criterion to use to evaluate comparison
./functors/ComparatorPredicate.java:     * @param object  the object to compare to
./functors/ComparatorPredicate.java:     * @param comparator  the comparator to use for comparison
./functors/ComparatorPredicate.java:     * @param criterion  the criterion to use to evaluate comparison
./functors/ComparatorPredicate.java:     * @param target  the target object to compare to
./functors/ConstantFactory.java:     * @param <T>  the type of the constant
./functors/ConstantFactory.java:     * @param constantToReturn  the constant object to return each time in the factory
./functors/ConstantFactory.java:     * @param constantToReturn  the constant to return each time
./functors/ForClosure.java:     * @param <E> the type that the closure acts on
./functors/ForClosure.java:     * @param count  the number of times to execute the closure
./functors/ForClosure.java:     * @param closure  the closure to execute, not null
./functors/ForClosure.java:     * @param count  the number of times to execute the closure
./functors/ForClosure.java:     * @param closure  the closure to execute, not null
./functors/ForClosure.java:     * @param input  the input object
./functors/NOPTransformer.java:     * @param <T>  the input/output type
./functors/NOPTransformer.java:     * @param input  the input object to transform
./functors/SwitchTransformer.java:     * @param <I>  the input type
./functors/SwitchTransformer.java:     * @param <O>  the output type
./functors/SwitchTransformer.java:     * @param predicates  array of predicates, cloned, no nulls
./functors/SwitchTransformer.java:     * @param transformers  matching array of transformers, cloned, no nulls
./functors/SwitchTransformer.java:     * @param defaultTransformer  the transformer to use if no match, null means return null
./functors/SwitchTransformer.java:     * @param <I>  the input type
./functors/SwitchTransformer.java:     * @param <O>  the output type
./functors/SwitchTransformer.java:     * @param map  a map of predicates to transformers
./functors/SwitchTransformer.java:     * @param clone  if {@code true} the input arguments will be cloned
./functors/SwitchTransformer.java:     * @param predicates  array of predicates, no nulls
./functors/SwitchTransformer.java:     * @param transformers  matching array of transformers, no nulls
./functors/SwitchTransformer.java:     * @param defaultTransformer  the transformer to use if no match, null means return null
./functors/SwitchTransformer.java:     * @param predicates  array of predicates, cloned, no nulls
./functors/SwitchTransformer.java:     * @param transformers  matching array of transformers, cloned, no nulls
./functors/SwitchTransformer.java:     * @param defaultTransformer  the transformer to use if no match, null means return null
./functors/SwitchTransformer.java:     * @param input  the input object to transform
./functors/NullPredicate.java:     * @param <T> the type that the predicate queries
./functors/NullPredicate.java:     * @param object  the input object
./functors/NotNullPredicate.java:     * @param <T> the type that the predicate queries
./functors/NotNullPredicate.java:     * @param object  the object to evaluate
./functors/PredicateTransformer.java:     * @param <T>  the input type
./functors/PredicateTransformer.java:     * @param predicate  the predicate to call, not null
./functors/PredicateTransformer.java:     * @param predicate  the predicate to call, not null
./functors/PredicateTransformer.java:     * @param input  the input object to transform
./functors/CloneTransformer.java:     * @param <T>  the type of the objects to be cloned
./functors/CloneTransformer.java:     * @param input  the input object to transform
./functors/FalsePredicate.java:     * @param <T> the type that the predicate queries
./functors/FalsePredicate.java:     * @param object  the input object
./functors/ChainedClosure.java:     * @param <E> the type that the closure acts on
./functors/ChainedClosure.java:     * @param closures  the closures to chain, copied, no nulls
./functors/ChainedClosure.java:     * @param <E> the type that the closure acts on
./functors/ChainedClosure.java:     * @param closures  a collection of closures to chain
./functors/ChainedClosure.java:     * @param clone  if {@code true} the input argument will be cloned
./functors/ChainedClosure.java:     * @param closures  the closures to chain, no nulls
./functors/ChainedClosure.java:     * @param closures  the closures to chain, copied, no nulls
./functors/ChainedClosure.java:     * @param input  the input object passed to each closure
./functors/InstanceofPredicate.java:     * @param type  the type to check for, may not be null
./functors/InstanceofPredicate.java:     * @param type  the type to check for
./functors/InstanceofPredicate.java:     * @param object  the input object
./functors/ExceptionTransformer.java:     * @param <I>  the input type
./functors/ExceptionTransformer.java:     * @param <O>  the output type
./functors/ExceptionTransformer.java:     * @param input  the input object to transform
./functors/WhileClosure.java:     * @param <E> the type that the closure acts on
./functors/WhileClosure.java:     * @param predicate  the predicate used to evaluate when the loop terminates, not null
./functors/WhileClosure.java:     * @param closure  the closure the execute, not null
./functors/WhileClosure.java:     * @param doLoop  true to act as a do-while loop, always executing the closure once
./functors/WhileClosure.java:     * @param predicate  the predicate used to evaluate when the loop terminates, not null
./functors/WhileClosure.java:     * @param closure  the closure the execute, not null
./functors/WhileClosure.java:     * @param doLoop  true to act as a do-while loop, always executing the closure once
./functors/WhileClosure.java:     * @param input  the input object
./functors/InvokerTransformer.java:     * @param <I>  the input type
./functors/InvokerTransformer.java:     * @param <O>  the output type
./functors/InvokerTransformer.java:     * @param methodName  the method name to call
./functors/InvokerTransformer.java:     * @param <I>  the input type
./functors/InvokerTransformer.java:     * @param <O>  the output type
./functors/InvokerTransformer.java:     * @param methodName  the method name to call
./functors/InvokerTransformer.java:     * @param paramTypes  the parameter types of the method
./functors/InvokerTransformer.java:     * @param args  the arguments to pass to the method
./functors/InvokerTransformer.java:     * @param methodName  the method to call
./functors/InvokerTransformer.java:     * @param methodName  the method to call
./functors/InvokerTransformer.java:     * @param paramTypes  the constructor parameter types
./functors/InvokerTransformer.java:     * @param args  the constructor arguments
./functors/InvokerTransformer.java:     * @param input  the input object to transform
./functors/InstantiateTransformer.java:     * @param <T>  the type of the objects to be created
./functors/InstantiateTransformer.java:     * @param <T>  the type of the objects to be created
./functors/InstantiateTransformer.java:     * @param paramTypes  the constructor parameter types
./functors/InstantiateTransformer.java:     * @param args  the constructor arguments
./functors/InstantiateTransformer.java:     * @param paramTypes  the constructor parameter types
./functors/InstantiateTransformer.java:     * @param args  the constructor arguments
./functors/InstantiateTransformer.java:     * @param input  the input object to transform
./functors/NullIsExceptionPredicate.java:     * @param <T> the type that the predicate queries
./functors/NullIsExceptionPredicate.java:     * @param predicate  the predicate to decorate, not null
./functors/NullIsExceptionPredicate.java:     * @param predicate  the predicate to call after the null check
./functors/NullIsExceptionPredicate.java:     * @param object  the input object
./functors/NullIsTruePredicate.java:     * @param <T> the type that the predicate queries
./functors/NullIsTruePredicate.java:     * @param predicate  the predicate to decorate, not null
./functors/NullIsTruePredicate.java:     * @param predicate  the predicate to call after the null check
./functors/NullIsTruePredicate.java:     * @param object  the input object
./IterableMap.java: * @param <K> the type of the keys in the map
./IterableMap.java: * @param <V> the type of the values in the map
./IterableSortedMap.java: * @param <K> the type of the keys in the map
./IterableSortedMap.java: * @param <V> the type of the values in the map
./IterableUtils.java:     * @param <E> the element type
./IterableUtils.java:     * @param <E> the element type
./IterableUtils.java:     * @param a  the first iterable, may not be null
./IterableUtils.java:     * @param b  the second iterable, may not be null
./IterableUtils.java:     * @param <E> the element type
./IterableUtils.java:     * @param a  the first iterable, may not be null
./IterableUtils.java:     * @param b  the second iterable, may not be null
./IterableUtils.java:     * @param c  the third iterable, may not be null
./IterableUtils.java:     * @param <E> the element type
./IterableUtils.java:     * @param a  the first iterable, may not be null
./IterableUtils.java:     * @param b  the second iterable, may not be null
./IterableUtils.java:     * @param c  the third iterable, may not be null
./IterableUtils.java:     * @param d  the fourth iterable, may not be null
./IterableUtils.java:     * @param <E> the element type
./IterableUtils.java:     * @param iterables  the iterables to combine, may not be null
./IterableUtils.java:     * @param <E> the element type
./IterableUtils.java:     * @param a  the first iterable, may not be null
./IterableUtils.java:     * @param b  the second iterable, may not be null
./IterableUtils.java:     * @param <E> the element type
./IterableUtils.java:     * @param comparator  the comparator defining an ordering over the elements,
./IterableUtils.java:     * @param a  the first iterable, may not be null
./IterableUtils.java:     * @param b  the second iterable, may not be null
./IterableUtils.java:     * @param <E> the element type
./IterableUtils.java:     * @param iterable  the iterable to filter, may not be null
./IterableUtils.java:     * @param predicate  the predicate used to filter elements, may not be null
./IterableUtils.java:     * @param <E> the element type
./IterableUtils.java:     * @param iterable  the iterable to limit, may not be null
./IterableUtils.java:     * @param maxSize  the maximum number of elements, must not be negative
./IterableUtils.java:     * @param <E> the element type
./IterableUtils.java:     * @param iterable  the iterable to loop, may not be null
./IterableUtils.java:     * @param <E> the element type
./IterableUtils.java:     * @param iterable  the iterable to use, may not be null
./IterableUtils.java:     * @param <E> the element type
./IterableUtils.java:     * @param iterable  the iterable to use, may not be null
./IterableUtils.java:     * @param elementsToSkip  the number of elements to skip from the start, must not be negative
./IterableUtils.java:     * @param <I>  the input element type
./IterableUtils.java:     * @param <O>  the output element type
./IterableUtils.java:     * @param iterable  the iterable to transform, may not be null
./IterableUtils.java:     * @param transformer  the transformer, must not be null
./IterableUtils.java:     * @param <E> the element type
./IterableUtils.java:     * @param iterable  the iterable to use, may not be null
./IterableUtils.java:     * @param <E> the element type
./IterableUtils.java:     * @param iterable  the iterable to use, may not be null
./IterableUtils.java:     * @param <E> the element type
./IterableUtils.java:     * @param a  the first iterable, may not be null
./IterableUtils.java:     * @param b  the second iterable, may not be null
./IterableUtils.java:     * @param <E> the element type
./IterableUtils.java:     * @param first  the first iterable, may not be null
./IterableUtils.java:     * @param others  the array of iterables to interleave, may not be null
./IterableUtils.java:     * @param <E> the element type
./IterableUtils.java:     * @param iterable  the iterable, may be null
./IterableUtils.java:     * @param <E> the element type
./IterableUtils.java:     * @param iterable  the iterator to use, may be null
./IterableUtils.java:     * @param closure  the closure to apply to each element, may not be null
./IterableUtils.java:     * @param <E> the type of object the {@link Iterable} contains
./IterableUtils.java:     * @param iterable  the iterable to get the input from, may be null
./IterableUtils.java:     * @param closure  the closure to perform, may not be null
./IterableUtils.java:     * @param <E> the element type
./IterableUtils.java:     * @param iterable  the iterable to search, may be null
./IterableUtils.java:     * @param predicate  the predicate to use, may not be null
./IterableUtils.java:     * @param <E> the element type
./IterableUtils.java:     * @param iterable  the iterable to search, may be null
./IterableUtils.java:     * @param predicate  the predicate to use, may not be null
./IterableUtils.java:     * @param <E> the type of object the {@link Iterable} contains
./IterableUtils.java:     * @param iterable  the {@link Iterable} to use, may be null
./IterableUtils.java:     * @param predicate  the predicate to use, may not be null
./IterableUtils.java:     * @param <E> the type of object the {@link Iterable} contains
./IterableUtils.java:     * @param iterable  the {@link Iterable} to use, may be null
./IterableUtils.java:     * @param predicate  the predicate to use, may not be null
./IterableUtils.java:     * @param <E> the type of object the {@link Iterable} contains
./IterableUtils.java:     * @param input  the {@link Iterable} to get the input from, may be null
./IterableUtils.java:     * @param predicate  the predicate to use, may not be null
./IterableUtils.java:     * @param iterable  the {@link Iterable to use}, may be null
./IterableUtils.java:     * @param <E> the type of object the {@link Iterable} contains
./IterableUtils.java:     * @param iterable  the iterable to check, may be null
./IterableUtils.java:     * @param object  the object to check
./IterableUtils.java:     * @param <E> the type of object the {@link Iterable} contains
./IterableUtils.java:     * @param iterable  the iterable to check, may be null
./IterableUtils.java:     * @param object  the object to check
./IterableUtils.java:     * @param equator  the equator to use to check, may not be null
./IterableUtils.java:     * @param <E> the element type that the {@link Iterable} may contain
./IterableUtils.java:     * @param <T> the element type of the object to find
./IterableUtils.java:     * @param iterable  the {@link Iterable} to search
./IterableUtils.java:     * @param obj  the object to find the cardinality of
./IterableUtils.java:     * @param <T> the type of object in the {@link Iterable}.
./IterableUtils.java:     * @param iterable  the {@link Iterable} to get a value from, may be null
./IterableUtils.java:     * @param index  the index to get
./IterableUtils.java:     * @param iterable  the iterable to check, may be null
./IterableUtils.java:     * @param <O>  the type of object the {@link Iterable} contains
./IterableUtils.java:     * @param iterable  the iterable to partition, may be null
./IterableUtils.java:     * @param predicate  the predicate to use, may not be null
./IterableUtils.java:     * @param <O>  the type of object the {@link Iterable} contains
./IterableUtils.java:     * @param iterable  the collection to get the input from, may be null
./IterableUtils.java:     * @param predicates  the predicates to use, may not be null
./IterableUtils.java:     * @param <O>  the type of object the {@link Iterable} contains
./IterableUtils.java:     * @param <R>  the type of the output {@link Collection}
./IterableUtils.java:     * @param iterable  the collection to get the input from, may be null
./IterableUtils.java:     * @param partitionFactory  the factory used to create the output collections
./IterableUtils.java:     * @param predicates  the predicates to use, may not be null
./IterableUtils.java:     * @param <E> the element type
./IterableUtils.java:     * @param iterable  the iterable to use, may be null
./IterableUtils.java:     * @param <E> the element type
./IterableUtils.java:     * @param iterable  the iterable to convert to a string, may be null
./IterableUtils.java:     * @param <E> the element type
./IterableUtils.java:     * @param iterable  the iterable to convert to a string, may be null
./IterableUtils.java:     * @param transformer  the transformer used to get a string representation of an element
./IterableUtils.java:     * @param <E> the element type
./IterableUtils.java:     * @param iterable  the iterable to convert to a string, may be null
./IterableUtils.java:     * @param transformer  the transformer used to get a string representation of an element
./IterableUtils.java:     * @param delimiter  the string to delimit elements
./IterableUtils.java:     * @param prefix  the prefix, prepended to the string representation
./IterableUtils.java:     * @param suffix  the suffix, appended to the string representation
./IterableUtils.java:     * @param iterable  the iterable to check
./IterableUtils.java:     * @param iterable  the iterable to check
./IterableUtils.java:     * @param <E> the element type
./IterableUtils.java:     * @param iterable  the iterable, possibly <code>null</code>
./iterators/IteratorIterable.java:     * @param iterator the iterator to use.
./iterators/IteratorIterable.java:     * @param iterator the iterator to use.
./iterators/IteratorIterable.java:     * @param multipleUse <code>true</code> if the new iterable can be used in multiple iterations
./iterators/UnmodifiableMapIterator.java:     * @param <K>  the key type
./iterators/UnmodifiableMapIterator.java:     * @param <V>  the value type
./iterators/UnmodifiableMapIterator.java:     * @param iterator  the iterator to decorate
./iterators/UnmodifiableMapIterator.java:     * @param iterator  the iterator to decorate
./iterators/CollatingIterator.java:     * @param comp the comparator to use to sort; must not be null,
./iterators/CollatingIterator.java:     * @param comp the comparator to use to sort; must not be null,
./iterators/CollatingIterator.java:     * @param initIterCapacity the initial capacity for the internal list of
./iterators/CollatingIterator.java:     * @param comp the comparator to use to sort; must not be null,
./iterators/CollatingIterator.java:     * @param a the first child ordered iterator
./iterators/CollatingIterator.java:     * @param b the second child ordered iterator
./iterators/CollatingIterator.java:     * @param comp the comparator to use to sort; must not be null,
./iterators/CollatingIterator.java:     * @param iterators the array of iterators
./iterators/CollatingIterator.java:     * @param comp the comparator to use to sort; must not be null,
./iterators/CollatingIterator.java:     * @param iterators the collection of iterators
./iterators/CollatingIterator.java:     * @param iterator the iterator to add to the collation, must not be null
./iterators/CollatingIterator.java:     * @param index index of the Iterator to replace
./iterators/CollatingIterator.java:     * @param iterator Iterator to place at the given index
./iterators/CollatingIterator.java:     * @param comp the {@link Comparator} to set
./iterators/EnumerationIterator.java:     * @param enumeration  the enumeration to use
./iterators/EnumerationIterator.java:     * @param enumeration  the enumeration to use
./iterators/EnumerationIterator.java:     * @param collection  the collection to remove elements from
./iterators/EnumerationIterator.java:     * @param enumeration  the new underlying enumeration
./iterators/UnmodifiableOrderedMapIterator.java:     * @param <K>  the key type
./iterators/UnmodifiableOrderedMapIterator.java:     * @param <V>  the value type
./iterators/UnmodifiableOrderedMapIterator.java:     * @param iterator  the iterator to decorate
./iterators/UnmodifiableOrderedMapIterator.java:     * @param iterator  the iterator to decorate
./iterators/UnmodifiableIterator.java:     * @param <E>  the element type
./iterators/UnmodifiableIterator.java:     * @param iterator  the iterator to decorate
./iterators/UnmodifiableIterator.java:     * @param iterator  the iterator to decorate
./iterators/AbstractMapIteratorDecorator.java:     * @param iterator  the iterator to decorate, must not be null
./iterators/EntrySetMapIterator.java:     * @param map  the map to iterate over
./iterators/EntrySetMapIterator.java:     * @param value  the new value
./iterators/BoundedIterator.java:     * @param iterator  the iterator to be decorated
./iterators/BoundedIterator.java:     * @param offset  the index of the first element of the decorated iterator to return
./iterators/BoundedIterator.java:     * @param max  the maximum number of elements of the decorated iterator to return
./iterators/FilterListIterator.java:     * @param iterator  the iterator to use
./iterators/FilterListIterator.java:     * @param iterator  the iterator to use
./iterators/FilterListIterator.java:     * @param predicate  the predicate to use
./iterators/FilterListIterator.java:     * @param predicate  the predicate to use.
./iterators/FilterListIterator.java:     * @param iterator  the iterator to use
./iterators/FilterListIterator.java:     * @param predicate  the transformer to use
./iterators/UniqueFilterIterator.java:     *  @param iterator  the iterator to use
./iterators/ObjectGraphIterator.java:     * @param root  the root object, null will result in an empty iterator
./iterators/ObjectGraphIterator.java:     * @param transformer  the transformer to use, null will use a no effect transformer
./iterators/ObjectGraphIterator.java:     * @param rootIterator  the root iterator, null will result in an empty iterator
./iterators/ObjectGraphIterator.java:     * @param value  the value to start from
./iterators/ObjectGraphIterator.java:     * @param iterator  the iterator to start from
./iterators/ObjectArrayListIterator.java:     * @param array the array to iterate over
./iterators/ObjectArrayListIterator.java:     * @param array  the array to iterate over
./iterators/ObjectArrayListIterator.java:     * @param start  the index to start iterating at
./iterators/ObjectArrayListIterator.java:     * @param array  the array to iterate over
./iterators/ObjectArrayListIterator.java:     * @param start  the index to start iterating at
./iterators/ObjectArrayListIterator.java:     * @param end  the index (exclusive) to finish iterating at
./iterators/ObjectArrayListIterator.java:     * @param obj  the object to add
./iterators/ObjectArrayListIterator.java:     * @param obj  the object to set into the array
./iterators/FilterIterator.java:     * @param iterator  the iterator to use
./iterators/FilterIterator.java:     * @param iterator  the iterator to use
./iterators/FilterIterator.java:     * @param predicate  the predicate to use
./iterators/FilterIterator.java:     * @param iterator  the iterator to use
./iterators/FilterIterator.java:     * @param predicate  the predicate to use
./iterators/LoopingListIterator.java:     * @param list the list to wrap
./iterators/LoopingListIterator.java:     * @param obj  the element to insert
./iterators/LoopingListIterator.java:     * @param obj  the element with which to replace the last element returned
./iterators/LoopingIterator.java:     * @param coll  the collection to wrap
./iterators/IteratorEnumeration.java:     * @param iterator the iterator to use
./iterators/IteratorEnumeration.java:     * @param iterator the new underlying iterator
./iterators/AbstractListIteratorDecorator.java:     * @param iterator  the iterator to decorate, must not be null
./iterators/EmptyOrderedIterator.java:     * @param <E> the element type
./iterators/ArrayListIterator.java:     * @param array the array to iterate over
./iterators/ArrayListIterator.java:     * @param array  the array to iterate over
./iterators/ArrayListIterator.java:     * @param startIndex  the index to start iterating at
./iterators/ArrayListIterator.java:     * @param array  the array to iterate over
./iterators/ArrayListIterator.java:     * @param startIndex  the index to start iterating at
./iterators/ArrayListIterator.java:     * @param endIndex  the index (exclusive) to finish iterating at
./iterators/ArrayListIterator.java:     * @param o  the element to add
./iterators/ArrayListIterator.java:     * @param o  the element to set
./iterators/SkippingIterator.java:     * @param iterator  the iterator to be decorated
./iterators/SkippingIterator.java:     * @param offset  the index of the first element of the decorated iterator to return
./iterators/IteratorChain.java:     * @param iterator the first child iterator in the IteratorChain, not null
./iterators/IteratorChain.java:     * @param first the first child iterator in the IteratorChain, not null
./iterators/IteratorChain.java:     * @param second the second child iterator in the IteratorChain, not null
./iterators/IteratorChain.java:     * @param iteratorChain the array of iterators, not null
./iterators/IteratorChain.java:     * @param iteratorChain the collection of iterators, not null
./iterators/IteratorChain.java:     * @param iterator Iterator to add
./iterators/PeekingIterator.java:     * @param <E>  the element type
./iterators/PeekingIterator.java:     * @param iterator  the iterator to decorate
./iterators/PeekingIterator.java:     * @param iterator  the iterator to decorate
./iterators/PermutationIterator.java: * @param <E>  the type of the objects being permuted
./iterators/PermutationIterator.java:     * @param coll  the collection to generate permutations for
./iterators/ReverseListIterator.java:     * @param list  the list to create a reversed iterator for
./iterators/ReverseListIterator.java:     * @param obj  the object to set
./iterators/ReverseListIterator.java:     * @param obj  the object to add
./iterators/AbstractUntypedIteratorDecorator.java:     * @param iterator  the iterator to decorate
./iterators/AbstractIteratorDecorator.java:     * @param iterator  the iterator to decorate, must not be null
./iterators/LazyIteratorChain.java:     * @param count the number of time this method has been called (starts with 1)
./iterators/NodeListIterator.java:     * @param node Node, who's child nodes are wrapped by this class. Must not be null
./iterators/NodeListIterator.java:     * @param nodeList node list, which is wrapped by this class. Must not be null
./iterators/ZippingIterator.java:     * @param a  the first child iterator
./iterators/ZippingIterator.java:     * @param b  the second child iterator
./iterators/ZippingIterator.java:     * @param a  the first child iterator
./iterators/ZippingIterator.java:     * @param b  the second child iterator
./iterators/ZippingIterator.java:     * @param c  the third child iterator
./iterators/ZippingIterator.java:     * @param iterators  the array of iterators
./iterators/PushbackIterator.java:     * @param <E>  the element type
./iterators/PushbackIterator.java:     * @param iterator  the iterator to decorate
./iterators/PushbackIterator.java:     * @param iterator  the iterator to decorate
./iterators/PushbackIterator.java:     * @param item  the element to push back to the iterator
./iterators/EmptyIterator.java:     * @param <E> the element type
./iterators/EmptyIterator.java:     * @param <E> the element type
./iterators/SingletonIterator.java:     * @param object  the single object to return from the iterator
./iterators/SingletonIterator.java:     * @param object  the single object to return from the iterator
./iterators/SingletonIterator.java:     * @param removeAllowed  true if remove is allowed
./iterators/EmptyMapIterator.java:     * @param <K> the key type
./iterators/EmptyMapIterator.java:     * @param <V> the value type
./iterators/SingletonListIterator.java:     * @param object  the single object to return from the iterator
./iterators/SingletonListIterator.java:     * @param obj  the object to add
./iterators/SingletonListIterator.java:     * @param obj  the object to set
./iterators/ListIteratorWrapper.java:     * @param iterator  the iterator to wrap
./iterators/ListIteratorWrapper.java:     * @param obj  the object to add
./iterators/ListIteratorWrapper.java:     * @param obj  the object to set
./iterators/UnmodifiableListIterator.java:     * @param <E>  the element type
./iterators/UnmodifiableListIterator.java:     * @param iterator  the iterator to decorate
./iterators/UnmodifiableListIterator.java:     * @param iterator  the iterator to decorate
./iterators/TransformIterator.java:     * @param iterator  the iterator to use
./iterators/TransformIterator.java:     * @param iterator  the iterator to use
./iterators/TransformIterator.java:     * @param transformer  the transformer to use
./iterators/TransformIterator.java:     * @param iterator  the iterator to use
./iterators/TransformIterator.java:     * @param transformer  the transformer to use
./iterators/TransformIterator.java:     * @param source  the object to transform
./iterators/ObjectArrayIterator.java:     * @param array the array to iterate over
./iterators/ObjectArrayIterator.java:     * @param array  the array to iterate over
./iterators/ObjectArrayIterator.java:     * @param start  the index to start iterating at
./iterators/ObjectArrayIterator.java:     * @param array  the array to iterate over
./iterators/ObjectArrayIterator.java:     * @param start  the index to start iterating at
./iterators/ObjectArrayIterator.java:     * @param end  the index (exclusive) to finish iterating at
./iterators/EmptyListIterator.java:     * @param <E> the element type
./iterators/EmptyListIterator.java:     * @param <E> the element type
./iterators/ArrayIterator.java:     * @param array the array to iterate over.
./iterators/ArrayIterator.java:     * @param array  the array to iterate over.
./iterators/ArrayIterator.java:     * @param startIndex  the index to start iterating at.
./iterators/ArrayIterator.java:     * @param array  the array to iterate over.
./iterators/ArrayIterator.java:     * @param startIndex  the index to start iterating at.
./iterators/ArrayIterator.java:     * @param endIndex  the index to finish iterating at.
./iterators/ArrayIterator.java:     * @param bound  the index to check
./iterators/ArrayIterator.java:     * @param len  the length of the array
./iterators/ArrayIterator.java:     * @param type  the index type (for error messages)
./iterators/AbstractOrderedMapIteratorDecorator.java:     * @param iterator  the iterator to decorate, must not be null
./iterators/EmptyOrderedMapIterator.java:     * @param <K> the key type
./iterators/EmptyOrderedMapIterator.java:     * @param <V> the value type
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param <K> the key type
./IteratorUtils.java:     * @param <V> the value type
./IteratorUtils.java:     * @param <K> the key type
./IteratorUtils.java:     * @param <V> the value type
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param object  the single object over which to iterate
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param object  the single object over which to iterate
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param array  the array over which to iterate
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param array  the array over which to iterate
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param array  the array over which to iterate
./IteratorUtils.java:     * @param start  the index to start iterating at
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param array  the array over which to iterate
./IteratorUtils.java:     * @param start  the index to start iterating at
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param array  the array over which to iterate
./IteratorUtils.java:     * @param start  the index to start iterating at
./IteratorUtils.java:     * @param end  the index to finish iterating at
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param array  the array over which to iterate
./IteratorUtils.java:     * @param start  the index to start iterating at
./IteratorUtils.java:     * @param end  the index to finish iterating at
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param array  the array over which to iterate
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param array  the array over which to iterate
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param array  the array over which to iterate
./IteratorUtils.java:     * @param start  the index to start iterating at
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param array  the array over which to iterate
./IteratorUtils.java:     * @param start  the index to start iterating at
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param array  the array over which to iterate
./IteratorUtils.java:     * @param start  the index to start iterating at
./IteratorUtils.java:     * @param end  the index to finish iterating at
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param array  the array over which to iterate
./IteratorUtils.java:     * @param start  the index to start iterating at
./IteratorUtils.java:     * @param end  the index to finish iterating at
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param iterator  the iterator to decorate
./IteratorUtils.java:     * @param max  the maximum number of elements returned by this iterator
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param iterator  the iterator to decorate
./IteratorUtils.java:     * @param offset  the index of the first element of the decorated iterator to return
./IteratorUtils.java:     * @param max  the maximum number of elements returned by this iterator
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param iterator  the iterator to make immutable
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param listIterator  the iterator to make immutable
./IteratorUtils.java:     * @param <K> the key type
./IteratorUtils.java:     * @param <V> the value type
./IteratorUtils.java:     * @param mapIterator  the iterator to make immutable
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param iterator1  the first iterator to use, not null
./IteratorUtils.java:     * @param iterator2  the second iterator to use, not null
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param iterators  the iterators to use, not null or empty or contain nulls
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param iterators  the iterators to use, not null or empty or contain nulls
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param comparator  the comparator to use, may be null for natural order
./IteratorUtils.java:     * @param iterator1  the first iterators to use, not null
./IteratorUtils.java:     * @param iterator2  the first iterators to use, not null
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param comparator  the comparator to use, may be null for natural order
./IteratorUtils.java:     * @param iterators  the iterators to use, not null or empty or contain nulls
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param comparator  the comparator to use, may be null for natural order
./IteratorUtils.java:     * @param iterators  the iterators to use, not null or empty or contain nulls
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param root  the root object to start iterating from, null results in an empty iterator
./IteratorUtils.java:     * @param transformer  the transformer to use, see above, null uses no effect transformer
./IteratorUtils.java:     * @param <I> the input type
./IteratorUtils.java:     * @param <O> the output type
./IteratorUtils.java:     * @param iterator  the iterator to use, not null
./IteratorUtils.java:     * @param transform  the transform to use, not null
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param iterator  the iterator to use, not null
./IteratorUtils.java:     * @param predicate  the predicate to use as a filter, not null
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param listIterator  the list iterator to use, not null
./IteratorUtils.java:     * @param predicate  the predicate to use as a filter, not null
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param coll  the collection to iterate over, not null
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param list  the list to iterate over, not null
./IteratorUtils.java:     * @param nodeList  the node list to use, may not be null
./IteratorUtils.java:     * @param node  the node to use, may not be null
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param iterator  the iterator to decorate, not null
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param iterator  the iterator to decorate, not null
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param iterator  the iterator to decorate
./IteratorUtils.java:     * @param offset  the first number of elements to skip
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param a  the first iterator to interleave
./IteratorUtils.java:     * @param b  the second iterator to interleave
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param a  the first iterator to interleave
./IteratorUtils.java:     * @param b  the second iterator to interleave
./IteratorUtils.java:     * @param c  the third iterator to interleave
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param iterators  the array of iterators to interleave
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param enumeration  the enumeration to use, may not be null
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param enumeration  the enumeration to use, may not be null
./IteratorUtils.java:     * @param removeCollection  the collection to remove elements from, may not be null
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param iterator  the iterator to use, may not be null
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param iterator  the iterator to use, may not be null
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param iterator  the iterator to use, may not be null
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param iterator  the iterator to use, may not be null
./IteratorUtils.java:     * @param iterator  the iterator to use, not null
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param iterator  the iterator to use, not null
./IteratorUtils.java:     * @param arrayClass  the class of array to create
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param iterator  the iterator to use, not null
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param iterator  the iterator to use, not null
./IteratorUtils.java:     * @param estimatedSize  the initial size of the ArrayList
./IteratorUtils.java:     * @param obj  the object to convert to an iterator
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param iterator  the iterator to use, may be null
./IteratorUtils.java:     * @param closure  the closure to apply to each element, may not be null
./IteratorUtils.java:     * @param <E> the type of object the {@link Iterator} contains
./IteratorUtils.java:     * @param iterator  the iterator to get the input from, may be null
./IteratorUtils.java:     * @param closure  the closure to perform, may not be null
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param iterator  the iterator to search, may be null
./IteratorUtils.java:     * @param predicate  the predicate to use, may not be null
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param iterator  the iterator to search, may be null
./IteratorUtils.java:     * @param predicate  the predicate to use, may not be null
./IteratorUtils.java:     * @param <E> the type of object the {@link Iterator} contains
./IteratorUtils.java:     * @param iterator  the {@link Iterator} to use, may be null
./IteratorUtils.java:     * @param predicate  the predicate to use, may not be null
./IteratorUtils.java:     * @param <E> the type of object the {@link Iterator} contains
./IteratorUtils.java:     * @param iterator  the {@link Iterator} to use, may be null
./IteratorUtils.java:     * @param predicate  the predicate to use, may not be null
./IteratorUtils.java:     * @param iterator  the {@link Iterator} to use, may be null
./IteratorUtils.java:     * @param <E> the type of object the {@link Iterator} contains
./IteratorUtils.java:     * @param iterator  the iterator to check, may be null
./IteratorUtils.java:     * @param object  the object to check
./IteratorUtils.java:     * @param <E> the type of object in the {@link Iterator}
./IteratorUtils.java:     * @param iterator  the iterator to get a value from
./IteratorUtils.java:     * @param index  the index to get
./IteratorUtils.java:     * @param iterator  the iterator to check, may be null
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param iterator  the iterator to convert to a string, may be null
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param iterator  the iterator to convert to a string, may be null
./IteratorUtils.java:     * @param transformer  the transformer used to get a string representation of an element
./IteratorUtils.java:     * @param <E> the element type
./IteratorUtils.java:     * @param iterator  the iterator to convert to a string, may be null
./IteratorUtils.java:     * @param transformer  the transformer used to get a string representation of an element
./IteratorUtils.java:     * @param delimiter  the string to delimit elements
./IteratorUtils.java:     * @param prefix  the prefix, prepended to the string representation
./IteratorUtils.java:     * @param suffix  the suffix, appended to the string representation
./keyvalue/DefaultKeyValue.java:     * @param key  the key for the entry, may be null
./keyvalue/DefaultKeyValue.java:     * @param value  the value for the entry, may be null
./keyvalue/DefaultKeyValue.java:     * @param pair  the pair to copy, must not be null
./keyvalue/DefaultKeyValue.java:     * @param entry  the entry to copy, must not be null
./keyvalue/DefaultKeyValue.java:     * @param key  the new key
./keyvalue/DefaultKeyValue.java:     * @param value the new value
./keyvalue/DefaultKeyValue.java:     * @param obj  the object to compare to
./keyvalue/MultiKey.java:     * @param key1  the first key
./keyvalue/MultiKey.java:     * @param key2  the second key
./keyvalue/MultiKey.java:     * @param key1  the first key
./keyvalue/MultiKey.java:     * @param key2  the second key
./keyvalue/MultiKey.java:     * @param key3  the third key
./keyvalue/MultiKey.java:     * @param key1  the first key
./keyvalue/MultiKey.java:     * @param key2  the second key
./keyvalue/MultiKey.java:     * @param key3  the third key
./keyvalue/MultiKey.java:     * @param key4  the fourth key
./keyvalue/MultiKey.java:     * @param key1  the first key
./keyvalue/MultiKey.java:     * @param key2  the second key
./keyvalue/MultiKey.java:     * @param key3  the third key
./keyvalue/MultiKey.java:     * @param key4  the fourth key
./keyvalue/MultiKey.java:     * @param key5  the fifth key
./keyvalue/MultiKey.java:     * @param keys  the array of keys, not null
./keyvalue/MultiKey.java:     * @param keys  the array of keys, not null
./keyvalue/MultiKey.java:     * @param makeClone  true to clone the array, false to assign it
./keyvalue/MultiKey.java:     * @param index  the index to retrieve
./keyvalue/MultiKey.java:     * @param other  the other object to compare to
./keyvalue/MultiKey.java:     * @param keys the keys to calculate the hash code for
./keyvalue/UnmodifiableMapEntry.java:     * @param key  the key for the entry, may be null
./keyvalue/UnmodifiableMapEntry.java:     * @param value  the value for the entry, may be null
./keyvalue/UnmodifiableMapEntry.java:     * @param pair  the pair to copy, must not be null
./keyvalue/UnmodifiableMapEntry.java:     * @param entry  the entry to copy, must not be null
./keyvalue/UnmodifiableMapEntry.java:     * @param value  the new value
./keyvalue/TiedMapEntry.java:     * @param map  the map
./keyvalue/TiedMapEntry.java:     * @param key  the key
./keyvalue/TiedMapEntry.java:     * @param value  the new value
./keyvalue/TiedMapEntry.java:     * @param obj  the object to compare to
./keyvalue/AbstractMapEntryDecorator.java:     * @param entry  the <code>Map.Entry</code> to decorate, must not be null
./keyvalue/AbstractMapEntry.java:     * @param key  the key for the entry, may be null
./keyvalue/AbstractMapEntry.java:     * @param value  the value for the entry, may be null
./keyvalue/AbstractMapEntry.java:     * @param value  the new value
./keyvalue/AbstractMapEntry.java:     * @param obj  the object to compare to
./keyvalue/AbstractKeyValue.java:     * @param key  the key for the entry, may be null
./keyvalue/AbstractKeyValue.java:     * @param value  the value for the entry, may be null
./keyvalue/DefaultMapEntry.java:     * @param key  the key for the entry, may be null
./keyvalue/DefaultMapEntry.java:     * @param value  the value for the entry, may be null
./keyvalue/DefaultMapEntry.java:     * @param pair  the pair to copy, must not be null
./keyvalue/DefaultMapEntry.java:     * @param entry  the entry to copy, must not be null
./KeyValue.java: * @param <K> the type of the key
./KeyValue.java: * @param <V> the type of the value
./list/UnmodifiableList.java:     * @param <E> the type of the elements in the list
./list/UnmodifiableList.java:     * @param list  the list to decorate, must not be null
./list/UnmodifiableList.java:     * @param list  the list to decorate, must not be null
./list/TransformedList.java:     * @param <E> the type of the elements in the list
./list/TransformedList.java:     * @param list  the list to decorate, must not be null
./list/TransformedList.java:     * @param transformer  the transformer to use for conversion, must not be null
./list/TransformedList.java:     * @param <E> the type of the elements in the list
./list/TransformedList.java:     * @param list  the list to decorate, must not be null
./list/TransformedList.java:     * @param transformer  the transformer to use for conversion, must not be null
./list/TransformedList.java:     * @param list  the list to decorate, must not be null
./list/TransformedList.java:     * @param transformer  the transformer to use for conversion, must not be null
./list/TransformedList.java:         * @param iterator  the list iterator to decorate
./list/SetUniqueList.java:     * @param <E>  the element type
./list/SetUniqueList.java:     * @param list  the list to decorate, must not be null
./list/SetUniqueList.java:     * @param set  the set to decorate, must not be null
./list/SetUniqueList.java:     * @param list  the list to decorate, must not be null
./list/SetUniqueList.java:     * @param object  the object to add
./list/SetUniqueList.java:     * @param index  the index to insert at
./list/SetUniqueList.java:     * @param object  the object to add
./list/SetUniqueList.java:     * @param coll  the collection to add in iterator order
./list/SetUniqueList.java:     * @param index  the index to insert at
./list/SetUniqueList.java:     * @param coll  the collection to add in iterator order
./list/SetUniqueList.java:     * @param index  the index to insert at
./list/SetUniqueList.java:     * @param object  the object to set
./list/SetUniqueList.java:     * @param set  the {@link Set} to be used as return type, must not be null
./list/SetUniqueList.java:     * @param list  the {@link List} to populate the {@link Set}
./list/TreeList.java:     * @param coll  the collection to copy
./list/TreeList.java:     * @param index  the index to retrieve
./list/TreeList.java:     * @param fromIndex  the index to start from
./list/TreeList.java:     * @param object  the object to search
./list/TreeList.java:     * @param object  the object to check
./list/TreeList.java:     * @param index  the index to add before
./list/TreeList.java:     * @param obj  the element to add
./list/TreeList.java:     * @param c  the collection to be added to this list
./list/TreeList.java:     * @param index  the index to set
./list/TreeList.java:     * @param obj  the object to store at the specified index
./list/TreeList.java:     * @param index  the index to remove
./list/TreeList.java:     * @param index  the index to check
./list/TreeList.java:     * @param startIndex  the first allowed index
./list/TreeList.java:     * @param endIndex  the last allowed index
./list/TreeList.java:         * @param relativePosition  the relative position of the node
./list/TreeList.java:         * @param obj  the value for the node
./list/TreeList.java:         * @param rightFollower the node with the value following this one
./list/TreeList.java:         * @param leftFollower the node with the value leading this one
./list/TreeList.java:         * @param coll  a nonempty collection
./list/TreeList.java:         * @param iterator  an iterator over the collection, which should already point
./list/TreeList.java:         * @param start  the index of the first element in the collection that
./list/TreeList.java:         * @param end  the index of the last element in the collection that
./list/TreeList.java:         * @param absolutePositionOfParent  absolute position of this node's
./list/TreeList.java:         * @param prev  the {@code AVLNode} corresponding to element (start - 1)
./list/TreeList.java:         * @param next  the {@code AVLNode} corresponding to element (end + 1)
./list/TreeList.java:         * @param obj  the value to store
./list/TreeList.java:         * @param array the array to be filled
./list/TreeList.java:         * @param index the index of this node
./list/TreeList.java:         * @param index is the index of the position relative to the position of
./list/TreeList.java:         * @param obj is the object to be stored in the position.
./list/TreeList.java:         * @param index is the index of the element to be removed relative to the position of
./list/TreeList.java:         * @param node  the new left subtree node
./list/TreeList.java:         * @param previous  the previous node in the linked list
./list/TreeList.java:         * @param node  the new left subtree node
./list/TreeList.java:         * @param next  the next node in the linked list
./list/TreeList.java:         * @param otherTree
./list/TreeList.java:         * @param currentSize
./list/TreeList.java:         * @param parent  the parent list
./list/TreeList.java:         * @param fromIndex  the index to start at
./list/AbstractLinkedList.java:     * @param coll  the collection to copy
./list/AbstractLinkedList.java:     * @param fromIndexInclusive  the index to start from
./list/AbstractLinkedList.java:     * @param toIndexExclusive  the index to end at
./list/AbstractLinkedList.java:     * @param value1  the first value to compare, may be null
./list/AbstractLinkedList.java:     * @param value2  the second value to compare, may be null
./list/AbstractLinkedList.java:     * @param node  node to update
./list/AbstractLinkedList.java:     * @param value  new value of the node
./list/AbstractLinkedList.java:     * @param value  value of the new node
./list/AbstractLinkedList.java:     * @param node  node to insert before
./list/AbstractLinkedList.java:     * @param value  value of the newly added node
./list/AbstractLinkedList.java:     * @param node  node to insert after
./list/AbstractLinkedList.java:     * @param value  value of the newly added node
./list/AbstractLinkedList.java:     * @param nodeToInsert  new node to insert
./list/AbstractLinkedList.java:     * @param insertBeforeNode  node to insert before
./list/AbstractLinkedList.java:     * @param node  the node to remove
./list/AbstractLinkedList.java:     * @param index  the index, starting from 0
./list/AbstractLinkedList.java:     * @param endMarkerAllowed  whether or not the end marker can be returned if
./list/AbstractLinkedList.java:     * @param subList  the sublist to get an iterator for
./list/AbstractLinkedList.java:     * @param subList  the sublist to get an iterator for
./list/AbstractLinkedList.java:     * @param fromIndex  the index to start from, relative to the sublist
./list/AbstractLinkedList.java:     * @param outputStream  the stream to write the object to
./list/AbstractLinkedList.java:     * @param inputStream  the stream to read the object from
./list/AbstractLinkedList.java:         * @param value  the value to store
./list/AbstractLinkedList.java:         * @param previous  the previous node in the list
./list/AbstractLinkedList.java:         * @param next  the next node in the list
./list/AbstractLinkedList.java:         * @param value  the value to store
./list/AbstractLinkedList.java:         * @param value  the value
./list/AbstractLinkedList.java:         * @param previous  the previous node
./list/AbstractLinkedList.java:         * @param next  the next node
./list/AbstractLinkedList.java:         * @param parent  the parent list
./list/AbstractLinkedList.java:         * @param fromIndex  the index to start at
./list/GrowthList.java:     * @param <E> the type of the elements in the list
./list/GrowthList.java:     * @param list  the list to decorate, must not be null
./list/GrowthList.java:     * @param initialSize  the initial size of the ArrayList
./list/GrowthList.java:     * @param list  the list to decorate, must not be null
./list/GrowthList.java:     * @param index  the index to add at
./list/GrowthList.java:     * @param element  the object to add at the specified index
./list/GrowthList.java:     * @param index  the index to add at
./list/GrowthList.java:     * @param coll  the collection to add at the specified index
./list/GrowthList.java:     * @param index  the index to set
./list/GrowthList.java:     * @param element  the object to set at the specified index
./list/AbstractListDecorator.java: * @param <E> the type of the elements in the list
./list/AbstractListDecorator.java:     * @param list  the list to decorate, must not be null
./list/LazyList.java:     * @param <E> the type of the elements in the list
./list/LazyList.java:     * @param list  the list to decorate, must not be null
./list/LazyList.java:     * @param factory  the factory to use for creation, must not be null
./list/LazyList.java:     * @param list  the list to decorate, must not be null
./list/LazyList.java:     * @param factory  the factory to use for creation, must not be null
./list/LazyList.java:     * @param index  the index to retrieve
./list/NodeCachingLinkedList.java:     * @param coll  the collection to copy
./list/NodeCachingLinkedList.java:     * @param maximumCacheSize  the maximum cache size
./list/NodeCachingLinkedList.java:     * @param maximumCacheSize  the new maximum cache size
./list/NodeCachingLinkedList.java:     * @param node  the node to add to the cache
./list/NodeCachingLinkedList.java:     * @param value  value of the new node
./list/NodeCachingLinkedList.java:     * @param node  the node to remove
./list/PredicatedList.java:     * @param <T> the type of the elements in the list
./list/PredicatedList.java:     * @param list  the list to decorate, must not be null
./list/PredicatedList.java:     * @param predicate  the predicate to use for validation, must not be null
./list/PredicatedList.java:     * @param list  the list to decorate, must not be null
./list/PredicatedList.java:     * @param predicate  the predicate to use for validation, must not be null
./list/PredicatedList.java:         * @param iterator  the list iterator to decorate
./list/CursorableLinkedList.java:     * @param coll  the collection to copy
./list/CursorableLinkedList.java:     * @param fromIndex  the index to start from
./list/CursorableLinkedList.java:     * @param fromIndex  the index to start from
./list/CursorableLinkedList.java:     * @param node  node to update
./list/CursorableLinkedList.java:     * @param value  new value of the node
./list/CursorableLinkedList.java:     * @param nodeToInsert  new node to insert
./list/CursorableLinkedList.java:     * @param insertBeforeNode  node to insert before
./list/CursorableLinkedList.java:     * @param node  the node to remove
./list/CursorableLinkedList.java:     * @param cursor  the cursor to register
./list/CursorableLinkedList.java:     * @param cursor  the cursor to deregister
./list/CursorableLinkedList.java:     * @param node  the node that was changed
./list/CursorableLinkedList.java:     * @param node  the node that was changed
./list/CursorableLinkedList.java:     * @param node  the node that was changed
./list/CursorableLinkedList.java:     * @param subList  the sublist to get an iterator for
./list/CursorableLinkedList.java:     * @param fromIndex  the index to start from, relative to the sublist
./list/CursorableLinkedList.java:         * @param parent  the parent list
./list/CursorableLinkedList.java:         * @param index  the index to start from
./list/CursorableLinkedList.java:         * @param obj  the object to add
./list/CursorableLinkedList.java:         * @param node  the node that changed
./list/CursorableLinkedList.java:         * @param node  the node that was removed
./list/CursorableLinkedList.java:         * @param node  the node that was added
./list/CursorableLinkedList.java:         * @param sub  the sub list
./list/CursorableLinkedList.java:         * @param index  the index to start from
./list/FixedSizeList.java:     * @param <E> the type of the elements in the list
./list/FixedSizeList.java:     * @param list  the list to decorate, must not be null
./list/FixedSizeList.java:     * @param list  the list to decorate, must not be null
./list/AbstractSerializableListDecorator.java:     * @param list  the list to decorate, must not be null
./list/AbstractSerializableListDecorator.java:     * @param out  the output stream
./list/AbstractSerializableListDecorator.java:     * @param in  the input stream
./ListUtils.java:     * @param <T> the element type
./ListUtils.java:     * @param list the list, possibly <code>null</code>
./ListUtils.java:     * @param <T> the element type
./ListUtils.java:     * @param list  the list, possibly {@code null}
./ListUtils.java:     * @param defaultList  the returned values if list is {@code null}
./ListUtils.java:     * @param <E> the element type
./ListUtils.java:     * @param list1  the first list
./ListUtils.java:     * @param list2  the second list
./ListUtils.java:     * @param <E> the element type
./ListUtils.java:     * @param list1  the list to subtract from
./ListUtils.java:     * @param list2  the list to subtract
./ListUtils.java:     * @param <E> the element type
./ListUtils.java:     * @param list1  the first list
./ListUtils.java:     * @param list2  the second list
./ListUtils.java:     * @param <E> the element type
./ListUtils.java:     * @param list1  the first list
./ListUtils.java:     * @param list2  the second list
./ListUtils.java:     * @param <E> the element type
./ListUtils.java:     * @param inputCollection  the collection to get the input from, may not be null
./ListUtils.java:     * @param predicate  the predicate to use, may be null
./ListUtils.java:     * @param <E> the element type
./ListUtils.java:     * @param inputCollection the collection to get the input from, may not be null
./ListUtils.java:     * @param predicate the predicate to use, may be null
./ListUtils.java:     * @param list1  the first list, may be null
./ListUtils.java:     * @param list2  the second list, may be null
./ListUtils.java:     * @param list  the list to generate the hashCode for, may be null
./ListUtils.java:     * @param <E>  the element type
./ListUtils.java:     * @param collection  the collection whose contents are the target of the #retailAll operation
./ListUtils.java:     * @param retain  the collection containing the elements to be retained in the returned collection
./ListUtils.java:     * @param <E>  the element type
./ListUtils.java:     * @param collection  the collection from which items are removed (in the returned collection)
./ListUtils.java:     * @param remove  the items to be removed from the returned <code>collection</code>
./ListUtils.java:     * @param <E> the element type
./ListUtils.java:     * @param list  the list to synchronize, must not be null
./ListUtils.java:     * @param <E>  the element type
./ListUtils.java:     * @param list  the list to make unmodifiable, must not be null
./ListUtils.java:     * @param <E> the element type
./ListUtils.java:     * @param list  the list to predicate, must not be null
./ListUtils.java:     * @param predicate  the predicate for the list, must not be null
./ListUtils.java:     * @param <E> the element type
./ListUtils.java:     * @param list  the list to predicate, must not be null
./ListUtils.java:     * @param transformer  the transformer for the list, must not be null
./ListUtils.java:     * @param <E> the element type
./ListUtils.java:     * @param list  the list to make lazy, must not be null
./ListUtils.java:     * @param factory  the factory for creating new objects, must not be null
./ListUtils.java:     * @param <E>  the element type
./ListUtils.java:     * @param list  the list whose size to fix, must not be null
./ListUtils.java:     * @param <E>  the element type
./ListUtils.java:     * @param list the List to search, may be null
./ListUtils.java:     * @param predicate  the predicate to use, may be null
./ListUtils.java:     * @param <E>  the element type
./ListUtils.java:     * @param a  the first list
./ListUtils.java:     * @param b  the second list
./ListUtils.java:     * @param <E>  the element type
./ListUtils.java:     * @param a  the first list
./ListUtils.java:     * @param b  the second list
./ListUtils.java:     * @param equator  the equator used to test object equality
./ListUtils.java:     * @param a  the first sequence
./ListUtils.java:     * @param b  the second sequence
./ListUtils.java:     * @param <T> the element type
./ListUtils.java:     * @param list  the list to return consecutive sublists of
./ListUtils.java:     * @param size  the desired size of each sublist (the last may be smaller)
./ListValuedMap.java:     * @param key  the key to retrieve
./ListValuedMap.java:     * @param key  the key to remove values from
./map/AbstractOrderedMapDecorator.java:     * @param map  the map to decorate, must not be null
./map/ReferenceMap.java:     * @param keyType  the type of reference to use for keys;
./map/ReferenceMap.java:     * @param valueType  the type of reference to use for values;
./map/ReferenceMap.java:     * @param keyType  the type of reference to use for keys;
./map/ReferenceMap.java:     * @param valueType  the type of reference to use for values;
./map/ReferenceMap.java:     * @param purgeValues should the value be automatically purged when the
./map/ReferenceMap.java:     * @param keyType  the type of reference to use for keys;
./map/ReferenceMap.java:     * @param valueType  the type of reference to use for values;
./map/ReferenceMap.java:     * @param capacity  the initial capacity for the map
./map/ReferenceMap.java:     * @param loadFactor  the load factor for the map
./map/ReferenceMap.java:     * @param keyType  the type of reference to use for keys;
./map/ReferenceMap.java:     * @param valueType  the type of reference to use for values;
./map/ReferenceMap.java:     * @param capacity  the initial capacity for the map
./map/ReferenceMap.java:     * @param loadFactor  the load factor for the map
./map/ReferenceMap.java:     * @param purgeValues  should the value be automatically purged when the
./map/AbstractMapDecorator.java: * @param <K> the type of the keys in the map
./map/AbstractMapDecorator.java: * @param <V> the type of the values in the map
./map/AbstractMapDecorator.java:     * @param map  the map to decorate, must not be null
./map/TransformedSortedMap.java:     * @param <K>  the key type
./map/TransformedSortedMap.java:     * @param <V>  the value type
./map/TransformedSortedMap.java:     * @param map  the map to decorate, must not be null
./map/TransformedSortedMap.java:     * @param keyTransformer  the predicate to validate the keys, null means no transformation
./map/TransformedSortedMap.java:     * @param valueTransformer  the predicate to validate to values, null means no transformation
./map/TransformedSortedMap.java:     * @param <K>  the key type
./map/TransformedSortedMap.java:     * @param <V>  the value type
./map/TransformedSortedMap.java:     * @param map  the map to decorate, must not be null
./map/TransformedSortedMap.java:     * @param keyTransformer  the transformer to use for key conversion, null means no transformation
./map/TransformedSortedMap.java:     * @param valueTransformer  the transformer to use for value conversion, null means no transformation
./map/TransformedSortedMap.java:     * @param map  the map to decorate, must not be null
./map/TransformedSortedMap.java:     * @param keyTransformer  the predicate to validate the keys, null means no transformation
./map/TransformedSortedMap.java:     * @param valueTransformer  the predicate to validate to values, null means no transformation
./map/PredicatedSortedMap.java:     * @param <K>  the key type
./map/PredicatedSortedMap.java:     * @param <V>  the value type
./map/PredicatedSortedMap.java:     * @param map  the map to decorate, must not be null
./map/PredicatedSortedMap.java:     * @param keyPredicate  the predicate to validate the keys, null means no check
./map/PredicatedSortedMap.java:     * @param valuePredicate  the predicate to validate to values, null means no check
./map/PredicatedSortedMap.java:     * @param map  the map to decorate, must not be null
./map/PredicatedSortedMap.java:     * @param keyPredicate  the predicate to validate the keys, null means no check
./map/PredicatedSortedMap.java:     * @param valuePredicate  the predicate to validate to values, null means no check
./map/HashedMap.java:     * @param initialCapacity  the initial capacity
./map/HashedMap.java:     * @param initialCapacity  the initial capacity
./map/HashedMap.java:     * @param loadFactor  the load factor
./map/HashedMap.java:     * @param map  the map to copy
./map/PassiveExpiringMap.java: * @param <K> the type of the keys in the map
./map/PassiveExpiringMap.java: * @param <V> the type of the values in the map
./map/PassiveExpiringMap.java:     * @param <K> the type of the keys in the map
./map/PassiveExpiringMap.java:     * @param <V> the type of the values in the map
./map/PassiveExpiringMap.java:         * @param timeToLiveMillis the constant amount of time (in milliseconds)
./map/PassiveExpiringMap.java:         * @param timeToLive the constant amount of time an entry is available
./map/PassiveExpiringMap.java:         * @param timeUnit the unit of time for the <code>timeToLive</code>
./map/PassiveExpiringMap.java:         * @param key the key for the entry (ignored).
./map/PassiveExpiringMap.java:         * @param value the value for the entry (ignored).
./map/PassiveExpiringMap.java:     * @param <K> the key object type.
./map/PassiveExpiringMap.java:     * @param <V> the value object type
./map/PassiveExpiringMap.java:         * @param key the key for the entry.
./map/PassiveExpiringMap.java:         * @param value the value for the entry.
./map/PassiveExpiringMap.java:     * @param timeToLive the constant amount of time an entry is available
./map/PassiveExpiringMap.java:     * @param timeUnit the unit of time for the <code>timeToLive</code>
./map/PassiveExpiringMap.java:     * @param expiringPolicy the policy used to determine expiration times of
./map/PassiveExpiringMap.java:     * @param expiringPolicy the policy used to determine expiration times of
./map/PassiveExpiringMap.java:     * @param map the map to decorate, must not be null.
./map/PassiveExpiringMap.java:     * @param timeToLiveMillis the constant amount of time (in milliseconds) an
./map/PassiveExpiringMap.java:     * @param timeToLiveMillis the constant amount of time (in milliseconds) an
./map/PassiveExpiringMap.java:     * @param map the map to decorate, must not be null.
./map/PassiveExpiringMap.java:     * @param timeToLive the constant amount of time an entry is available
./map/PassiveExpiringMap.java:     * @param timeUnit the unit of time for the <code>timeToLive</code>
./map/PassiveExpiringMap.java:     * @param timeToLive the constant amount of time an entry is available
./map/PassiveExpiringMap.java:     * @param timeUnit the unit of time for the <code>timeToLive</code>
./map/PassiveExpiringMap.java:     * @param map the map to decorate, must not be null.
./map/PassiveExpiringMap.java:     * @param map the map to decorate, must not be null.
./map/PassiveExpiringMap.java:     * @param now the time in milliseconds used to compare against the
./map/PassiveExpiringMap.java:     * @param expirationTimeObject the expiration time value retrieved from
./map/PassiveExpiringMap.java:     * @param in the input stream
./map/PassiveExpiringMap.java:     * @param out the output stream
./map/LRUMap.java:     * @param maxSize  the maximum size of the map
./map/LRUMap.java:     * @param maxSize  the maximum size of the map
./map/LRUMap.java:     * @param initialSize  the initial size of the map
./map/LRUMap.java:     * @param maxSize  the maximum size of the map
./map/LRUMap.java:     * @param scanUntilRemovable  scan until a removeable entry is found, default false
./map/LRUMap.java:     * @param maxSize  the maximum size of the map
./map/LRUMap.java:     * @param loadFactor  the load factor
./map/LRUMap.java:     * @param maxSize  the maximum size of the map
./map/LRUMap.java:     * @param initialSize  the initial size of the map
./map/LRUMap.java:     * @param loadFactor  the load factor
./map/LRUMap.java:     * @param maxSize  the maximum size of the map
./map/LRUMap.java:     * @param loadFactor  the load factor
./map/LRUMap.java:     * @param scanUntilRemovable  scan until a removeable entry is found, default false
./map/LRUMap.java:     * @param maxSize  the maximum size of the map
./map/LRUMap.java:     * @param initialSize  the initial size of the map
./map/LRUMap.java:     * @param loadFactor  the load factor
./map/LRUMap.java:     * @param scanUntilRemovable  scan until a removeable entry is found, default false
./map/LRUMap.java:     * @param map  the map to copy
./map/LRUMap.java:     * @param map  the map to copy
./map/LRUMap.java:     * @param scanUntilRemovable  scan until a removeable entry is found, default false
./map/LRUMap.java:     * @param key  the key
./map/LRUMap.java:     * @param key  the key
./map/LRUMap.java:     * @param updateToMRU  whether the key shall be updated to the
./map/LRUMap.java:     * @param entry  the entry to update
./map/LRUMap.java:     * @param entry  the entry to update
./map/LRUMap.java:     * @param newValue  the new value to store
./map/LRUMap.java:     * @param hashIndex  the index into the data array to store at
./map/LRUMap.java:     * @param hashCode  the hash code of the key to add
./map/LRUMap.java:     * @param key  the key to add
./map/LRUMap.java:     * @param value  the value to add
./map/LRUMap.java:     * @param entry  the entry to reuse
./map/LRUMap.java:     * @param hashIndex  the index into the data array to store at
./map/LRUMap.java:     * @param hashCode  the hash code of the key to add
./map/LRUMap.java:     * @param key  the key to add
./map/LRUMap.java:     * @param value  the value to add
./map/LRUMap.java:     * @param entry  the entry to be removed
./map/LRUMap.java:     * @param out  the output stream
./map/LRUMap.java:     * @param in  the input stream
./map/ReferenceIdentityMap.java:     * @param keyType  the type of reference to use for keys;
./map/ReferenceIdentityMap.java:     * @param valueType  the type of reference to use for values;
./map/ReferenceIdentityMap.java:     * @param keyType  the type of reference to use for keys;
./map/ReferenceIdentityMap.java:     * @param valueType  the type of reference to use for values;
./map/ReferenceIdentityMap.java:     * @param purgeValues should the value be automatically purged when the
./map/ReferenceIdentityMap.java:     * @param keyType  the type of reference to use for keys;
./map/ReferenceIdentityMap.java:     * @param valueType  the type of reference to use for values;
./map/ReferenceIdentityMap.java:     * @param capacity  the initial capacity for the map
./map/ReferenceIdentityMap.java:     * @param loadFactor  the load factor for the map
./map/ReferenceIdentityMap.java:     * @param keyType  the type of reference to use for keys;
./map/ReferenceIdentityMap.java:     * @param valueType  the type of reference to use for values;
./map/ReferenceIdentityMap.java:     * @param capacity  the initial capacity for the map
./map/ReferenceIdentityMap.java:     * @param loadFactor  the load factor for the map
./map/ReferenceIdentityMap.java:     * @param purgeValues  should the value be automatically purged when the
./map/ReferenceIdentityMap.java:     * @param key  the key to get a hash code for
./map/ReferenceIdentityMap.java:     * @param key  the key to get a hash code for, may be null
./map/ReferenceIdentityMap.java:     * @param value  the value to get a hash code for, may be null
./map/ReferenceIdentityMap.java:     * @param key1  the first key to compare passed in from outside
./map/ReferenceIdentityMap.java:     * @param key2  the second key extracted from the entry via <code>entry.key</code>
./map/ReferenceIdentityMap.java:     * @param value1  the first value to compare passed in from outside
./map/ReferenceIdentityMap.java:     * @param value2  the second value extracted from the entry via <code>getValue()</code>
./map/StaticBucketMap.java:     * @param numBuckets  the number of buckets for this map
./map/StaticBucketMap.java:     * @param key  the key to retrieve
./map/StaticBucketMap.java:     * @param key  the key to check
./map/StaticBucketMap.java:     * @param value  the value to check
./map/StaticBucketMap.java:     * @param key  the key to use
./map/StaticBucketMap.java:     * @param value  the value to use
./map/StaticBucketMap.java:     * @param key  the key to remove
./map/StaticBucketMap.java:     * @param map  the map of entries to add
./map/StaticBucketMap.java:     * @param obj  the object to compare to
./map/StaticBucketMap.java:     *  @param r  the code to execute atomically
./map/AbstractSortedMapDecorator.java: * @param <K> the type of the keys in the map
./map/AbstractSortedMapDecorator.java: * @param <V> the type of the values in the map
./map/AbstractSortedMapDecorator.java:     * @param map  the map to decorate, must not be null
./map/AbstractSortedMapDecorator.java:     * @param <K>  the key type
./map/AbstractSortedMapDecorator.java:     * @param <V>  the value type
./map/AbstractSortedMapDecorator.java:         * @param entrySet  the entrySet to iterate
./map/MultiKeyMap.java:     * @param <K>  the key type
./map/MultiKeyMap.java:     * @param <V>  the value type
./map/MultiKeyMap.java:     * @param map  the map to decorate, not null
./map/MultiKeyMap.java:     * @param map  the map to decorate
./map/MultiKeyMap.java:     * @param key1  the first key
./map/MultiKeyMap.java:     * @param key2  the second key
./map/MultiKeyMap.java:     * @param key1  the first key
./map/MultiKeyMap.java:     * @param key2  the second key
./map/MultiKeyMap.java:     * @param key1  the first key
./map/MultiKeyMap.java:     * @param key2  the second key
./map/MultiKeyMap.java:     * @param value  the value to store
./map/MultiKeyMap.java:     * @param key1  the first key
./map/MultiKeyMap.java:     * @param key2  the second key
./map/MultiKeyMap.java:     * @param key1  the first key
./map/MultiKeyMap.java:     * @param key2  the second key
./map/MultiKeyMap.java:     * @param entry  the entry to compare to
./map/MultiKeyMap.java:     * @param key1  the first key
./map/MultiKeyMap.java:     * @param key2  the second key
./map/MultiKeyMap.java:     * @param key1  the first key
./map/MultiKeyMap.java:     * @param key2  the second key
./map/MultiKeyMap.java:     * @param key3  the third key
./map/MultiKeyMap.java:     * @param key1  the first key
./map/MultiKeyMap.java:     * @param key2  the second key
./map/MultiKeyMap.java:     * @param key3  the third key
./map/MultiKeyMap.java:     * @param key1  the first key
./map/MultiKeyMap.java:     * @param key2  the second key
./map/MultiKeyMap.java:     * @param key3  the third key
./map/MultiKeyMap.java:     * @param value  the value to store
./map/MultiKeyMap.java:     * @param key1  the first key
./map/MultiKeyMap.java:     * @param key2  the second key
./map/MultiKeyMap.java:     * @param key3  the third key
./map/MultiKeyMap.java:     * @param key1  the first key
./map/MultiKeyMap.java:     * @param key2  the second key
./map/MultiKeyMap.java:     * @param key3  the third key
./map/MultiKeyMap.java:     * @param entry  the entry to compare to
./map/MultiKeyMap.java:     * @param key1  the first key
./map/MultiKeyMap.java:     * @param key2  the second key
./map/MultiKeyMap.java:     * @param key3  the third key
./map/MultiKeyMap.java:     * @param key1  the first key
./map/MultiKeyMap.java:     * @param key2  the second key
./map/MultiKeyMap.java:     * @param key3  the third key
./map/MultiKeyMap.java:     * @param key4  the fourth key
./map/MultiKeyMap.java:     * @param key1  the first key
./map/MultiKeyMap.java:     * @param key2  the second key
./map/MultiKeyMap.java:     * @param key3  the third key
./map/MultiKeyMap.java:     * @param key4  the fourth key
./map/MultiKeyMap.java:     * @param key1  the first key
./map/MultiKeyMap.java:     * @param key2  the second key
./map/MultiKeyMap.java:     * @param key3  the third key
./map/MultiKeyMap.java:     * @param key4  the fourth key
./map/MultiKeyMap.java:     * @param value  the value to store
./map/MultiKeyMap.java:     * @param key1  the first key
./map/MultiKeyMap.java:     * @param key2  the second key
./map/MultiKeyMap.java:     * @param key3  the third key
./map/MultiKeyMap.java:     * @param key4  the fourth key
./map/MultiKeyMap.java:     * @param key1  the first key
./map/MultiKeyMap.java:     * @param key2  the second key
./map/MultiKeyMap.java:     * @param key3  the third key
./map/MultiKeyMap.java:     * @param key4  the fourth key
./map/MultiKeyMap.java:     * @param entry  the entry to compare to
./map/MultiKeyMap.java:     * @param key1  the first key
./map/MultiKeyMap.java:     * @param key2  the second key
./map/MultiKeyMap.java:     * @param key3  the third key
./map/MultiKeyMap.java:     * @param key4  the fourth key
./map/MultiKeyMap.java:     * @param key1  the first key
./map/MultiKeyMap.java:     * @param key2  the second key
./map/MultiKeyMap.java:     * @param key3  the third key
./map/MultiKeyMap.java:     * @param key4  the fourth key
./map/MultiKeyMap.java:     * @param key5  the fifth key
./map/MultiKeyMap.java:     * @param key1  the first key
./map/MultiKeyMap.java:     * @param key2  the second key
./map/MultiKeyMap.java:     * @param key3  the third key
./map/MultiKeyMap.java:     * @param key4  the fourth key
./map/MultiKeyMap.java:     * @param key5  the fifth key
./map/MultiKeyMap.java:     * @param key1  the first key
./map/MultiKeyMap.java:     * @param key2  the second key
./map/MultiKeyMap.java:     * @param key3  the third key
./map/MultiKeyMap.java:     * @param key4  the fourth key
./map/MultiKeyMap.java:     * @param key5  the fifth key
./map/MultiKeyMap.java:     * @param value  the value to store
./map/MultiKeyMap.java:     * @param key1  the first key
./map/MultiKeyMap.java:     * @param key2  the second key
./map/MultiKeyMap.java:     * @param key3  the third key
./map/MultiKeyMap.java:     * @param key4  the fourth key
./map/MultiKeyMap.java:     * @param key5  the fifth key
./map/MultiKeyMap.java:     * @param key1  the first key
./map/MultiKeyMap.java:     * @param key2  the second key
./map/MultiKeyMap.java:     * @param key3  the third key
./map/MultiKeyMap.java:     * @param key4  the fourth key
./map/MultiKeyMap.java:     * @param key5  the fifth key
./map/MultiKeyMap.java:     * @param entry  the entry to compare to
./map/MultiKeyMap.java:     * @param key1  the first key
./map/MultiKeyMap.java:     * @param key2  the second key
./map/MultiKeyMap.java:     * @param key3  the third key
./map/MultiKeyMap.java:     * @param key4  the fourth key
./map/MultiKeyMap.java:     * @param key5  the fifth key
./map/MultiKeyMap.java:     * @param key1  the first key
./map/MultiKeyMap.java:     * @param key1  the first key
./map/MultiKeyMap.java:     * @param key2  the second key
./map/MultiKeyMap.java:     * @param key1  the first key
./map/MultiKeyMap.java:     * @param key2  the second key
./map/MultiKeyMap.java:     * @param key3  the third key
./map/MultiKeyMap.java:     * @param key1  the first key
./map/MultiKeyMap.java:     * @param key2  the second key
./map/MultiKeyMap.java:     * @param key3  the third key
./map/MultiKeyMap.java:     * @param key4  the fourth key
./map/MultiKeyMap.java:     * @param key  the key to check
./map/MultiKeyMap.java:     * @param key  the non-null MultiKey object
./map/MultiKeyMap.java:     * @param value  the value to store
./map/MultiKeyMap.java:     * @param mapToCopy  to this map
./map/MultiKeyMap.java:     * @param out  the output stream
./map/MultiKeyMap.java:     * @param in  the input stream
./map/ListOrderedMap.java:     * @param <K>  the key type
./map/ListOrderedMap.java:     * @param <V>  the value type
./map/ListOrderedMap.java:     * @param map  the map to decorate, must not be null
./map/ListOrderedMap.java:     * @param map  the map to decorate, must not be null
./map/ListOrderedMap.java:     * @param out  the output stream
./map/ListOrderedMap.java:     * @param in  the input stream
./map/ListOrderedMap.java:     * @param key  the key to find previous for
./map/ListOrderedMap.java:     * @param key  the key to find previous for
./map/ListOrderedMap.java:     * @param index the index in the Map to start at.
./map/ListOrderedMap.java:     * @param map the Map containing the entries to be added.
./map/ListOrderedMap.java:     * @param index  the index to retrieve
./map/ListOrderedMap.java:     * @param index  the index to retrieve
./map/ListOrderedMap.java:     * @param key  the key to find the index of
./map/ListOrderedMap.java:     * @param index  the index of the value to set
./map/ListOrderedMap.java:     * @param value  the new value to set
./map/ListOrderedMap.java:     * @param index  the index at which the mapping should be inserted
./map/ListOrderedMap.java:     * @param key  the key
./map/ListOrderedMap.java:     * @param value  the value
./map/ListOrderedMap.java:     * @param index  the index of the object to remove
./map/SingletonMap.java:     * @param key  the key to use
./map/SingletonMap.java:     * @param value  the value to use
./map/SingletonMap.java:     * @param keyValue  the key value pair to use
./map/SingletonMap.java:     * @param mapEntry  the mapEntry to use
./map/SingletonMap.java:     * @param map  the map to copy, must be size 1
./map/SingletonMap.java:     * @param value  the new value to set
./map/SingletonMap.java:     * @param key  the key
./map/SingletonMap.java:     * @param key  the key to search for
./map/SingletonMap.java:     * @param value  the value to search for
./map/SingletonMap.java:     * @param key  the key to set, must be the key of the map
./map/SingletonMap.java:     * @param value  the value to set
./map/SingletonMap.java:     * @param map  the map to add, must be size 0 or 1, and the key must match
./map/SingletonMap.java:     * @param key  the mapping to remove
./map/SingletonMap.java:     * @param key  the next key
./map/SingletonMap.java:     * @param key  the next key
./map/SingletonMap.java:     * @param key  the key to compare
./map/SingletonMap.java:     * @param value  the value to compare
./map/SingletonMap.java:     * @param obj  the object to compare to
./map/CaseInsensitiveMap.java:     * @param initialCapacity  the initial capacity
./map/CaseInsensitiveMap.java:     * @param initialCapacity  the initial capacity
./map/CaseInsensitiveMap.java:     * @param loadFactor  the load factor
./map/CaseInsensitiveMap.java:     * @param map  the map to copy
./map/CaseInsensitiveMap.java:     * @param key  the key convert
./map/AbstractInputCheckedMapDecorator.java:     * @param map  the map to decorate, must not be null
./map/AbstractInputCheckedMapDecorator.java:     * @param value  the value to check
./map/UnmodifiableOrderedMap.java:     * @param <K>  the key type
./map/UnmodifiableOrderedMap.java:     * @param <V>  the value type
./map/UnmodifiableOrderedMap.java:     * @param map  the map to decorate, must not be null
./map/UnmodifiableOrderedMap.java:     * @param map  the map to decorate, must not be null
./map/UnmodifiableOrderedMap.java:     * @param out  the output stream
./map/UnmodifiableOrderedMap.java:     * @param in  the input stream
./map/AbstractLinkedMap.java:     * @param initialCapacity  the initial capacity, must be a power of two
./map/AbstractLinkedMap.java:     * @param loadFactor  the load factor, must be > 0.0f and generally < 1.0f
./map/AbstractLinkedMap.java:     * @param threshold  the threshold, must be sensible
./map/AbstractLinkedMap.java:     * @param initialCapacity  the initial capacity
./map/AbstractLinkedMap.java:     * @param initialCapacity  the initial capacity
./map/AbstractLinkedMap.java:     * @param loadFactor  the load factor
./map/AbstractLinkedMap.java:     * @param map  the map to copy
./map/AbstractLinkedMap.java:     * @param value  the value to search for
./map/AbstractLinkedMap.java:     * @param key  the key to get after
./map/AbstractLinkedMap.java:     * @param key  the key to get before
./map/AbstractLinkedMap.java:     * @param index  the index to retrieve
./map/AbstractLinkedMap.java:     * @param entry  the entry to add
./map/AbstractLinkedMap.java:     * @param hashIndex  the index into the data array to store at
./map/AbstractLinkedMap.java:     * @param next  the next entry in sequence
./map/AbstractLinkedMap.java:     * @param hashCode  the hash code to use
./map/AbstractLinkedMap.java:     * @param key  the key to store
./map/AbstractLinkedMap.java:     * @param value  the value to store
./map/AbstractLinkedMap.java:     * @param entry  the entry to remove
./map/AbstractLinkedMap.java:     * @param hashIndex  the index into the data structure
./map/AbstractLinkedMap.java:     * @param previous  the previous entry in the chain
./map/AbstractLinkedMap.java:     * @param entry  the entry to query, must not be null
./map/AbstractLinkedMap.java:     * @param entry  the entry to query, must not be null
./map/AbstractLinkedMap.java:         * @param next  the next entry in the hash bucket sequence
./map/AbstractLinkedMap.java:         * @param hashCode  the hash code
./map/AbstractLinkedMap.java:         * @param key  the key
./map/AbstractLinkedMap.java:         * @param value  the value
./map/UnmodifiableEntrySet.java:     * @param <K>  the key type
./map/UnmodifiableEntrySet.java:     * @param <V>  the value type
./map/UnmodifiableEntrySet.java:     * @param set  the set to decorate, must not be null
./map/UnmodifiableEntrySet.java:     * @param set  the set to decorate, must not be null
./map/MultiValueMap.java:     * @param <K>  the key type
./map/MultiValueMap.java:     * @param <V>  the value type
./map/MultiValueMap.java:     * @param map  the map to wrap
./map/MultiValueMap.java:     * @param <K>  the key type
./map/MultiValueMap.java:     * @param <V>  the value type
./map/MultiValueMap.java:     * @param <C>  the collection class type
./map/MultiValueMap.java:     * @param map  the map to wrap
./map/MultiValueMap.java:     * @param collectionClass  the type of the collection class
./map/MultiValueMap.java:     * @param <K>  the key type
./map/MultiValueMap.java:     * @param <V>  the value type
./map/MultiValueMap.java:     * @param <C>  the collection class type
./map/MultiValueMap.java:     * @param map  the map to decorate
./map/MultiValueMap.java:     * @param collectionFactory  the collection factory (must return a Collection object).
./map/MultiValueMap.java:     * @param <C>  the collection class type
./map/MultiValueMap.java:     * @param map  the map to decorate
./map/MultiValueMap.java:     * @param collectionFactory  the collection factory which must return a Collection instance
./map/MultiValueMap.java:     * @param out  the output stream
./map/MultiValueMap.java:     * @param in  the input stream
./map/MultiValueMap.java:     * @param key  the key to remove from
./map/MultiValueMap.java:     * @param value the value to remove
./map/MultiValueMap.java:     * @param value  the value to search for
./map/MultiValueMap.java:     * @param key  the key to store against
./map/MultiValueMap.java:     * @param value  the value to add to the collection at the key
./map/MultiValueMap.java:     * @param map  the map to copy (either a normal or multi map)
./map/MultiValueMap.java:     * @param key  the key to search for
./map/MultiValueMap.java:     * @param value  the value to search for
./map/MultiValueMap.java:     * @param key  the key to retrieve
./map/MultiValueMap.java:     * @param key  the key to get size for
./map/MultiValueMap.java:     * @param key  the key to store against
./map/MultiValueMap.java:     * @param values  the values to add to the collection at the key, null ignored
./map/MultiValueMap.java:     * @param key  the key to get an iterator for
./map/MultiValueMap.java:     * @param size  the collection size that is about to be added
./map/AbstractHashedMap.java:     * @param initialCapacity  the initial capacity, must be a power of two
./map/AbstractHashedMap.java:     * @param loadFactor  the load factor, must be &gt; 0.0f and generally &lt; 1.0f
./map/AbstractHashedMap.java:     * @param threshold  the threshold, must be sensible
./map/AbstractHashedMap.java:     * @param initialCapacity  the initial capacity
./map/AbstractHashedMap.java:     * @param initialCapacity  the initial capacity
./map/AbstractHashedMap.java:     * @param loadFactor  the load factor
./map/AbstractHashedMap.java:     * @param map  the map to copy
./map/AbstractHashedMap.java:     * @param key  the key
./map/AbstractHashedMap.java:     * @param key  the key to search for
./map/AbstractHashedMap.java:     * @param value  the value to search for
./map/AbstractHashedMap.java:     * @param key  the key to add
./map/AbstractHashedMap.java:     * @param value  the value to add
./map/AbstractHashedMap.java:     * @param map  the map to add
./map/AbstractHashedMap.java:     * @param map  the map to add
./map/AbstractHashedMap.java:     * @param key  the mapping to remove
./map/AbstractHashedMap.java:     * @param key  the key convert
./map/AbstractHashedMap.java:     * @param key  the key to get a hash code for
./map/AbstractHashedMap.java:     * @param key1  the first key to compare passed in from outside
./map/AbstractHashedMap.java:     * @param key2  the second key extracted from the entry via <code>entry.key</code>
./map/AbstractHashedMap.java:     * @param value1  the first value to compare passed in from outside
./map/AbstractHashedMap.java:     * @param value2  the second value extracted from the entry via <code>getValue()</code>
./map/AbstractHashedMap.java:     * @param hashCode  the hash code to use
./map/AbstractHashedMap.java:     * @param dataSize  the size of the data to pick a bucket from
./map/AbstractHashedMap.java:     * @param key  the key
./map/AbstractHashedMap.java:     * @param entry  the entry to update
./map/AbstractHashedMap.java:     * @param newValue  the new value to store
./map/AbstractHashedMap.java:     * @param entry  the entry to update, not null
./map/AbstractHashedMap.java:     * @param hashIndex  the index in the data array
./map/AbstractHashedMap.java:     * @param hashCode  the hash code of the key to add
./map/AbstractHashedMap.java:     * @param key  the key to add
./map/AbstractHashedMap.java:     * @param value  the value to add
./map/AbstractHashedMap.java:     * @param hashIndex  the index into the data array to store at
./map/AbstractHashedMap.java:     * @param hashCode  the hash code of the key to add
./map/AbstractHashedMap.java:     * @param key  the key to add
./map/AbstractHashedMap.java:     * @param value  the value to add
./map/AbstractHashedMap.java:     * @param next  the next entry in sequence
./map/AbstractHashedMap.java:     * @param hashCode  the hash code to use
./map/AbstractHashedMap.java:     * @param key  the key to store
./map/AbstractHashedMap.java:     * @param value  the value to store
./map/AbstractHashedMap.java:     * @param entry  the entry to add
./map/AbstractHashedMap.java:     * @param hashIndex  the index into the data array to store at
./map/AbstractHashedMap.java:     * @param entry  the entry to remove
./map/AbstractHashedMap.java:     * @param hashIndex  the index into the data structure
./map/AbstractHashedMap.java:     * @param previous  the previous entry in the chain
./map/AbstractHashedMap.java:     * @param entry  the entry to remove
./map/AbstractHashedMap.java:     * @param hashIndex  the index into the data structure
./map/AbstractHashedMap.java:     * @param previous  the previous entry in the chain
./map/AbstractHashedMap.java:     * @param entry  the entry to destroy
./map/AbstractHashedMap.java:     * @param newCapacity  the new capacity of the array (a power of two, less or equal to max)
./map/AbstractHashedMap.java:     * @param proposedCapacity  the proposed capacity
./map/AbstractHashedMap.java:     * @param newCapacity  the new capacity
./map/AbstractHashedMap.java:     * @param factor  the load factor
./map/AbstractHashedMap.java:     * @param entry  the entry to query, must not be null
./map/AbstractHashedMap.java:     * @param entry  the entry to query, must not be null
./map/AbstractHashedMap.java:     * @param entry  the entry to query, must not be null
./map/AbstractHashedMap.java:     * @param entry  the entry to query, must not be null
./map/AbstractHashedMap.java:     * @param out  the output stream
./map/AbstractHashedMap.java:     * @param in  the input stream
./map/AbstractHashedMap.java:     * @param obj  the object to compare to
./map/TransformedMap.java:     * @param <K>  the key type
./map/TransformedMap.java:     * @param <V>  the value type
./map/TransformedMap.java:     * @param map  the map to decorate, must not be null
./map/TransformedMap.java:     * @param keyTransformer  the transformer to use for key conversion, null means no transformation
./map/TransformedMap.java:     * @param valueTransformer  the transformer to use for value conversion, null means no transformation
./map/TransformedMap.java:     * @param <K>  the key type
./map/TransformedMap.java:     * @param <V>  the value type
./map/TransformedMap.java:     * @param map  the map to decorate, must not be null
./map/TransformedMap.java:     * @param keyTransformer  the transformer to use for key conversion, null means no transformation
./map/TransformedMap.java:     * @param valueTransformer  the transformer to use for value conversion, null means no transformation
./map/TransformedMap.java:     * @param map  the map to decorate, must not be null
./map/TransformedMap.java:     * @param keyTransformer  the transformer to use for key conversion, null means no conversion
./map/TransformedMap.java:     * @param valueTransformer  the transformer to use for value conversion, null means no conversion
./map/TransformedMap.java:     * @param out  the output stream
./map/TransformedMap.java:     * @param in  the input stream
./map/TransformedMap.java:     * @param object  the object to transform
./map/TransformedMap.java:     * @param object  the object to transform
./map/TransformedMap.java:     * @param map  the map to transform
./map/TransformedMap.java:     * @param value  the value to transform
./map/DefaultedMap.java:     * @param <K>  the key type
./map/DefaultedMap.java:     * @param <V>  the value type
./map/DefaultedMap.java:     * @param map  the map to decorate, must not be null
./map/DefaultedMap.java:     * @param defaultValue  the default value to return when the key is not found
./map/DefaultedMap.java:     * @param <K>  the key type
./map/DefaultedMap.java:     * @param <V>  the value type
./map/DefaultedMap.java:     * @param map  the map to decorate, must not be null
./map/DefaultedMap.java:     * @param factory  the factory to use to create entries, must not be null
./map/DefaultedMap.java:     * @param <K>  the key type
./map/DefaultedMap.java:     * @param <V>  the value type
./map/DefaultedMap.java:     * @param map  the map to decorate, must not be null
./map/DefaultedMap.java:     * @param transformer  the transformer to use as a factory to create entries, must not be null
./map/DefaultedMap.java:     * @param defaultValue  the default value to return when the key is not found
./map/DefaultedMap.java:     * @param defaultValueTransformer transformer to use to generate missing values.
./map/DefaultedMap.java:     * @param map  the map to decorate, must not be null
./map/DefaultedMap.java:     * @param defaultValueTransformer  the value transformer to use
./map/DefaultedMap.java:     * @param out  the output stream
./map/DefaultedMap.java:     * @param in  the input stream
./map/UnmodifiableSortedMap.java:     * @param <K>  the key type
./map/UnmodifiableSortedMap.java:     * @param <V>  the value type
./map/UnmodifiableSortedMap.java:     * @param map  the map to decorate, must not be null
./map/UnmodifiableSortedMap.java:     * @param map  the map to decorate, must not be null
./map/UnmodifiableSortedMap.java:     * @param out  the output stream
./map/UnmodifiableSortedMap.java:     * @param in  the input stream
./map/LazySortedMap.java:     * @param <K>  the key type
./map/LazySortedMap.java:     * @param <V>  the value type
./map/LazySortedMap.java:     * @param map  the map to decorate, must not be null
./map/LazySortedMap.java:     * @param factory  the factory to use, must not be null
./map/LazySortedMap.java:     * @param <K>  the key type
./map/LazySortedMap.java:     * @param <V>  the value type
./map/LazySortedMap.java:     * @param map  the map to decorate, must not be null
./map/LazySortedMap.java:     * @param factory  the factory to use, must not be null
./map/LazySortedMap.java:     * @param map  the map to decorate, must not be null
./map/LazySortedMap.java:     * @param factory  the factory to use, must not be null
./map/LazySortedMap.java:     * @param map  the map to decorate, must not be null
./map/LazySortedMap.java:     * @param factory  the factory to use, must not be null
./map/Flat3Map.java:     * @param map  the map to copy
./map/Flat3Map.java:     * @param key  the key
./map/Flat3Map.java:     * @param key  the key to search for
./map/Flat3Map.java:     * @param value  the value to search for
./map/Flat3Map.java:     * @param key  the key to add
./map/Flat3Map.java:     * @param value  the value to add
./map/Flat3Map.java:     * @param map  the map to add
./map/Flat3Map.java:     * @param key  the mapping to remove
./map/Flat3Map.java:         * @param flag
./map/Flat3Map.java:     * @param obj  the object to compare to
./map/AbstractReferenceMap.java:         * @param value  the int value
./map/AbstractReferenceMap.java:     * @param keyType  the type of reference to use for keys;
./map/AbstractReferenceMap.java:     * @param valueType  the type of reference to use for values;
./map/AbstractReferenceMap.java:     * @param capacity  the initial capacity for the map
./map/AbstractReferenceMap.java:     * @param loadFactor  the load factor for the map
./map/AbstractReferenceMap.java:     * @param purgeValues  should the value be automatically purged when the
./map/AbstractReferenceMap.java:     * @param key  the key to search for
./map/AbstractReferenceMap.java:     * @param value  the value to search for
./map/AbstractReferenceMap.java:     * @param key  the key
./map/AbstractReferenceMap.java:     * @param key  the key to add, must not be null
./map/AbstractReferenceMap.java:     * @param value  the value to add, must not be null
./map/AbstractReferenceMap.java:     * @param key  the mapping to remove
./map/AbstractReferenceMap.java:     * @param ref  the reference to purge
./map/AbstractReferenceMap.java:     * @param key  the key
./map/AbstractReferenceMap.java:     * @param key  the key to get a hash code for, may be null
./map/AbstractReferenceMap.java:     * @param value  the value to get a hash code for, may be null
./map/AbstractReferenceMap.java:     * @param key1  the first key to compare passed in from outside
./map/AbstractReferenceMap.java:     * @param key2  the second key extracted from the entry via <code>entry.key</code>
./map/AbstractReferenceMap.java:     * @param next  the next entry in sequence
./map/AbstractReferenceMap.java:     * @param hashCode  the hash code to use
./map/AbstractReferenceMap.java:     * @param key  the key to store
./map/AbstractReferenceMap.java:     * @param value  the value to store
./map/AbstractReferenceMap.java:         * @param parent  the parent map
./map/AbstractReferenceMap.java:         * @param next  the next entry in the hash bucket
./map/AbstractReferenceMap.java:         * @param hashCode  the hash code of the key
./map/AbstractReferenceMap.java:         * @param key  the key
./map/AbstractReferenceMap.java:         * @param value  the value
./map/AbstractReferenceMap.java:         * @param obj  the object to store
./map/AbstractReferenceMap.java:         * @param obj  the other map entry to compare to
./map/AbstractReferenceMap.java:         * @param <T> the type of the referenced object
./map/AbstractReferenceMap.java:         * @param type  HARD, SOFT or WEAK
./map/AbstractReferenceMap.java:         * @param referent  the object to refer to
./map/AbstractReferenceMap.java:         * @param hash  the hash code of the <i>key</i> of the mapping;
./map/AbstractReferenceMap.java:         * @param ref  the reference to purge
./map/AbstractReferenceMap.java:     * @param out  the output stream
./map/AbstractReferenceMap.java:     * @param in  the input stream
./map/AbstractReferenceMap.java:     * @param type the type to check against.
./map/LinkedMap.java:     * @param initialCapacity  the initial capacity
./map/LinkedMap.java:     * @param initialCapacity  the initial capacity
./map/LinkedMap.java:     * @param loadFactor  the load factor
./map/LinkedMap.java:     * @param map  the map to copy
./map/LinkedMap.java:     * @param index  the index to retrieve
./map/LinkedMap.java:     * @param index  the index to retrieve
./map/LinkedMap.java:     * @param key  the key to find the index of
./map/LinkedMap.java:     * @param index  the index of the object to remove
./map/FixedSizeSortedMap.java:     * @param <K>  the key type
./map/FixedSizeSortedMap.java:     * @param <V>  the value type
./map/FixedSizeSortedMap.java:     * @param map  the map to decorate, must not be null
./map/FixedSizeSortedMap.java:     * @param map  the map to decorate, must not be null
./map/EntrySetToMapIteratorAdapter.java:     * @param entrySet  the entrySet to adapt
./map/CompositeMap.java:     * @param one  the first Map to be composited
./map/CompositeMap.java:     * @param two  the second Map to be composited
./map/CompositeMap.java:     * @param one  the first Map to be composited
./map/CompositeMap.java:     * @param two  the second Map to be composited
./map/CompositeMap.java:     * @param mutator  MapMutator to be used for mutation operations
./map/CompositeMap.java:     * @param composite  the Maps to be composited
./map/CompositeMap.java:     * @param composite  Maps to be composited
./map/CompositeMap.java:     * @param mutator  MapMutator to be used for mutation operations
./map/CompositeMap.java:     * @param mutator  the MapMutator to be used for mutation delegation
./map/CompositeMap.java:     * @param map  the Map to be added to the composite
./map/CompositeMap.java:     * @param map  the Map to be removed from the composite
./map/CompositeMap.java:     * @param key  key whose presence in this map is to be tested.
./map/CompositeMap.java:     * @param value value whose presence in this map is to be tested.
./map/CompositeMap.java:     * @param key key whose associated value is to be returned.
./map/CompositeMap.java:     * @param key key with which the specified value is to be associated.
./map/CompositeMap.java:     * @param value value to be associated with the specified key.
./map/CompositeMap.java:     * @param map Mappings to be stored in this map.
./map/CompositeMap.java:     * @param key key whose mapping is to be removed from the map.
./map/CompositeMap.java:     * @param obj  the object to compare to
./map/CompositeMap.java:         * @param composite  the CompositeMap with the collision
./map/CompositeMap.java:         * @param existing  the Map already in the composite which contains the
./map/CompositeMap.java:         * @param added  the Map being added
./map/CompositeMap.java:         * @param intersect  the intersection of the keysets of the existing and added maps
./map/CompositeMap.java:         * @param map  the CompositeMap which is being modified
./map/CompositeMap.java:         * @param composited  array of Maps in the CompositeMap being modified
./map/CompositeMap.java:         * @param key  key with which the specified value is to be associated.
./map/CompositeMap.java:         * @param value  value to be associated with the specified key.
./map/CompositeMap.java:         * @param map  the CompositeMap which is being modified
./map/CompositeMap.java:         * @param composited  array of Maps in the CompositeMap being modified
./map/CompositeMap.java:         * @param mapToAdd  Mappings to be stored in this CompositeMap
./map/LazyMap.java:     * @param <K>  the key type
./map/LazyMap.java:     * @param <V>  the value type
./map/LazyMap.java:     * @param map  the map to decorate, must not be null
./map/LazyMap.java:     * @param factory  the factory to use, must not be null
./map/LazyMap.java:     * @param <K>  the key type
./map/LazyMap.java:     * @param <V>  the value type
./map/LazyMap.java:     * @param map  the map to decorate, must not be null
./map/LazyMap.java:     * @param factory  the factory to use, must not be null
./map/LazyMap.java:     * @param map  the map to decorate, must not be null
./map/LazyMap.java:     * @param factory  the factory to use, must not be null
./map/LazyMap.java:     * @param map  the map to decorate, must not be null
./map/LazyMap.java:     * @param factory  the factory to use, must not be null
./map/LazyMap.java:     * @param out  the output stream
./map/LazyMap.java:     * @param in  the input stream
./map/PredicatedMap.java:     * @param <K>  the key type
./map/PredicatedMap.java:     * @param <V>  the value type
./map/PredicatedMap.java:     * @param map  the map to decorate, must not be null
./map/PredicatedMap.java:     * @param keyPredicate  the predicate to validate the keys, null means no check
./map/PredicatedMap.java:     * @param valuePredicate  the predicate to validate to values, null means no check
./map/PredicatedMap.java:     * @param map  the map to decorate, must not be null
./map/PredicatedMap.java:     * @param keyPredicate  the predicate to validate the keys, null means no check
./map/PredicatedMap.java:     * @param valuePredicate  the predicate to validate to values, null means no check
./map/PredicatedMap.java:     * @param out  the output stream
./map/PredicatedMap.java:     * @param in  the input stream
./map/PredicatedMap.java:     * @param key  the key to validate
./map/PredicatedMap.java:     * @param value  the value to validate
./map/PredicatedMap.java:     * @param value  the value to validate
./map/FixedSizeMap.java:     * @param <K>  the key type
./map/FixedSizeMap.java:     * @param <V>  the value type
./map/FixedSizeMap.java:     * @param map  the map to decorate, must not be null
./map/FixedSizeMap.java:     * @param map  the map to decorate, must not be null
./map/FixedSizeMap.java:     * @param out  the output stream
./map/FixedSizeMap.java:     * @param in  the input stream
./map/UnmodifiableMap.java:     * @param <K>  the key type
./map/UnmodifiableMap.java:     * @param <V>  the value type
./map/UnmodifiableMap.java:     * @param map  the map to decorate, must not be null
./map/UnmodifiableMap.java:     * @param map  the map to decorate, must not be null
./map/UnmodifiableMap.java:     * @param out  the output stream
./map/UnmodifiableMap.java:     * @param in  the input stream
./MapIterator.java: * @param <K> the type of the keys in the map
./MapIterator.java: * @param <V> the type of the values in the map
./MapIterator.java:     * @param value  the new value
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param <V>  the value type
./MapUtils.java:     * @param map  the map to use
./MapUtils.java:     * @param key  the key to look up
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param map  the map to use
./MapUtils.java:     * @param key  the key to look up
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param map  the map to use
./MapUtils.java:     * @param key  the key to look up
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param map  the map to use
./MapUtils.java:     * @param key  the key to look up
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param map  the map to use
./MapUtils.java:     * @param key  the key to look up
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param map  the map to use
./MapUtils.java:     * @param key  the key to look up
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param map  the map to use
./MapUtils.java:     * @param key  the key to look up
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param map  the map to use
./MapUtils.java:     * @param key  the key to look up
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param map  the map to use
./MapUtils.java:     * @param key  the key to look up
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param map  the map to use
./MapUtils.java:     * @param key  the key to look up
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param map  the map to use
./MapUtils.java:     * @param key  the key to look up
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param <V>  the value type
./MapUtils.java:     * @param map  the map whose value to look up
./MapUtils.java:     * @param key  the key of the value to look up in that map
./MapUtils.java:     * @param defaultValue  what to return if the value is null
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param map  the map whose value to look up
./MapUtils.java:     * @param key  the key of the value to look up in that map
./MapUtils.java:     * @param defaultValue  what to return if the value is null or if the
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param map  the map whose value to look up
./MapUtils.java:     * @param key  the key of the value to look up in that map
./MapUtils.java:     * @param defaultValue  what to return if the value is null or if the
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param map  the map whose value to look up
./MapUtils.java:     * @param key  the key of the value to look up in that map
./MapUtils.java:     * @param defaultValue  what to return if the value is null or if the
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param map  the map whose value to look up
./MapUtils.java:     * @param key  the key of the value to look up in that map
./MapUtils.java:     * @param defaultValue  what to return if the value is null or if the
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param map  the map whose value to look up
./MapUtils.java:     * @param key  the key of the value to look up in that map
./MapUtils.java:     * @param defaultValue  what to return if the value is null or if the
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param map  the map whose value to look up
./MapUtils.java:     * @param key  the key of the value to look up in that map
./MapUtils.java:     * @param defaultValue  what to return if the value is null or if the
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param map  the map whose value to look up
./MapUtils.java:     * @param key  the key of the value to look up in that map
./MapUtils.java:     * @param defaultValue  what to return if the value is null or if the
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param map  the map whose value to look up
./MapUtils.java:     * @param key  the key of the value to look up in that map
./MapUtils.java:     * @param defaultValue  what to return if the value is null or if the
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param map  the map whose value to look up
./MapUtils.java:     * @param key  the key of the value to look up in that map
./MapUtils.java:     * @param defaultValue  what to return if the value is null or if the
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param map  the map whose value to look up
./MapUtils.java:     * @param key  the key of the value to look up in that map
./MapUtils.java:     * @param defaultValue  what to return if the value is null or if the
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param map  the map to use
./MapUtils.java:     * @param key  the key to look up
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param map  the map to use
./MapUtils.java:     * @param key  the key to look up
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param map  the map to use
./MapUtils.java:     * @param key  the key to look up
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param map  the map to use
./MapUtils.java:     * @param key  the key to look up
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param map  the map to use
./MapUtils.java:     * @param key  the key to look up
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param map  the map to use
./MapUtils.java:     * @param key  the key to look up
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param map  the map to use
./MapUtils.java:     * @param key  the key to look up
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param map  the map to use
./MapUtils.java:     * @param key  the key to look up
./MapUtils.java:     * @param defaultValue  return if the value is null or if the conversion fails
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param map  the map to use
./MapUtils.java:     * @param key  the key to look up
./MapUtils.java:     * @param defaultValue  return if the value is null or if the conversion fails
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param map  the map to use
./MapUtils.java:     * @param key  the key to look up
./MapUtils.java:     * @param defaultValue  return if the value is null or if the conversion fails
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param map  the map to use
./MapUtils.java:     * @param key  the key to look up
./MapUtils.java:     * @param defaultValue  return if the value is null or if the conversion fails
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param map  the map to use
./MapUtils.java:     * @param key  the key to look up
./MapUtils.java:     * @param defaultValue  return if the value is null or if the conversion fails
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param map  the map to use
./MapUtils.java:     * @param key  the key to look up
./MapUtils.java:     * @param defaultValue  return if the value is null or if the conversion fails
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param map  the map to use
./MapUtils.java:     * @param key  the key to look up
./MapUtils.java:     * @param defaultValue  return if the value is null or if the conversion fails
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param <V>  the value type
./MapUtils.java:     * @param map  the map to convert to a Properties object
./MapUtils.java:     * @param resourceBundle  the resource bundle to convert, may not be null
./MapUtils.java:     * @param out  the stream to print to, must not be null
./MapUtils.java:     * @param label  The label to be used, may be <code>null</code>.
./MapUtils.java:     * @param map  The map to print, may be <code>null</code>.
./MapUtils.java:     * @param out  the stream to print to, must not be null
./MapUtils.java:     * @param label  The label to be used, may be <code>null</code>.
./MapUtils.java:     * @param map  The map to print, may be <code>null</code>.
./MapUtils.java:     * @param out  the stream to print to
./MapUtils.java:     * @param label  the label to be used, may be <code>null</code>.
./MapUtils.java:     * @param map  the map to print, may be <code>null</code>.
./MapUtils.java:     * @param lineage  a stack consisting of any maps in which the previous
./MapUtils.java:     * @param debug  flag indicating whether type names should be output.
./MapUtils.java:     * @param out  the stream to indent
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param <V>  the value type
./MapUtils.java:     * @param map  the map to invert, may not be null
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param map  the map to add to, may not be null
./MapUtils.java:     * @param key  the key
./MapUtils.java:     * @param value  the value, null converted to ""
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param <V>  the value type
./MapUtils.java:     * @param map  the map to populate, must not be null
./MapUtils.java:     * @param array  an array to populate from, null ignored
./MapUtils.java:     * @param <K> the key type
./MapUtils.java:     * @param <V> the value type
./MapUtils.java:     * @param map the map, possibly <code>null</code>
./MapUtils.java:     * @param map  the map to check, may be null
./MapUtils.java:     * @param map  the map to check, may be null
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param <V>  the value type
./MapUtils.java:     * @param map  the map to synchronize, must not be null
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param <V>  the value type
./MapUtils.java:     * @param map  the map to make unmodifiable, must not be null
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param <V>  the value type
./MapUtils.java:     * @param map  the map to predicate, must not be null
./MapUtils.java:     * @param keyPred  the predicate for keys, null means no check
./MapUtils.java:     * @param valuePred  the predicate for values, null means no check
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param <V>  the value type
./MapUtils.java:     * @param map  the map to transform, must not be null, typically empty
./MapUtils.java:     * @param keyTransformer  the transformer for the map keys, null means no transformation
./MapUtils.java:     * @param valueTransformer  the transformer for the map values, null means no transformation
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param <V>  the value type
./MapUtils.java:     * @param map  the map whose size to fix, must not be null
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param <V>  the value type
./MapUtils.java:     * @param map  the map to make lazy, must not be null
./MapUtils.java:     * @param factory  the factory for creating new objects, must not be null
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param <V>  the value type
./MapUtils.java:     * @param map  the map to make lazy, must not be null
./MapUtils.java:     * @param transformerFactory  the factory for creating new objects, must not be null
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param <V>  the value type
./MapUtils.java:     * @param map  the map to order, must not be null
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param <V>  the value type
./MapUtils.java:     * @param map  the map to decorate
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param <V>  the value type
./MapUtils.java:     * @param <C>  the collection class type
./MapUtils.java:     * @param map  the map to decorate
./MapUtils.java:     * @param collectionClass  the type of collections to return from the map
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param <V>  the value type
./MapUtils.java:     * @param <C>  the collection class type
./MapUtils.java:     * @param map  the map to decorate
./MapUtils.java:     * @param collectionFactory  a factor which creates collection objects
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param <V>  the value type
./MapUtils.java:     * @param map  the map to synchronize, must not be null
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param <V>  the value type
./MapUtils.java:     * @param map  the sorted map to make unmodifiable, must not be null
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param <V>  the value type
./MapUtils.java:     * @param map  the map to predicate, must not be null
./MapUtils.java:     * @param keyPred  the predicate for keys, null means no check
./MapUtils.java:     * @param valuePred  the predicate for values, null means no check
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param <V>  the value type
./MapUtils.java:     * @param map  the map to transform, must not be null, typically empty
./MapUtils.java:     * @param keyTransformer  the transformer for the map keys, null means no transformation
./MapUtils.java:     * @param valueTransformer  the transformer for the map values, null means no transformation
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param <V>  the value type
./MapUtils.java:     * @param map  the map whose size to fix, must not be null
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param <V>  the value type
./MapUtils.java:     * @param map  the map to make lazy, must not be null
./MapUtils.java:     * @param factory  the factory for creating new objects, must not be null
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param <V>  the value type
./MapUtils.java:     * @param map  the map to make lazy, must not be null
./MapUtils.java:     * @param transformerFactory  the factory for creating new objects, must not be null
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param <V>  the value type
./MapUtils.java:     * @param map the <code>Map</code> to populate.
./MapUtils.java:     * @param elements the <code>Iterable</code> containing the input values for the map.
./MapUtils.java:     * @param keyTransformer the <code>Transformer</code> used to transform the element into a key value
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param <V>  the value type
./MapUtils.java:     * @param <E>  the type of object contained in the {@link Iterable}
./MapUtils.java:     * @param map the <code>Map</code> to populate.
./MapUtils.java:     * @param elements the <code>Iterable</code> containing the input values for the map.
./MapUtils.java:     * @param keyTransformer the <code>Transformer</code> used to transform the element into a key value
./MapUtils.java:     * @param valueTransformer the <code>Transformer</code> used to transform the element into a value
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param <V>  the value type
./MapUtils.java:     * @param map the <code>MultiMap</code> to populate.
./MapUtils.java:     * @param elements the <code>Iterable</code> to use as input values for the map.
./MapUtils.java:     * @param keyTransformer the <code>Transformer</code> used to transform the element into a key value
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param <V>  the value type
./MapUtils.java:     * @param <E>  the type of object contained in the {@link Iterable}
./MapUtils.java:     * @param map the <code>MultiMap</code> to populate.
./MapUtils.java:     * @param elements the <code>Iterable</code> containing the input values for the map.
./MapUtils.java:     * @param keyTransformer the <code>Transformer</code> used to transform the element into a key value
./MapUtils.java:     * @param valueTransformer the <code>Transformer</code> used to transform the element into a value
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param <V>  the value type
./MapUtils.java:     * @param map to wrap if necessary.
./MapUtils.java:     * @param <K>  the key type
./MapUtils.java:     * @param <V>  the value type
./MapUtils.java:     * @param sortedMap to wrap if necessary
./multimap/AbstractMultiValuedMapDecorator.java: * @param <K> the type of key elements
./multimap/AbstractMultiValuedMapDecorator.java: * @param <V> the type of value elements
./multimap/AbstractMultiValuedMapDecorator.java:     * @param map  the map to decorate, must not be null
./multimap/ArrayListValuedHashMap.java:     * @param initialListCapacity  the initial capacity used for value collections
./multimap/ArrayListValuedHashMap.java:     * @param initialMapCapacity  the initial hashmap capacity
./multimap/ArrayListValuedHashMap.java:     * @param initialListCapacity  the initial capacity used for value collections
./multimap/ArrayListValuedHashMap.java:     * @param map a <code>MultiValuedMap</code> to copy into this map
./multimap/ArrayListValuedHashMap.java:     * @param map a <code>Map</code> to copy into this map
./multimap/AbstractListValuedMap.java:     * @param map  the map to wrap, must not be null
./multimap/AbstractListValuedMap.java:     * @param key  the key to retrieve
./multimap/AbstractListValuedMap.java:     * @param key  the key to remove values from
./multimap/TransformedMultiValuedMap.java:     * @param <K> the key type
./multimap/TransformedMultiValuedMap.java:     * @param <V> the value type
./multimap/TransformedMultiValuedMap.java:     * @param map  the MultiValuedMap to decorate, may not be null
./multimap/TransformedMultiValuedMap.java:     * @param keyTransformer  the transformer to use for key conversion, null means no conversion
./multimap/TransformedMultiValuedMap.java:     * @param valueTransformer  the transformer to use for value conversion, null means no conversion
./multimap/TransformedMultiValuedMap.java:     * @param <K> the key type
./multimap/TransformedMultiValuedMap.java:     * @param <V> the value type
./multimap/TransformedMultiValuedMap.java:     * @param map  the MultiValuedMap to decorate, may not be null
./multimap/TransformedMultiValuedMap.java:     * @param keyTransformer  the transformer to use for key conversion, null means no conversion
./multimap/TransformedMultiValuedMap.java:     * @param valueTransformer  the transformer to use for value conversion, null means no conversion
./multimap/TransformedMultiValuedMap.java:     * @param map  the MultiValuedMap to decorate, may not be null
./multimap/TransformedMultiValuedMap.java:     * @param keyTransformer  the transformer to use for key conversion, null means no conversion
./multimap/TransformedMultiValuedMap.java:     * @param valueTransformer  the transformer to use for value conversion, null means no conversion
./multimap/TransformedMultiValuedMap.java:     * @param object  the object to transform
./multimap/TransformedMultiValuedMap.java:     * @param object  the object to transform
./multimap/AbstractMultiValuedMap.java:     * @param map  the map to wrap, must not be null
./multimap/AbstractMultiValuedMap.java:     * @param map the map to wrap
./multimap/AbstractMultiValuedMap.java:     * @param key the key to retrieve
./multimap/AbstractMultiValuedMap.java:     * @param key  the key to remove values from
./multimap/AbstractMultiValuedMap.java:     * @param key the key to remove from
./multimap/AbstractMultiValuedMap.java:     * @param value the value to remove
./multimap/AbstractMultiValuedMap.java:     * @param key the key to store against
./multimap/AbstractMultiValuedMap.java:     * @param value the value to add to the collection at the key
./multimap/AbstractMultiValuedMap.java:     * @param map mappings to be stored in this map, may not be null
./multimap/AbstractMultiValuedMap.java:     * @param map mappings to be stored in this map, may not be null
./multimap/AbstractMultiValuedMap.java:     * @param key the key to store against
./multimap/AbstractMultiValuedMap.java:     * @param values the values to add to the collection at the key, may not be null
./multimap/AbstractMultiValuedMap.java:     * @param out the output stream
./multimap/AbstractMultiValuedMap.java:     * @param in the input stream
./multimap/UnmodifiableMultiValuedMap.java: * @param <K> the type of key elements
./multimap/UnmodifiableMultiValuedMap.java: * @param <V> the type of value elements
./multimap/UnmodifiableMultiValuedMap.java:     * @param <K> the type of key elements
./multimap/UnmodifiableMultiValuedMap.java:     * @param <V> the type of value elements
./multimap/UnmodifiableMultiValuedMap.java:     * @param map  the map to decorate, may not be null
./multimap/UnmodifiableMultiValuedMap.java:     * @param map  the MultiValuedMap to decorate, may not be null
./multimap/HashSetValuedHashMap.java:     * @param initialSetCapacity  the initial capacity used for value collections
./multimap/HashSetValuedHashMap.java:     * @param initialMapCapacity  the initial hashmap capacity
./multimap/HashSetValuedHashMap.java:     * @param initialSetCapacity  the initial capacity used for value collections
./multimap/HashSetValuedHashMap.java:     * @param map a <code>MultiValuedMap</code> to copy into this map
./multimap/HashSetValuedHashMap.java:     * @param map a <code>Map</code> to copy into this map
./multimap/AbstractSetValuedMap.java:     * @param map  the map to wrap, must not be null
./multimap/AbstractSetValuedMap.java:     * @param key  the key to retrieve
./multimap/AbstractSetValuedMap.java:     * @param key the key to remove values from
./MultiMap.java:     * @param key  the key to remove from
./MultiMap.java:     * @param item  the item to remove
./MultiMap.java:     * @param key  the key to retrieve
./MultiMap.java:     * @param value  the value to search for
./MultiMap.java:     * @param key  the key to store against
./MultiMap.java:     * @param value  the value to add to the collection at the key
./MultiMap.java:     * @param key  the key to remove values from
./MultiMapUtils.java:     * @param <K> the type of key in the map
./MultiMapUtils.java:     * @param <V> the type of value in the map
./MultiMapUtils.java:     * @param <K> the type of key in the map
./MultiMapUtils.java:     * @param <V> the type of value in the map
./MultiMapUtils.java:     * @param map  the map, may be null
./MultiMapUtils.java:     * @param map  the map to check, may be null
./MultiMapUtils.java:     * @param <K> the key type
./MultiMapUtils.java:     * @param <V> the value type
./MultiMapUtils.java:     * @param map  the {@link MultiValuedMap} to use
./MultiMapUtils.java:     * @param key  the key to look up
./MultiMapUtils.java:     * @param <K> the key type
./MultiMapUtils.java:     * @param <V> the value type
./MultiMapUtils.java:     * @param map  the {@link MultiValuedMap} to use
./MultiMapUtils.java:     * @param key  the key to look up
./MultiMapUtils.java:     * @param <K> the key type
./MultiMapUtils.java:     * @param <V> the value type
./MultiMapUtils.java:     * @param map  the {@link MultiValuedMap} to use
./MultiMapUtils.java:     * @param key  the key to look up
./MultiMapUtils.java:     * @param <K> the key type
./MultiMapUtils.java:     * @param <V> the value type
./MultiMapUtils.java:     * @param map  the {@link MultiValuedMap} to use
./MultiMapUtils.java:     * @param key  the key to look up
./MultiMapUtils.java:     * @param <K> the key type
./MultiMapUtils.java:     * @param <V> the value type
./MultiMapUtils.java:     * @param <K> the key type
./MultiMapUtils.java:     * @param <V> the value type
./MultiMapUtils.java:     * @param <K> the key type
./MultiMapUtils.java:     * @param <V> the value type
./MultiMapUtils.java:     * @param map  the {@link MultiValuedMap} to decorate, must not be null
./MultiMapUtils.java:     * @param <K> the key type
./MultiMapUtils.java:     * @param <V> the value type
./MultiMapUtils.java:     * @param map  the {@link MultiValuedMap} to transform, must not be null, typically empty
./MultiMapUtils.java:     * @param keyTransformer  the transformer for the map keys, null means no transformation
./MultiMapUtils.java:     * @param valueTransformer  the transformer for the map values, null means no transformation
./multiset/UnmodifiableMultiSet.java:     * @param <E>  the type of the elements in the multiset
./multiset/UnmodifiableMultiSet.java:     * @param multiset  the multiset to decorate, may not be null
./multiset/UnmodifiableMultiSet.java:     * @param multiset  the multiset to decorate, may not be null
./multiset/UnmodifiableMultiSet.java:     * @param out  the output stream
./multiset/UnmodifiableMultiSet.java:     * @param in  the input stream
./multiset/SynchronizedMultiSet.java:     * @param <E> the type of the elements in the multiset
./multiset/SynchronizedMultiSet.java:     * @param multiset  the multiset to decorate, must not be null
./multiset/SynchronizedMultiSet.java:     * @param multiset  the multiset to decorate, must not be null
./multiset/SynchronizedMultiSet.java:     * @param multiset  the multiset to decorate, must not be null
./multiset/SynchronizedMultiSet.java:     * @param lock  the lock to use, must not be null
./multiset/SynchronizedMultiSet.java:         * @param set  the set to decorate
./multiset/SynchronizedMultiSet.java:         * @param lock  the lock to use, shared with the multiset
./multiset/HashMultiSet.java:     * @param coll  a collection to copy into this multiset
./multiset/PredicatedMultiSet.java:     * @param <E> the type of the elements in the multiset
./multiset/PredicatedMultiSet.java:     * @param multiset  the multiset to decorate, must not be null
./multiset/PredicatedMultiSet.java:     * @param predicate  the predicate to use for validation, must not be null
./multiset/PredicatedMultiSet.java:     * @param multiset  the multiset to decorate, must not be null
./multiset/PredicatedMultiSet.java:     * @param predicate  the predicate to use for validation, must not be null
./multiset/AbstractMapMultiSet.java:     * @param map the map to assign
./multiset/AbstractMapMultiSet.java:     * @param map the map to wrap
./multiset/AbstractMapMultiSet.java:     * @param object the object to search for
./multiset/AbstractMapMultiSet.java:     * @param object the object to search for
./multiset/AbstractMapMultiSet.java:         * @param parent the parent multiset
./multiset/AbstractMapMultiSet.java:         * @param value the initial value
./multiset/AbstractMapMultiSet.java:         * @param iterator  the iterator to decorate
./multiset/AbstractMapMultiSet.java:         * @param parent  the parent multiset
./multiset/AbstractMapMultiSet.java:         * @param iterator  the iterator to decorate
./multiset/AbstractMapMultiSet.java:         * @param parent  the parent multiset
./multiset/AbstractMapMultiSet.java:         * @param parentEntry  the entry to decorate
./multiset/AbstractMapMultiSet.java:     * @param out the output stream
./multiset/AbstractMapMultiSet.java:     * @param in the input stream
./multiset/AbstractMapMultiSet.java:     * @param <T> the type of the array elements
./multiset/AbstractMapMultiSet.java:     * @param array the array to populate
./multiset/AbstractMultiSetDecorator.java:     * @param multiset  the multiset to decorate, must not be null
./multiset/AbstractMultiSet.java:     * @param object the object to search for
./multiset/AbstractMultiSet.java:     * @param object the object to search for
./multiset/AbstractMultiSet.java:         * @param parent the parent multiset
./multiset/AbstractMultiSet.java:         * @param parent  the parent MultiSet
./multiset/AbstractMultiSet.java:         * @param parent  the parent MultiSet
./multiset/AbstractMultiSet.java:     * @param out the output stream
./multiset/AbstractMultiSet.java:     * @param in the input stream
./MultiSet.java: * @param <E> the type held in the multiset
./MultiSet.java:     * @param object  the object to search for
./MultiSet.java:     * @param object  the object to update
./MultiSet.java:     * @param count  the number of occurrences of the object
./MultiSet.java:     * @param object  the object to add
./MultiSet.java:     * @param object  the object to add
./MultiSet.java:     * @param occurrences  the number of occurrences to add, may be zero,
./MultiSet.java:     * @param object  the object to remove
./MultiSet.java:     * @param object  the object to remove
./MultiSet.java:     * @param occurrences  the number of occurrences to remove, may be zero,
./MultiSet.java:     * @param coll  the collection to check against
./MultiSet.java:     * @param coll  the collection of elements to remove
./MultiSet.java:     * @param coll  the collection of elements to retain
./MultiSet.java:     * @param obj  the object to compare to
./MultiSet.java:     * @param <E>  the element type
./MultiSet.java:         * @param o object to be compared for equality with this multiset entry
./MultiSetUtils.java:     * @param <E> the element type
./MultiSetUtils.java:     * @param multiset the multiset to synchronize, must not be null
./MultiSetUtils.java:     * @param <E> the element type
./MultiSetUtils.java:     * @param multiset the multiset whose unmodifiable view is to be returned, must not be null
./MultiSetUtils.java:     * @param <E> the element type
./MultiSetUtils.java:     * @param multiset the multiset to predicate, must not be null
./MultiSetUtils.java:     * @param predicate the predicate for the multiset, must not be null
./MultiSetUtils.java:     * @param <E> the element type
./MultiValuedMap.java:     * @param key  key whose presence in this map is to be tested
./MultiValuedMap.java:     * @param value  the value to search for
./MultiValuedMap.java:     * @param key  the key to search for
./MultiValuedMap.java:     * @param value  the value to search for
./MultiValuedMap.java:     * @param key  the key to retrieve
./MultiValuedMap.java:     * @param key  the key to store against
./MultiValuedMap.java:     * @param value  the value to add to the collection at the key
./MultiValuedMap.java:     * @param key  the key to store against
./MultiValuedMap.java:     * @param values  the values to add to the collection at the key, may not be null
./MultiValuedMap.java:     * @param map  mappings to be stored in this map, may not be null
./MultiValuedMap.java:     * @param map  mappings to be stored in this map, may not be null
./MultiValuedMap.java:     * @param key  the key to remove values from
./MultiValuedMap.java:     * @param key  the key to remove from
./MultiValuedMap.java:     * @param item  the item to remove
./OrderedBidiMap.java: * @param <K> the type of the keys in the map
./OrderedBidiMap.java: * @param <V> the type of the values in the map
./OrderedIterator.java: * @param <E> the type to iterate over
./OrderedMapIterator.java: * @param <K> the type of the keys in the map
./OrderedMapIterator.java: * @param <V> the type of the values in the map
./OrderedMap.java: * @param <K> the type of the keys in the map
./OrderedMap.java: * @param <V> the type of the values in the map
./OrderedMap.java:     * @param key  the key to search for next from
./OrderedMap.java:     * @param key  the key to search for previous from
./Predicate.java: * @param <T> the type that the predicate queries
./Predicate.java:     * @param object  the object to evaluate, should not be changed
./PredicateUtils.java:     * @param <T>  the type that the predicate queries
./PredicateUtils.java:     * @param <T>  the type that the predicate queries
./PredicateUtils.java:     * @param <T>  the type that the predicate queries
./PredicateUtils.java:     * @param <T>  the type that the predicate queries
./PredicateUtils.java:     * @param <T>  the type that the predicate queries
./PredicateUtils.java:     * @param <T>  the type that the predicate queries
./PredicateUtils.java:     * @param value  the value to compare against
./PredicateUtils.java:     * @param <T>  the type that the predicate queries
./PredicateUtils.java:     * @param value  the value to compare against
./PredicateUtils.java:     * @param type  the type to check for, may not be null
./PredicateUtils.java:     * @param <T>  the type that the predicate queries
./PredicateUtils.java:     * @param <T>  the type that the predicate queries
./PredicateUtils.java:     * @param methodName  the method name to call on the input object, may not be null
./PredicateUtils.java:     * @param <T>  the type that the predicate queries
./PredicateUtils.java:     * @param methodName  the method name to call on the input object, may not be null
./PredicateUtils.java:     * @param paramTypes  the parameter types
./PredicateUtils.java:     * @param args  the arguments
./PredicateUtils.java:     * @param <T>  the type that the predicate queries
./PredicateUtils.java:     * @param predicate1  the first predicate, may not be null
./PredicateUtils.java:     * @param predicate2  the second predicate, may not be null
./PredicateUtils.java:     * @param <T>  the type that the predicate queries
./PredicateUtils.java:     * @param predicates  an array of predicates to check, may not be null
./PredicateUtils.java:     * @param <T>  the type that the predicate queries
./PredicateUtils.java:     * @param predicates  a collection of predicates to check, may not be null
./PredicateUtils.java:     * @param <T>  the type that the predicate queries
./PredicateUtils.java:     * @param predicate1  the first predicate, may not be null
./PredicateUtils.java:     * @param predicate2  the second predicate, may not be null
./PredicateUtils.java:     * @param <T>  the type that the predicate queries
./PredicateUtils.java:     * @param predicates  an array of predicates to check, may not be null
./PredicateUtils.java:     * @param <T>  the type that the predicate queries
./PredicateUtils.java:     * @param predicates  a collection of predicates to check, may not be null
./PredicateUtils.java:     * @param <T>  the type that the predicate queries
./PredicateUtils.java:     * @param predicate1  the first predicate, may not be null
./PredicateUtils.java:     * @param predicate2  the second predicate, may not be null
./PredicateUtils.java:     * @param <T>  the type that the predicate queries
./PredicateUtils.java:     * @param predicates  an array of predicates to check, may not be null
./PredicateUtils.java:     * @param <T>  the type that the predicate queries
./PredicateUtils.java:     * @param predicates  a collection of predicates to check, may not be null
./PredicateUtils.java:     * @param <T>  the type that the predicate queries
./PredicateUtils.java:     * @param predicate1  the first predicate, may not be null
./PredicateUtils.java:     * @param predicate2  the second predicate, may not be null
./PredicateUtils.java:     * @param <T>  the type that the predicate queries
./PredicateUtils.java:     * @param predicates  an array of predicates to check, may not be null
./PredicateUtils.java:     * @param <T>  the type that the predicate queries
./PredicateUtils.java:     * @param predicates  a collection of predicates to check, may not be null
./PredicateUtils.java:     * @param <T>  the type that the predicate queries
./PredicateUtils.java:     * @param predicate  the predicate to not
./PredicateUtils.java:     * @param <T>  the type that the predicate queries
./PredicateUtils.java:     * @param transformer  the transformer to wrap, may not be null
./PredicateUtils.java:     * @param <T>  the type that the predicate queries
./PredicateUtils.java:     * @param predicate  the predicate to wrap, may not be null
./PredicateUtils.java:     * @param <T>  the type that the predicate queries
./PredicateUtils.java:     * @param predicate  the predicate to wrap, may not be null
./PredicateUtils.java:     * @param <T>  the type that the predicate queries
./PredicateUtils.java:     * @param predicate  the predicate to wrap, may not be null
./PredicateUtils.java:     * @param <T>  the type that the predicate queries
./PredicateUtils.java:     * @param transformer  the transformer to call first
./PredicateUtils.java:     * @param predicate  the predicate to call with the result of the transform
./queue/TransformedQueue.java:     * @param <E> the type of the elements in the queue
./queue/TransformedQueue.java:     * @param queue  the queue to decorate, must not be null
./queue/TransformedQueue.java:     * @param transformer  the transformer to use for conversion, must not be null
./queue/TransformedQueue.java:     * @param <E> the type of the elements in the queue
./queue/TransformedQueue.java:     * @param queue  the queue to decorate, must not be null
./queue/TransformedQueue.java:     * @param transformer  the transformer to use for conversion, must not be null
./queue/TransformedQueue.java:     * @param queue  the queue to decorate, must not be null
./queue/TransformedQueue.java:     * @param transformer  the transformer to use for conversion, must not be null
./queue/UnmodifiableQueue.java:     * @param <E> the type of the elements in the queue
./queue/UnmodifiableQueue.java:     * @param queue  the queue to decorate, must not be null
./queue/UnmodifiableQueue.java:     * @param queue  the queue to decorate, must not be null
./queue/UnmodifiableQueue.java:     * @param out  the output stream
./queue/UnmodifiableQueue.java:     * @param in  the input stream
./queue/AbstractQueueDecorator.java: * @param <E> the type of the elements in the queue
./queue/AbstractQueueDecorator.java:     * @param queue  the queue to decorate, must not be null
./queue/PredicatedQueue.java:     * @param <E> the type of the elements in the queue
./queue/PredicatedQueue.java:     * @param Queue  the queue to decorate, must not be null
./queue/PredicatedQueue.java:     * @param predicate  the predicate to use for validation, must not be null
./queue/PredicatedQueue.java:     * @param queue  the queue to decorate, must not be null
./queue/PredicatedQueue.java:     * @param predicate  the predicate to use for validation, must not be null
./queue/PredicatedQueue.java:     * @param object  the object being added
./queue/CircularFifoQueue.java:     * @param size  the size of the queue (cannot be changed)
./queue/CircularFifoQueue.java:     * @param coll  the collection to copy into the queue, may not be null
./queue/CircularFifoQueue.java:     * @param out  the output stream
./queue/CircularFifoQueue.java:     * @param in  the input stream
./queue/CircularFifoQueue.java:     * @param element  the element to add
./queue/CircularFifoQueue.java:     * @param index the position of the element in the queue
./queue/CircularFifoQueue.java:     * @param element  the element to add
./queue/CircularFifoQueue.java:     * @param index  the index to increment
./queue/CircularFifoQueue.java:     * @param index  the index to decrement
./QueueUtils.java:     * @param <E> the type of the elements in the queue
./QueueUtils.java:     * @param queue  the queue to make unmodifiable, must not be null
./QueueUtils.java:     * @param <E> the type of the elements in the queue
./QueueUtils.java:     * @param queue  the queue to predicate, must not be null
./QueueUtils.java:     * @param predicate  the predicate used to evaluate new elements, must not be null
./QueueUtils.java:     * @param <E> the type of the elements in the queue
./QueueUtils.java:     * @param queue  the queue to predicate, must not be null
./QueueUtils.java:     * @param transformer  the transformer for the queue, must not be null
./QueueUtils.java:     * @param <E> the type of the elements in the queue
./ResettableIterator.java: * @param <E> the type to iterate over
./ResettableListIterator.java: * @param <E> the type to iterate over
./sequence/KeepCommand.java:     * @param object  the object belonging to both sequences (the object is a
./sequence/KeepCommand.java:     * @param visitor  the visitor to be accepted
./sequence/ReplacementsHandler.java:     * @param skipped  number of tokens skipped since the last call (i.e. number of
./sequence/ReplacementsHandler.java:     * @param from  sub-sequence of objects coming from the first sequence
./sequence/ReplacementsHandler.java:     * @param to  sub-sequence of objects coming from the second sequence
./sequence/CommandVisitor.java:     * @param object object to insert (this object comes from the second sequence)
./sequence/CommandVisitor.java:     * @param object object to keep (this object comes from the first sequence)
./sequence/CommandVisitor.java:     * @param object object to delete (this object comes from the first sequence)
./sequence/InsertCommand.java:     * @param object  the object of the second sequence that should be inserted
./sequence/InsertCommand.java:     * @param visitor  the visitor to be accepted
./sequence/SequencesComparator.java:     * @param sequence1  first sequence to be compared
./sequence/SequencesComparator.java:     * @param sequence2  second sequence to be compared
./sequence/SequencesComparator.java:     * @param sequence1  first sequence to be compared
./sequence/SequencesComparator.java:     * @param sequence2  second sequence to be compared
./sequence/SequencesComparator.java:     * @param equator  the equator to use for testing object equality
./sequence/SequencesComparator.java:     * @param start  the value of the start of the snake
./sequence/SequencesComparator.java:     * @param diag  the value of the diagonal of the snake
./sequence/SequencesComparator.java:     * @param end1  the value of the end of the first sequence to be compared
./sequence/SequencesComparator.java:     * @param end2  the value of the end of the second sequence to be compared
./sequence/SequencesComparator.java:     * @param start1  the begin of the first sequence to be compared
./sequence/SequencesComparator.java:     * @param end1  the end of the first sequence to be compared
./sequence/SequencesComparator.java:     * @param start2  the begin of the second sequence to be compared
./sequence/SequencesComparator.java:     * @param end2  the end of the second sequence to be compared
./sequence/SequencesComparator.java:     * @param start1  the begin of the first sequence to be compared
./sequence/SequencesComparator.java:     * @param end1  the end of the first sequence to be compared
./sequence/SequencesComparator.java:     * @param start2  the begin of the second sequence to be compared
./sequence/SequencesComparator.java:     * @param end2  the end of the second sequence to be compared
./sequence/SequencesComparator.java:     * @param script the edited script
./sequence/SequencesComparator.java:         * @param start  start index of the snake
./sequence/SequencesComparator.java:         * @param end  end index of the snake
./sequence/SequencesComparator.java:         * @param diag  diagonal number
./sequence/ReplacementsFinder.java:     * @param handler  handler to call when synchronized sequences are found
./sequence/ReplacementsFinder.java:     * @param object  object to insert
./sequence/ReplacementsFinder.java:     * @param object  synchronization object detected
./sequence/ReplacementsFinder.java:     * @param object  object to delete
./sequence/EditCommand.java:     * @param object  reference to the object associated with this command, this
./sequence/EditCommand.java:     * @param visitor  the visitor to be accepted
./sequence/DeleteCommand.java:     * @param object  the object of the first sequence that should be deleted
./sequence/DeleteCommand.java:     * @param visitor  the visitor to be accepted
./sequence/EditScript.java:     * @param command  command to add
./sequence/EditScript.java:     * @param command  command to add
./sequence/EditScript.java:     * @param command  command to add
./sequence/EditScript.java:     * @param visitor  the visitor that will visit all commands in turn
./set/ListOrderedSet.java:     * @param <E> the element type
./set/ListOrderedSet.java:     * @param set the set to decorate, must be empty and not null
./set/ListOrderedSet.java:     * @param list the list to decorate, must be empty and not null
./set/ListOrderedSet.java:     * @param <E> the element type
./set/ListOrderedSet.java:     * @param set the set to decorate, must not be null
./set/ListOrderedSet.java:     * @param <E> the element type
./set/ListOrderedSet.java:     * @param list the list to decorate, must not be null
./set/ListOrderedSet.java:     * @param set the set to decorate, must not be null
./set/ListOrderedSet.java:     * @param set the set to decorate, must not be null
./set/ListOrderedSet.java:     * @param list the list to decorate, must not be null
./set/ListOrderedSet.java:     * @param index the position of the element in the ordered {@link Set}.
./set/ListOrderedSet.java:     * @param object the element to search for
./set/ListOrderedSet.java:     * @param index the index at which the element is to be inserted
./set/ListOrderedSet.java:     * @param object the element to be inserted
./set/ListOrderedSet.java:     * @param index the position to insert the elements
./set/ListOrderedSet.java:     * @param coll the collection containing the elements to be inserted
./set/ListOrderedSet.java:     * @param index the index of the element to be removed
./set/PredicatedNavigableSet.java:     * @param <E> the element type
./set/PredicatedNavigableSet.java:     * @param set  the set to decorate, must not be null
./set/PredicatedNavigableSet.java:     * @param predicate  the predicate to use for validation, must not be null
./set/PredicatedNavigableSet.java:     * @param set  the set to decorate, must not be null
./set/PredicatedNavigableSet.java:     * @param predicate  the predicate to use for validation, must not be null
./set/TransformedNavigableSet.java:     * @param <E> the element type
./set/TransformedNavigableSet.java:     * @param set  the set to decorate, must not be null
./set/TransformedNavigableSet.java:     * @param transformer  the transformer to use for conversion, must not be null
./set/TransformedNavigableSet.java:     * @param <E> the element type
./set/TransformedNavigableSet.java:     * @param set  the set to decorate, must not be null
./set/TransformedNavigableSet.java:     * @param transformer  the transformer to use for conversion, must not be null
./set/TransformedNavigableSet.java:     * @param set  the set to decorate, must not be null
./set/TransformedNavigableSet.java:     * @param transformer  the transformer to use for conversion, must not be null
./set/UnmodifiableSortedSet.java:     * @param <E> the element type
./set/UnmodifiableSortedSet.java:     * @param set  the set to decorate, must not be null
./set/UnmodifiableSortedSet.java:     * @param set  the set to decorate, must not be null
./set/UnmodifiableSortedSet.java:     * @param out  the output stream
./set/UnmodifiableSortedSet.java:     * @param in  the input stream
./set/AbstractSetDecorator.java: * @param <E> the type of the elements in the set
./set/AbstractSetDecorator.java:     * @param set  the set to decorate, must not be null
./set/TransformedSet.java:     * @param <E> the element type
./set/TransformedSet.java:     * @param set  the set to decorate, must not be null
./set/TransformedSet.java:     * @param transformer  the transformer to use for conversion, must not be null
./set/TransformedSet.java:     * @param <E> the element type
./set/TransformedSet.java:     * @param set  the set to decorate, must not be null
./set/TransformedSet.java:     * @param transformer  the transformer to use for conversion, must not be null
./set/TransformedSet.java:     * @param set  the set to decorate, must not be null
./set/TransformedSet.java:     * @param transformer  the transformer to use for conversion, must not be null
./set/UnmodifiableNavigableSet.java:     * @param <E> the element type
./set/UnmodifiableNavigableSet.java:     * @param set  the set to decorate, must not be null
./set/UnmodifiableNavigableSet.java:     * @param set  the set to decorate, must not be null
./set/UnmodifiableNavigableSet.java:     * @param out  the output stream
./set/UnmodifiableNavigableSet.java:     * @param in  the input stream
./set/PredicatedSortedSet.java:     * @param <E> the element type
./set/PredicatedSortedSet.java:     * @param set  the set to decorate, must not be null
./set/PredicatedSortedSet.java:     * @param predicate  the predicate to use for validation, must not be null
./set/PredicatedSortedSet.java:     * @param set  the set to decorate, must not be null
./set/PredicatedSortedSet.java:     * @param predicate  the predicate to use for validation, must not be null
./set/UnmodifiableSet.java:     * @param <E> the element type
./set/UnmodifiableSet.java:     * @param set  the set to decorate, must not be null
./set/UnmodifiableSet.java:     * @param set  the set to decorate, must not be null
./set/AbstractNavigableSetDecorator.java: * @param <E> the type of the elements in the navigable set
./set/AbstractNavigableSetDecorator.java:     * @param set  the set to decorate, must not be null
./set/AbstractSortedSetDecorator.java: * @param <E> the type of the elements in the sorted set
./set/AbstractSortedSetDecorator.java:     * @param set  the set to decorate, must not be null
./set/MapBackedSet.java:     * @param <E> the element type
./set/MapBackedSet.java:     * @param <V> the dummy value type in the map
./set/MapBackedSet.java:     * @param map  the map to decorate, must not be null
./set/MapBackedSet.java:     * @param <E> the element type
./set/MapBackedSet.java:     * @param <V> the dummy value type in the map
./set/MapBackedSet.java:     * @param map  the map to decorate, must not be null
./set/MapBackedSet.java:     * @param dummyValue  the dummy value to use
./set/MapBackedSet.java:     * @param map  the map to decorate, must not be null
./set/MapBackedSet.java:     * @param dummyValue  the dummy value to use
./set/TransformedSortedSet.java:     * @param <E> the element type
./set/TransformedSortedSet.java:     * @param set  the set to decorate, must not be null
./set/TransformedSortedSet.java:     * @param transformer  the transformer to use for conversion, must not be null
./set/TransformedSortedSet.java:     * @param <E> the element type
./set/TransformedSortedSet.java:     * @param set  the set to decorate, must not be null
./set/TransformedSortedSet.java:     * @param transformer  the transformer to use for conversion, must not be null
./set/TransformedSortedSet.java:     * @param set  the set to decorate, must not be null
./set/TransformedSortedSet.java:     * @param transformer  the transformer to use for conversion, must not be null
./set/CompositeSet.java:     * @param set  the initial set in the composite
./set/CompositeSet.java:     * @param sets  the initial sets in the composite
./set/CompositeSet.java:     * @param obj  the object to search for
./set/CompositeSet.java:     * @param <T>  the type of the elements in the collection
./set/CompositeSet.java:     * @param array  the array to use, populating if possible
./set/CompositeSet.java:     * @param obj  the object to add
./set/CompositeSet.java:     * @param obj  object to be removed
./set/CompositeSet.java:     * @param coll  the collection to check for
./set/CompositeSet.java:     * @param coll  the collection to add
./set/CompositeSet.java:     * @param coll  the collection to remove
./set/CompositeSet.java:     * @param coll  the collection to remove
./set/CompositeSet.java:     * @param mutator  the mutator to use
./set/CompositeSet.java:     * @param set  the set to add
./set/CompositeSet.java:     * @param set1  the first Set to be appended to the composite
./set/CompositeSet.java:     * @param set2  the second Set to be appended to the composite
./set/CompositeSet.java:     * @param sets  the Sets to be appended to the composite
./set/CompositeSet.java:     * @param set  set to be removed
./set/CompositeSet.java:         * @param composite  the CompositeSet being changed
./set/CompositeSet.java:         * @param sets  all of the Set instances in this CompositeSet
./set/CompositeSet.java:         * @param obj  the object being added
./set/CompositeSet.java:         * @param composite  the CompositeSet being changed
./set/CompositeSet.java:         * @param sets  all of the Set instances in this CompositeSet
./set/CompositeSet.java:         * @param coll  the collection being added
./set/CompositeSet.java:         * @param comp  the CompositeSet being modified
./set/CompositeSet.java:         * @param existing  the Set already existing in the composite
./set/CompositeSet.java:         * @param added  the Set being added to the composite
./set/CompositeSet.java:         * @param intersects  the intersection of the existing and added sets
./set/PredicatedSet.java:     * @param <E> the element type
./set/PredicatedSet.java:     * @param set  the set to decorate, must not be null
./set/PredicatedSet.java:     * @param predicate  the predicate to use for validation, must not be null
./set/PredicatedSet.java:     * @param set  the set to decorate, must not be null
./set/PredicatedSet.java:     * @param predicate  the predicate to use for validation, must not be null
./set/AbstractSerializableSetDecorator.java:     * @param set  the list to decorate, must not be null
./set/AbstractSerializableSetDecorator.java:     * @param out  the output stream
./set/AbstractSerializableSetDecorator.java:     * @param in  the input stream
./SetUtils.java:     * @param <E> the element type
./SetUtils.java:     * @param <E> the element type
./SetUtils.java:     * @param <T> the element type
./SetUtils.java:     * @param set the set, possibly <code>null</code>
./SetUtils.java:     * @param set1  the first set, may be null
./SetUtils.java:     * @param set2  the second set, may be null
./SetUtils.java:     * @param <T> the element type
./SetUtils.java:     * @param set  the set to calculate the hash code for, may be null
./SetUtils.java:     * @param <E>  the element type
./SetUtils.java:     * @param <E> the element type
./SetUtils.java:     * @param set  the set to synchronize, must not be null
./SetUtils.java:     * @param <E> the element type
./SetUtils.java:     * @param set  the set to make unmodifiable, must not be null
./SetUtils.java:     * @param <E> the element type
./SetUtils.java:     * @param set  the set to predicate, must not be null
./SetUtils.java:     * @param predicate  the predicate for the set, must not be null
./SetUtils.java:     * @param <E> the element type
./SetUtils.java:     * @param set  the set to transform, must not be null
./SetUtils.java:     * @param transformer  the transformer for the set, must not be null
./SetUtils.java:     * @param <E> the element type
./SetUtils.java:     * @param set  the set to order, must not be null
./SetUtils.java:     * @param <E> the element type
./SetUtils.java:     * @param set  the sorted set to synchronize, must not be null
./SetUtils.java:     * @param <E> the element type
./SetUtils.java:     * @param set  the sorted set to make unmodifiable, must not be null
./SetUtils.java:     * @param <E> the element type
./SetUtils.java:     * @param set  the sorted set to predicate, must not be null
./SetUtils.java:     * @param predicate  the predicate for the sorted set, must not be null
./SetUtils.java:     * @param <E> the element type
./SetUtils.java:     * @param set  the set to transform, must not be null
./SetUtils.java:     * @param transformer  the transformer for the set, must not be null
./SetUtils.java:     * @param <E> the element type
./SetUtils.java:     * @param set  the navigable set to make unmodifiable, must not be null
./SetUtils.java:     * @param <E> the element type
./SetUtils.java:     * @param set  the navigable set to predicate, must not be null
./SetUtils.java:     * @param predicate  the predicate for the navigable set, must not be null
./SetUtils.java:     * @param <E> the element type
./SetUtils.java:     * @param set  the navigable set to transform, must not be null
./SetUtils.java:     * @param transformer  the transformer for the set, must not be null
./SetUtils.java:     * @param <E> the generic type that is able to represent the types contained
./SetUtils.java:     * @param a  the first set, must not be null
./SetUtils.java:     * @param b  the second set, must not be null
./SetUtils.java:     * @param <E> the generic type that is able to represent the types contained
./SetUtils.java:     * @param a  the set to subtract from, must not be null
./SetUtils.java:     * @param b  the set to subtract, must not be null
./SetUtils.java:     * @param <E> the generic type that is able to represent the types contained
./SetUtils.java:     * @param a  the first set, must not be null
./SetUtils.java:     * @param b  the second set, must not be null
./SetUtils.java:     * @param <E> the generic type that is able to represent the types contained
./SetUtils.java:     * @param a  the first set, must not be null
./SetUtils.java:     * @param b  the second set, must not be null
./SetUtils.java:     * @param <E> the element type
./SetUtils.java:         * @param <S> the set type
./SetUtils.java:         * @param set  the set for copying the contents
./SetValuedMap.java:     * @param key  the key to retrieve
./SetValuedMap.java:     * @param key  the key to remove values from
./SortedBag.java: * @param <E> the type to iterate over
./SortedBidiMap.java: * @param <K> the type of the keys in the map
./SortedBidiMap.java: * @param <V> the type of the values in the map
./splitmap/AbstractIterableGetMapDecorator.java:     * @param map the map to decorate, must not be null
./splitmap/TransformedSplitMap.java:     * @param <J>  the input key type
./splitmap/TransformedSplitMap.java:     * @param <K>  the output key type
./splitmap/TransformedSplitMap.java:     * @param <U>  the input value type
./splitmap/TransformedSplitMap.java:     * @param <V>  the output value type
./splitmap/TransformedSplitMap.java:     * @param map the map to decorate, must not be null
./splitmap/TransformedSplitMap.java:     * @param keyTransformer the transformer to use for key conversion, must not be null
./splitmap/TransformedSplitMap.java:     * @param valueTransformer the transformer to use for value conversion, must not be null
./splitmap/TransformedSplitMap.java:     * @param map the map to decorate, must not be null
./splitmap/TransformedSplitMap.java:     * @param keyTransformer the transformer to use for key conversion, must not be null
./splitmap/TransformedSplitMap.java:     * @param valueTransformer the transformer to use for value conversion, must not be null
./splitmap/TransformedSplitMap.java:     * @param out the output stream
./splitmap/TransformedSplitMap.java:     * @param in the input stream
./splitmap/TransformedSplitMap.java:     * @param object the object to transform
./splitmap/TransformedSplitMap.java:     * @param object the object to transform
./splitmap/TransformedSplitMap.java:     * @param map the map to transform
./splitmap/TransformedSplitMap.java:     * @param value the value to transform
./SplitMapUtils.java:     * @param <K> the key type
./SplitMapUtils.java:     * @param <V> the value type
./SplitMapUtils.java:     * @param get to wrap, must not be null
./SplitMapUtils.java:     * @param <K> the key type
./SplitMapUtils.java:     * @param <V> the element type
./SplitMapUtils.java:     * @param put to wrap, must not be null
./Transformer.java: * @param <I> the input type to the transformer
./Transformer.java: * @param <O> the output type from the transformer
./Transformer.java:     * @param input  the object to be transformed, should be left unchanged
./TransformerUtils.java:     * @param <I>  the input type
./TransformerUtils.java:     * @param <O>  the output type
./TransformerUtils.java:     * @param <I>  the input type
./TransformerUtils.java:     * @param <O>  the output type
./TransformerUtils.java:     * @param <T>  the input/output type
./TransformerUtils.java:     * @param <T>  the input/output type
./TransformerUtils.java:     * @param <I>  the input type
./TransformerUtils.java:     * @param <O>  the output type
./TransformerUtils.java:     * @param constantToReturn  the constant object to return each time in the transformer
./TransformerUtils.java:     * @param <T>  the input/output type
./TransformerUtils.java:     * @param closure  the closure to run each time in the transformer, not null
./TransformerUtils.java:     * @param <T>  the input type
./TransformerUtils.java:     * @param predicate  the predicate to run each time in the transformer, not null
./TransformerUtils.java:     * @param <I>  the input type
./TransformerUtils.java:     * @param <O>  the output type
./TransformerUtils.java:     * @param factory  the factory to run each time in the transformer, not null
./TransformerUtils.java:     * @param <T>  the input/output type
./TransformerUtils.java:     * @param transformers  an array of transformers to chain
./TransformerUtils.java:     * @param <T>  the input/output type
./TransformerUtils.java:     * @param transformers  a collection of transformers to chain
./TransformerUtils.java:     * @param <T>  the input / output type
./TransformerUtils.java:     * @param predicate  the predicate to switch on
./TransformerUtils.java:     * @param trueTransformer  the transformer called if the predicate is true
./TransformerUtils.java:     * @param <I>  the input type
./TransformerUtils.java:     * @param <O>  the output type
./TransformerUtils.java:     * @param predicate  the predicate to switch on
./TransformerUtils.java:     * @param trueTransformer  the transformer called if the predicate is true
./TransformerUtils.java:     * @param falseTransformer  the transformer called if the predicate is false
./TransformerUtils.java:     * @param <I>  the input type
./TransformerUtils.java:     * @param <O>  the output type
./TransformerUtils.java:     * @param predicate  the predicate to switch on
./TransformerUtils.java:     * @param trueTransformer  the transformer called if the predicate is true
./TransformerUtils.java:     * @param falseTransformer  the transformer called if the predicate is false
./TransformerUtils.java:     * @param <I>  the input type
./TransformerUtils.java:     * @param <O>  the output type
./TransformerUtils.java:     * @param predicates  an array of predicates to check
./TransformerUtils.java:     * @param transformers  an array of transformers to call
./TransformerUtils.java:     * @param <I>  the input type
./TransformerUtils.java:     * @param <O>  the output type
./TransformerUtils.java:     * @param predicates  an array of predicates to check
./TransformerUtils.java:     * @param transformers  an array of transformers to call
./TransformerUtils.java:     * @param defaultTransformer  the default to call if no predicate matches, null means return null
./TransformerUtils.java:     * @param <I>  the input type
./TransformerUtils.java:     * @param <O>  the output type
./TransformerUtils.java:     * @param predicatesAndTransformers  a map of predicates to transformers
./TransformerUtils.java:     * @param <I>  the input type
./TransformerUtils.java:     * @param <O>  the output type
./TransformerUtils.java:     * @param objectsAndTransformers  a map of objects to transformers
./TransformerUtils.java:     * @param <T>  the output type
./TransformerUtils.java:     * @param <T>  the output type
./TransformerUtils.java:     * @param paramTypes  parameter types for the constructor, can be null
./TransformerUtils.java:     * @param args  the arguments to pass to the constructor, can be null
./TransformerUtils.java:     * @param <I>  the input type
./TransformerUtils.java:     * @param <O>  the output type
./TransformerUtils.java:     * @param map  the map to use to transform the objects
./TransformerUtils.java:     * @param <I>  the input type
./TransformerUtils.java:     * @param <O>  the output type
./TransformerUtils.java:     * @param methodName  the method name to call on the input object, may not be null
./TransformerUtils.java:     * @param <I>  the input type
./TransformerUtils.java:     * @param <O>  the output type
./TransformerUtils.java:     * @param methodName  the name of the method
./TransformerUtils.java:     * @param paramTypes  the parameter types
./TransformerUtils.java:     * @param args  the arguments
./TransformerUtils.java:     * @param <T>  the input type
./trie/AbstractBitwiseTrie.java:     * @param keyAnalyzer  the {@link KeyAnalyzer} to use
./trie/UnmodifiableTrie.java:     * @param <K>  the key type
./trie/UnmodifiableTrie.java:     * @param <V>  the value type
./trie/UnmodifiableTrie.java:     * @param trie  the trie to decorate, must not be null
./trie/UnmodifiableTrie.java:     * @param trie  the trie to decorate, must not be null
./trie/AbstractPatriciaTrie.java:     * @param key  the key to use in the search
./trie/AbstractPatriciaTrie.java:     * @param key  the key to use in the search
./trie/AbstractPatriciaTrie.java:     * @param key  the key to use in the search
./trie/AbstractPatriciaTrie.java:     * @param key  the key to use in the search
./trie/AbstractPatriciaTrie.java:     * @param offsetInBits  the prefix offset
./trie/AbstractPatriciaTrie.java:     * @param lengthInBits  the number of significant prefix bits
./trie/AbstractPatriciaTrie.java:     * @param start  the start entry
./trie/KeyAnalyzer.java:     * @param key  the key
./trie/KeyAnalyzer.java:     * @param key  the key to check, may not be null
./trie/KeyAnalyzer.java:     * @param bitIndex  the bit index to check
./trie/KeyAnalyzer.java:     * @param lengthInBits  the maximum key length in bits to check
./trie/KeyAnalyzer.java:     * @param key  the key to use
./trie/KeyAnalyzer.java:     * @param offsetInBits  the bit offset in the key
./trie/KeyAnalyzer.java:     * @param lengthInBits  the maximum key length in bits to use
./trie/KeyAnalyzer.java:     * @param other  the other key to use
./trie/KeyAnalyzer.java:     * @param otherOffsetInBits  the bit offset in the other key
./trie/KeyAnalyzer.java:     * @param otherLengthInBits  the maximum key length in bits for the other key
./trie/KeyAnalyzer.java:     * @param prefix  the prefix to check
./trie/KeyAnalyzer.java:     * @param offsetInBits  the bit offset in the key
./trie/KeyAnalyzer.java:     * @param lengthInBits  the maximum key length in bits to use
./trie/KeyAnalyzer.java:     * @param key  the key to check
./Trie.java:     * @param key  the key used in the search
./TrieUtils.java:     * @param <K>  the key type
./TrieUtils.java:     * @param <V>  the value type
./TrieUtils.java:     * @param trie  the trie to make unmodifiable, must not be null
