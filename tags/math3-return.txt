./analysis/UnivariateVectorFunction.java:     * @return the value
./analysis/DifferentiableUnivariateFunction.java:     * @return  the derivative function
./analysis/MultivariateMatrixFunction.java:     * @return function value for the given point
./analysis/MultivariateVectorFunction.java:     * @return function value for the given point
./analysis/BivariateFunction.java:     * @return the value.
./analysis/DifferentiableMultivariateFunction.java:     * @return the partial derivative function with respect to k<sup>th</sup> point coordinate
./analysis/DifferentiableMultivariateFunction.java:     * @return the gradient function
./analysis/interpolation/MicrosphereInterpolatingFunction.java:         * @return the normal vector
./analysis/interpolation/MicrosphereInterpolatingFunction.java:         * @return the illumination.
./analysis/interpolation/MicrosphereInterpolatingFunction.java:         * @return the sample.
./analysis/interpolation/MicrosphereInterpolatingFunction.java:     * @return the interpolated value.
./analysis/interpolation/MicrosphereInterpolatingFunction.java:     * @return the cosine of the angle between {@code v} and {@code w}.
./analysis/interpolation/DividedDifferenceInterpolator.java:     * @return a function which interpolates the dataset.
./analysis/interpolation/DividedDifferenceInterpolator.java:     * @return a fresh copy of the divided difference array.
./analysis/interpolation/BicubicInterpolatingFunction.java:     * @return {@code true} if (x, y) is a valid point.
./analysis/interpolation/BicubicInterpolatingFunction.java:     * @return the index in {@code val} corresponding to the interval
./analysis/interpolation/BicubicInterpolatingFunction.java:     * @return the spline coefficients.
./analysis/interpolation/BicubicInterpolatingFunction.java:     * @return the interpolated value.
./analysis/interpolation/TrivariateGridInterpolator.java:     * @return a function that interpolates the data set.
./analysis/interpolation/UnivariateInterpolator.java:     * @return a function which interpolates the dataset.
./analysis/interpolation/BivariateGridInterpolator.java:     * @return a function which interpolates the dataset.
./analysis/interpolation/PiecewiseBicubicSplineInterpolatingFunction.java:     * @return {@code true} if (x, y) is a valid point.
./analysis/interpolation/PiecewiseBicubicSplineInterpolatingFunction.java:     * @return the index in {@code val} corresponding to the interval containing
./analysis/interpolation/TricubicSplineInterpolatingFunction.java:     * @return the index in {@code val} corresponding to the interval containing {@code c}, or {@code -1}
./analysis/interpolation/TricubicSplineInterpolatingFunction.java:     * @return the spline coefficients.
./analysis/interpolation/TricubicSplineInterpolatingFunction.java:     * @return the interpolated value.
./analysis/interpolation/HermiteInterpolator.java:     * @return interpolation polynomials array
./analysis/interpolation/HermiteInterpolator.java:     * @return interpolated value
./analysis/interpolation/HermiteInterpolator.java:     * @return interpolated value
./analysis/interpolation/HermiteInterpolator.java:     * @return polynomial
./analysis/interpolation/TricubicSplineInterpolator.java:     * @return the next index
./analysis/interpolation/TricubicSplineInterpolator.java:     * @return the previous index
./analysis/interpolation/InterpolatingMicrosphere.java:     * @return a copy of this instance.
./analysis/interpolation/InterpolatingMicrosphere.java:     * @return the number of space dimensions.
./analysis/interpolation/InterpolatingMicrosphere.java:     * @return the number of surface elements of the microspshere.
./analysis/interpolation/InterpolatingMicrosphere.java:     * @return the estimated value at the given {@code point}.
./analysis/interpolation/InterpolatingMicrosphere.java:     * @return the value estimated from the current illumination of the
./analysis/interpolation/InterpolatingMicrosphere.java:         * @return the normal vector.
./analysis/interpolation/InterpolatingMicrosphere.java:         * @return the illumination.
./analysis/interpolation/InterpolatingMicrosphere.java:         * @return the data value.
./analysis/interpolation/SplineInterpolator.java:     * @return a function which interpolates the data set
./analysis/interpolation/BicubicSplineInterpolator.java:     * @return the next index.
./analysis/interpolation/BicubicSplineInterpolator.java:     * @return the previous index.
./analysis/interpolation/TricubicInterpolatingFunction.java:     * @return {@code true} if (x, y, z) is a valid point.
./analysis/interpolation/TricubicInterpolatingFunction.java:     * @return the index in {@code val} corresponding to the interval containing {@code c}, or {@code -1}
./analysis/interpolation/TricubicInterpolatingFunction.java:     * @return the spline coefficients.
./analysis/interpolation/TricubicInterpolatingFunction.java:     * @return the interpolated value.
./analysis/interpolation/InterpolatingMicrosphere2D.java:     * @return a copy of this instance.
./analysis/interpolation/LoessInterpolator.java:     * @return A cubic spline built upon a loess fit to the data at the original abscissae
./analysis/interpolation/LoessInterpolator.java:     * @return the values of the loess fit at corresponding original abscissae.
./analysis/interpolation/LoessInterpolator.java:     * @return values of the loess fit at corresponding original abscissae
./analysis/interpolation/LoessInterpolator.java:     * @return the smallest compliant index.
./analysis/interpolation/LoessInterpolator.java:     * @return <code>(1 - |x|<sup>3</sup>)<sup>3</sup></code> for |x| &lt; 1, 0 otherwise.
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @return {@code true} if (x, y) is a valid point.
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @return the value at point (x, y) of the first partial derivative with
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @return the value at point (x, y) of the first partial derivative with
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @return the value at point (x, y) of the second partial derivative with
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @return the value at point (x, y) of the second partial derivative with
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @return the value at point (x, y) of the second partial cross-derivative.
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @return the value at point (x, y) of the selected partial derivative.
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @return the index in {@code val} corresponding to the interval
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @return the spline coefficients.
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @return the interpolated value.
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @return the partial derivative wrt {@code x}.
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @return the partial derivative wrt {@code y}.
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @return the second partial derivative wrt {@code x}.
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @return the second partial derivative wrt {@code y}.
./analysis/interpolation/BicubicSplineInterpolatingFunction.java:     * @return the second partial cross-derivative.
./analysis/interpolation/MultivariateInterpolator.java:     * @return a function which interpolates the data set
./analysis/interpolation/LinearInterpolator.java:     * @return a function which interpolates the data set
./analysis/interpolation/AkimaSplineInterpolator.java:     * @return a function which interpolates the data set
./analysis/interpolation/AkimaSplineInterpolator.java:     * @return the derivative
./analysis/interpolation/AkimaSplineInterpolator.java:     * @return polynomial that fits the function
./analysis/interpolation/FieldHermiteInterpolator.java:     * @return interpolated value
./analysis/interpolation/FieldHermiteInterpolator.java:     * @return interpolated value and derivatives (value in row 0,
./analysis/interpolation/NevilleInterpolator.java:     * @return a function which interpolates the data set
./analysis/differentiation/MultivariateDifferentiableVectorFunction.java:     * @return function value for the given point
./analysis/differentiation/DerivativeStructure.java:     * @return number of free parameters
./analysis/differentiation/DerivativeStructure.java:     * @return derivation order
./analysis/differentiation/DerivativeStructure.java:     * @return a constant compatible with instance order and number of parameters
./analysis/differentiation/DerivativeStructure.java:     * @return value part of the derivative structure
./analysis/differentiation/DerivativeStructure.java:     * @return partial derivative
./analysis/differentiation/DerivativeStructure.java:     * @return a fresh copy of partial derivatives, in an array sorted according to
./analysis/differentiation/DerivativeStructure.java:     * @return exponent for instance in IEEE754 representation, without bias
./analysis/differentiation/DerivativeStructure.java:     * @return sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)
./analysis/differentiation/DerivativeStructure.java:     * @return f(this)
./analysis/differentiation/DerivativeStructure.java:     * @return a<sup>x</sup>
./analysis/differentiation/DerivativeStructure.java:     * @return base 10 logarithm of the instance
./analysis/differentiation/DerivativeStructure.java:     * @return atan2(y, x)
./analysis/differentiation/DerivativeStructure.java:     *  @return instance converted into degrees
./analysis/differentiation/DerivativeStructure.java:     *  @return instance converted into radians
./analysis/differentiation/DerivativeStructure.java:     * @return value of the Taylor expansion at x + &Delta;x, y + &Delta;y, ...
./analysis/differentiation/DerivativeStructure.java:     * @return true if two derivative structures are equal
./analysis/differentiation/DerivativeStructure.java:     * @return a hash code value for this object
./analysis/differentiation/DerivativeStructure.java:     * @return data transfer object that will be serialized
./analysis/differentiation/DerivativeStructure.java:         * @return replacement {@link DerivativeStructure}
./analysis/differentiation/UnivariateDifferentiableFunction.java:     * @return function result
./analysis/differentiation/SparseGradient.java:     * @return a new instance
./analysis/differentiation/SparseGradient.java:     * @return a new instance
./analysis/differentiation/SparseGradient.java:     * @return number of variables
./analysis/differentiation/SparseGradient.java:     * @return derivative with respect to a particular index variable
./analysis/differentiation/SparseGradient.java:     * @return value of the function.
./analysis/differentiation/SparseGradient.java:     * @return sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)
./analysis/differentiation/SparseGradient.java:     * @return a<sup>x</sup>
./analysis/differentiation/SparseGradient.java:     * @return base 10 logarithm of the instance
./analysis/differentiation/SparseGradient.java:     * @return atan2(y, x)
./analysis/differentiation/SparseGradient.java:     *  @return instance converted into degrees
./analysis/differentiation/SparseGradient.java:     *  @return instance converted into radians
./analysis/differentiation/SparseGradient.java:     * @return value of the Taylor expansion at x + &Delta;x, y + &Delta;y, ...
./analysis/differentiation/SparseGradient.java:     * @return f(this)
./analysis/differentiation/SparseGradient.java:     * @return true if two sparse gradients are equal
./analysis/differentiation/SparseGradient.java:     * @return a hash code value for this object
./analysis/differentiation/UnivariateDifferentiableVectorFunction.java:     * @return the value
./analysis/differentiation/UnivariateMatrixFunctionDifferentiator.java:     * @return differential function
./analysis/differentiation/UnivariateDifferentiableMatrixFunction.java:     * @return the value
./analysis/differentiation/UnivariateVectorFunctionDifferentiator.java:     * @return differential function
./analysis/differentiation/UnivariateFunctionDifferentiator.java:     * @return differential function
./analysis/differentiation/FiniteDifferencesDifferentiator.java:     * @return number of points to use
./analysis/differentiation/FiniteDifferencesDifferentiator.java:     * @return step size
./analysis/differentiation/FiniteDifferencesDifferentiator.java:     * @return value and derivatives at {@code t}
./analysis/differentiation/MultivariateDifferentiableFunction.java:     * @return the function value for the given point.
./analysis/differentiation/DSCompiler.java:     * @return cached rules set
./analysis/differentiation/DSCompiler.java:     * @return sizes array
./analysis/differentiation/DSCompiler.java:     * @return derivatives indirection array
./analysis/differentiation/DSCompiler.java:     * @return lower derivatives indirection array
./analysis/differentiation/DSCompiler.java:     * @return multiplication indirection array
./analysis/differentiation/DSCompiler.java:     * @return multiplication indirection array
./analysis/differentiation/DSCompiler.java:     * @return index of the partial derivative
./analysis/differentiation/DSCompiler.java:     * @return index of the partial derivative
./analysis/differentiation/DSCompiler.java:     * @return index of the partial derivative with the <em>same</em> characteristics
./analysis/differentiation/DSCompiler.java:     * @return orders derivation orders with respect to each parameter
./analysis/differentiation/DSCompiler.java:     * @return number of free parameters
./analysis/differentiation/DSCompiler.java:     * @return derivation order
./analysis/differentiation/DSCompiler.java:     * @return array size required for holding partial derivatives data
./analysis/differentiation/DSCompiler.java:     * @return value of the Taylor expansion at x + &Delta;x, y + &Delta;y, ...
./analysis/UnivariateFunction.java:     * @return the value of the function.
./analysis/ParametricUnivariateFunction.java:     * @return the value.
./analysis/ParametricUnivariateFunction.java:     * @return the value.
./analysis/MultivariateFunction.java:     * @return the function value for the given point.
./analysis/DifferentiableMultivariateVectorFunction.java:     * @return the jacobian function
./analysis/function/Logit.java:         * @return the value of the function.
./analysis/function/Logit.java:         * @return the gradient vector at {@code x}.
./analysis/function/Logit.java:     * @return the value of the logit function at {@code x}.
./analysis/function/HarmonicOscillator.java:         * @return the value of the function.
./analysis/function/HarmonicOscillator.java:         * @return the gradient vector at {@code x}.
./analysis/function/HarmonicOscillator.java:     * @return the value of the harmonic oscillator function at {@code x}.
./analysis/function/Sigmoid.java:         * @return the value of the function.
./analysis/function/Sigmoid.java:         * @return the gradient vector at {@code x}.
./analysis/function/Sigmoid.java:     * @return the value of the sigmoid function at {@code x}.
./analysis/function/Gaussian.java:         * @return the value of the function.
./analysis/function/Gaussian.java:         * @return the gradient vector at {@code x}.
./analysis/function/Gaussian.java:     * @return the value of the Gaussian at {@code x}.
./analysis/function/Logistic.java:         * @return the value of the function.
./analysis/function/Logistic.java:         * @return the gradient vector at {@code x}.
./analysis/function/Logistic.java:     * @return the value of the function.
./analysis/solvers/FieldBracketingNthOrderBrentSolver.java:     * @return maximal order
./analysis/solvers/FieldBracketingNthOrderBrentSolver.java:     * @return the maximal number of function evaluations.
./analysis/solvers/FieldBracketingNthOrderBrentSolver.java:     * @return the number of evaluations of the objective function.
./analysis/solvers/FieldBracketingNthOrderBrentSolver.java:     * @return absolute accuracy
./analysis/solvers/FieldBracketingNthOrderBrentSolver.java:     * @return relative accuracy
./analysis/solvers/FieldBracketingNthOrderBrentSolver.java:     * @return function accuracy
./analysis/solvers/FieldBracketingNthOrderBrentSolver.java:     * @return a value where the function is zero.
./analysis/solvers/FieldBracketingNthOrderBrentSolver.java:     * @return a value where the function is zero.
./analysis/solvers/FieldBracketingNthOrderBrentSolver.java:     * @return guessed root (will be a NaN if two points share the same y)
./analysis/solvers/BaseAbstractUnivariateSolver.java:     * @return the lower end of the search interval.
./analysis/solvers/BaseAbstractUnivariateSolver.java:     * @return the higher end of the search interval.
./analysis/solvers/BaseAbstractUnivariateSolver.java:     * @return the initial guess.
./analysis/solvers/BaseAbstractUnivariateSolver.java:     * @return the objective function value at specified point.
./analysis/solvers/BaseAbstractUnivariateSolver.java:     * @return the root.
./analysis/solvers/BaseAbstractUnivariateSolver.java:     * @return {@code true} if the function values have opposite signs at the
./analysis/solvers/BaseAbstractUnivariateSolver.java:     * @return {@code true} if the arguments form an increasing sequence.
./analysis/solvers/BracketedRealFieldUnivariateSolver.java:     * @return the maximum number of function evaluations.
./analysis/solvers/BracketedRealFieldUnivariateSolver.java:     * @return the number of evaluations of the objective function.
./analysis/solvers/BracketedRealFieldUnivariateSolver.java:     * @return the absolute accuracy.
./analysis/solvers/BracketedRealFieldUnivariateSolver.java:     * @return the relative accuracy.
./analysis/solvers/BracketedRealFieldUnivariateSolver.java:     * @return the function value accuracy.
./analysis/solvers/BracketedRealFieldUnivariateSolver.java:     * @return A value where the function is zero.
./analysis/solvers/BracketedRealFieldUnivariateSolver.java:     * @return A value where the function is zero.
./analysis/solvers/UnivariateSolverUtils.java:     * @return a value where the function is zero.
./analysis/solvers/UnivariateSolverUtils.java:     * @return a value where the function is zero.
./analysis/solvers/UnivariateSolverUtils.java:     * @return a root approximation, on the specified side of the exact root
./analysis/solvers/UnivariateSolverUtils.java:     * @return a two-element array holding a and b.
./analysis/solvers/UnivariateSolverUtils.java:     * @return a two element array holding a and b.
./analysis/solvers/UnivariateSolverUtils.java:     * @return a two element array holding the bracketing values.
./analysis/solvers/UnivariateSolverUtils.java:     * @return the midpoint.
./analysis/solvers/UnivariateSolverUtils.java:     * @return {@code true} if the function values have opposite signs at the
./analysis/solvers/UnivariateSolverUtils.java:     * @return {@code true} if the arguments form an increasing sequence.
./analysis/solvers/BaseUnivariateSolver.java:     * @return the maximum number of function evaluations.
./analysis/solvers/BaseUnivariateSolver.java:     * @return the number of evaluations of the objective function.
./analysis/solvers/BaseUnivariateSolver.java:     * @return the absolute accuracy.
./analysis/solvers/BaseUnivariateSolver.java:     * @return the relative accuracy.
./analysis/solvers/BaseUnivariateSolver.java:     * @return the function value accuracy.
./analysis/solvers/BaseUnivariateSolver.java:     * @return a value where the function is zero.
./analysis/solvers/BaseUnivariateSolver.java:     * @return a value where the function is zero.
./analysis/solvers/BaseUnivariateSolver.java:     * @return a value where the function is zero.
./analysis/solvers/AbstractDifferentiableUnivariateSolver.java:     * @return the objective function value at specified point.
./analysis/solvers/MullerSolver.java:     * @return the point at which the function value is zero.
./analysis/solvers/LaguerreSolver.java:     * @return the point at which the function value is zero.
./analysis/solvers/LaguerreSolver.java:     * @return the full set of complex roots of the polynomial
./analysis/solvers/LaguerreSolver.java:     * @return the full set of complex roots of the polynomial
./analysis/solvers/LaguerreSolver.java:     * @return a complex root of the polynomial
./analysis/solvers/LaguerreSolver.java:     * @return a complex root of the polynomial
./analysis/solvers/LaguerreSolver.java:         * @return {@code true} if z is a real zero.
./analysis/solvers/LaguerreSolver.java:         * @return the point at which the function value is zero.
./analysis/solvers/LaguerreSolver.java:         * @return the point at which the function value is zero.
./analysis/solvers/AbstractPolynomialSolver.java:     * @return the coefficients of the polynomial function.
./analysis/solvers/NewtonSolver.java:     * @return the value where the function is zero.
./analysis/solvers/NewtonRaphsonSolver.java:     * @return the value where the function is zero.
./analysis/solvers/AbstractUnivariateDifferentiableSolver.java:     * @return the objective function value and derivative at specified point.
./analysis/solvers/BrentSolver.java:     * @return the value where the function is zero.
./analysis/solvers/BracketingNthOrderBrentSolver.java:     * @return maximal order
./analysis/solvers/BracketingNthOrderBrentSolver.java:     * @return guessed root (will be a NaN if two points share the same y)
./analysis/solvers/BracketedUnivariateSolver.java:     * @return A value where the function is zero.
./analysis/solvers/BracketedUnivariateSolver.java:     * @return A value where the function is zero.
./analysis/integration/gauss/BaseRuleFactory.java:     * @return a copy of the integration rule.
./analysis/integration/gauss/BaseRuleFactory.java:     * @return the points and weights corresponding to the given order.
./analysis/integration/gauss/BaseRuleFactory.java:     * @return the computed rule.
./analysis/integration/gauss/BaseRuleFactory.java:     * @return points and weights as {@code double}s.
./analysis/integration/gauss/GaussIntegratorFactory.java:     * @return a Gauss-Legendre integrator.
./analysis/integration/gauss/GaussIntegratorFactory.java:     * @return a Gauss-Legendre integrator.
./analysis/integration/gauss/GaussIntegratorFactory.java:     * @return a Gauss-Legendre integrator.
./analysis/integration/gauss/GaussIntegratorFactory.java:     * @return a Gauss-Legendre integrator.
./analysis/integration/gauss/GaussIntegratorFactory.java:     * @return a Gauss-Hermite integrator.
./analysis/integration/gauss/GaussIntegratorFactory.java:     * @return the integration nodes and weights.
./analysis/integration/gauss/GaussIntegratorFactory.java:     * @return the points and weights adapted to the new interval.
./analysis/integration/gauss/GaussIntegrator.java:     * @return the integral of the weighted function.
./analysis/integration/gauss/GaussIntegrator.java:     * @return the order of the integration rule (the number of integration
./analysis/integration/gauss/GaussIntegrator.java:     * @return the integration point.
./analysis/integration/gauss/GaussIntegrator.java:     * @return the weight.
./analysis/integration/LegendreGaussIntegrator.java:     * @return the value of n-th stage integral
./analysis/integration/UnivariateIntegrator.java:     * @return the accuracy
./analysis/integration/UnivariateIntegrator.java:     * @return the accuracy
./analysis/integration/UnivariateIntegrator.java:     * @return the actual min limit
./analysis/integration/UnivariateIntegrator.java:     * @return the actual upper limit
./analysis/integration/UnivariateIntegrator.java:     * @return the value of integral
./analysis/integration/UnivariateIntegrator.java:     * @return number of function evaluations
./analysis/integration/UnivariateIntegrator.java:     * @return number of iterations
./analysis/integration/BaseAbstractUnivariateIntegrator.java:     * @return the lower bound.
./analysis/integration/BaseAbstractUnivariateIntegrator.java:     * @return the upper bound.
./analysis/integration/BaseAbstractUnivariateIntegrator.java:     * @return the objective function value at specified point.
./analysis/integration/BaseAbstractUnivariateIntegrator.java:     * @return the root.
./analysis/integration/MidPointIntegrator.java:     * @return the value of n-th stage integral
./analysis/integration/IterativeLegendreGaussIntegrator.java:     * @return the value of n-th stage integral.
./analysis/integration/TrapezoidIntegrator.java:     * @return the value of n-th stage integral
./analysis/DifferentiableUnivariateVectorFunction.java:     * @return  the derivative function
./analysis/DifferentiableUnivariateMatrixFunction.java:     * @return  the derivative function
./analysis/FunctionUtils.java:     * @return the composite function.
./analysis/FunctionUtils.java:     * @return the composite function.
./analysis/FunctionUtils.java:     * @return the composite function.
./analysis/FunctionUtils.java:     * @return a function that computes the sum of the functions.
./analysis/FunctionUtils.java:     * @return a function that computes the sum of the functions.
./analysis/FunctionUtils.java:     * @return a function that computes the sum of the functions.
./analysis/FunctionUtils.java:     * @return a function that computes the product of the functions.
./analysis/FunctionUtils.java:     * @return a function that computes the product of the functions.
./analysis/FunctionUtils.java:     * @return a function that computes the product of the functions.
./analysis/FunctionUtils.java:     * @return the composite function.
./analysis/FunctionUtils.java:     * @return a collector function.
./analysis/FunctionUtils.java:     * @return a collector function.
./analysis/FunctionUtils.java:     * @return the unary function h(x) = f(fixed, x)
./analysis/FunctionUtils.java:     * @return the unary function h(x) = f(x, fixed)
./analysis/FunctionUtils.java:     * @return the array of samples.
./analysis/FunctionUtils.java:     * @return converted function
./analysis/FunctionUtils.java:     * @return converted function
./analysis/FunctionUtils.java:     * @return converted function
./analysis/FunctionUtils.java:     * @return converted function
./analysis/FunctionUtils.java:     * @return converted function
./analysis/FunctionUtils.java:     * @return converted function
./analysis/TrivariateFunction.java:     * @return the value.
./analysis/polynomials/PolynomialSplineFunction.java:     * @return the value.
./analysis/polynomials/PolynomialSplineFunction.java:     * @return the derivative function.
./analysis/polynomials/PolynomialSplineFunction.java:     * @return the derivative function.
./analysis/polynomials/PolynomialSplineFunction.java:     * @return the number of spline segments.
./analysis/polynomials/PolynomialSplineFunction.java:     * @return the interpolating polynomials.
./analysis/polynomials/PolynomialSplineFunction.java:     * @return the knot points.
./analysis/polynomials/PolynomialSplineFunction.java:     * @return {@code true} if {@code x} is a valid point.
./analysis/polynomials/PolynomialFunctionLagrangeForm.java:     * @return the function value.
./analysis/polynomials/PolynomialFunctionLagrangeForm.java:     * @return the degree of the polynomial
./analysis/polynomials/PolynomialFunctionLagrangeForm.java:     * @return a fresh copy of the interpolating points array
./analysis/polynomials/PolynomialFunctionLagrangeForm.java:     * @return a fresh copy of the interpolating values array
./analysis/polynomials/PolynomialFunctionLagrangeForm.java:     * @return a fresh copy of the coefficients array
./analysis/polynomials/PolynomialFunctionLagrangeForm.java:     * @return the function value.
./analysis/polynomials/PolynomialFunctionLagrangeForm.java:     * @return the function value.
./analysis/polynomials/PolynomialFunctionLagrangeForm.java:     * @return {@code false} if the {@code x} is not sorted in increasing order,
./analysis/polynomials/PolynomialFunction.java:     * @return the value of the polynomial at the given point.
./analysis/polynomials/PolynomialFunction.java:     * @return the degree of the polynomial.
./analysis/polynomials/PolynomialFunction.java:     * @return a fresh copy of the coefficients array.
./analysis/polynomials/PolynomialFunction.java:     * @return the value of the polynomial.
./analysis/polynomials/PolynomialFunction.java:     * @return a new polynomial which is the sum of the instance and {@code p}.
./analysis/polynomials/PolynomialFunction.java:     * @return a new polynomial which is the instance minus {@code p}.
./analysis/polynomials/PolynomialFunction.java:     * @return a new polynomial with all coefficients negated
./analysis/polynomials/PolynomialFunction.java:     * @return a new polynomial equal to this times {@code p}
./analysis/polynomials/PolynomialFunction.java:     * @return the coefficients of the derivative or {@code null} if coefficients has length 1.
./analysis/polynomials/PolynomialFunction.java:     * @return the derivative polynomial.
./analysis/polynomials/PolynomialFunction.java:     * @return the derivative function.
./analysis/polynomials/PolynomialFunction.java:     * @return a string representation of the polynomial.
./analysis/polynomials/PolynomialFunction.java:     * @return a string representation of {@code coeff}.
./analysis/polynomials/PolynomialFunctionNewtonForm.java:     * @return the function value.
./analysis/polynomials/PolynomialFunctionNewtonForm.java:     * @return the degree of the polynomial
./analysis/polynomials/PolynomialFunctionNewtonForm.java:     * @return a fresh copy of coefficients in Newton form formula
./analysis/polynomials/PolynomialFunctionNewtonForm.java:     * @return a fresh copy of the centers array.
./analysis/polynomials/PolynomialFunctionNewtonForm.java:     * @return a fresh copy of the coefficients array.
./analysis/polynomials/PolynomialFunctionNewtonForm.java:     * @return the function value.
./analysis/polynomials/PolynomialsUtils.java:     * @return Chebyshev polynomial of specified degree
./analysis/polynomials/PolynomialsUtils.java:     * @return Hermite polynomial of specified degree
./analysis/polynomials/PolynomialsUtils.java:     * @return Laguerre polynomial of specified degree
./analysis/polynomials/PolynomialsUtils.java:     * @return Legendre polynomial of specified degree
./analysis/polynomials/PolynomialsUtils.java:     * @return Jacobi polynomial of specified degree
./analysis/polynomials/PolynomialsUtils.java:         * @return hash code
./analysis/polynomials/PolynomialsUtils.java:         * @return true if the instance and the other key refer to the same polynomial
./analysis/polynomials/PolynomialsUtils.java:     * @return the coefficients \(b_i\) of the shifted
./analysis/polynomials/PolynomialsUtils.java:     * @return coefficients array
./analysis/polynomials/PolynomialsUtils.java:         * @return an array of three coefficients such that
./analysis/RealFieldUnivariateFunction.java:     * @return the value of the function.
./analysis/UnivariateMatrixFunction.java:     * @return the value
./complex/ComplexUtils.java:     * @return <code>r&middot;e<sup>i&middot;theta</sup></code>
./complex/ComplexUtils.java:     * @return an array of {@code Complex} objects.
./complex/ComplexField.java:     * @return the unique instance
./complex/ComplexField.java:     * @return the singleton instance
./complex/ComplexFormat.java:     * @return available complex format locales.
./complex/ComplexFormat.java:     * @return A formatted number in the form "Re(c) + Im(c)i".
./complex/ComplexFormat.java:     * @return A formatted number.
./complex/ComplexFormat.java:     * @return the value passed in as toAppendTo.
./complex/ComplexFormat.java:     * @return the value passed in as toAppendTo.
./complex/ComplexFormat.java:     * @return the value passed in as toAppendTo.
./complex/ComplexFormat.java:     * @return the imaginaryCharacter.
./complex/ComplexFormat.java:     * @return the imaginaryFormat.
./complex/ComplexFormat.java:     * @return the default complex format.
./complex/ComplexFormat.java:     * @return the complex format specific to the given locale.
./complex/ComplexFormat.java:     * @return the complex format specific to the given locale.
./complex/ComplexFormat.java:     * @return the realFormat.
./complex/ComplexFormat.java:     * @return the parsed {@link Complex} object.
./complex/ComplexFormat.java:     * @return the parsed {@link Complex} object.
./complex/Complex.java:     * @return the absolute value.
./complex/Complex.java:     * @return {@code this + addend}.
./complex/Complex.java:     * @return {@code this + addend}.
./complex/Complex.java:     * @return the conjugate of this Complex object.
./complex/Complex.java:     * @return {@code this / divisor}.
./complex/Complex.java:     * @return {@code this / divisor}.
./complex/Complex.java:     * @return {@code true} if the objects are equal, {@code false} if object
./complex/Complex.java:     * @return {@code true} if there are fewer than {@code maxUlps} floating
./complex/Complex.java:     * @return {@code true} if the values are equal.
./complex/Complex.java:     * @return {@code true} if the values are two adjacent floating point
./complex/Complex.java:     * @return {@code true} if the values are two adjacent floating point
./complex/Complex.java:     * @return a hash code value for this object.
./complex/Complex.java:     * @return the imaginary part.
./complex/Complex.java:     * @return the real part.
./complex/Complex.java:     * @return true if either or both parts of this complex number is
./complex/Complex.java:     * @return true if one or both parts of this complex number are infinite
./complex/Complex.java:     * @return {@code this * factor}.
./complex/Complex.java:     * @return {@code this * factor}.
./complex/Complex.java:     * @return {@code this * factor}.
./complex/Complex.java:     * @return {@code -this}.
./complex/Complex.java:     * @return {@code this - subtrahend}.
./complex/Complex.java:     * @return {@code this - subtrahend}.
./complex/Complex.java:     * @return the inverse cosine of this complex number.
./complex/Complex.java:     * @return the inverse sine of this complex number.
./complex/Complex.java:     * @return the inverse tangent of this complex number
./complex/Complex.java:     * @return the cosine of this complex number.
./complex/Complex.java:     * @return the hyperbolic cosine of this complex number.
./complex/Complex.java:     * @return <code><i>e</i><sup>this</sup></code>.
./complex/Complex.java:     * @return the value <code>ln &nbsp; this</code>, the natural logarithm
./complex/Complex.java:     * @return <code> this<sup>x</sup></code>.
./complex/Complex.java:     * @return <code>this<sup>x</sup></code>.
./complex/Complex.java:     * @return the sine of this complex number.
./complex/Complex.java:     * @return the hyperbolic sine of {@code this}.
./complex/Complex.java:     * @return the square root of {@code this}.
./complex/Complex.java:     * @return the square root of <code>1 - this<sup>2</sup></code>.
./complex/Complex.java:     * @return the tangent of {@code this}.
./complex/Complex.java:     * @return the hyperbolic tangent of {@code this}.
./complex/Complex.java:     * @return the argument of {@code this}.
./complex/Complex.java:     * @return a List of all {@code n}-th roots of {@code this}.
./complex/Complex.java:     * @return a new complex number instance.
./complex/Complex.java:     * @return a Complex instance.
./complex/Complex.java:     * @return a Complex instance.
./complex/Complex.java:     * @return A Complex instance with all fields resolved.
./complex/RootsOfUnity.java:     * @return {@code true} if the roots of unity are stored in
./complex/RootsOfUnity.java:     * @return real part of the {@code k}-th {@code n}-th root of unity
./complex/RootsOfUnity.java:     * @return imaginary part of the {@code k}-th {@code n}-th root of unity
./complex/RootsOfUnity.java:     * @return the number of roots of unity currently stored
./complex/Quaternion.java:     * @return the conjugate quaternion
./complex/Quaternion.java:     * @return the product {@code q1} and {@code q2}, in that order.
./complex/Quaternion.java:     * @return the product of this instance with {@code q}, in that order.
./complex/Quaternion.java:     * @return the sum of {@code q1} and {@code q2}.
./complex/Quaternion.java:     * @return the sum of this instance and {@code q}
./complex/Quaternion.java:     * @return the difference between {@code q1} and {@code q2}.
./complex/Quaternion.java:     * @return the difference between this instance and {@code q}.
./complex/Quaternion.java:     * @return the dot product of {@code q1} and {@code q2}.
./complex/Quaternion.java:     * @return the dot product of this instance and {@code q}.
./complex/Quaternion.java:     * @return the norm.
./complex/Quaternion.java:     * @return a normalized quaternion.
./complex/Quaternion.java:     * @return {@code true} if the each of the components are equal
./complex/Quaternion.java:     * @return {@code true} if the norm is 1 within the given tolerance,
./complex/Quaternion.java:     * @return {@code true} if the scalar part of the quaternion is zero.
./complex/Quaternion.java:     * @return the unit quaternion with positive scalar part.
./complex/Quaternion.java:     * @return the inverse.
./complex/Quaternion.java:     * @return the scalar part.
./complex/Quaternion.java:     * @return the first component of the vector part.
./complex/Quaternion.java:     * @return the second component of the vector part.
./complex/Quaternion.java:     * @return the third component of the vector part.
./complex/Quaternion.java:     * @return the scalar part.
./complex/Quaternion.java:     * @return the vector part.
./complex/Quaternion.java:     * @return a scaled quaternion.
./dfp/DfpField.java:     * @return number of radix digits
./dfp/DfpField.java:     * @return current rounding mode
./dfp/DfpField.java:     * @return IEEE 854 status flags
./dfp/DfpField.java:     * @return a new {@link Dfp} with a value of 0
./dfp/DfpField.java:     * @return a new {@link Dfp} with the same value as x
./dfp/DfpField.java:     * @return a new {@link Dfp} with the same value as x
./dfp/DfpField.java:     * @return a new {@link Dfp} with the same value as x
./dfp/DfpField.java:     * @return a new {@link Dfp} with the same value as x
./dfp/DfpField.java:     * @return a new {@link Dfp} with the same value as d
./dfp/DfpField.java:     * @return a new {@link Dfp} parsed from specified string
./dfp/DfpField.java:     * @return a new {@link Dfp} with a non-finite value
./dfp/DfpField.java:     * @return a {@link Dfp} with value 0
./dfp/DfpField.java:     * @return a {@link Dfp} with value 1
./dfp/DfpField.java:     * @return a {@link Dfp} with value 2
./dfp/DfpField.java:     * @return a {@link Dfp} with value &radic;2
./dfp/DfpField.java:     * @return a {@link Dfp} with value &radic;2 split in two pieces
./dfp/DfpField.java:     * @return a {@link Dfp} with value &radic;2 / 2
./dfp/DfpField.java:     * @return a {@link Dfp} with value &radic;3
./dfp/DfpField.java:     * @return a {@link Dfp} with value &radic;3 / 3
./dfp/DfpField.java:     * @return a {@link Dfp} with value &pi;
./dfp/DfpField.java:     * @return a {@link Dfp} with value &pi; split in two pieces
./dfp/DfpField.java:     * @return a {@link Dfp} with value e
./dfp/DfpField.java:     * @return a {@link Dfp} with value e split in two pieces
./dfp/DfpField.java:     * @return a {@link Dfp} with value ln(2)
./dfp/DfpField.java:     * @return a {@link Dfp} with value ln(2) split in two pieces
./dfp/DfpField.java:     * @return a {@link Dfp} with value ln(5)
./dfp/DfpField.java:     * @return a {@link Dfp} with value ln(5) split in two pieces
./dfp/DfpField.java:     * @return a {@link Dfp} with value ln(10)
./dfp/DfpField.java:     * @return an array of two {@link Dfp Dfp} instances which sum equals a
./dfp/DfpField.java:     * @return &pi;
./dfp/DfpField.java:     * @return exp(a)
./dfp/DfpField.java:     * @return ln(a)
./dfp/DfpMath.java:     * @return an array of two {@link Dfp} which sum is a
./dfp/DfpMath.java:     * @return two elements array containing the split number
./dfp/DfpMath.java:     *  @return a &times; b, in split form
./dfp/DfpMath.java:     *  @return a / b, in split form
./dfp/DfpMath.java:     * @return base<sup>a</sup>
./dfp/DfpMath.java:     * @return base<sup>a</sup>
./dfp/DfpMath.java:     * @return e<sup>a</sup>
./dfp/DfpMath.java:     * @return e<sup>a</sup>
./dfp/DfpMath.java:     * @return log(a)
./dfp/DfpMath.java:     * @return log(a)
./dfp/DfpMath.java:     *  @return x<sup>y</sup>
./dfp/DfpMath.java:     * @return sin(a)
./dfp/DfpMath.java:     * @return cos(a)
./dfp/DfpMath.java:     * @return sin(a)
./dfp/DfpMath.java:     * @return cos(a)
./dfp/DfpMath.java:     * @return tan(a)
./dfp/DfpMath.java:     * @return atan(a)
./dfp/DfpMath.java:     * @return atan(a)
./dfp/DfpMath.java:     * @return asin(a)
./dfp/DfpMath.java:     * @return acos(a)
./dfp/BracketingNthOrderBrentSolverDFP.java:     * @return absolute accuracy
./dfp/BracketingNthOrderBrentSolverDFP.java:     * @return relative accuracy
./dfp/BracketingNthOrderBrentSolverDFP.java:     * @return function accuracy
./dfp/BracketingNthOrderBrentSolverDFP.java:     * @return a value where the function is zero.
./dfp/BracketingNthOrderBrentSolverDFP.java:     * @return a value where the function is zero.
./dfp/UnivariateDfpFunction.java:     * @return the value.
./dfp/DfpDec.java:     * @return number of decimal digits this class is going to represent
./dfp/Dfp.java:     * @return a new instance with a value of 0
./dfp/Dfp.java:     * @return a new instance with value x
./dfp/Dfp.java:     * @return a new instance with value x
./dfp/Dfp.java:     * @return a new instance with value x
./dfp/Dfp.java:     * @return a new instance with value x
./dfp/Dfp.java:     * @return a new instance with the same value as d
./dfp/Dfp.java:     * @return a new instance parsed from specified string
./dfp/Dfp.java:     * @return a new instance with a non-finite value
./dfp/Dfp.java:     * @return {@link org.apache.commons.math3.Field Field} (really a {@link DfpField}) to which the instance belongs
./dfp/Dfp.java:     * @return number of radix digits
./dfp/Dfp.java:     * @return a Dfp with value zero
./dfp/Dfp.java:     * @return a Dfp with value one
./dfp/Dfp.java:     * @return a Dfp with value two
./dfp/Dfp.java:     *  @return last digit destroyed by shifting right
./dfp/Dfp.java:     * @return true if instance is less than x and neither are NaN, false otherwise
./dfp/Dfp.java:     * @return true if instance is greater than x and neither are NaN, false otherwise
./dfp/Dfp.java:     * @return true if instance is not NaN and less than or equal to 0, false otherwise
./dfp/Dfp.java:     * @return true if instance is not NaN and less than or equal to 0, false otherwise
./dfp/Dfp.java:     * @return true if instance is not NaN and greater than or equal to 0, false otherwise
./dfp/Dfp.java:     * @return true if instance is not NaN and greater than or equal to 0, false otherwise
./dfp/Dfp.java:     * @return absolute value of instance
./dfp/Dfp.java:     * @return true if instance is infinite
./dfp/Dfp.java:     * @return true if instance is not a number
./dfp/Dfp.java:     * @return true if instance is equal to zero
./dfp/Dfp.java:     * @return true if instance is equal to x and neither are NaN, false otherwise
./dfp/Dfp.java:     * @return a hash code value for this object
./dfp/Dfp.java:     * @return true if instance is not equal to x and neither are NaN, false otherwise
./dfp/Dfp.java:     * @return -1 if a<b, 1 if a>b and 0 if a==b
./dfp/Dfp.java:     *  @return rounded value
./dfp/Dfp.java:     *  @return rounded value
./dfp/Dfp.java:     *  @return rounded value
./dfp/Dfp.java:     * @return this less n &times; d, where n is the integer closest to this/d
./dfp/Dfp.java:     * @return truncated value
./dfp/Dfp.java:     * @return converted number
./dfp/Dfp.java:     *  @return integer base 10000 logarithm
./dfp/Dfp.java:     * @return 10000<sup>e</sup>
./dfp/Dfp.java:     *  @return integer base 10 logarithm
./dfp/Dfp.java:     * @return 10<sup>e</sup>
./dfp/Dfp.java:     *  @return ???
./dfp/Dfp.java:     * @return sum of this and x
./dfp/Dfp.java:     * @return the opposite of this
./dfp/Dfp.java:     * @return difference of this and a
./dfp/Dfp.java:     * @return the IEEE flag if an exception occurred
./dfp/Dfp.java:     * @return product of this and x
./dfp/Dfp.java:     * @return product of this and x
./dfp/Dfp.java:     * @return product of this and x
./dfp/Dfp.java:     * @return quotient of this by divisor
./dfp/Dfp.java:     * @return quotient of this by divisor
./dfp/Dfp.java:     * @return square root of the instance
./dfp/Dfp.java:     * @return string representation of the instance
./dfp/Dfp.java:     * @return string representation of the instance in scientific notation
./dfp/Dfp.java:     * @return string representation of the instance in normal notation
./dfp/Dfp.java:     *  @return The suggested return value from the trap handler
./dfp/Dfp.java:     *  @return the value that should be return by the operation triggering the trap
./dfp/Dfp.java:     * @return type of the number
./dfp/Dfp.java:     * @return a number with the value of x and the sign of y
./dfp/Dfp.java:     * @return closest number next to instance in the direction of x
./dfp/Dfp.java:     * @return a double approximating the instance
./dfp/Dfp.java:     * @return an array of two doubles which sum represent the instance
./dfp/Dfp.java:     *  @return integer base 10 logarithm
./distribution/NormalDistribution.java:     * @return the mean for this distribution.
./distribution/NormalDistribution.java:     * @return the standard deviation for this distribution.
./distribution/NormalDistribution.java:     * @return lower bound of the support (always
./distribution/NormalDistribution.java:     * @return upper bound of the support (always
./distribution/NormalDistribution.java:     * @return {@code true}
./distribution/RealDistribution.java:     * @return the value of the probability mass function at point {@code x}
./distribution/RealDistribution.java:     * @return the value of the probability density function at point {@code x}
./distribution/RealDistribution.java:     * @return the probability that a random variable with this
./distribution/RealDistribution.java:     * @return the probability that a random variable with this distribution
./distribution/RealDistribution.java:     * @return the smallest {@code p}-quantile of this distribution
./distribution/RealDistribution.java:     * @return the mean or {@code Double.NaN} if it is not defined
./distribution/RealDistribution.java:     * @return the variance (possibly {@code Double.POSITIVE_INFINITY} as
./distribution/RealDistribution.java:     * @return lower bound of the support (might be
./distribution/RealDistribution.java:     * @return upper bound of the support (might be
./distribution/RealDistribution.java:     * @return true if the lower bound of support is finite and the density
./distribution/RealDistribution.java:     * @return true if the upper bound of support is finite and the density
./distribution/RealDistribution.java:     * @return whether the support is connected or not
./distribution/RealDistribution.java:     * @return a random value.
./distribution/RealDistribution.java:     * @return an array representing the random sample
./distribution/HypergeometricDistribution.java:     * @return a two element array containing the lower and upper bounds of the
./distribution/HypergeometricDistribution.java:     * @return the lowest domain value of the hypergeometric distribution.
./distribution/HypergeometricDistribution.java:     * @return the number of successes.
./distribution/HypergeometricDistribution.java:     * @return the population size.
./distribution/HypergeometricDistribution.java:     * @return the sample size.
./distribution/HypergeometricDistribution.java:     * @return the highest domain value of the hypergeometric distribution.
./distribution/HypergeometricDistribution.java:     * @return the upper tail CDF for this distribution.
./distribution/HypergeometricDistribution.java:     * @return {@code P(x0 <= X <= x1)}.
./distribution/HypergeometricDistribution.java:     * @return the variance of this distribution
./distribution/HypergeometricDistribution.java:     * @return lower bound of the support
./distribution/HypergeometricDistribution.java:     * @return upper bound of the support
./distribution/HypergeometricDistribution.java:     * @return {@code true}
./distribution/EnumeratedRealDistribution.java:     * @return list of value/probability pairs
./distribution/EnumeratedRealDistribution.java:     * @return the value of the probability mass function at point {@code x}
./distribution/EnumeratedRealDistribution.java:     * @return {@code sum(singletons[i] * probabilities[i])}
./distribution/EnumeratedRealDistribution.java:     * @return {@code sum((singletons[i] - mean) ^ 2 * probabilities[i])}
./distribution/EnumeratedRealDistribution.java:     * @return the lowest value with non-zero probability.
./distribution/EnumeratedRealDistribution.java:     * @return the highest value with non-zero probability.
./distribution/EnumeratedRealDistribution.java:     * @return {@code true}
./distribution/EnumeratedRealDistribution.java:     * @return {@code true}
./distribution/EnumeratedRealDistribution.java:     * @return {@code true}
./distribution/ZipfDistribution.java:     * @return the number of elements
./distribution/ZipfDistribution.java:     * @return the exponent
./distribution/ZipfDistribution.java:     * @return the mean of this distribution
./distribution/ZipfDistribution.java:     * @return the variance of this distribution
./distribution/ZipfDistribution.java:     * @return the n<sup>th</sup> generalized harmonic number.
./distribution/ZipfDistribution.java:     * @return lower bound of the support (always 1)
./distribution/ZipfDistribution.java:     * @return upper bound of the support
./distribution/ZipfDistribution.java:     * @return {@code true}
./distribution/ZipfDistribution.java:         * @return generated integral number in the range [1, numberOfElements]
./distribution/ZipfDistribution.java:         * @return {@code H(x)}
./distribution/ZipfDistribution.java:         * @return h(x)
./distribution/ZipfDistribution.java:         * @return y for which {@code H(y) = x}
./distribution/ZipfDistribution.java:         * @return {@code log(1+x)/x}
./distribution/ZipfDistribution.java:         * @return {@code (exp(x)-1)/x} if x is non-zero, or 1 if x=0
./distribution/WeibullDistribution.java:     * @return the shape parameter, {@code alpha}.
./distribution/WeibullDistribution.java:     * @return the scale parameter, {@code beta}.
./distribution/WeibullDistribution.java:     * @return the solver absolute accuracy.
./distribution/WeibullDistribution.java:     * @return the mean of this distribution
./distribution/WeibullDistribution.java:     * @return the variance of this distribution
./distribution/WeibullDistribution.java:     * @return lower bound of the support (always 0)
./distribution/WeibullDistribution.java:     * @return upper bound of the support (always
./distribution/WeibullDistribution.java:     * @return {@code true}
./distribution/fitting/MultivariateNormalMixtureExpectationMaximization.java:     * @return Multivariate normal mixture model estimated from the data
./distribution/fitting/MultivariateNormalMixtureExpectationMaximization.java:     * @return Log likelihood of data or zero of no data has been fit
./distribution/fitting/MultivariateNormalMixtureExpectationMaximization.java:     * @return fitted model or {@code null} if no fit has been performed yet.
./distribution/fitting/MultivariateNormalMixtureExpectationMaximization.java:         * @return int for sorting
./distribution/fitting/MultivariateNormalMixtureExpectationMaximization.java:         * @return data row array
./distribution/TDistribution.java:     * @return the degrees of freedom.
./distribution/TDistribution.java:     * @return lower bound of the support (always
./distribution/TDistribution.java:     * @return upper bound of the support (always
./distribution/TDistribution.java:     * @return {@code true}
./distribution/BetaDistribution.java:     * @return the first shape parameter.
./distribution/BetaDistribution.java:     * @return the second shape parameter.
./distribution/BetaDistribution.java:     * @return the solver absolute accuracy.
./distribution/BetaDistribution.java:     * @return lower bound of the support (always 0)
./distribution/BetaDistribution.java:     * @return upper bound of the support (always 1)
./distribution/BetaDistribution.java:     * @return {@code true}
./distribution/BetaDistribution.java:         * @return sampled value
./distribution/BetaDistribution.java:         * @return sampled value
./distribution/BetaDistribution.java:         * @return sampled value
./distribution/MixtureMultivariateRealDistribution.java:     * @return the component distributions and associated weights.
./distribution/KolmogorovSmirnovDistribution.java:     * @return the two-sided probability of {@code P(D_n < d)}
./distribution/KolmogorovSmirnovDistribution.java:     * @return the two-sided probability of {@code P(D_n < d)}
./distribution/KolmogorovSmirnovDistribution.java:     * @return the two-sided probability of {@code P(D_n < d)}
./distribution/KolmogorovSmirnovDistribution.java:     * @return the two-sided probability of {@code P(D_n < d)}
./distribution/KolmogorovSmirnovDistribution.java:     * @return the two-sided probability of {@code P(D_n < d)}
./distribution/KolmogorovSmirnovDistribution.java:     * @return H matrix
./distribution/ExponentialDistribution.java:     * @return the mean.
./distribution/ExponentialDistribution.java:     * @return a random value.
./distribution/ExponentialDistribution.java:     * @return lower bound of the support (always 0)
./distribution/ExponentialDistribution.java:     * @return upper bound of the support (always Double.POSITIVE_INFINITY)
./distribution/ExponentialDistribution.java:     * @return {@code true}
./distribution/LogNormalDistribution.java:     * @return the scale parameter
./distribution/LogNormalDistribution.java:     * @return the shape parameter
./distribution/LogNormalDistribution.java:     * @return lower bound of the support (always 0)
./distribution/LogNormalDistribution.java:     * @return upper bound of the support (always
./distribution/LogNormalDistribution.java:     * @return {@code true}
./distribution/MultivariateRealDistribution.java:     * @return the value of the probability density function at point {@code x}.
./distribution/MultivariateRealDistribution.java:     * @return the number of variables.
./distribution/MultivariateRealDistribution.java:     * @return a random value vector.
./distribution/MultivariateRealDistribution.java:     * @return an array representing the random samples.
./distribution/ChiSquaredDistribution.java:     * @return the degrees of freedom.
./distribution/ChiSquaredDistribution.java:     * @return {@code 2 * k}, where {@code k} is the number of degrees of freedom.
./distribution/ChiSquaredDistribution.java:     * @return zero.
./distribution/ChiSquaredDistribution.java:     * @return {@code Double.POSITIVE_INFINITY}.
./distribution/ChiSquaredDistribution.java:     * @return {@code true}
./distribution/TriangularDistribution.java:     * @return the mode {@code c} of this distribution
./distribution/TriangularDistribution.java:     * @return lower bound of the support
./distribution/TriangularDistribution.java:     * @return upper bound of the support
./distribution/TriangularDistribution.java:     * @return {@code true}
./distribution/LevyDistribution.java:     * @return scale parameter of the distribution
./distribution/LevyDistribution.java:     * @return location parameter of the distribution
./distribution/GeometricDistribution.java:     * @return the probability of success.
./distribution/GeometricDistribution.java:     * @return lower bound of the support (always 0)
./distribution/GeometricDistribution.java:     * @return upper bound of the support (always Integer.MAX_VALUE)
./distribution/GeometricDistribution.java:     * @return {@code true}
./distribution/UniformRealDistribution.java:     * @return lower bound of the support
./distribution/UniformRealDistribution.java:     * @return upper bound of the support
./distribution/UniformRealDistribution.java:     * @return {@code true}
./distribution/PascalDistribution.java:     * @return the number of successes.
./distribution/PascalDistribution.java:     * @return the probability of success.
./distribution/PascalDistribution.java:     * @return lower bound of the support (always 0)
./distribution/PascalDistribution.java:     * @return upper bound of the support (always {@code Integer.MAX_VALUE}
./distribution/PascalDistribution.java:     * @return {@code true}
./distribution/CauchyDistribution.java:     * @return the median for this distribution.
./distribution/CauchyDistribution.java:     * @return the scale parameter for this distribution.
./distribution/CauchyDistribution.java:     * @return mean (always Double.NaN)
./distribution/CauchyDistribution.java:     * @return variance (always Double.NaN)
./distribution/CauchyDistribution.java:     * @return lower bound of the support (always Double.NEGATIVE_INFINITY)
./distribution/CauchyDistribution.java:     * @return upper bound of the support (always Double.POSITIVE_INFINITY)
./distribution/CauchyDistribution.java:     * @return {@code true}
./distribution/LogisticDistribution.java:     * @return the location parameter.
./distribution/LogisticDistribution.java:     * @return the scale parameter.
./distribution/EnumeratedDistribution.java:     * @return the value of the probability mass function at {@code x}
./distribution/EnumeratedDistribution.java:     * @return the probability mass function.
./distribution/EnumeratedDistribution.java:     * @return a random value.
./distribution/EnumeratedDistribution.java:     * @return an array representing the random sample.
./distribution/EnumeratedDistribution.java:     * @return an array representing the random sample.
./distribution/AbstractIntegerDistribution.java:     * @return the smallest {@code p}-quantile of this distribution
./distribution/AbstractIntegerDistribution.java:     * @return the cumulative probability
./distribution/AbstractIntegerDistribution.java:     * @return the logarithm of the value of the probability mass function at {@code x}
./distribution/SaddlePointExpansion.java:     * @return the Striling's series error.
./distribution/SaddlePointExpansion.java:     * @return a part of the deviance.
./distribution/SaddlePointExpansion.java:     * @return log(p(x)).
./distribution/EnumeratedIntegerDistribution.java:     * @return list of value/probability pairs
./distribution/EnumeratedIntegerDistribution.java:     * @return {@code sum(singletons[i] * probabilities[i])}
./distribution/EnumeratedIntegerDistribution.java:     * @return {@code sum((singletons[i] - mean) ^ 2 * probabilities[i])}
./distribution/EnumeratedIntegerDistribution.java:     * @return the lowest value with non-zero probability.
./distribution/EnumeratedIntegerDistribution.java:     * @return the highest value with non-zero probability.
./distribution/EnumeratedIntegerDistribution.java:     * @return {@code true}
./distribution/NakagamiDistribution.java:     * @return the shape parameter.
./distribution/NakagamiDistribution.java:     * @return the scale parameter.
./distribution/UniformIntegerDistribution.java:     * @return lower bound of the support
./distribution/UniformIntegerDistribution.java:     * @return upper bound of the support
./distribution/UniformIntegerDistribution.java:     * @return {@code true}
./distribution/LaplaceDistribution.java:     * @return the location parameter.
./distribution/LaplaceDistribution.java:     * @return the scale parameter.
./distribution/PoissonDistribution.java:     * @return the mean for the distribution.
./distribution/PoissonDistribution.java:     * @return the distribution function value calculated using a normal
./distribution/PoissonDistribution.java:     * @return lower bound of the support (always 0)
./distribution/PoissonDistribution.java:     * @return upper bound of the support (always {@code Integer.MAX_VALUE} for
./distribution/PoissonDistribution.java:     * @return {@code true}
./distribution/PoissonDistribution.java:     * @return a random value.
./distribution/PoissonDistribution.java:     * @return the next sample.
./distribution/FDistribution.java:     * @return the numerator degrees of freedom.
./distribution/FDistribution.java:     * @return the denominator degrees of freedom.
./distribution/FDistribution.java:     * @return the variance of this distribution
./distribution/FDistribution.java:     * @return lower bound of the support (always 0)
./distribution/FDistribution.java:     * @return upper bound of the support (always Double.POSITIVE_INFINITY)
./distribution/FDistribution.java:     * @return {@code true}
./distribution/ParetoDistribution.java:     * @return the scale parameter
./distribution/ParetoDistribution.java:     * @return the shape parameter
./distribution/ParetoDistribution.java:     * @return lower bound of the support
./distribution/ParetoDistribution.java:     * @return upper bound of the support (always {@code Double.POSITIVE_INFINITY})
./distribution/ParetoDistribution.java:     * @return {@code true}
./distribution/AbstractRealDistribution.java:     * @return the probability that a random variable with this distribution
./distribution/AbstractRealDistribution.java:     * @return the maximum absolute error in inverse cumulative probability estimates
./distribution/AbstractRealDistribution.java:     * @return zero.
./distribution/AbstractRealDistribution.java:     * @return the logarithm of the value of the probability density function at point {@code x}
./distribution/MultivariateNormalDistribution.java:     * @return the mean vector.
./distribution/MultivariateNormalDistribution.java:     * @return the covariance matrix.
./distribution/MultivariateNormalDistribution.java:     * @return the standard deviations.
./distribution/MultivariateNormalDistribution.java:     * @return the multiplication factor of density calculations.
./distribution/GumbelDistribution.java:     * @return the location parameter.
./distribution/GumbelDistribution.java:     * @return the scale parameter.
./distribution/IntegerDistribution.java:     * @return the value of the probability mass function at {@code x}
./distribution/IntegerDistribution.java:     * @return the probability that a random variable with this
./distribution/IntegerDistribution.java:     * @return the probability that a random variable with this distribution
./distribution/IntegerDistribution.java:     * @return the smallest {@code p}-quantile of this distribution
./distribution/IntegerDistribution.java:     * @return the mean or {@code Double.NaN} if it is not defined
./distribution/IntegerDistribution.java:     * @return the variance (possibly {@code Double.POSITIVE_INFINITY} or
./distribution/IntegerDistribution.java:     * @return lower bound of the support ({@code Integer.MIN_VALUE}
./distribution/IntegerDistribution.java:     * @return upper bound of the support ({@code Integer.MAX_VALUE}
./distribution/IntegerDistribution.java:     * @return whether the support is connected or not
./distribution/IntegerDistribution.java:     * @return a random value
./distribution/IntegerDistribution.java:     * @return an array representing the random sample
./distribution/BinomialDistribution.java:     * @return the number of trials.
./distribution/BinomialDistribution.java:     * @return the probability of success.
./distribution/BinomialDistribution.java:     * @return lower bound of the support (0 or the number of trials)
./distribution/BinomialDistribution.java:     * @return upper bound of the support (number of trials or 0)
./distribution/BinomialDistribution.java:     * @return {@code true}
./distribution/MixtureMultivariateNormalDistribution.java:     * @return the list of components.
./distribution/GammaDistribution.java:     * @return the shape parameter
./distribution/GammaDistribution.java:     * @return the shape parameter
./distribution/GammaDistribution.java:     * @return the scale parameter
./distribution/GammaDistribution.java:     * @return the scale parameter
./distribution/GammaDistribution.java:     * @return {@inheritDoc}
./distribution/GammaDistribution.java:     * @return lower bound of the support (always 0)
./distribution/GammaDistribution.java:     * @return upper bound of the support (always Double.POSITIVE_INFINITY)
./distribution/GammaDistribution.java:     * @return {@code true}
./distribution/GammaDistribution.java:     * @return random value sampled from the Gamma(shape, scale) distribution
./exception/NonMonotonicSequenceException.java:     * @return the order direction.
./exception/NonMonotonicSequenceException.java:     * @return {@code true} is the sequence should be strictly monotonic.
./exception/NonMonotonicSequenceException.java:     * @return the current index.
./exception/NonMonotonicSequenceException.java:     * @return the previous value.
./exception/NumberIsTooLargeException.java:     * @return {@code true} if the maximum is included in the allowed range.
./exception/NumberIsTooLargeException.java:     * @return the maximum.
./exception/MathIllegalNumberException.java:     * @return the requested value.
./exception/util/Localizable.java:     * @return the source string.
./exception/util/Localizable.java:     * @return the localized string or the source string if no
./exception/util/ArgUtils.java:     * @return a list of all the {@code Object} instances contained in
./exception/util/ExceptionContext.java:     * @return a reference to the exception to which the context relates
./exception/util/ExceptionContext.java:     * @return the context value or {@code null} if the key does not exist.
./exception/util/ExceptionContext.java:     * @return the set of keys.
./exception/util/ExceptionContext.java:     * @return the message.
./exception/util/ExceptionContext.java:     * @return the localized message.
./exception/util/ExceptionContext.java:     * @return the localized message.
./exception/util/ExceptionContext.java:     * @return the localized message.
./exception/util/ExceptionContext.java:     * @return a localized message string.
./exception/util/ExceptionContext.java:     * @return a string that mentions which class could not be serialized.
./exception/util/ExceptionContextProvider.java:     * @return a reference to the exception context.
./exception/MaxCountExceededException.java:     * @return the maximum number of evaluations.
./exception/MultiDimensionMismatchException.java:     * @return an array containing the wrong dimensions.
./exception/MultiDimensionMismatchException.java:     * @return an array containing the expected dimensions.
./exception/MultiDimensionMismatchException.java:     * @return the wrong dimension stored at {@code index}.
./exception/MultiDimensionMismatchException.java:     * @return the expected dimension stored at {@code index}.
./exception/OutOfRangeException.java:     * @return the lower bound.
./exception/OutOfRangeException.java:     * @return the higher bound.
./exception/NumberIsTooSmallException.java:     * @return {@code true} if the minimum is included in the allowed range.
./exception/NumberIsTooSmallException.java:     * @return the minimum.
./exception/NoBracketingException.java:     * @return the lower end.
./exception/NoBracketingException.java:     * @return the higher end.
./exception/NoBracketingException.java:     * @return the value at the lower end.
./exception/NoBracketingException.java:     * @return the value at the higher end.
./exception/DimensionMismatchException.java:     * @return the expected dimension.
./FieldElement.java:     * @return a new element representing this + a
./FieldElement.java:     * @return a new element representing this - a
./FieldElement.java:     * @return the opposite of {@code this}.
./FieldElement.java:     * @return A new element representing n &times; this.
./FieldElement.java:     * @return a new element representing this &times; a
./FieldElement.java:     * @return a new element representing this &divide; a
./FieldElement.java:     * @return the inverse of {@code this}.
./FieldElement.java:     * @return {@link Field} to which the instance belongs
./Field.java:     * @return additive identity of the field
./Field.java:     * @return multiplicative identity of the field
./Field.java:     * @return The {@code Class} object that represents the runtime
./filter/KalmanFilter.java:     * @return the state dimension
./filter/KalmanFilter.java:     * @return the measurement vector dimension
./filter/KalmanFilter.java:     * @return the state estimation vector
./filter/KalmanFilter.java:     * @return the state estimation vector
./filter/KalmanFilter.java:     * @return the error covariance matrix
./filter/KalmanFilter.java:     * @return the error covariance matrix
./filter/ProcessModel.java:     * @return the state transition matrix
./filter/ProcessModel.java:     * @return the control matrix
./filter/ProcessModel.java:     * @return the process noise matrix
./filter/ProcessModel.java:     * @return the initial state estimation vector
./filter/ProcessModel.java:     * @return the initial error covariance matrix
./filter/MeasurementModel.java:     * @return the measurement matrix
./filter/MeasurementModel.java:     * @return the measurement noise matrix
./fitting/SimpleCurveFitter.java:     * @return a curve fitter.
./fitting/SimpleCurveFitter.java:     * @return a new instance.
./fitting/SimpleCurveFitter.java:     * @return a new instance.
./fitting/WeightedObservedPoint.java:     * @return the weight of the measurement in the fitting process.
./fitting/WeightedObservedPoint.java:     * @return the abscissa of the point.
./fitting/WeightedObservedPoint.java:     * @return the observed value of the function at x.
./fitting/AbstractCurveFitter.java:     * @return the fitted parameters.
./fitting/AbstractCurveFitter.java:     * @return the optimizer to use for fitting the curve to the
./fitting/AbstractCurveFitter.java:     * @return the least squares problem to use for fitting the curve to the
./fitting/AbstractCurveFitter.java:         * @return the model function values.
./fitting/AbstractCurveFitter.java:         * @return the model function Jacobian.
./fitting/WeightedObservedPoints.java:     * @return the observed points, in the order they were added to this
./fitting/GaussianCurveFitter.java:     * @return a curve fitter.
./fitting/GaussianCurveFitter.java:     * @return a new instance.
./fitting/GaussianCurveFitter.java:     * @return a new instance.
./fitting/GaussianCurveFitter.java:         * @return the guessed parameters, in the following order:
./fitting/GaussianCurveFitter.java:         * @return the input observations, sorted.
./fitting/GaussianCurveFitter.java:         * @return the guessed parameters (normalization factor, mean and
./fitting/GaussianCurveFitter.java:         * @return the index in specified points array.
./fitting/GaussianCurveFitter.java:         * @return the value of X for the specified Y.
./fitting/GaussianCurveFitter.java:         * @return the array containing two points suitable for determining X at
./fitting/GaussianCurveFitter.java:         * @return {@code true} if {@code value} is between {@code boundary1} and
./fitting/HarmonicFitter.java:     * @return the parameters of the harmonic function that best fits the
./fitting/HarmonicFitter.java:     * @return the parameters of the harmonic function that best fits the
./fitting/HarmonicFitter.java:         * @return the guessed parameters, in the following order:
./fitting/HarmonicFitter.java:         * @return the input observations, sorted.
./fitting/HarmonicFitter.java:         * @return the guessed amplitude (at index 0) and circular frequency
./fitting/HarmonicFitter.java:         * @return the guessed phase.
./fitting/leastsquares/MultivariateJacobianFunction.java:     * @return the values and their Jacobian of this vector valued function.
./fitting/leastsquares/GaussNewtonOptimizer.java:         * @return the solution x, to the linear least squares problem Jx=r.
./fitting/leastsquares/GaussNewtonOptimizer.java:     * @return the matrix {@link Decomposition} algoritm.
./fitting/leastsquares/GaussNewtonOptimizer.java:     * @return a new instance.
./fitting/leastsquares/GaussNewtonOptimizer.java:     * @return  the n by n normal matrix and  the n by 1 J<sup>Tr vector.
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @return a new instance.
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @return a new instance.
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @return a new instance.
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @return a new instance.
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @return a new instance.
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @return the parameter's value.
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @return the parameter's value.
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @return the parameter's value.
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @return the parameter's value.
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @return the parameter's value.
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @return the new LM parameter
./fitting/leastsquares/LevenbergMarquardtOptimizer.java:     * @return data used in other methods of this class.
./fitting/leastsquares/LeastSquaresProblem.java:     * @return the initial guess values.
./fitting/leastsquares/LeastSquaresProblem.java:     * @return the number of scalar observations
./fitting/leastsquares/LeastSquaresProblem.java:     * @return the number of scalar parameters
./fitting/leastsquares/LeastSquaresProblem.java:     * @return the model's value and derivative at the given point.
./fitting/leastsquares/LeastSquaresProblem.java:         * @return the covariance matrix.
./fitting/leastsquares/LeastSquaresProblem.java:         * @return an estimate of the standard deviation of the optimized parameters
./fitting/leastsquares/LeastSquaresProblem.java:         * @return the cost.
./fitting/leastsquares/LeastSquaresProblem.java:         * @return the weighted Jacobian: W<sup>1/2</sup> J.
./fitting/leastsquares/LeastSquaresProblem.java:         * @return the cost.
./fitting/leastsquares/LeastSquaresProblem.java:         * @return the weighted residuals: W<sup>1/2</sup> K.
./fitting/leastsquares/LeastSquaresProblem.java:         * @return the point provided to {@link #evaluate(RealVector)}.
./fitting/leastsquares/ParameterValidator.java:     * @return the validated values.
./fitting/leastsquares/LeastSquaresBuilder.java:     * @return a new {@link LeastSquaresProblem}.
./fitting/leastsquares/LeastSquaresBuilder.java:     * @return this
./fitting/leastsquares/LeastSquaresBuilder.java:     * @return this
./fitting/leastsquares/LeastSquaresBuilder.java:     * @return this
./fitting/leastsquares/LeastSquaresBuilder.java:     * @return this
./fitting/leastsquares/LeastSquaresBuilder.java:     * @return this
./fitting/leastsquares/LeastSquaresBuilder.java:     * @return this
./fitting/leastsquares/LeastSquaresBuilder.java:     * @return this
./fitting/leastsquares/LeastSquaresBuilder.java:     * @return this
./fitting/leastsquares/LeastSquaresBuilder.java:     * @return this
./fitting/leastsquares/LeastSquaresBuilder.java:     * @return this
./fitting/leastsquares/LeastSquaresBuilder.java:     * @return this
./fitting/leastsquares/LeastSquaresBuilder.java:     * @return this object.
./fitting/leastsquares/LeastSquaresBuilder.java:     * @return this object.
./fitting/leastsquares/LeastSquaresOptimizer.java:     * @return The optimum.
./fitting/leastsquares/LeastSquaresOptimizer.java:         * @return the number of model (objective) function evaluations
./fitting/leastsquares/LeastSquaresOptimizer.java:         * @return the number of iterations
./fitting/leastsquares/LeastSquaresFactory.java:     * @return the specified General Least Squares problem.
./fitting/leastsquares/LeastSquaresFactory.java:     * @return the specified General Least Squares problem.
./fitting/leastsquares/LeastSquaresFactory.java:     * @return the specified General Least Squares problem.
./fitting/leastsquares/LeastSquaresFactory.java:     * @return the specified General Least Squares problem.
./fitting/leastsquares/LeastSquaresFactory.java:     * @return a new {@link LeastSquaresProblem} with the weights applied. The original
./fitting/leastsquares/LeastSquaresFactory.java:     * @return a new {@link LeastSquaresProblem} with the weights applied. The original
./fitting/leastsquares/LeastSquaresFactory.java:     * @return a least squares problem that tracks evaluations
./fitting/leastsquares/LeastSquaresFactory.java:     * @return a convergence checker that delegates to {@code checker}.
./fitting/leastsquares/LeastSquaresFactory.java:     * @return the square-root of the weight matrix.
./fitting/leastsquares/LeastSquaresFactory.java:     * @return a function that computes both at the same time
./fitting/leastsquares/LeastSquaresFactory.java:     * @return a function that computes both at the same time
./fitting/leastsquares/ValueAndJacobianFunction.java:     * @return the value at the given point.
./fitting/leastsquares/ValueAndJacobianFunction.java:     * @return the Jacobian at the given point.
./fitting/CurveFitter.java:     * @return observed points
./fitting/CurveFitter.java:     * @return the fitted parameters.
./fitting/CurveFitter.java:     * @return the fitted parameters.
./fitting/CurveFitter.java:         * @return the model function values.
./fitting/CurveFitter.java:         * @return the model function Jacobian.
./fitting/PolynomialCurveFitter.java:     * @return a curve fitter.
./fitting/PolynomialCurveFitter.java:     * @return a new instance.
./fitting/PolynomialCurveFitter.java:     * @return a new instance.
./fitting/HarmonicCurveFitter.java:     * @return a curve fitter.
./fitting/HarmonicCurveFitter.java:     * @return a new instance.
./fitting/HarmonicCurveFitter.java:     * @return a new instance.
./fitting/HarmonicCurveFitter.java:         * @return the guessed parameters, in the following order:
./fitting/HarmonicCurveFitter.java:         * @return the input observations, sorted.
./fitting/HarmonicCurveFitter.java:         * @return the guessed amplitude (at index 0) and circular frequency
./fitting/HarmonicCurveFitter.java:         * @return the guessed phase.
./fitting/GaussianFitter.java:     * @return the parameters of the Gaussian function that best fits the
./fitting/GaussianFitter.java:     * @return the parameters of the Gaussian function that best fits the
./fitting/GaussianFitter.java:         * @return the guessed parameters, in the following order:
./fitting/GaussianFitter.java:         * @return the input observations, sorted.
./fitting/GaussianFitter.java:         * @return the guessed parameters (normalization factor, mean and
./fitting/GaussianFitter.java:         * @return the index in specified points array.
./fitting/GaussianFitter.java:         * @return the value of X for the specified Y.
./fitting/GaussianFitter.java:         * @return the array containing two points suitable for determining X at
./fitting/GaussianFitter.java:         * @return {@code true} if {@code value} is between {@code boundary1} and
./fitting/PolynomialFitter.java:     * @return the coefficients of the polynomial that best fits the observed points.
./fitting/PolynomialFitter.java:     * @return the coefficients of the polynomial that best fits the observed points.
./fraction/ProperBigFractionFormat.java:     * @return the value passed in as toAppendTo.
./fraction/ProperBigFractionFormat.java:     * @return the whole format.
./fraction/ProperBigFractionFormat.java:     * @return the parsed {@link BigFraction} object.
./fraction/BigFractionFormat.java:     * @return available complex format locales.
./fraction/BigFractionFormat.java:     * @return A formatted BigFraction in proper form.
./fraction/BigFractionFormat.java:     * @return the default complex format.
./fraction/BigFractionFormat.java:     * @return the complex format specific to the given locale.
./fraction/BigFractionFormat.java:     * @return the default complex format.
./fraction/BigFractionFormat.java:     * @return the complex format specific to the given locale.
./fraction/BigFractionFormat.java:     * @return the value passed in as toAppendTo.
./fraction/BigFractionFormat.java:     * @return the value passed in as toAppendTo.
./fraction/BigFractionFormat.java:     * @return the parsed {@link BigFraction} object.
./fraction/BigFractionFormat.java:     * @return the parsed {@link BigFraction} object.
./fraction/BigFractionFormat.java:     * @return a parsed <code>BigInteger</code> or null if string does not
./fraction/ProperFractionFormat.java:     * @return the value passed in as toAppendTo.
./fraction/ProperFractionFormat.java:     * @return the whole format.
./fraction/ProperFractionFormat.java:     * @return the parsed {@link Fraction} object.
./fraction/BigFractionField.java:     * @return the unique instance
./fraction/BigFractionField.java:     * @return the singleton instance
./fraction/FractionFormat.java:     * @return available complex format locales.
./fraction/FractionFormat.java:     * @return a formatted fraction in proper form.
./fraction/FractionFormat.java:     * @return the default complex format.
./fraction/FractionFormat.java:     * @return the complex format specific to the given locale.
./fraction/FractionFormat.java:     * @return the default complex format.
./fraction/FractionFormat.java:     * @return the complex format specific to the given locale.
./fraction/FractionFormat.java:     * @return the default number format.
./fraction/FractionFormat.java:     * @return the value passed in as toAppendTo.
./fraction/FractionFormat.java:     * @return the value passed in as toAppendTo.
./fraction/FractionFormat.java:     * @return the parsed {@link Fraction} object.
./fraction/FractionFormat.java:     * @return the parsed {@link Fraction} object.
./fraction/FractionField.java:     * @return the unique instance
./fraction/FractionField.java:     * @return the singleton instance
./fraction/AbstractFormat.java:     * @return the default number format.
./fraction/AbstractFormat.java:     * @return the default number format specific to the given locale.
./fraction/AbstractFormat.java:     * @return the denominator format.
./fraction/AbstractFormat.java:     * @return the numerator format.
./fraction/AbstractFormat.java:     * @return the first non-whitespace character.
./fraction/AbstractFormat.java:     * @return a reference to the appended buffer
./fraction/AbstractFormat.java:     * @return a reference to the appended buffer
./fraction/BigFraction.java:     * @return a new fraction instance, with the numerator and denominator
./fraction/BigFraction.java:     * @return the absolute value as a {@link BigFraction}.
./fraction/BigFraction.java:     * @return a <code>BigFraction</code> instance with the resulting values.
./fraction/BigFraction.java:     * @return a <code>BigFraction</code> instance with the resulting values.
./fraction/BigFraction.java:     * @return a <code>BigFraction</code> instance with the resulting values.
./fraction/BigFraction.java:     * @return a {@link BigFraction} instance with the resulting values.
./fraction/BigFraction.java:     * @return the fraction as a <code>BigDecimal</code>.
./fraction/BigFraction.java:     * @return the fraction as a <code>BigDecimal</code>.
./fraction/BigFraction.java:     * @return the fraction as a <code>BigDecimal</code>.
./fraction/BigFraction.java:     * @return -1 if this is less than {@code object}, +1 if this is greater
./fraction/BigFraction.java:     * @return a {@link BigFraction} instance with the resulting values
./fraction/BigFraction.java:     * @return a {@link BigFraction} instance with the resulting values
./fraction/BigFraction.java:     * @return a {@link BigFraction} instance with the resulting values
./fraction/BigFraction.java:     * @return a {@link BigFraction} instance with the resulting values.
./fraction/BigFraction.java:     * @return the fraction as a {@code double}
./fraction/BigFraction.java:     * @return true if two fractions are equal, false if object is
./fraction/BigFraction.java:     * @return the fraction as a {@code float}.
./fraction/BigFraction.java:     * @return the denominator as a <code>BigInteger</code>.
./fraction/BigFraction.java:     * @return the denominator as a {@code int}.
./fraction/BigFraction.java:     * @return the denominator as a {@code long}.
./fraction/BigFraction.java:     * @return the numerator as a <code>BigInteger</code>.
./fraction/BigFraction.java:     * @return the numerator as a {@code int}.
./fraction/BigFraction.java:     * @return the numerator as a {@code long}.
./fraction/BigFraction.java:     * @return a hash code value for this object.
./fraction/BigFraction.java:     * @return the whole number fraction part.
./fraction/BigFraction.java:     * @return the whole number fraction part.
./fraction/BigFraction.java:     * @return a {@code BigFraction} instance with the resulting values.
./fraction/BigFraction.java:     * @return a {@link BigFraction} instance with the resulting values.
./fraction/BigFraction.java:     * @return a {@link BigFraction} instance with the resulting values.
./fraction/BigFraction.java:     * @return a {@link BigFraction} instance with the resulting values.
./fraction/BigFraction.java:     * @return the negation of this fraction.
./fraction/BigFraction.java:     * @return the fraction percentage as a {@code double}.
./fraction/BigFraction.java:     * @return <tt>this<sup>exponent</sup></tt>.
./fraction/BigFraction.java:     * @return <tt>this<sup>exponent</sup></tt> as a <code>BigFraction</code>.
./fraction/BigFraction.java:     * @return <tt>this<sup>exponent</sup></tt> as a <code>BigFraction</code>.
./fraction/BigFraction.java:     * @return <tt>this<sup>exponent</sup></tt>.
./fraction/BigFraction.java:     * @return the reciprocal fraction.
./fraction/BigFraction.java:     * @return the reduced <code>BigFraction</code>. It doesn't change anything if
./fraction/BigFraction.java:     * @return a {@code BigFraction} instance with the resulting values.
./fraction/BigFraction.java:     * @return a {@code BigFraction} instance with the resulting values.
./fraction/BigFraction.java:     * @return a {@code BigFraction} instance with the resulting values.
./fraction/BigFraction.java:     * @return a {@link BigFraction} instance with the resulting values
./fraction/BigFraction.java:     * @return a string representation of the fraction.
./fraction/Fraction.java:     * @return the absolute value.
./fraction/Fraction.java:     * @return -1 if this is less than {@code object}, +1 if this is greater
./fraction/Fraction.java:     * @return the fraction as a {@code double}
./fraction/Fraction.java:     * @return true if two fractions are equal, false if object is
./fraction/Fraction.java:     * @return the fraction as a {@code float}
./fraction/Fraction.java:     * @return the denominator.
./fraction/Fraction.java:     * @return the numerator.
./fraction/Fraction.java:     * @return a hash code value for this object
./fraction/Fraction.java:     * @return the whole number fraction part
./fraction/Fraction.java:     * @return the whole number fraction part
./fraction/Fraction.java:     * @return the negation of this fraction.
./fraction/Fraction.java:     * @return the reciprocal fraction
./fraction/Fraction.java:     * @return a {@code Fraction} instance with the resulting values
./fraction/Fraction.java:     * @return this + i
./fraction/Fraction.java:     * @return a {@code Fraction} instance with the resulting values
./fraction/Fraction.java:     * @return this - i
./fraction/Fraction.java:     * @return a {@code Fraction} instance with the resulting values
./fraction/Fraction.java:     * @return a {@code Fraction} instance with the resulting values
./fraction/Fraction.java:     * @return this * i
./fraction/Fraction.java:     * @return a {@code Fraction} instance with the resulting values
./fraction/Fraction.java:     * @return this * i
./fraction/Fraction.java:     * @return the fraction percentage as a {@code double}.
./fraction/Fraction.java:     * @return a new fraction instance, with the numerator and denominator reduced
./fraction/Fraction.java:     * @return a string representation of the fraction.
./genetics/FixedElapsedTime.java:     * @return <code>true</code> IFF the maximum allowed time period has elapsed
./genetics/NPointCrossover.java:     * @return the number of crossover points
./genetics/NPointCrossover.java:     * @return pair of two children (c1,c2)
./genetics/NPointCrossover.java:     * @return the pair of new chromosomes that resulted from the crossover
./genetics/OnePointCrossover.java:     * @return pair of two children (c1,c2)
./genetics/OnePointCrossover.java:     * @return the pair of new chromosomes that resulted from the crossover.
./genetics/ChromosomePair.java:     * @return the first chromosome.
./genetics/ChromosomePair.java:     * @return the second chromosome.
./genetics/Fitness.java:     * @return fitness
./genetics/BinaryMutation.java:     * @return the mutated chromosome.
./genetics/SelectionPolicy.java:     * @return the selected chromosomes.
./genetics/Population.java:     * @return the current population size.
./genetics/Population.java:     * @return the maximum population size.
./genetics/Population.java:     * @return the beginnings of the next generation.
./genetics/Population.java:     * @return the fittest chromosome.
./genetics/StoppingCondition.java:     * @return <code>true</code> if this stopping condition is met by the given population,
./genetics/RandomKey.java:     * @return list with the sequence values permuted according to the representation
./genetics/RandomKey.java:     * @return true iff chromosomes encode the same permutation
./genetics/RandomKey.java:     * @return representation of a random permutation
./genetics/RandomKey.java:     * @return representation of an identity permutation
./genetics/RandomKey.java:     * @return list representation of the permutation corresponding to the parameters
./genetics/RandomKey.java:     * @return representation of a permutation corresponding to the permutation
./genetics/RandomKey.java:     * @return list of integers from 0 to l-1
./genetics/CrossoverPolicy.java:     * @return the pair of new chromosomes that resulted from the crossover.
./genetics/GeneticAlgorithm.java:     * @return the static random generator shared by GA implementation classes
./genetics/GeneticAlgorithm.java:     * @return the population that satisfies the stopping condition.
./genetics/GeneticAlgorithm.java:     * @return the population for the next generation.
./genetics/GeneticAlgorithm.java:     * @return crossover policy
./genetics/GeneticAlgorithm.java:     * @return crossover rate
./genetics/GeneticAlgorithm.java:     * @return mutation policy
./genetics/GeneticAlgorithm.java:     * @return mutation rate
./genetics/GeneticAlgorithm.java:     * @return selection policy
./genetics/GeneticAlgorithm.java:     * @return number of generations evolved
./genetics/Chromosome.java:     * @return the fitness
./genetics/Chromosome.java:     * @return
./genetics/Chromosome.java:     * @return true if <code>another</code> is equivalent to this chromosome
./genetics/Chromosome.java:     * @return Chromosome with the same representation, or <code>null</code> if no such chromosome exists.
./genetics/AbstractListChromosome.java:     * @return the representation of the chromosome
./genetics/AbstractListChromosome.java:     * @return the length of the chromosome
./genetics/AbstractListChromosome.java:     * @return new instance extended from FixedLengthChromosome with the given arrayRepresentation
./genetics/BinaryChromosome.java:     * @return a random binary array of length <code>length</code>
./genetics/OrderedCrossover.java:     * @return the pair of new chromosomes that resulted from the crossover
./genetics/CycleCrossover.java:     * @return {@code true} if the starting index is chosen randomly, {@code false} otherwise
./genetics/CycleCrossover.java:     * @return the pair of new chromosomes that resulted from the crossover
./genetics/PermutationChromosome.java:     * @return permutation of <code>sequence</code> represented by this permutation
./genetics/ListPopulation.java:     * @return the unmodifiable list of chromosomes
./genetics/ListPopulation.java:     * @return the list of chromosomes
./genetics/ListPopulation.java:     * @return the fittest chromosome.
./genetics/ListPopulation.java:     * @return the maximum population size.
./genetics/ListPopulation.java:     * @return the current population size.
./genetics/ListPopulation.java:     * @return chromosome iterator
./genetics/FixedGenerationCount.java:     * @return <code>true</code> IFF the maximum number of generations has been exceeded
./genetics/FixedGenerationCount.java:     * @return the number of generations that have passed
./genetics/ElitisticListPopulation.java:     * @return the beginnings of the next generation.
./genetics/ElitisticListPopulation.java:     * @return the elitism rate
./genetics/UniformCrossover.java:     * @return the mixing ratio
./genetics/UniformCrossover.java:     * @return the pair of new chromosomes that resulted from the crossover
./genetics/TournamentSelection.java:     * @return the selected chromosomes.
./genetics/TournamentSelection.java:     * @return the selected chromosome.
./genetics/TournamentSelection.java:     * @return arity of the tournament
./genetics/MutationPolicy.java:     * @return the mutated chromosome.
./geometry/spherical/oned/ArcsSet.java:     * @return the built tree
./geometry/spherical/oned/ArcsSet.java:     * @return first leaf node (i.e. node corresponding to the region just after 0.0 radians)
./geometry/spherical/oned/ArcsSet.java:     * @return last leaf node (i.e. node corresponding to the region just before \( 2 \pi \) radians)
./geometry/spherical/oned/ArcsSet.java:     * @return smallest internal node (i.e. first after 0.0 radians, in trigonometric direction),
./geometry/spherical/oned/ArcsSet.java:     * @return true if the node corresponds to the start angle of an arc
./geometry/spherical/oned/ArcsSet.java:     * @return true if the node corresponds to the end angle of an arc
./geometry/spherical/oned/ArcsSet.java:     * @return next internal node in trigonometric order, or null
./geometry/spherical/oned/ArcsSet.java:     * @return previous internal node in trigonometric order, or null
./geometry/spherical/oned/ArcsSet.java:     * @return leaf node just before the internal node
./geometry/spherical/oned/ArcsSet.java:     * @return leaf node just after the internal node
./geometry/spherical/oned/ArcsSet.java:     * @return true is the node has a parent end is before it in trigonometric order
./geometry/spherical/oned/ArcsSet.java:     * @return true is the node has a parent end is after it in trigonometric order
./geometry/spherical/oned/ArcsSet.java:     * @return child node just before the internal node
./geometry/spherical/oned/ArcsSet.java:     * @return child node just after the internal node
./geometry/spherical/oned/ArcsSet.java:     * @return true if the limit angle is direct
./geometry/spherical/oned/ArcsSet.java:     * @return limit angle
./geometry/spherical/oned/ArcsSet.java:     * @return a new ordered list containing {@link Arc Arc} elements
./geometry/spherical/oned/ArcsSet.java:     * @return one of {@link Side#PLUS}, {@link Side#MINUS}, {@link Side#BOTH}
./geometry/spherical/oned/ArcsSet.java:     * @return an object containing both the part of the instance
./geometry/spherical/oned/ArcsSet.java:     * @return split part (may be null)
./geometry/spherical/oned/ArcsSet.java:         * @return part of the arcs set on the plus side of the splitting arc
./geometry/spherical/oned/ArcsSet.java:         * @return part of the arcs set on the minus side of the splitting arc
./geometry/spherical/oned/ArcsSet.java:         * @return {@link Side#PLUS} if only {@link #getPlus()} returns non-null,
./geometry/spherical/oned/LimitAngle.java:     * @return the instance itself
./geometry/spherical/oned/LimitAngle.java:     * @return true if the plus side of the hyperplane is towards
./geometry/spherical/oned/LimitAngle.java:     * @return a new limit angle, with orientation opposite to the instance orientation
./geometry/spherical/oned/LimitAngle.java:     * @return a dummy sub hyperplane
./geometry/spherical/oned/LimitAngle.java:     * @return a region containing the instance (really an {@link
./geometry/spherical/oned/LimitAngle.java:     * @return the hyperplane location
./geometry/spherical/oned/S1Point.java:     * @return azimuthal angle \( \alpha \)
./geometry/spherical/oned/S1Point.java:     * @return normalized vector
./geometry/spherical/oned/S1Point.java:     * @return the angular separation between p1 and p2
./geometry/spherical/oned/S1Point.java:     * @return true if two points on the 2-sphere objects are equal, false if
./geometry/spherical/oned/S1Point.java:     * @return a hash code value for this object
./geometry/spherical/oned/Arc.java:     * @return lower angular bound of the arc,
./geometry/spherical/oned/Arc.java:     * @return upper angular bound of the arc,
./geometry/spherical/oned/Arc.java:     * @return angular size of the arc
./geometry/spherical/oned/Arc.java:     * @return barycenter of the arc
./geometry/spherical/oned/Arc.java:     * @return tolerance below which angles are considered identical
./geometry/spherical/oned/Arc.java:     * @return a code representing the point status: either {@link
./geometry/spherical/oned/Sphere1D.java:     * @return the unique instance
./geometry/spherical/oned/Sphere1D.java:     * @return nothing
./geometry/spherical/oned/Sphere1D.java:     * @return the singleton instance
./geometry/spherical/twod/PropertiesComputer.java:     * @return area
./geometry/spherical/twod/PropertiesComputer.java:     * @return barycenter
./geometry/spherical/twod/PropertiesComputer.java:     * @return area
./geometry/spherical/twod/PropertiesComputer.java:     * @return barycenter
./geometry/spherical/twod/PropertiesComputer.java:     * @return points strictly inside convex cells
./geometry/spherical/twod/Vertex.java:     * @return vertex location
./geometry/spherical/twod/Vertex.java:     * @return circle bound with both the instance and another vertex, or null if the
./geometry/spherical/twod/Vertex.java:     * @return incoming edge
./geometry/spherical/twod/Vertex.java:     * @return outgoing edge
./geometry/spherical/twod/EdgesBuilder.java:     * @return other edge, starting where the previous one ends (they
./geometry/spherical/twod/EdgesBuilder.java:     * @return boundary edges
./geometry/spherical/twod/Circle.java:     * @return a new circle, with orientation opposite to the instance orientation
./geometry/spherical/twod/Circle.java:     * @return phase angle of the direction around the circle
./geometry/spherical/twod/Circle.java:     * @return circle point on the sphere
./geometry/spherical/twod/Circle.java:     * @return an arbitrary x axis on the circle
./geometry/spherical/twod/Circle.java:     * @return an arbitrary y axis point on the circle
./geometry/spherical/twod/Circle.java:     * @return pole of the circle
./geometry/spherical/twod/Circle.java:     * @return arc of the instance that lies inside the other circle
./geometry/spherical/twod/Circle.java:     * @return a region containing the instance (really a {@link
./geometry/spherical/twod/Circle.java:     * @return offset of the direction
./geometry/spherical/twod/Circle.java:     * @return a new transform that can be applied to either {@link
./geometry/spherical/twod/Sphere2D.java:     * @return the unique instance
./geometry/spherical/twod/Sphere2D.java:     * @return the singleton instance
./geometry/spherical/twod/Edge.java:     * @return start vertex
./geometry/spherical/twod/Edge.java:     * @return end vertex
./geometry/spherical/twod/Edge.java:     * @return length of the arc (can be greater than \( \pi \))
./geometry/spherical/twod/Edge.java:     * @return circle supporting this edge
./geometry/spherical/twod/Edge.java:     * @return an intermediate point
./geometry/spherical/twod/Edge.java:     * @return end vertex of the edge ({@code subEnd} if the edge was long enough and really
./geometry/spherical/twod/S2Point.java:     * @return normalized vector
./geometry/spherical/twod/S2Point.java:     * @return azimuthal angle \( \theta \) in the x-y plane
./geometry/spherical/twod/S2Point.java:     * @return polar angle \( \varphi \)
./geometry/spherical/twod/S2Point.java:     * @return normalized vector
./geometry/spherical/twod/S2Point.java:     * @return a new vector which is opposite to the instance
./geometry/spherical/twod/S2Point.java:     * @return the angular separation between p1 and p2
./geometry/spherical/twod/S2Point.java:     * @return true if two points on the 2-sphere objects are equal, false if
./geometry/spherical/twod/S2Point.java:     * @return a hash code value for this object
./geometry/spherical/twod/SphericalPolygonsSet.java:     * @return vertices array
./geometry/spherical/twod/SphericalPolygonsSet.java:     * @return the BSP tree of the input vertices
./geometry/spherical/twod/SphericalPolygonsSet.java:     * @return boundary of the polygon, organized as an unmodifiable list of loops start vertices.
./geometry/spherical/twod/SphericalPolygonsSet.java:     * @return a spherical cap enclosing the polygon
./geometry/spherical/twod/SphericalPolygonsSet.java:     * @return list of points known to be strictly in all inside convex cells
./geometry/spherical/twod/SphericalPolygonsSet.java:     * @return list of points known to be strictly in all outside convex cells
./geometry/VectorFormat.java:     * @return available point/vector format locales.
./geometry/VectorFormat.java:     * @return format prefix.
./geometry/VectorFormat.java:     * @return format suffix.
./geometry/VectorFormat.java:     * @return format separator.
./geometry/VectorFormat.java:     * @return components format.
./geometry/VectorFormat.java:     * @return a formatted string.
./geometry/VectorFormat.java:     * @return the value passed in as toAppendTo.
./geometry/VectorFormat.java:     * @return the value passed in as toAppendTo.
./geometry/VectorFormat.java:     * @return the parsed {@link Vector} object.
./geometry/VectorFormat.java:     * @return the parsed {@link Vector} object.
./geometry/VectorFormat.java:     * @return coordinates array.
./geometry/enclosing/EnclosingBall.java:     * @return center of the ball
./geometry/enclosing/EnclosingBall.java:     * @return radius of the ball (can be negative if the ball is empty)
./geometry/enclosing/EnclosingBall.java:     * @return support points used to define the ball
./geometry/enclosing/EnclosingBall.java:     * @return number of support points used to define the ball
./geometry/enclosing/EnclosingBall.java:     * @return true if the point is within the ball or at boundary
./geometry/enclosing/EnclosingBall.java:     * @return true if the point is within the ball enlarged
./geometry/enclosing/Encloser.java:     * @return enclosing ball
./geometry/enclosing/WelzlEncloser.java:     * @return enclosing ball
./geometry/enclosing/WelzlEncloser.java:     * @return enclosing ball, for the extreme subset only
./geometry/enclosing/WelzlEncloser.java:     * @return farthest point
./geometry/enclosing/SupportBallGenerator.java:     * @return ball whose boundary lies on the prescribed support points
./geometry/Vector.java:     * @return null vector of the vectorial space or origin point of the affine space
./geometry/Vector.java:     * @return L<sub>1</sub> norm for the vector
./geometry/Vector.java:     * @return Euclidean norm for the vector
./geometry/Vector.java:     * @return square of the Euclidean norm for the vector
./geometry/Vector.java:     * @return L<sub>&infin;</sub> norm for the vector
./geometry/Vector.java:     * @return a new vector
./geometry/Vector.java:     * @return a new vector
./geometry/Vector.java:     * @return a new vector
./geometry/Vector.java:     * @return a new vector
./geometry/Vector.java:     * @return a new vector which is opposite to the instance
./geometry/Vector.java:     * @return a new normalized vector
./geometry/Vector.java:     * @return a new vector
./geometry/Vector.java:     * @return  true if any coordinate of this vector is infinite and none are NaN;
./geometry/Vector.java:     * @return the distance between the instance and p according to the L<sub>1</sub> norm
./geometry/Vector.java:     * @return the distance between the instance and p according to the L<sub>2</sub> norm
./geometry/Vector.java:     * @return the distance between the instance and p according to the L<sub>&infin;</sub> norm
./geometry/Vector.java:     * @return the square of the distance between the instance and p
./geometry/Vector.java:     * @return the dot product this.v
./geometry/Vector.java:     * @return a string representation of this vector
./geometry/hull/ConvexHull.java:     * @return vertices of the convex hull
./geometry/hull/ConvexHull.java:     * @return the region enclosed by the convex hull
./geometry/hull/ConvexHullGenerator.java:     * @return the convex hull
./geometry/euclidean/oned/Vector1DFormat.java:     * @return the default 1D vector format.
./geometry/euclidean/oned/Vector1DFormat.java:     * @return the 1D vector format specific to the given locale.
./geometry/euclidean/oned/Euclidean1D.java:     * @return the unique instance
./geometry/euclidean/oned/Euclidean1D.java:     * @return nothing
./geometry/euclidean/oned/Euclidean1D.java:     * @return the singleton instance
./geometry/euclidean/oned/IntervalsSet.java:     * @return the built tree
./geometry/euclidean/oned/IntervalsSet.java:     * @return lowest value belonging to the instance
./geometry/euclidean/oned/IntervalsSet.java:     * @return highest value belonging to the instance
./geometry/euclidean/oned/IntervalsSet.java:     * @return a new point for finite abscissa, null otherwise
./geometry/euclidean/oned/IntervalsSet.java:     * @return a new ordered list containing {@link Interval Interval}
./geometry/euclidean/oned/IntervalsSet.java:     * @return first leaf node
./geometry/euclidean/oned/IntervalsSet.java:     * @return smallest internal node,
./geometry/euclidean/oned/IntervalsSet.java:     * @return true if the node corresponds to the start abscissa of an interval
./geometry/euclidean/oned/IntervalsSet.java:     * @return true if the node corresponds to the end abscissa of an interval
./geometry/euclidean/oned/IntervalsSet.java:     * @return next internal node in ascending order, or null
./geometry/euclidean/oned/IntervalsSet.java:     * @return previous internal node in ascending order, or null
./geometry/euclidean/oned/IntervalsSet.java:     * @return leaf node just before the internal node
./geometry/euclidean/oned/IntervalsSet.java:     * @return leaf node just after the internal node
./geometry/euclidean/oned/IntervalsSet.java:     * @return true is the node has a parent end is before it in ascending order
./geometry/euclidean/oned/IntervalsSet.java:     * @return true is the node has a parent end is after it in ascending order
./geometry/euclidean/oned/IntervalsSet.java:     * @return child node just before the internal node
./geometry/euclidean/oned/IntervalsSet.java:     * @return child node just after the internal node
./geometry/euclidean/oned/IntervalsSet.java:     * @return true if the oriented point is direct
./geometry/euclidean/oned/IntervalsSet.java:     * @return abscissa
./geometry/euclidean/oned/OrientedPoint.java:     * @return the instance itself
./geometry/euclidean/oned/OrientedPoint.java:     * @return offset of the vector
./geometry/euclidean/oned/OrientedPoint.java:     * @return a dummy sub hyperplane
./geometry/euclidean/oned/OrientedPoint.java:     * @return a region containing the instance (really an {@link
./geometry/euclidean/oned/OrientedPoint.java:     * @return the hyperplane location
./geometry/euclidean/oned/OrientedPoint.java:     * @return true if the plus side of the hyperplane is towards
./geometry/euclidean/oned/Vector1D.java:     * @return abscissa of the vector
./geometry/euclidean/oned/Vector1D.java:     * @return the distance between p1 and p2 according to the L<sub>2</sub> norm
./geometry/euclidean/oned/Vector1D.java:     * @return the distance between p1 and p2 according to the L<sub>&infin;</sub> norm
./geometry/euclidean/oned/Vector1D.java:     * @return the square of the distance between p1 and p2
./geometry/euclidean/oned/Vector1D.java:     * @return true if two 1D vector objects are equal, false if
./geometry/euclidean/oned/Vector1D.java:     * @return a hash code value for this object
./geometry/euclidean/oned/Vector1D.java:     * @return a string representation of this vector
./geometry/euclidean/oned/Interval.java:     * @return lower bound of the interval
./geometry/euclidean/oned/Interval.java:     * @return lower bound of the interval
./geometry/euclidean/oned/Interval.java:     * @return upper bound of the interval
./geometry/euclidean/oned/Interval.java:     * @return upper bound of the interval
./geometry/euclidean/oned/Interval.java:     * @return size of the interval
./geometry/euclidean/oned/Interval.java:     * @return length of the interval
./geometry/euclidean/oned/Interval.java:     * @return barycenter of the interval
./geometry/euclidean/oned/Interval.java:     * @return midpoint of the interval
./geometry/euclidean/oned/Interval.java:     * @return a code representing the point status: either {@link
./geometry/euclidean/twod/Vector2DFormat.java:     * @return the default 2D vector format.
./geometry/euclidean/twod/Vector2DFormat.java:     * @return the 2D vector format specific to the given locale.
./geometry/euclidean/twod/Line.java:     * @return a new line, with orientation opposite to the instance orientation
./geometry/euclidean/twod/Line.java:     * @return (n-1)-dimension point of the sub-space corresponding to
./geometry/euclidean/twod/Line.java:     * @return n-dimension point of the space corresponding to the
./geometry/euclidean/twod/Line.java:     * @return intersection point of the instance and the other line
./geometry/euclidean/twod/Line.java:     * @return a region containing the instance (really a {@link
./geometry/euclidean/twod/Line.java:     * @return offset of the line
./geometry/euclidean/twod/Line.java:     * @return offset of the vector
./geometry/euclidean/twod/Line.java:     * @return one point in the plane, with given abscissa and offset
./geometry/euclidean/twod/Line.java:     * @return true if p belongs to the line
./geometry/euclidean/twod/Line.java:     * @return distance between the instance and the point
./geometry/euclidean/twod/Line.java:     * @return true if the instance is parallel to the other line
./geometry/euclidean/twod/Line.java:     * @return the angle of the line with respect to the abscissa axis
./geometry/euclidean/twod/Line.java:     * @return the offset of the origin
./geometry/euclidean/twod/Line.java:     * @return a new transform that can be applied to either {@link
./geometry/euclidean/twod/Line.java:     * @return a new transform that can be applied to either {@link
./geometry/euclidean/twod/SubLine.java:     * @return list of segments endpoints
./geometry/euclidean/twod/SubLine.java:     * @return the intersection point if there is one, null if the sub-lines don't intersect
./geometry/euclidean/twod/SubLine.java:     * @return an interval set
./geometry/euclidean/twod/Vector2D.java:     * @return abscissa of the vector
./geometry/euclidean/twod/Vector2D.java:     * @return ordinate of the vector
./geometry/euclidean/twod/Vector2D.java:     * @return vector coordinates
./geometry/euclidean/twod/Vector2D.java:     * @return angular separation between v1 and v2
./geometry/euclidean/twod/Vector2D.java:     * @return the cross-product
./geometry/euclidean/twod/Vector2D.java:     * @return the distance between p1 and p2 according to the L<sub>2</sub> norm
./geometry/euclidean/twod/Vector2D.java:     * @return the distance between p1 and p2 according to the L<sub>&infin;</sub> norm
./geometry/euclidean/twod/Vector2D.java:     * @return the square of the distance between p1 and p2
./geometry/euclidean/twod/Vector2D.java:     * @return true if two 2D vector objects are equal, false if
./geometry/euclidean/twod/Vector2D.java:     * @return a hash code value for this object
./geometry/euclidean/twod/Vector2D.java:     * @return a string representation of this vector
./geometry/euclidean/twod/hull/AbstractConvexHullGenerator2D.java:     * @return the tolerance below which points are considered identical
./geometry/euclidean/twod/hull/AbstractConvexHullGenerator2D.java:     * @return {@code true} if collinear points are added as hull vertices, or {@code false}
./geometry/euclidean/twod/hull/AbstractConvexHullGenerator2D.java:     * @return the convex hull vertices in CCW winding
./geometry/euclidean/twod/hull/ConvexHull2D.java:     * @return {@code true} if the vertices form a convex hull, {@code false} otherwise
./geometry/euclidean/twod/hull/ConvexHull2D.java:     * @return the line segments of the convex hull
./geometry/euclidean/twod/hull/ConvexHull2D.java:     * @return the array of line segments
./geometry/euclidean/twod/hull/AklToussaintHeuristic.java:     * @return a reduced point set, useful as input for convex hull algorithms
./geometry/euclidean/twod/hull/AklToussaintHeuristic.java:     * @return the quadrilateral
./geometry/euclidean/twod/hull/AklToussaintHeuristic.java:     * @return {@code true} if the point is inside the quadrilateral, {@code false} otherwise
./geometry/euclidean/twod/Segment.java:     * @return start point of the segment
./geometry/euclidean/twod/Segment.java:     * @return end point of the segment
./geometry/euclidean/twod/Segment.java:     * @return line containing the segment
./geometry/euclidean/twod/Segment.java:     * @return distance between the instance and the point
./geometry/euclidean/twod/PolygonsSet.java:     * @return boundary of the box
./geometry/euclidean/twod/PolygonsSet.java:     * @return the BSP tree of the input vertices
./geometry/euclidean/twod/PolygonsSet.java:         * @return vertex location
./geometry/euclidean/twod/PolygonsSet.java:         * @return line bound with both the instance and another vertex, or null if the
./geometry/euclidean/twod/PolygonsSet.java:         * @return incoming edge
./geometry/euclidean/twod/PolygonsSet.java:         * @return outgoing edge
./geometry/euclidean/twod/PolygonsSet.java:         * @return start vertex
./geometry/euclidean/twod/PolygonsSet.java:         * @return end vertex
./geometry/euclidean/twod/PolygonsSet.java:         * @return line supporting this edge
./geometry/euclidean/twod/PolygonsSet.java:         * @return node whose cut hyperplane contains this edge
./geometry/euclidean/twod/PolygonsSet.java:         * @return split vertex (its incoming and outgoing edges are the two halves)
./geometry/euclidean/twod/PolygonsSet.java:     * @return vertices of the polygon, organized as oriented boundary
./geometry/euclidean/twod/PolygonsSet.java:     * @return number of connections performed
./geometry/euclidean/twod/PolygonsSet.java:     * @return number of connections performed
./geometry/euclidean/twod/PolygonsSet.java:     * @return number of connections performed
./geometry/euclidean/twod/PolygonsSet.java:     * @return first segment that has not been processed yet
./geometry/euclidean/twod/PolygonsSet.java:     * @return loop containing the segment (may be null if the loop is a
./geometry/euclidean/twod/PolygonsSet.java:         * @return node containing segment
./geometry/euclidean/twod/PolygonsSet.java:         * @return node whose intersection with current node defines start point
./geometry/euclidean/twod/PolygonsSet.java:         * @return node whose intersection with current node defines end point
./geometry/euclidean/twod/PolygonsSet.java:         * @return previous segment
./geometry/euclidean/twod/PolygonsSet.java:         * @return next segment
./geometry/euclidean/twod/PolygonsSet.java:         * @return true if the segment has been processed
./geometry/euclidean/twod/PolygonsSet.java:         * @return node closest to point, or null if no node is closer than tolerance
./geometry/euclidean/twod/PolygonsSet.java:         * @return built segments
./geometry/euclidean/twod/Euclidean2D.java:     * @return the unique instance
./geometry/euclidean/twod/Euclidean2D.java:     * @return the singleton instance
./geometry/euclidean/twod/DiskGenerator.java:     * @return value of the minor computed has an exact fraction
./geometry/euclidean/threed/Rotation.java:   * @return quaternion corresponding to the matrix
./geometry/euclidean/threed/Rotation.java:   * @return a new rotation whose effect is the reverse of the effect
./geometry/euclidean/threed/Rotation.java:   * @return scalar coordinate of the quaternion
./geometry/euclidean/threed/Rotation.java:   * @return first coordinate of the vectorial part of the quaternion
./geometry/euclidean/threed/Rotation.java:   * @return second coordinate of the vectorial part of the quaternion
./geometry/euclidean/threed/Rotation.java:   * @return third coordinate of the vectorial part of the quaternion
./geometry/euclidean/threed/Rotation.java:   * @return normalized axis of the rotation
./geometry/euclidean/threed/Rotation.java:   * @return normalized axis of the rotation
./geometry/euclidean/threed/Rotation.java:   * @return angle of the rotation (between 0 and &pi;)
./geometry/euclidean/threed/Rotation.java:   * @return an array of three angles, in the order specified by the set
./geometry/euclidean/threed/Rotation.java:   * @return an array of three angles, in the order specified by the set
./geometry/euclidean/threed/Rotation.java:   * @return the matrix corresponding to the instance
./geometry/euclidean/threed/Rotation.java:   * @return a new vector which is the image of u by the rotation
./geometry/euclidean/threed/Rotation.java:   * @return a new vector which such that u is its image by the rotation
./geometry/euclidean/threed/Rotation.java:   * @return a new rotation which is the composition of r by the instance
./geometry/euclidean/threed/Rotation.java:   * @return a new rotation which is the composition of r by the instance
./geometry/euclidean/threed/Rotation.java:   * @return a new rotation which is the composition of r by the instance
./geometry/euclidean/threed/Rotation.java:   * @return a new rotation which is the composition of r by the inverse
./geometry/euclidean/threed/Rotation.java:   * @return a new rotation which is the composition of r by the inverse
./geometry/euclidean/threed/Rotation.java:   * @return a new rotation which is the composition of r by the inverse
./geometry/euclidean/threed/Rotation.java:   * @return an orthogonal matrix close to m
./geometry/euclidean/threed/Rotation.java:   * @return <i>distance</i> between r1 and r2
./geometry/euclidean/threed/Line.java:     * @return tolerance below which points are considered identical
./geometry/euclidean/threed/Line.java:     * @return a new instance, with reversed direction
./geometry/euclidean/threed/Line.java:     * @return normalized direction vector
./geometry/euclidean/threed/Line.java:     * @return line point closest to the origin
./geometry/euclidean/threed/Line.java:     * @return abscissa of the point
./geometry/euclidean/threed/Line.java:     * @return one point belonging to the line, at specified abscissa
./geometry/euclidean/threed/Line.java:     * @return (n-1)-dimension point of the sub-space corresponding to
./geometry/euclidean/threed/Line.java:     * @return n-dimension point of the space corresponding to the
./geometry/euclidean/threed/Line.java:     * @return true if the lines are similar
./geometry/euclidean/threed/Line.java:     * @return true if p belongs to the line
./geometry/euclidean/threed/Line.java:     * @return distance between the instance and the point
./geometry/euclidean/threed/Line.java:     * @return shortest distance between the instance and the line
./geometry/euclidean/threed/Line.java:     * @return point of the instance closest to another line
./geometry/euclidean/threed/Line.java:     * @return intersection point of the instance and the other line
./geometry/euclidean/threed/Line.java:     * @return a sub-line covering the whole line
./geometry/euclidean/threed/Vector3D.java:     * @return abscissa of the vector
./geometry/euclidean/threed/Vector3D.java:     * @return ordinate of the vector
./geometry/euclidean/threed/Vector3D.java:     * @return height of the vector
./geometry/euclidean/threed/Vector3D.java:     * @return vector coordinates
./geometry/euclidean/threed/Vector3D.java:     * @return azimuth (&alpha;) of the vector, between -&pi; and +&pi;
./geometry/euclidean/threed/Vector3D.java:     * @return elevation (&delta;) of the vector, between -&pi;/2 and +&pi;/2
./geometry/euclidean/threed/Vector3D.java:     * @return a new normalized vector orthogonal to the instance
./geometry/euclidean/threed/Vector3D.java:     * @return angular separation between v1 and v2
./geometry/euclidean/threed/Vector3D.java:     * @return true if two 3D vector objects are equal, false if
./geometry/euclidean/threed/Vector3D.java:     * @return a hash code value for this object
./geometry/euclidean/threed/Vector3D.java:     * @return the cross product this ^ v as a new Vector3D
./geometry/euclidean/threed/Vector3D.java:     * @return the dot product v1.v2
./geometry/euclidean/threed/Vector3D.java:     * @return the cross product v1 ^ v2 as a new Vector
./geometry/euclidean/threed/Vector3D.java:     * @return the distance between v1 and v2 according to the L<sub>1</sub> norm
./geometry/euclidean/threed/Vector3D.java:     * @return the distance between v1 and v2 according to the L<sub>2</sub> norm
./geometry/euclidean/threed/Vector3D.java:     * @return the distance between v1 and v2 according to the L<sub>&infin;</sub> norm
./geometry/euclidean/threed/Vector3D.java:     * @return the square of the distance between v1 and v2
./geometry/euclidean/threed/Vector3D.java:     * @return a string representation of this vector
./geometry/euclidean/threed/SubLine.java:     * @return list of segments endpoints
./geometry/euclidean/threed/SubLine.java:     * @return the intersection point if there is one, null if the sub-lines don't intersect
./geometry/euclidean/threed/SubLine.java:     * @return an interval set
./geometry/euclidean/threed/Plane.java:     * @return a new hyperplane, copy of the instance
./geometry/euclidean/threed/Plane.java:     * @return the origin point of the plane frame (point closest to the
./geometry/euclidean/threed/Plane.java:     * @return normalized normal vector
./geometry/euclidean/threed/Plane.java:     * @return normalized first canonical vector
./geometry/euclidean/threed/Plane.java:     * @return normalized second canonical vector
./geometry/euclidean/threed/Plane.java:     * @return (n-1)-dimension point of the sub-space corresponding to
./geometry/euclidean/threed/Plane.java:     * @return n-dimension point of the space corresponding to the
./geometry/euclidean/threed/Plane.java:     * @return in-plane point (really a {@link
./geometry/euclidean/threed/Plane.java:     * @return 3D space point (really a {@link Vector3D Vector3D} instance)
./geometry/euclidean/threed/Plane.java:     * @return one point in the 3D-space, with given coordinates and offset
./geometry/euclidean/threed/Plane.java:     * @return true if the planes are similar
./geometry/euclidean/threed/Plane.java:     * @return a new plane
./geometry/euclidean/threed/Plane.java:     * @return a new plane
./geometry/euclidean/threed/Plane.java:     * @return intersection point between between the line and the
./geometry/euclidean/threed/Plane.java:     * @return line at the intersection of the instance and the
./geometry/euclidean/threed/Plane.java:     * @return intersection point of three planes, null if some planes are parallel
./geometry/euclidean/threed/Plane.java:     * @return a region covering the whole hyperplane
./geometry/euclidean/threed/Plane.java:     * @return a region containing the instance (really a {@link
./geometry/euclidean/threed/Plane.java:     * @return true if p belongs to the plane
./geometry/euclidean/threed/Plane.java:     * @return offset of the plane
./geometry/euclidean/threed/Plane.java:     * @return offset of the vector
./geometry/euclidean/threed/Plane.java:     * @return offset of the point
./geometry/euclidean/threed/Plane.java:     * @return true if the instance and the other hyperplane have
./geometry/euclidean/threed/SubPlane.java:     * @return an object containing both the part of the instance
./geometry/euclidean/threed/PolyhedronsSet.java:     * @return boundary tree
./geometry/euclidean/threed/PolyhedronsSet.java:     * @return boundary as a list of sub-hyperplanes
./geometry/euclidean/threed/PolyhedronsSet.java:     * @return references array such that r[v][k] = f for some k if facet f contains vertex v
./geometry/euclidean/threed/PolyhedronsSet.java:     * @return indices of vertices that follow vertex v in some facet (the array
./geometry/euclidean/threed/PolyhedronsSet.java:     * @return the first sub-hyperplane crossed by the line after the
./geometry/euclidean/threed/PolyhedronsSet.java:     * @return the first sub-hyperplane crossed by the line after the
./geometry/euclidean/threed/PolyhedronsSet.java:     * @return the boundary facet this points belongs to (or null if it
./geometry/euclidean/threed/PolyhedronsSet.java:     * @return a new instance representing the rotated region
./geometry/euclidean/threed/PolyhedronsSet.java:     * @return a new instance representing the translated region
./geometry/euclidean/threed/OutlineExtractor.java:     * @return an outline, as an array of loops.
./geometry/euclidean/threed/OutlineExtractor.java:     * @return true if the point is exactly between its neighbors
./geometry/euclidean/threed/OutlineExtractor.java:         * @return projection of the polyhedrons set on the plane
./geometry/euclidean/threed/Segment.java:     * @return start point of the segment
./geometry/euclidean/threed/Segment.java:     * @return end point of the segment
./geometry/euclidean/threed/Segment.java:     * @return line containing the segment
./geometry/euclidean/threed/SphericalCoordinates.java:     * @return Cartesian coordinates
./geometry/euclidean/threed/SphericalCoordinates.java:     * @return radius r
./geometry/euclidean/threed/SphericalCoordinates.java:     * @return azimuthal angle in x-y plane &theta;
./geometry/euclidean/threed/SphericalCoordinates.java:     * @return polar (co-latitude) angle &Phi;
./geometry/euclidean/threed/SphericalCoordinates.java:     * @return gradient with respect to Cartesian coordinates
./geometry/euclidean/threed/SphericalCoordinates.java:     * @return Hessian with respect to Cartesian coordinates
./geometry/euclidean/threed/SphericalCoordinates.java:     * @return data transfer object that will be serialized
./geometry/euclidean/threed/SphericalCoordinates.java:         * @return replacement {@link SphericalCoordinates}
./geometry/euclidean/threed/FieldVector3D.java:     * @return abscissa of the vector
./geometry/euclidean/threed/FieldVector3D.java:     * @return ordinate of the vector
./geometry/euclidean/threed/FieldVector3D.java:     * @return height of the vector
./geometry/euclidean/threed/FieldVector3D.java:     * @return vector coordinates
./geometry/euclidean/threed/FieldVector3D.java:     * @return a constant vector
./geometry/euclidean/threed/FieldVector3D.java:     * @return L<sub>1</sub> norm for the vector
./geometry/euclidean/threed/FieldVector3D.java:     * @return Euclidean norm for the vector
./geometry/euclidean/threed/FieldVector3D.java:     * @return square of the Euclidean norm for the vector
./geometry/euclidean/threed/FieldVector3D.java:     * @return L<sub>&infin;</sub> norm for the vector
./geometry/euclidean/threed/FieldVector3D.java:     * @return azimuth (&alpha;) of the vector, between -&pi; and +&pi;
./geometry/euclidean/threed/FieldVector3D.java:     * @return elevation (&delta;) of the vector, between -&pi;/2 and +&pi;/2
./geometry/euclidean/threed/FieldVector3D.java:     * @return a new vector
./geometry/euclidean/threed/FieldVector3D.java:     * @return a new vector
./geometry/euclidean/threed/FieldVector3D.java:     * @return a new vector
./geometry/euclidean/threed/FieldVector3D.java:     * @return a new vector
./geometry/euclidean/threed/FieldVector3D.java:     * @return a new vector
./geometry/euclidean/threed/FieldVector3D.java:     * @return a new vector
./geometry/euclidean/threed/FieldVector3D.java:     * @return a new vector
./geometry/euclidean/threed/FieldVector3D.java:     * @return a new vector
./geometry/euclidean/threed/FieldVector3D.java:     * @return a new vector
./geometry/euclidean/threed/FieldVector3D.java:     * @return a new vector
./geometry/euclidean/threed/FieldVector3D.java:     * @return a new vector
./geometry/euclidean/threed/FieldVector3D.java:     * @return a new vector
./geometry/euclidean/threed/FieldVector3D.java:     * @return a new normalized vector
./geometry/euclidean/threed/FieldVector3D.java:     * @return a new normalized vector orthogonal to the instance
./geometry/euclidean/threed/FieldVector3D.java:     * @return angular separation between v1 and v2
./geometry/euclidean/threed/FieldVector3D.java:     * @return angular separation between v1 and v2
./geometry/euclidean/threed/FieldVector3D.java:     * @return angular separation between v1 and v2
./geometry/euclidean/threed/FieldVector3D.java:     * @return a new vector which is opposite to the instance
./geometry/euclidean/threed/FieldVector3D.java:     * @return a new vector
./geometry/euclidean/threed/FieldVector3D.java:     * @return a new vector
./geometry/euclidean/threed/FieldVector3D.java:     * @return  true if any coordinate of this vector is NaN; false otherwise
./geometry/euclidean/threed/FieldVector3D.java:     * @return  true if any coordinate of this vector is infinite and none are NaN;
./geometry/euclidean/threed/FieldVector3D.java:     * @return true if two 3D vector objects are equal, false if
./geometry/euclidean/threed/FieldVector3D.java:     * @return a hash code value for this object
./geometry/euclidean/threed/FieldVector3D.java:     * @return the dot product this.v
./geometry/euclidean/threed/FieldVector3D.java:     * @return the dot product this.v
./geometry/euclidean/threed/FieldVector3D.java:     * @return the cross product this ^ v as a new Vector3D
./geometry/euclidean/threed/FieldVector3D.java:     * @return the cross product this ^ v as a new Vector3D
./geometry/euclidean/threed/FieldVector3D.java:     * @return the distance between the instance and p according to the L<sub>1</sub> norm
./geometry/euclidean/threed/FieldVector3D.java:     * @return the distance between the instance and p according to the L<sub>1</sub> norm
./geometry/euclidean/threed/FieldVector3D.java:     * @return the distance between the instance and p according to the L<sub>2</sub> norm
./geometry/euclidean/threed/FieldVector3D.java:     * @return the distance between the instance and p according to the L<sub>2</sub> norm
./geometry/euclidean/threed/FieldVector3D.java:     * @return the distance between the instance and p according to the L<sub>&infin;</sub> norm
./geometry/euclidean/threed/FieldVector3D.java:     * @return the distance between the instance and p according to the L<sub>&infin;</sub> norm
./geometry/euclidean/threed/FieldVector3D.java:     * @return the square of the distance between the instance and p
./geometry/euclidean/threed/FieldVector3D.java:     * @return the square of the distance between the instance and p
./geometry/euclidean/threed/FieldVector3D.java:     * @return the dot product v1.v2
./geometry/euclidean/threed/FieldVector3D.java:     * @return the dot product v1.v2
./geometry/euclidean/threed/FieldVector3D.java:     * @return the dot product v1.v2
./geometry/euclidean/threed/FieldVector3D.java:     * @return the cross product v1 ^ v2 as a new Vector
./geometry/euclidean/threed/FieldVector3D.java:     * @return the cross product v1 ^ v2 as a new Vector
./geometry/euclidean/threed/FieldVector3D.java:     * @return the cross product v1 ^ v2 as a new Vector
./geometry/euclidean/threed/FieldVector3D.java:     * @return the distance between v1 and v2 according to the L<sub>1</sub> norm
./geometry/euclidean/threed/FieldVector3D.java:     * @return the distance between v1 and v2 according to the L<sub>1</sub> norm
./geometry/euclidean/threed/FieldVector3D.java:     * @return the distance between v1 and v2 according to the L<sub>1</sub> norm
./geometry/euclidean/threed/FieldVector3D.java:     * @return the distance between v1 and v2 according to the L<sub>2</sub> norm
./geometry/euclidean/threed/FieldVector3D.java:     * @return the distance between v1 and v2 according to the L<sub>2</sub> norm
./geometry/euclidean/threed/FieldVector3D.java:     * @return the distance between v1 and v2 according to the L<sub>2</sub> norm
./geometry/euclidean/threed/FieldVector3D.java:     * @return the distance between v1 and v2 according to the L<sub>&infin;</sub> norm
./geometry/euclidean/threed/FieldVector3D.java:     * @return the distance between v1 and v2 according to the L<sub>&infin;</sub> norm
./geometry/euclidean/threed/FieldVector3D.java:     * @return the distance between v1 and v2 according to the L<sub>&infin;</sub> norm
./geometry/euclidean/threed/FieldVector3D.java:     * @return the square of the distance between v1 and v2
./geometry/euclidean/threed/FieldVector3D.java:     * @return the square of the distance between v1 and v2
./geometry/euclidean/threed/FieldVector3D.java:     * @return the square of the distance between v1 and v2
./geometry/euclidean/threed/FieldVector3D.java:     * @return a string representation of this vector
./geometry/euclidean/threed/FieldVector3D.java:     * @return a string representation of this vector
./geometry/euclidean/threed/SphereGenerator.java:     * @return value of the minor computed has an exact fraction
./geometry/euclidean/threed/Euclidean3D.java:     * @return the unique instance
./geometry/euclidean/threed/Euclidean3D.java:     * @return the singleton instance
./geometry/euclidean/threed/FieldRotation.java:     * @return quaternion corresponding to the matrix
./geometry/euclidean/threed/FieldRotation.java:     * @return a new rotation whose effect is the reverse of the effect
./geometry/euclidean/threed/FieldRotation.java:     * @return scalar coordinate of the quaternion
./geometry/euclidean/threed/FieldRotation.java:     * @return first coordinate of the vectorial part of the quaternion
./geometry/euclidean/threed/FieldRotation.java:     * @return second coordinate of the vectorial part of the quaternion
./geometry/euclidean/threed/FieldRotation.java:     * @return third coordinate of the vectorial part of the quaternion
./geometry/euclidean/threed/FieldRotation.java:     * @return normalized axis of the rotation
./geometry/euclidean/threed/FieldRotation.java:     * @return normalized axis of the rotation
./geometry/euclidean/threed/FieldRotation.java:     * @return angle of the rotation (between 0 and &pi;)
./geometry/euclidean/threed/FieldRotation.java:     * @return an array of three angles, in the order specified by the set
./geometry/euclidean/threed/FieldRotation.java:     * @return an array of three angles, in the order specified by the set
./geometry/euclidean/threed/FieldRotation.java:     * @return new array
./geometry/euclidean/threed/FieldRotation.java:     * @return a constant vector
./geometry/euclidean/threed/FieldRotation.java:     * @return the matrix corresponding to the instance
./geometry/euclidean/threed/FieldRotation.java:     * @return a constant vector
./geometry/euclidean/threed/FieldRotation.java:     * @return a new vector which is the image of u by the rotation
./geometry/euclidean/threed/FieldRotation.java:     * @return a new vector which is the image of u by the rotation
./geometry/euclidean/threed/FieldRotation.java:     * @return a new vector which is the image of u by the rotation
./geometry/euclidean/threed/FieldRotation.java:     * @return a new vector which such that u is its image by the rotation
./geometry/euclidean/threed/FieldRotation.java:     * @return a new vector which such that u is its image by the rotation
./geometry/euclidean/threed/FieldRotation.java:     * @return a new vector which such that u is its image by the rotation
./geometry/euclidean/threed/FieldRotation.java:     * @return a new rotation which is the composition of r by the instance
./geometry/euclidean/threed/FieldRotation.java:     * @return a new rotation which is the composition of r by the instance
./geometry/euclidean/threed/FieldRotation.java:     * @return a new rotation which is the composition of r by the instance
./geometry/euclidean/threed/FieldRotation.java:     * @return a new rotation which is the composition of r by the instance
./geometry/euclidean/threed/FieldRotation.java:     * @return a new rotation which is the composition of r by the instance
./geometry/euclidean/threed/FieldRotation.java:     * @return a new rotation which is the composition of r by the instance
./geometry/euclidean/threed/FieldRotation.java:     * @return a new rotation which is the composition of r by the instance
./geometry/euclidean/threed/FieldRotation.java:     * @return a new rotation which is the composition of r by the inverse
./geometry/euclidean/threed/FieldRotation.java:     * @return a new rotation which is the composition of r by the inverse
./geometry/euclidean/threed/FieldRotation.java:     * @return a new rotation which is the composition of r by the inverse
./geometry/euclidean/threed/FieldRotation.java:     * @return a new rotation which is the composition of r by the inverse
./geometry/euclidean/threed/FieldRotation.java:     * @return a new rotation which is the composition of r by the inverse
./geometry/euclidean/threed/FieldRotation.java:     * @return a new rotation which is the composition of r by the inverse
./geometry/euclidean/threed/FieldRotation.java:     * @return a new rotation which is the composition of r by the inverse
./geometry/euclidean/threed/FieldRotation.java:     * @return an orthogonal matrix close to m
./geometry/euclidean/threed/FieldRotation.java:     * @return <i>distance</i> between r1 and r2
./geometry/euclidean/threed/RotationOrder.java:     * @return a string representation of the instance (in fact, its name)
./geometry/euclidean/threed/RotationOrder.java:     * @return axis of the first rotation
./geometry/euclidean/threed/RotationOrder.java:     * @return axis of the second rotation
./geometry/euclidean/threed/RotationOrder.java:     * @return axis of the second rotation
./geometry/euclidean/threed/Vector3DFormat.java:     * @return the default 3D vector format.
./geometry/euclidean/threed/Vector3DFormat.java:     * @return the 3D vector format specific to the given locale.
./geometry/euclidean/threed/Vector3DFormat.java:     * @return the value passed in as toAppendTo.
./geometry/euclidean/threed/Vector3DFormat.java:     * @return the parsed {@link Vector3D} object.
./geometry/euclidean/threed/Vector3DFormat.java:     * @return the parsed {@link Vector3D} object.
./geometry/Space.java:     * @return dimension of the space
./geometry/Space.java:     * @return n-1 dimension sub-space of this space
./geometry/Point.java:     * @return containing space
./geometry/Point.java:     * @return  true if any coordinate of this point is NaN; false otherwise
./geometry/Point.java:     * @return the distance between the instance and p
./geometry/partitioning/BoundarySizeVisitor.java:     * @return size of the boundary
./geometry/partitioning/Region.java:     * @return the built region
./geometry/partitioning/Region.java:     * @return a new region, copy of the instance
./geometry/partitioning/Region.java:     * @return true if the instance is empty
./geometry/partitioning/Region.java:     * @return true if the sub-tree starting at the given node is empty
./geometry/partitioning/Region.java:     * @return true if the instance covers the full space
./geometry/partitioning/Region.java:     * @return true if the sub-tree starting at the given node covers the full space
./geometry/partitioning/Region.java:     * @return true if the instance contains the specified tree
./geometry/partitioning/Region.java:     * @return a code representing the point status: either {@link
./geometry/partitioning/Region.java:     * @return projection of the point on the boundary
./geometry/partitioning/Region.java:     * @return underlying BSP tree
./geometry/partitioning/Region.java:     * @return the size of the boundary (this is 0 in 1D, a length in
./geometry/partitioning/Region.java:     * @return the size of the instance (this is a length in 1D, an area
./geometry/partitioning/Region.java:     * @return an object representing the barycenter
./geometry/partitioning/Region.java:     * @return one of {@link Side#PLUS Side.PLUS}, {@link Side#MINUS
./geometry/partitioning/Region.java:     * @return filtered sub-hyperplane
./geometry/partitioning/utilities/AVLTree.java:     * @return true if the element was deleted from the tree
./geometry/partitioning/utilities/AVLTree.java:     * @return true if the tree is empty
./geometry/partitioning/utilities/AVLTree.java:     * @return number of elements contained in the tree
./geometry/partitioning/utilities/AVLTree.java:     * @return the tree node containing the smallest element in the tree
./geometry/partitioning/utilities/AVLTree.java:     * @return the tree node containing the largest element in the tree
./geometry/partitioning/utilities/AVLTree.java:     * @return the tree node containing the smallest element not smaller
./geometry/partitioning/utilities/AVLTree.java:     * @return the tree node containing the largest element not larger
./geometry/partitioning/utilities/AVLTree.java:         * @return element contained in the node
./geometry/partitioning/utilities/AVLTree.java:         * @return number of elements contained in the tree rooted at this node
./geometry/partitioning/utilities/AVLTree.java:         * @return the tree node containing the smallest element in the
./geometry/partitioning/utilities/AVLTree.java:         * @return the tree node containing the largest element in the
./geometry/partitioning/utilities/AVLTree.java:         * @return node containing the next smaller or equal element or
./geometry/partitioning/utilities/AVLTree.java:         * @return node containing the next larger or equal element (in
./geometry/partitioning/utilities/AVLTree.java:         * @return true if the parent tree should be re-Skew.BALANCED
./geometry/partitioning/utilities/AVLTree.java:         * @return true if the parent tree should be reSkew.BALANCED too
./geometry/partitioning/utilities/AVLTree.java:         * @return true if the parent tree should be reSkew.BALANCED too
./geometry/partitioning/utilities/AVLTree.java:         * @return true if the parent tree should be reSkew.BALANCED too
./geometry/partitioning/utilities/AVLTree.java:         * @return true if the parent tree should be reSkew.BALANCED too
./geometry/partitioning/utilities/OrderedTuple.java:     * @return a negative integer if the instance is less than the
./geometry/partitioning/utilities/OrderedTuple.java:     * @return array containing the T-uple components
./geometry/partitioning/utilities/OrderedTuple.java:     * @return sign bit (zero if positive, non zero if negative)
./geometry/partitioning/utilities/OrderedTuple.java:     * @return exponent
./geometry/partitioning/utilities/OrderedTuple.java:     * @return mantissa
./geometry/partitioning/utilities/OrderedTuple.java:     * @return scale of the most significant bit of {@code l},
./geometry/partitioning/utilities/OrderedTuple.java:     * @return scale of the least significant bit of {@code l},
./geometry/partitioning/utilities/OrderedTuple.java:     * @return the specified bit (either 0 or 1), after the offset has
./geometry/partitioning/Characterization.java:     * @return true if the cut sub-hyperplane touches outside cells
./geometry/partitioning/Characterization.java:     * @return parts of the cut sub-hyperplane known to touch outside cells
./geometry/partitioning/Characterization.java:     * @return nodes that were used to split the outside touching part
./geometry/partitioning/Characterization.java:     * @return true if the cut sub-hyperplane touches inside cells
./geometry/partitioning/Characterization.java:     * @return parts of the cut sub-hyperplane known to touch inside cells
./geometry/partitioning/Characterization.java:     * @return nodes that were used to split the inside touching part
./geometry/partitioning/BSPTreeVisitor.java:     * @return desired visit order, must be one of
./geometry/partitioning/Hyperplane.java:     * @return a new hyperplane, copy of the instance
./geometry/partitioning/Hyperplane.java:     * @return offset of the point
./geometry/partitioning/Hyperplane.java:     * @return projected point
./geometry/partitioning/Hyperplane.java:     * @return tolerance below which points are considered to belong to the hyperplane
./geometry/partitioning/Hyperplane.java:     * @return true if the instance and the other hyperplane have
./geometry/partitioning/Hyperplane.java:     * @return a sub-hyperplane covering the whole hyperplane
./geometry/partitioning/Hyperplane.java:     * @return a region containing the instance
./geometry/partitioning/SubHyperplane.java:     * @return a new sub-hyperplane, copy of the instance
./geometry/partitioning/SubHyperplane.java:     * @return underlying hyperplane
./geometry/partitioning/SubHyperplane.java:     * @return true if the instance is empty
./geometry/partitioning/SubHyperplane.java:     * @return the size of the instance (this is a length in 1D, an area
./geometry/partitioning/SubHyperplane.java:     * @return one of {@link Side#PLUS}, {@link Side#MINUS}, {@link Side#BOTH},
./geometry/partitioning/SubHyperplane.java:     * @return an object containing both the part of the instance
./geometry/partitioning/SubHyperplane.java:     * @return a new sub-hyperplane, union of the instance and other
./geometry/partitioning/SubHyperplane.java:         * @return part of the sub-hyperplane on the plus side of the splitting hyperplane
./geometry/partitioning/SubHyperplane.java:         * @return part of the sub-hyperplane on the minus side of the splitting hyperplane
./geometry/partitioning/SubHyperplane.java:         * @return {@link Side#PLUS} if only {@link #getPlus()} is neither null nor empty,
./geometry/partitioning/BoundaryAttribute.java:     * @return part of the node cut sub-hyperplane that belongs to the
./geometry/partitioning/BoundaryAttribute.java:     * @return part of the node cut sub-hyperplane that belongs to the
./geometry/partitioning/BoundaryAttribute.java:     * @return sub-hyperplanes that were used to split the boundary part
./geometry/partitioning/Embedding.java:     * @return (n-1)-dimension point of the sub-space corresponding to
./geometry/partitioning/Embedding.java:     * @return n-dimension point of the space corresponding to the
./geometry/partitioning/AbstractRegion.java:     * @return tolerance below which points are considered to belong to hyperplanes
./geometry/partitioning/AbstractRegion.java:     * @return a code representing the point status: either {@link
./geometry/partitioning/AbstractRegion.java:     * @return a code representing the point status: either {@link
./geometry/partitioning/AbstractRegion.java:     * @return a code representing the point status: either {@link
./geometry/partitioning/AbstractRegion.java:     * @return filtered sub-hyperplane
./geometry/partitioning/AbstractRegion.java:     * @return a new region, resulting from the application of the
./geometry/partitioning/AbstractRegion.java:     * @return a new tree
./geometry/partitioning/BoundaryProjector.java:     * @return projection
./geometry/partitioning/BoundaryProjector.java:     * @return regions in the node sub-hyperplane
./geometry/partitioning/BoundaryProjector.java:     * @return true if point lies on the boundary part
./geometry/partitioning/BoundaryProjector.java:     * @return projection to a singular point of boundary part (may be null)
./geometry/partitioning/Transform.java:     * @return a new object representing the transformed point
./geometry/partitioning/Transform.java:     * @return a new object representing the transformed hyperplane
./geometry/partitioning/Transform.java:     * @return a new object representing the transformed sub-hyperplane
./geometry/partitioning/BoundaryProjection.java:     * @return original point
./geometry/partitioning/BoundaryProjection.java:     * @return projected point, or null if there are no boundary
./geometry/partitioning/BoundaryProjection.java:     * @return offset of the point with respect to the boundary it is projected on
./geometry/partitioning/AbstractSubHyperplane.java:     * @return a new sub-hyperplane
./geometry/partitioning/AbstractSubHyperplane.java:     * @return underlying hyperplane
./geometry/partitioning/AbstractSubHyperplane.java:     * @return remaining region of the hyperplane
./geometry/partitioning/AbstractSubHyperplane.java:     * @return the transformed instance
./geometry/partitioning/AbstractSubHyperplane.java:     * @return a new tree
./geometry/partitioning/RegionFactory.java:     * @return a new convex region, or null if the collection is empty
./geometry/partitioning/RegionFactory.java:     * @return a new region, result of {@code region1 union region2}
./geometry/partitioning/RegionFactory.java:     * @return a new region, result of {@code region1 intersection region2}
./geometry/partitioning/RegionFactory.java:     * @return a new region, result of {@code region1 xor region2}
./geometry/partitioning/RegionFactory.java:     * @return a new region, result of {@code region1 minus region2}
./geometry/partitioning/RegionFactory.java:     * @return a new region, complement of the specified one
./geometry/partitioning/RegionFactory.java:     * @return a new region, complement of the specified one
./geometry/partitioning/RegionFactory.java:     * @return new tree, complement of the node
./geometry/partitioning/RegionFactory.java:     * @return new tree, complement of the node
./geometry/partitioning/InsideFinder.java:     * @return true if inside leaf nodes have been found on the plus side
./geometry/partitioning/InsideFinder.java:     * @return true if inside leaf nodes have been found on the minus side
./geometry/partitioning/BSPTree.java:     * @return true if a cut sub-hyperplane has been inserted (i.e. if
./geometry/partitioning/BSPTree.java:     * @return a new tree, copy of the instance
./geometry/partitioning/BSPTree.java:     * @return cut sub-hyperplane, null if this is a leaf tree
./geometry/partitioning/BSPTree.java:     * @return tree on the plus side of the cut hyperplane, null if this
./geometry/partitioning/BSPTree.java:     * @return tree on the minus side of the cut hyperplane, null if this
./geometry/partitioning/BSPTree.java:     * @return parent node, null if the node has no parents
./geometry/partitioning/BSPTree.java:     * @return attribute associated with the node or null if no
./geometry/partitioning/BSPTree.java:     * @return a new sub-hyperplane, guaranteed to have no part outside
./geometry/partitioning/BSPTree.java:     * @return the tree cell to which the point belongs
./geometry/partitioning/BSPTree.java:     * @return the tree cell to which the point belongs
./geometry/partitioning/BSPTree.java:     * @return close cells (may be empty if all cut sub-hyperplanes are farther
./geometry/partitioning/BSPTree.java:     * @return a new tree, result of <code>instance &lt;op&gt;
./geometry/partitioning/BSPTree.java:     * @return a new tree, result of <code>instance &lt;op&gt;
./geometry/partitioning/BSPTree.java:         * @return the BSP tree resulting from the merging (may be one of
./geometry/partitioning/BSPTree.java:         * @return fixed node
./geometry/partitioning/BSPTree.java:     * @return a tree having the specified sub-hyperplane as its cut
./geometry/partitioning/BSPTree.java:     * @return a new tree (the original tree is left untouched) containing
./linear/RRQRDecomposition.java:     * @return a permutation matrix.
./linear/RRQRDecomposition.java:     * @return effective numerical matrix rank
./linear/RRQRDecomposition.java:     * @return a solver
./linear/TriDiagonalTransformer.java:     * @return the Q matrix
./linear/TriDiagonalTransformer.java:     * @return the Q matrix
./linear/TriDiagonalTransformer.java:     * @return the T matrix
./linear/TriDiagonalTransformer.java:     * @return the main diagonal elements of the B matrix
./linear/TriDiagonalTransformer.java:     * @return the main diagonal elements of the T matrix
./linear/TriDiagonalTransformer.java:     * @return the secondary diagonal elements of the T matrix
./linear/NonPositiveDefiniteMatrixException.java:     * @return the row index.
./linear/NonPositiveDefiniteMatrixException.java:     * @return the column index.
./linear/NonPositiveDefiniteMatrixException.java:     * @return the absolute positivity threshold.
./linear/RectangularCholeskyDecomposition.java:     * @return root of the square matrix
./linear/RectangularCholeskyDecomposition.java:     * @return r of the square matrix.
./linear/RealVector.java:     * @return the size of this vector.
./linear/RealVector.java:     * @return the vector entry at {@code index}.
./linear/RealVector.java:     * @return a new vector.
./linear/RealVector.java:     * @return a new vector.
./linear/RealVector.java:     * @return a vector containing n elements.
./linear/RealVector.java:     * @return {@code true} if any coordinate of this vector is {@code NaN},
./linear/RealVector.java:     * @return {@code true} if any coordinate of this vector is infinite and
./linear/RealVector.java:     * @return {@code this} + {@code v}.
./linear/RealVector.java:     * @return {@code this} - {@code v}.
./linear/RealVector.java:     * @return {@code this} + {@code d}.
./linear/RealVector.java:     * @return {@code this}.
./linear/RealVector.java:     * @return a vector copy.
./linear/RealVector.java:     * @return the scalar dot product between this instance and {@code v}.
./linear/RealVector.java:     * @return the cosine of the angle between this vector and {@code v}.
./linear/RealVector.java:     * @return a vector containing this[i] / v[i] for all i.
./linear/RealVector.java:     * @return a vector containing this[i] * v[i] for all i.
./linear/RealVector.java:     * @return the distance between two vectors.
./linear/RealVector.java:     * @return the norm.
./linear/RealVector.java:     * @return the norm.
./linear/RealVector.java:     * @return the norm.
./linear/RealVector.java:     * @return the distance between two vectors.
./linear/RealVector.java:     * @return the distance between two vectors.
./linear/RealVector.java:     * @return the index of the minimum entry or -1 if vector length is 0
./linear/RealVector.java:     * @return the value of the minimum entry or {@code NaN} if all
./linear/RealVector.java:     * @return the index of the maximum entry or -1 if vector length is 0
./linear/RealVector.java:     * @return the value of the maximum entry or {@code NaN} if all
./linear/RealVector.java:     * @return {@code this} * {@code d}.
./linear/RealVector.java:     * @return {@code this}.
./linear/RealVector.java:     * @return {@code this} - {@code d}.
./linear/RealVector.java:     * @return {@code this}.
./linear/RealVector.java:     * @return {@code this} / {@code d}.
./linear/RealVector.java:     * @return {@code this}.
./linear/RealVector.java:     * @return the matrix outer product between this instance and {@code v}.
./linear/RealVector.java:     * @return projection of the instance onto {@code v}.
./linear/RealVector.java:     * @return an array containing a copy of the vector elements.
./linear/RealVector.java:     * @return a unit vector pointing in direction of this vector.
./linear/RealVector.java:     * @return a sparse iterator.
./linear/RealVector.java:     * @return a dense iterator.
./linear/RealVector.java:     * @return a new vector.
./linear/RealVector.java:     * @return a reference to this vector.
./linear/RealVector.java:     * @return a vector containing {@code a * this[i] + b * y[i]} for all
./linear/RealVector.java:     * @return {@code this}, with components equal to
./linear/RealVector.java:     * @return the value returned by {@link RealVectorPreservingVisitor#end()}
./linear/RealVector.java:     * @return the value returned by {@link RealVectorPreservingVisitor#end()}
./linear/RealVector.java:     * @return the value returned by {@link RealVectorPreservingVisitor#end()}
./linear/RealVector.java:     * @return the value returned by {@link RealVectorPreservingVisitor#end()}
./linear/RealVector.java:     * @return the value returned by {@link RealVectorChangingVisitor#end()}
./linear/RealVector.java:     * @return the value returned by {@link RealVectorChangingVisitor#end()}
./linear/RealVector.java:     * @return the value returned by {@link RealVectorChangingVisitor#end()}
./linear/RealVector.java:     * @return the value returned by {@link RealVectorChangingVisitor#end()}
./linear/RealVector.java:         * @return the value of the entry.
./linear/RealVector.java:         * @return the index of the entry.
./linear/RealVector.java:     * @return {@code true} if two vector objects are equal, {@code false} if
./linear/RealVector.java:     * @return an unmodifiable view of {@code v}.
./linear/DefaultIterativeLinearSolverEvent.java:     * @return {@code true} if {@code r != null}
./linear/MatrixUtils.java:     * @return  RealMatrix with specified dimensions
./linear/MatrixUtils.java:     * @return  FieldMatrix with specified dimensions
./linear/MatrixUtils.java:     * @return  RealMatrix containing the values of the array
./linear/MatrixUtils.java:     * @return a matrix containing the values of the array.
./linear/MatrixUtils.java:     * @return identity matrix
./linear/MatrixUtils.java:     * @return identity matrix
./linear/MatrixUtils.java:     * @return diagonal matrix
./linear/MatrixUtils.java:     * @return diagonal matrix
./linear/MatrixUtils.java:     * @return a data.length RealVector
./linear/MatrixUtils.java:     * @return a data.length FieldVector
./linear/MatrixUtils.java:     * @return a 1 x rowData.length RealMatrix
./linear/MatrixUtils.java:     * @return a 1 x rowData.length FieldMatrix
./linear/MatrixUtils.java:     * @return a columnData x 1 RealMatrix
./linear/MatrixUtils.java:     * @return a columnData x 1 FieldMatrix
./linear/MatrixUtils.java:     * @return {@code true} if {@code matrix} is symmetric.
./linear/MatrixUtils.java:     * @return {@code true} if {@code matrix} is symmetric.
./linear/MatrixUtils.java:     * @return the converted matrix.
./linear/MatrixUtils.java:         * @return the converted matrix.
./linear/MatrixUtils.java:     * @return the converted matrix.
./linear/MatrixUtils.java:         * @return the converted matrix.
./linear/MatrixUtils.java:     * @return the inverse of {@code m}.
./linear/MatrixUtils.java:     * @return the inverse of {@code matrix}
./linear/MatrixUtils.java:     * @return the inverse of {@code m}
./linear/RealVectorFormat.java:     * @return available real vector format locales.
./linear/RealVectorFormat.java:     * @return format prefix.
./linear/RealVectorFormat.java:     * @return format suffix.
./linear/RealVectorFormat.java:     * @return format separator.
./linear/RealVectorFormat.java:     * @return components format.
./linear/RealVectorFormat.java:     * @return the default real vector format.
./linear/RealVectorFormat.java:     * @return the real vector format specific to the given locale.
./linear/RealVectorFormat.java:     * @return a formatted vector.
./linear/RealVectorFormat.java:     * @return the value passed in as toAppendTo.
./linear/RealVectorFormat.java:     * @return the parsed {@link RealVector} object.
./linear/RealVectorFormat.java:     * @return the parsed {@link RealVector} object.
./linear/FieldMatrixPreservingVisitor.java:     * @return the value that the <code>walkInXxxOrder</code> must return
./linear/BlockRealMatrix.java:     * @return a new data array containing the same entries but in blocks layout.
./linear/BlockRealMatrix.java:     * @return a new data array in blocks layout.
./linear/BlockRealMatrix.java:     * @return {@code this} + m.
./linear/BlockRealMatrix.java:     * @return {@code this} - m.
./linear/BlockRealMatrix.java:     * @return {@code this} * m.
./linear/BlockRealMatrix.java:     * @return height (number of rows) of the block
./linear/BlockRealMatrix.java:     * @return width (number of columns) of the block
./linear/EigenDecomposition.java:     * @return the V matrix.
./linear/EigenDecomposition.java:     * @return the D matrix.
./linear/EigenDecomposition.java:     * @return the transpose of the V matrix.
./linear/EigenDecomposition.java:     * @return {@code true} if the eigen values are complex, {@code false} otherwise
./linear/EigenDecomposition.java:     * @return a copy of the real parts of the eigenvalues of the original matrix.
./linear/EigenDecomposition.java:     * @return real part of the i<sup>th</sup> eigenvalue of the original
./linear/EigenDecomposition.java:     * @return a copy of the imaginary parts of the eigenvalues of the original
./linear/EigenDecomposition.java:     * @return the imaginary part of the i<sup>th</sup> eigenvalue of the original
./linear/EigenDecomposition.java:     * @return a copy of the i<sup>th</sup> eigenvector of the original matrix.
./linear/EigenDecomposition.java:     * @return the determinant of the matrix.
./linear/EigenDecomposition.java:     * @return the square-root of the matrix.
./linear/EigenDecomposition.java:     * @return a solver
./linear/EigenDecomposition.java:         * @return a Vector X that minimizes the two norm of A &times; X - B.
./linear/EigenDecomposition.java:         * @return true if the decomposed matrix is non-singular.
./linear/EigenDecomposition.java:         * @return the norm of ith (complex) eigenvalue.
./linear/EigenDecomposition.java:         * @return the inverse matrix.
./linear/EigenDecomposition.java:     * @return the {@link SchurTransformer Shur transform} for this matrix
./linear/EigenDecomposition.java:     * @return result of the complex division
./linear/AbstractRealMatrix.java:     * @return the number of rows.
./linear/AbstractRealMatrix.java:     * @return the number of columns.
./linear/AbstractRealMatrix.java:     * @return a string representation for this matrix
./linear/AbstractRealMatrix.java:     * @return true if object equals this
./linear/AbstractRealMatrix.java:     * @return hashcode for matrix
./linear/QRDecomposition.java:     * @return the R matrix
./linear/QRDecomposition.java:     * @return the Q matrix
./linear/QRDecomposition.java:     * @return the transpose of the Q matrix, Q<sup>T</sup>
./linear/QRDecomposition.java:     * @return a matrix containing the Householder reflector vectors
./linear/QRDecomposition.java:     * @return a solver
./linear/Array2DRowFieldMatrix.java:     * @return {@code this} + m.
./linear/Array2DRowFieldMatrix.java:     * @return {@code this} + m.
./linear/Array2DRowFieldMatrix.java:     * @return {@code this} * m.
./linear/Array2DRowFieldMatrix.java:     * @return the 2-dimensional array of entries.
./linear/Array2DRowFieldMatrix.java:     * @return a copy of the underlying data array.
./linear/OpenMapRealVector.java:     * @return the entries of this instance.
./linear/OpenMapRealVector.java:     * @return {@code true} if this value is within epsilon to zero,
./linear/OpenMapRealVector.java:     * @return the sum of {@code this} and {@code v}.
./linear/OpenMapRealVector.java:     * @return The result of appending {@code v} to self
./linear/OpenMapRealVector.java:     * @return the dot product of this vector with {@code v}.
./linear/OpenMapRealVector.java:     * @return the distance from {@code this} and {@code v}.
./linear/OpenMapRealVector.java:     * @return distance between this vector and {@code v}.
./linear/OpenMapRealVector.java:     * @return the LInfDistance.
./linear/OpenMapRealVector.java:     * @return the difference of {@code this} and {@code v}.
./linear/OpenMapRealVector.java:     * @return the percentage of none zero elements as a decimal percent.
./linear/OpenMapRealMatrix.java:     * @return {@code this} + {@code m}.
./linear/OpenMapRealMatrix.java:     * @return {@code this} - {@code m}.
./linear/OpenMapRealMatrix.java:     * @return {@code this} * {@code m}.
./linear/OpenMapRealMatrix.java:     * @return key within the map to access the matrix element
./linear/SparseFieldMatrix.java:     * @return the key within the map to access the matrix element.
./linear/RealVectorPreservingVisitor.java:     * @return the value returned by
./linear/RealLinearOperator.java:     * @return the number of rows of the underlying matrix
./linear/RealLinearOperator.java:     * @return the number of columns of the underlying matrix
./linear/RealLinearOperator.java:     * @return the product of {@code this} instance with {@code x}
./linear/RealLinearOperator.java:     * @return the product of the transpose of {@code this} instance with
./linear/RealLinearOperator.java:     * @return {@code false}
./linear/FieldDecompositionSolver.java:     * @return a vector X that minimizes the two norm of A &times; X - B
./linear/FieldDecompositionSolver.java:     * @return a matrix X that minimizes the two norm of A &times; X - B
./linear/FieldDecompositionSolver.java:     * @return true if the decomposed matrix is non-singular
./linear/FieldDecompositionSolver.java:     * @return inverse matrix
./linear/FieldLUDecomposition.java:     * @return the L matrix (or null if decomposed matrix is singular)
./linear/FieldLUDecomposition.java:     * @return the U matrix (or null if decomposed matrix is singular)
./linear/FieldLUDecomposition.java:     * @return the P rows permutation matrix (or null if decomposed matrix is singular)
./linear/FieldLUDecomposition.java:     * @return the pivot permutation vector
./linear/FieldLUDecomposition.java:     * @return determinant of the matrix
./linear/FieldLUDecomposition.java:     * @return a solver
./linear/FieldLUDecomposition.java:         * @return a vector X such that A &times; X = B
./linear/RealMatrix.java:     * @return a new matrix of the same type as the instance
./linear/RealMatrix.java:     * @return matrix copy
./linear/RealMatrix.java:     * @return {@code this + m}
./linear/RealMatrix.java:     * @return {@code this - m}
./linear/RealMatrix.java:     * @return {@code d + this}
./linear/RealMatrix.java:     * @return {@code d * this}
./linear/RealMatrix.java:     * @return {@code this * m}
./linear/RealMatrix.java:     * @return {@code m * this}
./linear/RealMatrix.java:     * @return {@code this^p}
./linear/RealMatrix.java:     * @return 2-dimensional array of entries
./linear/RealMatrix.java:     * @return norm
./linear/RealMatrix.java:     * @return norm
./linear/RealMatrix.java:     * @return The subMatrix containing the data of the
./linear/RealMatrix.java:     * @return The subMatrix containing the data in the specified rows and
./linear/RealMatrix.java:    * @return row Matrix.
./linear/RealMatrix.java:     * @return column Matrix.
./linear/RealMatrix.java:     * @return a row vector.
./linear/RealMatrix.java:     * @return a column vector.
./linear/RealMatrix.java:     * @return the array of entries in the row.
./linear/RealMatrix.java:     * @return the array of entries in the column.
./linear/RealMatrix.java:     * @return the matrix entry at {@code (row, column)}.
./linear/RealMatrix.java:     * @return transpose matrix
./linear/RealMatrix.java:     * @return the trace.
./linear/RealMatrix.java:     * @return {@code this * v}
./linear/RealMatrix.java:     * @return {@code this * v}
./linear/RealMatrix.java:     * @return {@code v * this}
./linear/RealMatrix.java:     * @return {@code v * this}
./linear/RealMatrix.java:     * @return the value returned by {@link RealMatrixChangingVisitor#end()} at the end
./linear/RealMatrix.java:     * @return the value returned by {@link RealMatrixPreservingVisitor#end()} at the end
./linear/RealMatrix.java:     * @return the value returned by {@link RealMatrixChangingVisitor#end()} at the end
./linear/RealMatrix.java:     * @return the value returned by {@link RealMatrixPreservingVisitor#end()} at the end
./linear/RealMatrix.java:     * @return the value returned by {@link RealMatrixChangingVisitor#end()} at the end
./linear/RealMatrix.java:     * @return the value returned by {@link RealMatrixPreservingVisitor#end()} at the end
./linear/RealMatrix.java:     * @return the value returned by {@link RealMatrixChangingVisitor#end()} at the end
./linear/RealMatrix.java:     * @return the value returned by {@link RealMatrixPreservingVisitor#end()} at the end
./linear/RealMatrix.java:     * @return the value returned by {@link RealMatrixChangingVisitor#end()} at the end
./linear/RealMatrix.java:     * @return the value returned by {@link RealMatrixPreservingVisitor#end()} at the end
./linear/RealMatrix.java:     * @return the value returned by {@link RealMatrixChangingVisitor#end()} at the end
./linear/RealMatrix.java:     * @return the value returned by {@link RealMatrixPreservingVisitor#end()} at the end
./linear/DecompositionSolver.java:     * @return a vector X that minimizes the two norm of A &times; X - B
./linear/DecompositionSolver.java:     * @return a matrix X that minimizes the two norm of A &times; X - B
./linear/DecompositionSolver.java:     * @return true if the decomposed matrix is non-singular.
./linear/DecompositionSolver.java:     * @return pseudo-inverse matrix (which is the inverse, if it exists),
./linear/DiagonalMatrix.java:     * @return {@code this + m}.
./linear/DiagonalMatrix.java:     * @return {@code this - m}
./linear/DiagonalMatrix.java:     * @return {@code this * m}
./linear/DiagonalMatrix.java:     * @return {@code this * m}
./linear/DiagonalMatrix.java:     * @return 1-dimensional array of entries.
./linear/DiagonalMatrix.java:     * @return the inverse of {@code m}
./linear/DiagonalMatrix.java:     * @return the inverse of {@code m}
./linear/DiagonalMatrix.java:     * @return {@code true} if the matrix is singular, {@code false} otherwise
./linear/IterativeLinearSolverEvent.java:     * @return the right-hand side vector, b
./linear/IterativeLinearSolverEvent.java:     * @return the norm of the residual, ||r||
./linear/IterativeLinearSolverEvent.java:     * @return the updated residual, r
./linear/IterativeLinearSolverEvent.java:     * @return the solution, x
./linear/IterativeLinearSolverEvent.java:     * @return {@code false} if {@link #getResidual()} throws a
./linear/AbstractFieldMatrix.java:     * @return the field to which the array elements belong.
./linear/AbstractFieldMatrix.java:     * @return the field to which the array elements belong.
./linear/AbstractFieldMatrix.java:     * @return a new array
./linear/AbstractFieldMatrix.java:     * @return a new array
./linear/AbstractFieldMatrix.java:     * @return a string representation for this matrix
./linear/AbstractFieldMatrix.java:     * @return true if object equals this
./linear/AbstractFieldMatrix.java:     * @return hashcode for matrix
./linear/FieldVector.java:     * @return type of field elements of the vector
./linear/FieldVector.java:     * @return vector copy
./linear/FieldVector.java:     * @return {@code this + v}
./linear/FieldVector.java:     * @return {@code this - v}
./linear/FieldVector.java:     * @return {@code this + d}
./linear/FieldVector.java:     * @return for convenience, return {@code this}
./linear/FieldVector.java:     * @return {@code this - d}
./linear/FieldVector.java:     * @return for convenience, return {@code this}
./linear/FieldVector.java:     * @return {@code this * d}
./linear/FieldVector.java:     * @return for convenience, return {@code this}
./linear/FieldVector.java:     * @return {@code this / d}
./linear/FieldVector.java:     * @return for convenience, return {@code this}
./linear/FieldVector.java:     * @return a vector containing the result of applying the function to each entry.
./linear/FieldVector.java:     * @return for convenience, return {@code this}
./linear/FieldVector.java:     * @return a vector containing {@code this[i] * v[i]} for all {@code i}
./linear/FieldVector.java:     * @return a vector containing {@code this[i] / v[i]} for all {@code i}
./linear/FieldVector.java:     * @return T array of entries
./linear/FieldVector.java:     * @return the scalar dot product of {@code this} and {@code v}
./linear/FieldVector.java:     * @return projection of {@code this} onto {@code v}
./linear/FieldVector.java:     * @return the matrix outer product between instance and v
./linear/FieldVector.java:     * @return the vector entry at {@code index}.
./linear/FieldVector.java:     * @return size
./linear/FieldVector.java:     * @return a new vector
./linear/FieldVector.java:     * @return a new vector
./linear/FieldVector.java:     * @return a vector containing n elements.
./linear/FieldVector.java:     * @return array containing a copy of vector elements
./linear/SymmLQ.java:         * @return {@code true} if convergence of the iterations has occurred
./linear/SymmLQ.java:         * @return the boolean value of {@code b == 0}
./linear/SymmLQ.java:         * @return {@code true} if {@code beta < }{@link #MACH_PREC}
./linear/SymmLQ.java:         * @return the norm of the residual, ||P * r||
./linear/SymmLQ.java:     * @return {@code true} if the tests are to be performed
./linear/SymmLQ.java:     * @return a reference to {@code x} (shallow copy)
./linear/SymmLQ.java:     * @return a reference to {@code x}
./linear/SymmLQ.java:     * @return a reference to {@code x} (shallow copy).
./linear/SchurTransformer.java:     * @return the P matrix
./linear/SchurTransformer.java:     * @return the transpose of the P matrix
./linear/SchurTransformer.java:     * @return the T matrix
./linear/SchurTransformer.java:     * @return the L1 norm of matrix T
./linear/SchurTransformer.java:     * @return the index of the first small sub-diagonal element
./linear/SchurTransformer.java:     * @return the start index for the QR step
./linear/RealMatrixPreservingVisitor.java:     * @return the value that the <code>walkInXxxOrder</code> must return
./linear/RealVectorChangingVisitor.java:     * @return the new value of the entry being visited
./linear/RealVectorChangingVisitor.java:     * @return the value returned by
./linear/FieldMatrixChangingVisitor.java:     * @return the new value to be set for the entry
./linear/FieldMatrixChangingVisitor.java:     * @return the value that the <code>walkInXxxOrder</code> must return
./linear/LUDecomposition.java:     * @return the L matrix (or null if decomposed matrix is singular)
./linear/LUDecomposition.java:     * @return the U matrix (or null if decomposed matrix is singular)
./linear/LUDecomposition.java:     * @return the P rows permutation matrix (or null if decomposed matrix is singular)
./linear/LUDecomposition.java:     * @return the pivot permutation vector
./linear/LUDecomposition.java:     * @return determinant of the matrix
./linear/LUDecomposition.java:     * @return a solver
./linear/LUDecomposition.java:         * @return the inverse matrix.
./linear/MatrixDimensionMismatchException.java:     * @return the expected row dimension.
./linear/MatrixDimensionMismatchException.java:     * @return the expected row dimension.
./linear/MatrixDimensionMismatchException.java:     * @return the wrong column dimension.
./linear/MatrixDimensionMismatchException.java:     * @return the expected column dimension.
./linear/FieldVectorChangingVisitor.java:     * @return the new value of the entry being visited
./linear/FieldVectorChangingVisitor.java:     * @return the value returned after visiting all entries
./linear/FieldVectorPreservingVisitor.java:     * @return the value returned after visiting all entries
./linear/HessenbergTransformer.java:     * @return the P matrix
./linear/HessenbergTransformer.java:     * @return the transpose of the P matrix
./linear/HessenbergTransformer.java:     * @return the H matrix
./linear/HessenbergTransformer.java:     * @return the main diagonal elements of the B matrix
./linear/CholeskyDecomposition.java:     * @return the L matrix
./linear/CholeskyDecomposition.java:     * @return the transpose of the matrix L of the decomposition
./linear/CholeskyDecomposition.java:     * @return determinant of the matrix
./linear/CholeskyDecomposition.java:     * @return a solver
./linear/CholeskyDecomposition.java:         * @return the inverse matrix.
./linear/ArrayFieldVector.java:     * @return {@code this + v}
./linear/ArrayFieldVector.java:     * @return {@code this - v}
./linear/ArrayFieldVector.java:     * @return a vector containing {@code this[i] * v[i]} for all {@code i}
./linear/ArrayFieldVector.java:     * @return a vector containing {@code this[i] / v[i]} for all {@code i}
./linear/ArrayFieldVector.java:     * @return array of entries
./linear/ArrayFieldVector.java:     * @return the scalar dot product of {@code this} and {@code v}
./linear/ArrayFieldVector.java:     * @return projection of {@code this} onto {@code v}
./linear/ArrayFieldVector.java:     * @return the matrix outer product between instance and v
./linear/ArrayFieldVector.java:     * @return a new vector
./linear/ArrayFieldVector.java:     * @return the value returned by {@link FieldVectorPreservingVisitor#end()}
./linear/ArrayFieldVector.java:     * @return the value returned by {@link FieldVectorPreservingVisitor#end()}
./linear/ArrayFieldVector.java:     * @return the value returned by {@link FieldVectorPreservingVisitor#end()}
./linear/ArrayFieldVector.java:     * @return the value returned by {@link FieldVectorPreservingVisitor#end()}
./linear/ArrayFieldVector.java:     * @return the value returned by {@link FieldVectorChangingVisitor#end()}
./linear/ArrayFieldVector.java:     * @return the value returned by {@link FieldVectorChangingVisitor#end()}
./linear/ArrayFieldVector.java:     * @return the value returned by {@link FieldVectorChangingVisitor#end()}
./linear/ArrayFieldVector.java:     * @return the value returned by {@link FieldVectorChangingVisitor#end()}
./linear/ArrayFieldVector.java:     * @return {@code true} if two vector objects are equal, {@code false}
./linear/ArrayFieldVector.java:     * @return a hash code value for this object
./linear/AnyMatrix.java:     * @return true if the matrix is square (rowDimension = columnDimension)
./linear/AnyMatrix.java:     * @return rowDimension
./linear/AnyMatrix.java:     * @return columnDimension
./linear/SingularValueDecomposition.java:     * @return the U matrix
./linear/SingularValueDecomposition.java:     * @return the U matrix (or null if decomposed matrix is singular)
./linear/SingularValueDecomposition.java:     * @return the &Sigma; matrix
./linear/SingularValueDecomposition.java:     * @return the diagonal elements of the &Sigma; matrix
./linear/SingularValueDecomposition.java:     * @return the V matrix (or null if decomposed matrix is singular)
./linear/SingularValueDecomposition.java:     * @return the V matrix (or null if decomposed matrix is singular)
./linear/SingularValueDecomposition.java:     * @return covariance matrix
./linear/SingularValueDecomposition.java:     * @return norm
./linear/SingularValueDecomposition.java:     * @return condition number of the matrix
./linear/SingularValueDecomposition.java:     * @return the inverse of the condition number.
./linear/SingularValueDecomposition.java:     * @return effective numerical matrix rank
./linear/SingularValueDecomposition.java:     * @return a solver
./linear/SingularValueDecomposition.java:         * @return a vector X that minimizes the two norm of A &times; X - B
./linear/SingularValueDecomposition.java:         * @return a matrix X that minimizes the two norm of A &times; X - B
./linear/SingularValueDecomposition.java:         * @return {@code true} if the decomposed matrix is non-singular.
./linear/SingularValueDecomposition.java:         * @return the inverse matrix.
./linear/ArrayRealVector.java:     * @return the array of entries.
./linear/ArrayRealVector.java:     * @return a new vector.
./linear/ArrayRealVector.java:     * @return {@code true} if any coordinate of this vector is {@code NaN},
./linear/ArrayRealVector.java:     * @return {@code true} if any coordinate of this vector is infinite and
./linear/BiDiagonalTransformer.java:     * @return the U matrix
./linear/BiDiagonalTransformer.java:     * @return the B matrix
./linear/BiDiagonalTransformer.java:     * @return the V matrix
./linear/BiDiagonalTransformer.java:     * @return the main diagonal elements of the B matrix
./linear/BiDiagonalTransformer.java:     * @return the main diagonal elements of the B matrix
./linear/BiDiagonalTransformer.java:     * @return the secondary diagonal elements of the B matrix
./linear/BiDiagonalTransformer.java:     * @return true if the matrix is transformed to upper bi-diagonal
./linear/ConjugateGradient.java:     * @return {@code true} if the tests are to be performed
./linear/RealMatrixChangingVisitor.java:     * @return the new value to be set for the entry
./linear/RealMatrixChangingVisitor.java:     * @return the value that the <code>walkInXxxOrder</code> must return
./linear/IterativeLinearSolver.java:     * @return the manager
./linear/IterativeLinearSolver.java:     * @return a new vector containing the solution
./linear/IterativeLinearSolver.java:     * @return a new vector containing the solution
./linear/IterativeLinearSolver.java:     * @return a reference to {@code x0} (shallow copy) updated with the
./linear/SparseFieldVector.java:     * @return the entries of this instance
./linear/SparseFieldVector.java:     * @return {@code this + v}.
./linear/SparseFieldVector.java:     * @return a new vector.
./linear/SparseFieldVector.java:     * @return the matrix outer product between instance and v
./linear/SparseFieldVector.java:     * @return {@code this - v}
./linear/SparseFieldVector.java:     * @return the value returned by {@link FieldVectorPreservingVisitor#end()}
./linear/SparseFieldVector.java:     * @return the value returned by {@link FieldVectorPreservingVisitor#end()}
./linear/SparseFieldVector.java:     * @return the value returned by {@link FieldVectorPreservingVisitor#end()}
./linear/SparseFieldVector.java:     * @return the value returned by {@link FieldVectorPreservingVisitor#end()}
./linear/SparseFieldVector.java:     * @return the value returned by {@link FieldVectorChangingVisitor#end()}
./linear/SparseFieldVector.java:     * @return the value returned by {@link FieldVectorChangingVisitor#end()}
./linear/SparseFieldVector.java:     * @return the value returned by {@link FieldVectorChangingVisitor#end()}
./linear/SparseFieldVector.java:     * @return the value returned by {@link FieldVectorChangingVisitor#end()}
./linear/FieldMatrix.java:     * @return the type of field elements of the matrix.
./linear/FieldMatrix.java:     * @return a new matrix of the same type as the instance
./linear/FieldMatrix.java:     * @return a copy of this matrix.
./linear/FieldMatrix.java:     * @return {@code this} + {@code m}.
./linear/FieldMatrix.java:     * @return {@code this} - {@code m}.
./linear/FieldMatrix.java:     * @return {@code d} + {@code this}.
./linear/FieldMatrix.java:     * @return {@code d} * {@code this}.
./linear/FieldMatrix.java:     * @return {@code this} * {@code m}.
./linear/FieldMatrix.java:     * @return {@code m} * {@code this}.
./linear/FieldMatrix.java:     * @return this^p
./linear/FieldMatrix.java:     * @return a 2-dimensional array of entries.
./linear/FieldMatrix.java:     * @return the matrix containing the data of the specified rows and columns.
./linear/FieldMatrix.java:    * @return the matrix containing the data in the
./linear/FieldMatrix.java:    * @return a row matrix.
./linear/FieldMatrix.java:    * @return a column matrix.
./linear/FieldMatrix.java:    * @return a row vector.
./linear/FieldMatrix.java:    * @return a column vector.
./linear/FieldMatrix.java:     * @return array of entries in the row.
./linear/FieldMatrix.java:     * @return array of entries in the column
./linear/FieldMatrix.java:     * @return matrix entry in row,column
./linear/FieldMatrix.java:     * @return transpose matrix
./linear/FieldMatrix.java:     * @return trace
./linear/FieldMatrix.java:     * @return {@code this * v}
./linear/FieldMatrix.java:     * @return {@code this * v}
./linear/FieldMatrix.java:     * @return {@code v * this}
./linear/FieldMatrix.java:     * @return {@code v * this}
./linear/FieldMatrix.java:     * @return the value returned by {@link FieldMatrixChangingVisitor#end()} at the end
./linear/FieldMatrix.java:     * @return the value returned by {@link FieldMatrixPreservingVisitor#end()} at the end
./linear/FieldMatrix.java:     * @return the value returned by {@link FieldMatrixChangingVisitor#end()} at the end
./linear/FieldMatrix.java:     * @return the value returned by {@link FieldMatrixPreservingVisitor#end()} at the end
./linear/FieldMatrix.java:     * @return the value returned by {@link FieldMatrixChangingVisitor#end()} at the end
./linear/FieldMatrix.java:     * @return the value returned by {@link FieldMatrixPreservingVisitor#end()} at the end
./linear/FieldMatrix.java:     * @return the value returned by {@link FieldMatrixChangingVisitor#end()} at the end
./linear/FieldMatrix.java:     * @return the value returned by {@link FieldMatrixPreservingVisitor#end()} at the end
./linear/FieldMatrix.java:     * @return the value returned by {@link FieldMatrixChangingVisitor#end()} at the end
./linear/FieldMatrix.java:     * @return the value returned by {@link FieldMatrixPreservingVisitor#end()} at the end
./linear/FieldMatrix.java:     * @return the value returned by {@link FieldMatrixChangingVisitor#end()} at the end
./linear/FieldMatrix.java:     * @return the value returned by {@link FieldMatrixPreservingVisitor#end()} at the end
./linear/PreconditionedIterativeLinearSolver.java:     * @return a new vector containing the solution
./linear/PreconditionedIterativeLinearSolver.java:     * @return a new vector containing the solution
./linear/PreconditionedIterativeLinearSolver.java:     * @return a reference to {@code x0} (shallow copy) updated with the
./linear/BlockFieldMatrix.java:     * @return a new data array containing the same entries but in blocks layout
./linear/BlockFieldMatrix.java:     * @return a new data array in blocks layout.
./linear/BlockFieldMatrix.java:     * @return {@code this + m}
./linear/BlockFieldMatrix.java:     * @return {@code this - m}
./linear/BlockFieldMatrix.java:     * @return {@code this * m}
./linear/BlockFieldMatrix.java:     * @return height (number of rows) of the block
./linear/BlockFieldMatrix.java:     * @return width (number of columns) of the block
./linear/Array2DRowRealMatrix.java:     * @return {@code this + m}.
./linear/Array2DRowRealMatrix.java:     * @return {@code this - m}
./linear/Array2DRowRealMatrix.java:     * @return {@code this * m}
./linear/Array2DRowRealMatrix.java:     * @return 2-dimensional array of entries.
./linear/Array2DRowRealMatrix.java:     * @return a copy of the underlying data array.
./linear/NonSymmetricMatrixException.java:     * @return the row index of the entry.
./linear/NonSymmetricMatrixException.java:     * @return the column index of the entry.
./linear/NonSymmetricMatrixException.java:     * @return the relative symmetry threshold.
./linear/RealMatrixFormat.java:     * @return available real vector format locales.
./linear/RealMatrixFormat.java:     * @return format prefix.
./linear/RealMatrixFormat.java:     * @return format suffix.
./linear/RealMatrixFormat.java:     * @return format prefix.
./linear/RealMatrixFormat.java:     * @return format suffix.
./linear/RealMatrixFormat.java:     * @return format separator for rows.
./linear/RealMatrixFormat.java:     * @return format separator between components.
./linear/RealMatrixFormat.java:     * @return components format.
./linear/RealMatrixFormat.java:     * @return the default real vector format.
./linear/RealMatrixFormat.java:     * @return the real vector format specific to the given locale.
./linear/RealMatrixFormat.java:     * @return a formatted matrix.
./linear/RealMatrixFormat.java:     * @return the value passed in as toAppendTo.
./linear/RealMatrixFormat.java:     * @return the parsed {@link RealMatrix} object.
./linear/RealMatrixFormat.java:     * @return the parsed {@link RealMatrix} object.
./linear/JacobiPreconditioner.java:     * @return the diagonal preconditioner made of the inverse of the diagonal
./linear/JacobiPreconditioner.java:     * @return the square root of {@code this} preconditioner
./ml/clustering/Cluster.java:     * @return points contained in the cluster
./ml/clustering/evaluation/ClusterEvaluator.java:     * @return the computed score
./ml/clustering/evaluation/ClusterEvaluator.java:     * @return {@code true} if the first score is considered to be better, {@code false} otherwise
./ml/clustering/evaluation/ClusterEvaluator.java:     * @return the distance between the two clusterables
./ml/clustering/evaluation/ClusterEvaluator.java:     * @return the computed centroid for the cluster,
./ml/clustering/FuzzyKMeansClusterer.java:     * @return the number of clusters
./ml/clustering/FuzzyKMeansClusterer.java:     * @return the fuzziness factor
./ml/clustering/FuzzyKMeansClusterer.java:     * @return the maximum number of iterations, or -1 if no maximum is set
./ml/clustering/FuzzyKMeansClusterer.java:     * @return the convergence criteria
./ml/clustering/FuzzyKMeansClusterer.java:     * @return the random generator
./ml/clustering/FuzzyKMeansClusterer.java:     * @return the membership matrix
./ml/clustering/FuzzyKMeansClusterer.java:     * @return the list of data points, or {@code null} if {@link #cluster(Collection)} has
./ml/clustering/FuzzyKMeansClusterer.java:     * @return the list of clusters, or {@code null} if {@link #cluster(Collection)} has
./ml/clustering/FuzzyKMeansClusterer.java:     * @return the objective function evaluation as double value
./ml/clustering/FuzzyKMeansClusterer.java:     * @return the list of clusters
./ml/clustering/FuzzyKMeansClusterer.java:     * @return the maximum membership matrix change
./ml/clustering/MultiKMeansPlusPlusClusterer.java:     * @return the embedded clusterer
./ml/clustering/MultiKMeansPlusPlusClusterer.java:     * @return the number of trials
./ml/clustering/MultiKMeansPlusPlusClusterer.java:     * @return the used {@link ClusterEvaluator}
./ml/clustering/MultiKMeansPlusPlusClusterer.java:     * @return a list of clusters containing the points
./ml/clustering/Clusterer.java:     * @return a {@link List} of clusters
./ml/clustering/Clusterer.java:     * @return the distance measure
./ml/clustering/Clusterer.java:     * @return the distance between the two clusterables
./ml/clustering/Clusterable.java:     * @return the point array
./ml/clustering/KMeansPlusPlusClusterer.java:     * @return the number of clusters
./ml/clustering/KMeansPlusPlusClusterer.java:     * @return the maximum number of iterations, or -1 if no maximum is set
./ml/clustering/KMeansPlusPlusClusterer.java:     * @return the random generator
./ml/clustering/KMeansPlusPlusClusterer.java:     * @return the {@link EmptyClusterStrategy}
./ml/clustering/KMeansPlusPlusClusterer.java:     * @return a list of clusters containing the points
./ml/clustering/KMeansPlusPlusClusterer.java:     * @return the number of points assigned to different clusters as the iteration before
./ml/clustering/KMeansPlusPlusClusterer.java:     * @return the initial centers
./ml/clustering/KMeansPlusPlusClusterer.java:     * @return a random point from the selected cluster
./ml/clustering/KMeansPlusPlusClusterer.java:     * @return a random point from the selected cluster
./ml/clustering/KMeansPlusPlusClusterer.java:     * @return point farthest to its cluster center
./ml/clustering/KMeansPlusPlusClusterer.java:     * @return the index of the nearest {@link Cluster} to the given point
./ml/clustering/KMeansPlusPlusClusterer.java:     * @return the computed centroid for the set of points
./ml/clustering/DBSCANClusterer.java:     * @return maximum radius of the neighborhood
./ml/clustering/DBSCANClusterer.java:     * @return minimum number of points needed for a cluster
./ml/clustering/DBSCANClusterer.java:     * @return the list of clusters
./ml/clustering/DBSCANClusterer.java:     * @return the expanded cluster
./ml/clustering/DBSCANClusterer.java:     * @return the List of neighbors
./ml/clustering/DBSCANClusterer.java:     * @return merged lists
./ml/clustering/CentroidCluster.java:     * @return chosen cluster center
./ml/distance/DistanceMeasure.java:     * @return the distance between the two vectors
./ml/neuralnet/FeatureInitializerFactory.java:     * @return an initializer such that the features will be initialized with
./ml/neuralnet/FeatureInitializerFactory.java:     * @return an initializer such that the features will be initialized with
./ml/neuralnet/FeatureInitializerFactory.java:     * @return the initializer.
./ml/neuralnet/FeatureInitializerFactory.java:     * @return an initializer whose {@link FeatureInitializer#value() value}
./ml/neuralnet/oned/NeuronString.java:     * @return the network.
./ml/neuralnet/oned/NeuronString.java:     * @return the number of neurons.
./ml/neuralnet/oned/NeuronString.java:     * @return the features of the neuron at index {@code i}.
./ml/neuralnet/oned/NeuronString.java:     * @return the proxy instance that will be actually serialized.
./ml/neuralnet/oned/NeuronString.java:         * @return the {@link Neuron} for which this instance is the proxy.
./ml/neuralnet/sofm/KohonenUpdateAction.java:     * @return the current number of calls.
./ml/neuralnet/sofm/KohonenUpdateAction.java:     * @return {@code true} if the update succeeded, {@code true} if a
./ml/neuralnet/sofm/KohonenUpdateAction.java:     * @return the winning neuron.
./ml/neuralnet/sofm/KohonenUpdateAction.java:     * @return the new values for the features.
./ml/neuralnet/sofm/NeighbourhoodSizeFunctionFactory.java:     * @return the neighbourhood size function.
./ml/neuralnet/sofm/NeighbourhoodSizeFunctionFactory.java:     * @return the neighbourhood size function.
./ml/neuralnet/sofm/NeighbourhoodSizeFunction.java:     * @return the value of the function at {@code numCall}.
./ml/neuralnet/sofm/util/ExponentialDecayFunction.java:     * @return the value of the function at {@code numCall}.
./ml/neuralnet/sofm/util/QuasiSigmoidDecayFunction.java:     * @return the value of the function at {@code numCall}.
./ml/neuralnet/sofm/LearningFactorFunctionFactory.java:     * @return the learning factor function.
./ml/neuralnet/sofm/LearningFactorFunctionFactory.java:     * @return the learning factor function.
./ml/neuralnet/sofm/LearningFactorFunction.java:     * @return the value of the function at {@code numCall}.
./ml/neuralnet/FeatureInitializer.java:     * @return the initial value.
./ml/neuralnet/twod/NeuronSquareMesh2D.java:     * @return a new instance with the same state as this instance.
./ml/neuralnet/twod/NeuronSquareMesh2D.java:     * @return the network.
./ml/neuralnet/twod/NeuronSquareMesh2D.java:     * @return the number of rows.
./ml/neuralnet/twod/NeuronSquareMesh2D.java:     * @return the number of column.
./ml/neuralnet/twod/NeuronSquareMesh2D.java:     * @return the neuron at {@code (i, j)}.
./ml/neuralnet/twod/NeuronSquareMesh2D.java:     * @return the neuron at the requested location, or {@code null} if
./ml/neuralnet/twod/NeuronSquareMesh2D.java:     * @return an array of length 2 containing the indices of the requested
./ml/neuralnet/twod/NeuronSquareMesh2D.java:     * @return the proxy instance that will be actually serialized.
./ml/neuralnet/twod/NeuronSquareMesh2D.java:         * @return the {@link Neuron} for which this instance is the proxy.
./ml/neuralnet/twod/util/UnifiedDistanceMatrix.java:     * @return an image representing the individual distances.
./ml/neuralnet/twod/util/UnifiedDistanceMatrix.java:     * @return an image representing the average distances.
./ml/neuralnet/twod/util/MapVisualization.java:     * @return a 2D-array (in row major order) representing the property.
./ml/neuralnet/twod/util/MapDataVisualization.java:     * @return a 2D-array (in row major order) representing the metrics.
./ml/neuralnet/twod/util/LocationFinder.java:         * @return the row index.
./ml/neuralnet/twod/util/LocationFinder.java:         * @return the column index.
./ml/neuralnet/twod/util/LocationFinder.java:     * @return the (row, column) coordinates of {@code n}, or {@code null}
./ml/neuralnet/Neuron.java:     * @return a new instance with the same state as this instance.
./ml/neuralnet/Neuron.java:     * @return the identifier.
./ml/neuralnet/Neuron.java:     * @return the number of features.
./ml/neuralnet/Neuron.java:     * @return a copy of the neuron's features.
./ml/neuralnet/Neuron.java:     * @return {@code true} if the update was successful, {@code false}
./ml/neuralnet/Neuron.java:     * @return the number of update attempts.
./ml/neuralnet/Neuron.java:     * @return the number of successful updates.
./ml/neuralnet/Neuron.java:     * @return {@code true} if the arrays contain the same values.
./ml/neuralnet/Neuron.java:     * @return the proxy instance that will be actually serialized.
./ml/neuralnet/Neuron.java:         * @return the {@link Neuron} for which this instance is the proxy.
./ml/neuralnet/MapUtils.java:     * @return the neuron whose features are closest to the given data.
./ml/neuralnet/MapUtils.java:     * @return the two neurons whose features are closest to the given data.
./ml/neuralnet/MapUtils.java:     * @return the neurons, sorted in increasing order of distance in data
./ml/neuralnet/MapUtils.java:     * @return the matrix of average distances.
./ml/neuralnet/MapUtils.java:     * @return the number of hits for each neuron in the map.
./ml/neuralnet/MapUtils.java:     * @return the error.
./ml/neuralnet/MapUtils.java:     * @return the error.
./ml/neuralnet/MapUtils.java:        /** @return the neuron. */
./ml/neuralnet/Network.java:     * @return a new instance with the same state as this instance.
./ml/neuralnet/Network.java:     * @return a list of neurons, sorted in the order prescribed by the
./ml/neuralnet/Network.java:     * @return the neuron's identifier.
./ml/neuralnet/Network.java:     * @return the size of the features set.
./ml/neuralnet/Network.java:     * @return the neuron associated with the given {@code id}.
./ml/neuralnet/Network.java:     * @return the list of neighbours.
./ml/neuralnet/Network.java:     * @return the list of neighbours.
./ml/neuralnet/Network.java:     * @return the list of neighbours.
./ml/neuralnet/Network.java:     * @return the list of neighbours.
./ml/neuralnet/Network.java:     * @return a value that will serve as a unique identifier.
./ml/neuralnet/Network.java:     * @return the proxy instance that will be actually serialized.
./ml/neuralnet/Network.java:         * @return the {@link Network} for which this instance is the proxy.
./ode/ContinuousOutputFieldModel.java:     * @return initial integration time
./ode/ContinuousOutputFieldModel.java:     * @return final integration time
./ode/ContinuousOutputFieldModel.java:     * @return state at interpolated time
./ode/ContinuousOutputFieldModel.java:     * @return -1 if the double is before the interval, 0 if it is in
./ode/Parameterizable.java:     * @return parameters names
./ode/Parameterizable.java:     * @return true if the parameter is supported
./ode/FirstOrderFieldDifferentialEquations.java:     * @return dimension of the problem
./ode/FirstOrderFieldDifferentialEquations.java:     * @return time derivative of the state vector
./ode/FieldEquationsMapper.java:     * @return number of equations mapped
./ode/FieldEquationsMapper.java:     * @return dimension of the complete set of equations
./ode/FieldEquationsMapper.java:     * @return flat array containing the mapped state, including primary and secondary components
./ode/FieldEquationsMapper.java:     * @return flat array containing the mapped state derivative, including primary and secondary components
./ode/FieldEquationsMapper.java:     * @return mapped state
./ode/FieldEquationsMapper.java:     * @return equation data
./ode/FirstOrderConverter.java:   * @return dimension of the problem
./ode/EquationsMapper.java:     * @return index of the first equation element in complete state arrays
./ode/EquationsMapper.java:     * @return dimension of the secondary state parameters
./ode/FieldSecondaryEquations.java:     * @return dimension of the secondary state parameters
./ode/FieldSecondaryEquations.java:     * @return derivative of the secondary state vector
./ode/nonstiff/AdamsNordsieckTransformer.java:     * @return Nordsieck transformer for the specified number of steps
./ode/nonstiff/AdamsNordsieckTransformer.java:     * @return number of steps of the method
./ode/nonstiff/AdamsNordsieckTransformer.java:     * @return P matrix
./ode/nonstiff/AdamsNordsieckTransformer.java:     * @return Nordieck vector at start of first step (h<sup>2</sup>/2 y''<sub>n</sub>,
./ode/nonstiff/AdamsNordsieckTransformer.java:     * @return updated high order derivatives
./ode/nonstiff/RungeKuttaFieldIntegrator.java:     * @return p/q computed in the instance field
./ode/nonstiff/RungeKuttaFieldIntegrator.java:     * @return external weights for the high order method from Butcher array
./ode/nonstiff/RungeKuttaFieldIntegrator.java:     * @return state vector at {@code t}
./ode/nonstiff/AdamsFieldStepInterpolator.java:     * @return a new instance
./ode/nonstiff/AdamsFieldStepInterpolator.java:     * @return estimated state
./ode/nonstiff/FieldButcherArrayProvider.java:     * @return time steps from Butcher array (without the first zero
./ode/nonstiff/FieldButcherArrayProvider.java:     * @return internal weights from Butcher array (without the first empty row)
./ode/nonstiff/FieldButcherArrayProvider.java:     * @return external weights for the high order method from Butcher array
./ode/nonstiff/AdamsIntegrator.java:     * @return updated high order derivatives
./ode/nonstiff/AdamsNordsieckFieldTransformer.java:     * @return Nordsieck transformer for the specified field and number of steps
./ode/nonstiff/AdamsNordsieckFieldTransformer.java:     * @return P matrix
./ode/nonstiff/AdamsNordsieckFieldTransformer.java:     * @return Nordieck vector at start of first step (h<sup>2</sup>/2 y''<sub>n</sub>,
./ode/nonstiff/AdamsNordsieckFieldTransformer.java:     * @return updated high order derivatives
./ode/nonstiff/EmbeddedRungeKuttaIntegrator.java:   * @return order of the method
./ode/nonstiff/EmbeddedRungeKuttaIntegrator.java:   * @return safety factor
./ode/nonstiff/EmbeddedRungeKuttaIntegrator.java:   * @return minimal reduction factor
./ode/nonstiff/EmbeddedRungeKuttaIntegrator.java:   * @return maximal growth factor
./ode/nonstiff/EmbeddedRungeKuttaIntegrator.java:   * @return error ratio, greater than 1 if step should be rejected
./ode/nonstiff/GraggBulirschStoerIntegrator.java:   * @return true if computation was done properly,
./ode/nonstiff/GraggBulirschStoerStepInterpolator.java:   * @return estimate of the interpolation error
./ode/nonstiff/AdamsMoultonFieldIntegrator.java:         * @return the normalized correction, if greater than 1, the step
./ode/nonstiff/RungeKuttaFieldStepInterpolator.java:     * @return a new instance
./ode/nonstiff/RungeKuttaFieldStepInterpolator.java:     * @return combined state
./ode/nonstiff/RungeKuttaFieldStepInterpolator.java:     * @return combined state
./ode/nonstiff/RungeKuttaFieldStepInterpolator.java:     * @return combined state
./ode/nonstiff/RungeKuttaFieldStepInterpolator.java:     * @return a itself, as a convenience for fluent API
./ode/nonstiff/RungeKuttaIntegrator.java:   * @return state vector at {@code t}
./ode/nonstiff/AdamsFieldIntegrator.java:     * @return updated high order derivatives
./ode/nonstiff/AdaptiveStepsizeIntegrator.java:   * @return first integration step
./ode/nonstiff/AdaptiveStepsizeIntegrator.java:   * @return a bounded integration step (h if no bound is reach, or a bounded value)
./ode/nonstiff/AdaptiveStepsizeIntegrator.java:   * @return minimal step
./ode/nonstiff/AdaptiveStepsizeIntegrator.java:   * @return maximal step
./ode/nonstiff/EmbeddedRungeKuttaFieldIntegrator.java:     * @return p/q computed in the instance field
./ode/nonstiff/EmbeddedRungeKuttaFieldIntegrator.java:     * @return p/q computed in the instance field
./ode/nonstiff/EmbeddedRungeKuttaFieldIntegrator.java:     * @return external weights for the high order method from Butcher array
./ode/nonstiff/EmbeddedRungeKuttaFieldIntegrator.java:     * @return order of the method
./ode/nonstiff/EmbeddedRungeKuttaFieldIntegrator.java:     * @return safety factor
./ode/nonstiff/EmbeddedRungeKuttaFieldIntegrator.java:     * @return minimal reduction factor
./ode/nonstiff/EmbeddedRungeKuttaFieldIntegrator.java:     * @return maximal growth factor
./ode/nonstiff/EmbeddedRungeKuttaFieldIntegrator.java:     * @return error ratio, greater than 1 if step should be rejected
./ode/nonstiff/AdamsBashforthFieldIntegrator.java:     * @return estimated normalized local discretization error
./ode/nonstiff/AdamsMoultonIntegrator.java:         * @return the normalized correction, if greater than 1, the step
./ode/nonstiff/AdamsBashforthIntegrator.java:     * @return estimated normalized local discretization error
./ode/nonstiff/DormandPrince853FieldStepInterpolator.java:     * @return p/q computed in the instance field
./ode/nonstiff/AdaptiveStepsizeFieldIntegrator.java:     * @return first integration step
./ode/nonstiff/AdaptiveStepsizeFieldIntegrator.java:     * @return a bounded integration step (h if no bound is reach, or a bounded value)
./ode/nonstiff/AdaptiveStepsizeFieldIntegrator.java:     * @return minimal step
./ode/nonstiff/AdaptiveStepsizeFieldIntegrator.java:     * @return maximal step
./ode/ContinuousOutputModel.java:   * @return initial integration time
./ode/ContinuousOutputModel.java:   * @return final integration time
./ode/ContinuousOutputModel.java:   * @return interpolation point time
./ode/ContinuousOutputModel.java:   * @return state vector at time {@link #getInterpolatedTime}
./ode/ContinuousOutputModel.java:   * @return derivatives of the state vector at time {@link #getInterpolatedTime}
./ode/ContinuousOutputModel.java:   * @return interpolated secondary state at the current interpolation date
./ode/ContinuousOutputModel.java:   * @return interpolated secondary derivatives at the current interpolation date
./ode/ContinuousOutputModel.java:   * @return -1 if the double is before the interval, 0 if it is in
./ode/sampling/StepNormalizer.java:     * @return value indicating whether the next normalized time is in the
./ode/sampling/AbstractStepInterpolator.java:    * @return a copy of the finalized instance
./ode/sampling/AbstractStepInterpolator.java:   * @return previous global grid point time
./ode/sampling/AbstractStepInterpolator.java:   * @return current global grid point time
./ode/sampling/AbstractStepInterpolator.java:   * @return previous soft grid point time
./ode/sampling/AbstractStepInterpolator.java:   * @return current soft grid point time
./ode/sampling/AbstractStepInterpolator.java:   * @return interpolated time to be set later by the caller
./ode/sampling/NordsieckStepInterpolator.java:     * @return state vector at time {@link #getInterpolatedTime}
./ode/sampling/StepNormalizerBounds.java:     * @return value indicating whether the first point should be passed
./ode/sampling/StepNormalizerBounds.java:     * @return value indicating whether the last point should be passed
./ode/sampling/FieldStepNormalizer.java:     * @return value indicating whether the next normalized time is in the
./ode/sampling/StepInterpolator.java:   * @return previous grid point time
./ode/sampling/StepInterpolator.java:   * @return current grid point time
./ode/sampling/StepInterpolator.java:   * @return interpolation point time
./ode/sampling/StepInterpolator.java:   * @return state vector at time {@link #getInterpolatedTime}
./ode/sampling/StepInterpolator.java:   * @return derivatives of the state vector at time {@link #getInterpolatedTime}
./ode/sampling/StepInterpolator.java:   * @return interpolated secondary state at the current interpolation date
./ode/sampling/StepInterpolator.java:   * @return interpolated secondary derivatives at the current interpolation date
./ode/sampling/StepInterpolator.java:   * @return true if the integration variable (time) increases during
./ode/sampling/StepInterpolator.java:   * @return a deep copy of the instance, which can be used independently.
./ode/sampling/FieldStepInterpolator.java:   * @return state at previous grid point time
./ode/sampling/FieldStepInterpolator.java:   * @return state at current grid point time
./ode/sampling/FieldStepInterpolator.java:   * @return state at interpolated time
./ode/sampling/FieldStepInterpolator.java:   * @return true if the integration variable (time) increases during
./ode/sampling/AbstractFieldStepInterpolator.java:     * @return restricted version of the instance
./ode/sampling/AbstractFieldStepInterpolator.java:     * @return a new instance
./ode/sampling/AbstractFieldStepInterpolator.java:     * @return previous global grid point state
./ode/sampling/AbstractFieldStepInterpolator.java:     * @return current global grid point state
./ode/sampling/AbstractFieldStepInterpolator.java:     * @return interpolated state and derivatives
./ode/sampling/DummyStepHandler.java:     * @return the only instance
./ode/sampling/DummyStepHandler.java:     * @return the singleton instance
./ode/SecondOrderDifferentialEquations.java:     * @return dimension of the problem
./ode/MultistepIntegrator.java:     * @return starter integrator
./ode/MultistepIntegrator.java:     * @return Nordieck vector at first step (h<sup>2</sup>/2 y''<sub>n</sub>,
./ode/MultistepIntegrator.java:     * @return minimal reduction factor
./ode/MultistepIntegrator.java:     * @return maximal growth factor
./ode/MultistepIntegrator.java:     * @return safety factor
./ode/MultistepIntegrator.java:     * @return number of steps of the multistep method (excluding the one being computed)
./ode/MultistepIntegrator.java:     * @return grow/shrink factor for next step
./ode/MultistepIntegrator.java:         * @return Nordieck vector at first step (h<sup>2</sup>/2 y''<sub>n</sub>,
./ode/FieldExpandableODE.java:     * @return mapper for the set of equations
./ode/FieldExpandableODE.java:     * @return index of the secondary equation in the expanded state, to be used
./ode/FieldExpandableODE.java:     * @return time derivative of the complete state vector
./ode/FieldODEState.java:     * @return copied array or null if original array was null
./ode/FieldODEState.java:     * @return time
./ode/FieldODEState.java:     * @return main state dimension
./ode/FieldODEState.java:     * @return main state at time
./ode/FieldODEState.java:     * @return number of secondary states.
./ode/FieldODEState.java:     * @return secondary state dimension
./ode/FieldODEState.java:     * @return secondary state at time
./ode/ODEIntegrator.java:     * @return name of the method
./ode/ODEIntegrator.java:     * @return an unmodifiable collection of the added events handlers
./ode/ODEIntegrator.java:     * @return an unmodifiable collection of the added events handlers
./ode/ODEIntegrator.java:     * @return current value of the step start time t<sub>i</sub>
./ode/ODEIntegrator.java:     * @return current signed value of the stepsize
./ode/ODEIntegrator.java:     * @return maximal number of functions evaluations
./ode/ODEIntegrator.java:     * @return number of evaluations of the differential equations function
./ode/FirstOrderIntegrator.java:   * @return stop time, will be the same as target time if integration reached its
./ode/ParameterConfiguration.java:     * @return parameterName parameter name
./ode/ParameterConfiguration.java:     * @return hP parameter step
./ode/FirstOrderDifferentialEquations.java:     * @return dimension of the problem
./ode/UnknownParameterException.java:     * @return the name of the unknown parameter.
./ode/FieldODEStateAndDerivative.java:     * @return derivative of the main state at time
./ode/FieldODEStateAndDerivative.java:     * @return derivative of the secondary state at time
./ode/ExpandableStatefulODE.java:     * @return primary set of differential equations
./ode/ExpandableStatefulODE.java:     * @return dimension of the complete set of equations
./ode/ExpandableStatefulODE.java:     * @return index of the secondary equation in the expanded state
./ode/ExpandableStatefulODE.java:     * @return mapper for the primary set
./ode/ExpandableStatefulODE.java:     * @return equations mappers for the secondary equations sets
./ode/ExpandableStatefulODE.java:     * @return current time
./ode/ExpandableStatefulODE.java:     * @return primary part of the current state
./ode/ExpandableStatefulODE.java:     * @return primary part of the current state derivative
./ode/ExpandableStatefulODE.java:     * @return secondary part of the current state
./ode/ExpandableStatefulODE.java:     * @return secondary part of the current state derivative
./ode/ExpandableStatefulODE.java:     * @return complete current state
./ode/SecondaryEquations.java:     * @return dimension of the secondary state parameters
./ode/AbstractFieldIntegrator.java:     * @return field to which state vector elements belong
./ode/AbstractFieldIntegrator.java:     * @return initial state with derivatives added
./ode/AbstractFieldIntegrator.java:     * @return differential equations to integrate
./ode/AbstractFieldIntegrator.java:     * @return evaluations counter
./ode/AbstractFieldIntegrator.java:     * @return state completed with derivatives
./ode/AbstractFieldIntegrator.java:     * @return state at end of step
./ode/AbstractFieldIntegrator.java:     * @return true if a reset occurred while last step was accepted
./ode/AbstractFieldIntegrator.java:     * @return current step size
./ode/AbstractFieldIntegrator.java:     * @return current step start
./ode/AbstractFieldIntegrator.java:     * @return true if this step is the last one
./ode/events/FilterType.java:     * @return true if triggered events are increasing events
./ode/events/FilterType.java:     * @return next transformer transformer
./ode/events/EventState.java:     * @return underlying event handler
./ode/events/EventState.java:     * @return maximal time interval between events handler checks
./ode/events/EventState.java:     * @return convergence threshold for event localization
./ode/events/EventState.java:     * @return upper limit in the iteration count for event localization
./ode/events/EventState.java:     * @return complete state
./ode/events/EventState.java:     * @return true if the event handler triggers an event before
./ode/events/EventState.java:     * @return occurrence time of the event triggered in the current
./ode/events/EventState.java:     * @return true if the integration should be stopped
./ode/events/EventState.java:     * @return true if the integrator should reset the derivatives too
./ode/events/EventState.java:         * @return wrapped exception
./ode/events/FieldEventHandler.java:     * @return value of the g switching function
./ode/events/FieldEventHandler.java:     * @return indication of what the integrator should do next, this
./ode/events/FieldEventHandler.java:     * @return reset state (note that it does not include the derivatives, they will
./ode/events/Transformer.java:     * @return transformed value of function g
./ode/events/EventHandler.java:   * @return value of the g switching function
./ode/events/EventHandler.java:   * @return indication of what the integrator should do next, this
./ode/events/FieldEventState.java:     * @return underlying event handler
./ode/events/FieldEventState.java:     * @return maximal time interval between events handler checks
./ode/events/FieldEventState.java:     * @return convergence threshold for event localization
./ode/events/FieldEventState.java:     * @return upper limit in the iteration count for event localization
./ode/events/FieldEventState.java:     * @return true if the event handler triggers an event before
./ode/events/FieldEventState.java:     * @return occurrence time of the event triggered in the current
./ode/events/FieldEventState.java:     * @return true if the integration should be stopped
./ode/events/FieldEventState.java:     * @return reset state (may by the same as initial state if only
./ode/AbstractIntegrator.java:     * @return differential equations to integrate
./ode/AbstractIntegrator.java:     * @return evaluations counter
./ode/AbstractIntegrator.java:     * @return evaluations counter
./ode/AbstractIntegrator.java:     * @return time at end of step
./ode/MultistepFieldIntegrator.java:     * @return starter integrator
./ode/MultistepFieldIntegrator.java:     * @return Nordieck vector at first step (h<sup>2</sup>/2 y''<sub>n</sub>,
./ode/MultistepFieldIntegrator.java:     * @return minimal reduction factor
./ode/MultistepFieldIntegrator.java:     * @return maximal growth factor
./ode/MultistepFieldIntegrator.java:     * @return safety factor
./ode/MultistepFieldIntegrator.java:     * @return number of steps of the multistep method (excluding the one being computed)
./ode/MultistepFieldIntegrator.java:     * @return grow/shrink factor for next step
./ode/ParameterizedODE.java:     * @return parameter value
./ode/FirstOrderFieldIntegrator.java:     * @return name of the method
./ode/FirstOrderFieldIntegrator.java:     * @return an unmodifiable collection of the added events handlers
./ode/FirstOrderFieldIntegrator.java:     * @return an unmodifiable collection of the added events handlers
./ode/FirstOrderFieldIntegrator.java:     * @return current value of the state at step start time t<sub>i</sub>
./ode/FirstOrderFieldIntegrator.java:     * @return current signed value of the stepsize
./ode/FirstOrderFieldIntegrator.java:     * @return maximal number of functions evaluations
./ode/FirstOrderFieldIntegrator.java:     * @return number of evaluations of the differential equations function
./ode/FirstOrderFieldIntegrator.java:     * @return final state, its time will be the same as {@code finalTime} if
./ode/ParameterizedWrapper.java:     * @return dimension of the underlying FODE
./optim/PointVectorValuePair.java:     * @return a copy of the stored point.
./optim/PointVectorValuePair.java:     * @return a reference to the internal array storing the point.
./optim/PointVectorValuePair.java:     * @return a copy of the stored value of the objective function.
./optim/PointVectorValuePair.java:     * @return a reference to the internal array storing the value of
./optim/PointVectorValuePair.java:     * @return data transfer object that will be serialized
./optim/PointVectorValuePair.java:         * @return replacement {@link PointValuePair}
./optim/SimpleBounds.java:     * @return the lower bounds.
./optim/SimpleBounds.java:     * @return the upper bounds.
./optim/SimpleBounds.java:     * @return a new instance suitable for passing to an optimizer that
./optim/MaxIter.java:     * @return the allowed number of evaluations.
./optim/MaxIter.java:     * @return a new instance suitable for allowing {@link Integer#MAX_VALUE}
./optim/SimplePointChecker.java:     * @return {@code true} if the arguments satify the convergence criterion.
./optim/SimpleValueChecker.java:     * @return {@code true} if the algorithm has converged.
./optim/nonlinear/vector/ModelFunction.java:     * @return the model function.
./optim/nonlinear/vector/Target.java:     * @return the initial guess.
./optim/nonlinear/vector/ModelFunctionJacobian.java:     * @return the model function Jacobian.
./optim/nonlinear/vector/JacobianMultivariateVectorOptimizer.java:     * @return the Jacobian at the specified point.
./optim/nonlinear/vector/JacobianMultivariateVectorOptimizer.java:     * @return {@inheritDoc}
./optim/nonlinear/vector/Weight.java:     * @return the initial guess.
./optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java:     * @return the weighted Jacobian: W<sup>1/2</sup> J.
./optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java:     * @return the cost.
./optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java:     * @return the RMS value.
./optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java:     * @return chi-square value
./optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java:     * @return the square-root of the weight matrix.
./optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java:     * @return the covariance matrix.
./optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java:     * @return an estimate of the standard deviation of the optimized parameters
./optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java:     * @return {@inheritDoc}
./optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java:     * @return the residuals.
./optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java:     * @return the square-root of the weight matrix.
./optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java:     * @return a comparator for sorting the optima.
./optim/nonlinear/vector/MultivariateVectorOptimizer.java:     * @return the objective function value at the specified point.
./optim/nonlinear/vector/MultivariateVectorOptimizer.java:     * @return {@inheritDoc}
./optim/nonlinear/vector/MultivariateVectorOptimizer.java:     * @return the weight matrix.
./optim/nonlinear/vector/MultivariateVectorOptimizer.java:     * @return the target values.
./optim/nonlinear/vector/MultivariateVectorOptimizer.java:     * @return the length of the target vector.
./optim/nonlinear/scalar/MultivariateOptimizer.java:     * @return {@inheritDoc}
./optim/nonlinear/scalar/MultivariateOptimizer.java:     * @return the optimization type.
./optim/nonlinear/scalar/MultivariateOptimizer.java:     * @return the objective function value at the specified point.
./optim/nonlinear/scalar/MultivariateFunctionPenaltyAdapter.java:     * @return either underlying function value or penalty function value
./optim/nonlinear/scalar/ObjectiveFunctionGradient.java:     * @return the objective function gradient.
./optim/nonlinear/scalar/MultiStartMultivariateOptimizer.java:     * @return a comparator for sorting the optima.
./optim/nonlinear/scalar/MultivariateFunctionMappingAdapter.java:     * @return the bounded values.
./optim/nonlinear/scalar/MultivariateFunctionMappingAdapter.java:     * @return the unbounded values.
./optim/nonlinear/scalar/MultivariateFunctionMappingAdapter.java:     * @return underlying function value
./optim/nonlinear/scalar/MultivariateFunctionMappingAdapter.java:         * @return the bounded value.
./optim/nonlinear/scalar/MultivariateFunctionMappingAdapter.java:         * @return the unbounded value.
./optim/nonlinear/scalar/LineSearch.java:     * @return the optimum.
./optim/nonlinear/scalar/noderiv/AbstractSimplex.java:     * @return the dimension of the simplex.
./optim/nonlinear/scalar/noderiv/AbstractSimplex.java:     * @return the size of the simplex.
./optim/nonlinear/scalar/noderiv/AbstractSimplex.java:     * @return all the simplex points.
./optim/nonlinear/scalar/noderiv/AbstractSimplex.java:     * @return the point at location {@code index}.
./optim/nonlinear/scalar/noderiv/AbstractSimplex.java:     * @return the steps.
./optim/nonlinear/scalar/noderiv/PowellOptimizer.java:     * @return a 2-element array containing the new point (at index 0) and
./optim/nonlinear/scalar/noderiv/SimplexOptimizer.java:     * @return {@inheritDoc}
./optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java:     * @return the value of the objective at the optimum.
./optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java:     * @return the value of the objective at the optimum.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @return History of sigma values.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @return History of mean matrix.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @return History of fitness values.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @return History of D matrix.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:         * @return the sigma values.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:         * @return the population size.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @return {@inheritDoc}
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @return hsig flag indicating a small correction.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @return a sorted array of indices pointing into doubles.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @return a double equal to maximum value minus minimum value.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:         * @return the objective value + penalty for violated bounds.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:         * @return {@code true} if in bounds.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:         * @return the repaired (i.e. all in bounds) objective variables.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:         * @return Penalty value according to the violation of the bounds.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @return Matrix representing the element-wise logarithm of m.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @return Matrix representing the element-wise square root of m.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @return Matrix representing the element-wise square of m.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @return the matrix where the elements of m and n are element-wise multiplied.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @return Matrix where the elements of m and n are element-wise divided.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @return Matrix representing the selected columns.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @return Upper triangular part of matrix.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @return Row matrix representing the sums of the rows.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @return the diagonal n-by-n matrix if m is a column matrix or the column
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @return n-by-m matrix filled with 1.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @return n-by-m matrix of 0 values out of diagonal, and 1 values on
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @return n-by-m matrix of zero values.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @return a matrix which replicates the input matrix in both directions.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @return a sequence as column matrix.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @return the maximum of the matrix element values.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @return the minimum of the matrix element values.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @return the maximum of the array values.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @return the minimum of the array values.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @return the inverse of the mapping defined by indices.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @return the indices in inverse order (last is first).
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @return an array of Gaussian random numbers.
./optim/nonlinear/scalar/noderiv/CMAESOptimizer.java:     * @return a 2-dimensional matrix of Gaussian random numbers.
./optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex.java:     * @return the best point in the transformed simplex.
./optim/nonlinear/scalar/ObjectiveFunction.java:     * @return the objective function.
./optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java:         * @return the initial step.
./optim/nonlinear/scalar/gradient/Preconditioner.java:     * @return approximation of H<sup>-1</sup>r where H is the objective function hessian
./optim/nonlinear/scalar/GradientMultivariateOptimizer.java:     * @return the gradient at the specified point.
./optim/nonlinear/scalar/GradientMultivariateOptimizer.java:     * @return {@inheritDoc}
./optim/univariate/UnivariateOptimizer.java:     * @return {@inheritDoc}
./optim/univariate/UnivariateOptimizer.java:     * @return the optimization type.
./optim/univariate/UnivariateOptimizer.java:     * @return the initial guess.
./optim/univariate/UnivariateOptimizer.java:     * @return the lower bounds.
./optim/univariate/UnivariateOptimizer.java:     * @return the upper bounds.
./optim/univariate/UnivariateOptimizer.java:     * @return the objective function value at the specified point.
./optim/univariate/SearchInterval.java:     * @return the lower bound.
./optim/univariate/SearchInterval.java:     * @return the upper bound.
./optim/univariate/SearchInterval.java:     * @return the start value.
./optim/univariate/BrentOptimizer.java:     * @return the best point, or {@code null} if {@code a} and {@code b} are
./optim/univariate/UnivariateObjectiveFunction.java:     * @return the objective function.
./optim/univariate/UnivariatePointValuePair.java:     * @return the point.
./optim/univariate/UnivariatePointValuePair.java:     * @return the stored value of the objective function.
./optim/univariate/BracketFinder.java:     * @return the number of evalutations.
./optim/univariate/BracketFinder.java:     * @return the number of evalutations.
./optim/univariate/BracketFinder.java:     * @return the lower bound of the bracket.
./optim/univariate/BracketFinder.java:     * @return function value at {@link #getLo()}
./optim/univariate/BracketFinder.java:     * @return the higher bound of the bracket.
./optim/univariate/BracketFinder.java:     * @return function value at {@link #getHi()}
./optim/univariate/BracketFinder.java:     * @return a point in the middle of the bracket.
./optim/univariate/BracketFinder.java:     * @return function value at {@link #getMid()}
./optim/univariate/BracketFinder.java:     * @return {@code f(x)}
./optim/univariate/MultiStartUnivariateOptimizer.java:     * @return an array containing the optima.
./optim/univariate/SimpleUnivariateValueChecker.java:     * @return {@code true} if the algorithm has converged.
./optim/BaseMultiStartMultivariateOptimizer.java:     * @return an array containing the optima sorted from best to worst.
./optim/SimpleVectorValueChecker.java:     * @return {@code true} if the arguments satify the convergence criterion.
./optim/PointValuePair.java:     * @return a copy of the stored point.
./optim/PointValuePair.java:     * @return a reference to the internal array storing the point.
./optim/PointValuePair.java:     * @return data transfer object that will be serialized
./optim/PointValuePair.java:         * @return replacement {@link PointValuePair}
./optim/MaxEval.java:     * @return the allowed number of evaluations.
./optim/MaxEval.java:     * @return a new instance suitable for allowing {@link Integer#MAX_VALUE}
./optim/InitialGuess.java:     * @return the initial guess.
./optim/ConvergenceChecker.java:     * @return {@code true} if the algorithm is considered to have converged.
./optim/linear/LinearConstraintSet.java:     * @return the constraints.
./optim/linear/SolutionCallback.java:     * @return the best solution found so far by the optimizer, or {@code null} if
./optim/linear/SolutionCallback.java:     * @return {@code true} if the solution is optimal, {@code false} otherwise
./optim/linear/NonNegativeConstraint.java:     * @return {@code true} if all the variables must be positive.
./optim/linear/SimplexSolver.java:     * @return {@inheritDoc}
./optim/linear/SimplexSolver.java:     * @return the column with the most negative coefficient.
./optim/linear/SimplexSolver.java:     * @return {@code true} if the pivot column is valid, {@code false} otherwise
./optim/linear/SimplexSolver.java:     * @return the row with the minimum ratio.
./optim/linear/LinearObjectiveFunction.java:     * @return coefficients of the linear equation being optimized.
./optim/linear/LinearObjectiveFunction.java:     * @return constant of the linear equation being optimized.
./optim/linear/LinearObjectiveFunction.java:     * @return the value of the linear equation at the current point.
./optim/linear/LinearObjectiveFunction.java:     * @return the value of the linear equation at the current point.
./optim/linear/SimplexTableau.java:     * @return created tableau
./optim/linear/SimplexTableau.java:     * @return new versions of the constraints
./optim/linear/SimplexTableau.java:     * @return new equation
./optim/linear/SimplexTableau.java:     * @return 2 for Phase 1.  1 for Phase 2.
./optim/linear/SimplexTableau.java:     * @return number of constraint with the specified relationship
./optim/linear/SimplexTableau.java:     * @return the -1 times the sum of all coefficients in the given array.
./optim/linear/SimplexTableau.java:     * @return the row that the variable is basic in.  null if the column is not basic
./optim/linear/SimplexTableau.java:     * @return the variable that is basic for this row.
./optim/linear/SimplexTableau.java:     * @return the row that the variable is basic in, or {@code null} if the variable is not basic.
./optim/linear/SimplexTableau.java:     * @return whether the model has been solved
./optim/linear/SimplexTableau.java:     * @return current solution
./optim/linear/SimplexTableau.java:     * @return width of the tableau
./optim/linear/SimplexTableau.java:     * @return height of the tableau
./optim/linear/SimplexTableau.java:     * @return entry at (row, column)
./optim/linear/SimplexTableau.java:     * @return offset of the first slack variable
./optim/linear/SimplexTableau.java:     * @return offset of the first artificial variable
./optim/linear/SimplexTableau.java:     * @return offset of the right hand side
./optim/linear/SimplexTableau.java:     * @return number of decision variables
./optim/linear/SimplexTableau.java:     * @return original number of decision variables
./optim/linear/SimplexTableau.java:     * @return number of slack variables
./optim/linear/SimplexTableau.java:     * @return number of artificial variables
./optim/linear/SimplexTableau.java:     * @return the reference to the underlying row data
./optim/linear/SimplexTableau.java:     * @return tableau data
./optim/linear/Relationship.java:     * @return the opposite relationship.
./optim/linear/LinearConstraint.java:     * @return the coefficients of the constraint (left hand side).
./optim/linear/LinearConstraint.java:     * @return the relationship between left and right hand sides.
./optim/linear/LinearConstraint.java:     * @return the value of the constraint (right hand side).
./optim/linear/LinearOptimizer.java:     * @return {@code true} if the variables are restricted to non-negative values.
./optim/linear/LinearOptimizer.java:     * @return the optimization type.
./optim/linear/LinearOptimizer.java:     * @return the optimization type.
./optim/linear/LinearOptimizer.java:     * @return {@inheritDoc}
./optim/BaseMultivariateOptimizer.java:     * @return {@inheritDoc}
./optim/BaseMultivariateOptimizer.java:     * @return the initial guess, or {@code null} if not set.
./optim/BaseMultivariateOptimizer.java:     * @return the lower bounds, or {@code null} if not set.
./optim/BaseMultivariateOptimizer.java:     * @return the upper bounds, or {@code null} if not set.
./optim/BaseOptimizer.java:     * @return the maximal number of function evaluations.
./optim/BaseOptimizer.java:     * @return the number of evaluations of the objective function.
./optim/BaseOptimizer.java:     * @return the maximal number of iterations.
./optim/BaseOptimizer.java:     * @return the number of evaluations of the objective function.
./optim/BaseOptimizer.java:     * @return the object used to check for convergence.
./optim/BaseOptimizer.java:     * @return a point/value pair that satisfies the convergence criteria.
./optim/BaseOptimizer.java:     * @return a point/value pair that satisfies the convergence criteria.
./optim/BaseOptimizer.java:     * @return the point/value pair giving the optimal value of the
./optim/OptimizationProblem.java:     * @return a counter for the evaluations.
./optim/OptimizationProblem.java:     * @return a counter for the evaluations.
./optim/OptimizationProblem.java:     * @return the object used to check for convergence.
./optim/AbstractConvergenceChecker.java:     * @return the relative threshold.
./optim/AbstractConvergenceChecker.java:     * @return the absolute threshold.
./optimization/Target.java:     * @return the initial guess.
./optimization/PointVectorValuePair.java:     * @return a copy of the stored point.
./optimization/PointVectorValuePair.java:     * @return a reference to the internal array storing the point.
./optimization/PointVectorValuePair.java:     * @return a copy of the stored value of the objective function.
./optimization/PointVectorValuePair.java:     * @return a reference to the internal array storing the value of
./optimization/PointVectorValuePair.java:     * @return data transfer object that will be serialized
./optimization/PointVectorValuePair.java:         * @return replacement {@link PointValuePair}
./optimization/SimpleBounds.java:     * @return the initial guess.
./optimization/SimpleBounds.java:     * @return the initial guess.
./optimization/BaseMultivariateMultiStartOptimizer.java:     * @return an array containing the optima.
./optimization/SimplePointChecker.java:     * @return {@code true} if the arguments satify the convergence criterion.
./optimization/fitting/WeightedObservedPoint.java:     * @return weight of the measurement in the fitting process
./optimization/fitting/WeightedObservedPoint.java:     * @return abscissa of the point
./optimization/fitting/WeightedObservedPoint.java:     * @return observed value of the function at x
./optimization/fitting/HarmonicFitter.java:     * @return the parameters of the harmonic function that best fits the
./optimization/fitting/HarmonicFitter.java:     * @return the parameters of the harmonic function that best fits the
./optimization/fitting/HarmonicFitter.java:         * @return the guessed parameters, in the following order:
./optimization/fitting/HarmonicFitter.java:         * @return the input observations, sorted.
./optimization/fitting/HarmonicFitter.java:         * @return the guessed amplitude (at index 0) and circular frequency
./optimization/fitting/HarmonicFitter.java:         * @return the guessed phase.
./optimization/fitting/CurveFitter.java:     * @return observed points
./optimization/fitting/CurveFitter.java:     * @return the fitted parameters.
./optimization/fitting/CurveFitter.java:     * @return the fitted parameters.
./optimization/fitting/GaussianFitter.java:     * @return the parameters of the Gaussian function that best fits the
./optimization/fitting/GaussianFitter.java:     * @return the parameters of the Gaussian function that best fits the
./optimization/fitting/GaussianFitter.java:         * @return the guessed parameters, in the following order:
./optimization/fitting/GaussianFitter.java:         * @return the input observations, sorted.
./optimization/fitting/GaussianFitter.java:         * @return the guessed parameters (normalization factor, mean and
./optimization/fitting/GaussianFitter.java:         * @return the index in specified points array.
./optimization/fitting/GaussianFitter.java:         * @return the value of X for the specified Y.
./optimization/fitting/GaussianFitter.java:         * @return the array containing two points suitable for determining X at
./optimization/fitting/GaussianFitter.java:         * @return {@code true} if {@code value} is between {@code boundary1} and
./optimization/fitting/PolynomialFitter.java:     * @return the coefficients of the polynomial that best fits the observed points.
./optimization/fitting/PolynomialFitter.java:     * @return the coefficients of the polynomial that best fits the observed points.
./optimization/fitting/PolynomialFitter.java:     * @return the coefficients of the polynomial that best fits the observed points.
./optimization/SimpleValueChecker.java:     * @return {@code true} if the algorithm has converged.
./optimization/BaseMultivariateVectorMultiStartOptimizer.java:     * @return array containing the optima
./optimization/univariate/BrentOptimizer.java:     * @return the best point, or {@code null} if {@code a} and {@code b} are
./optimization/univariate/UnivariatePointValuePair.java:     * @return the point.
./optimization/univariate/UnivariatePointValuePair.java:     * @return the stored value of the objective function.
./optimization/univariate/BracketFinder.java:     * @return the number of evalutations.
./optimization/univariate/BracketFinder.java:     * @return the number of evalutations.
./optimization/univariate/BracketFinder.java:     * @return the lower bound of the bracket.
./optimization/univariate/BracketFinder.java:     * @return function value at {@link #getLo()}
./optimization/univariate/BracketFinder.java:     * @return the higher bound of the bracket.
./optimization/univariate/BracketFinder.java:     * @return function value at {@link #getHi()}
./optimization/univariate/BracketFinder.java:     * @return a point in the middle of the bracket.
./optimization/univariate/BracketFinder.java:     * @return function value at {@link #getMid()}
./optimization/univariate/BracketFinder.java:     * @return {@code f(x)}
./optimization/univariate/BaseUnivariateOptimizer.java:     * @return a (point, value) pair where the function is optimum.
./optimization/univariate/BaseUnivariateOptimizer.java:     * @return a (point, value) pair where the function is optimum.
./optimization/univariate/BaseAbstractUnivariateOptimizer.java:     * @return the optimization type.
./optimization/univariate/BaseAbstractUnivariateOptimizer.java:     * @return the lower end of the search interval.
./optimization/univariate/BaseAbstractUnivariateOptimizer.java:     * @return the higher end of the search interval.
./optimization/univariate/BaseAbstractUnivariateOptimizer.java:     * @return the initial guess.
./optimization/univariate/BaseAbstractUnivariateOptimizer.java:     * @return the objective function value at specified point.
./optimization/univariate/BaseAbstractUnivariateOptimizer.java:     * @return the optimum and its corresponding function value.
./optimization/univariate/UnivariateMultiStartOptimizer.java:     * @return an array containing the optima.
./optimization/univariate/SimpleUnivariateValueChecker.java:     * @return {@code true} if the algorithm has converged.
./optimization/BaseMultivariateSimpleBoundsOptimizer.java:     * @return the point/value pair giving the optimal value for objective
./optimization/SimpleVectorValueChecker.java:     * @return {@code true} if the arguments satify the convergence criterion.
./optimization/Weight.java:     * @return the initial guess.
./optimization/PointValuePair.java:     * @return a copy of the stored point.
./optimization/PointValuePair.java:     * @return a reference to the internal array storing the point.
./optimization/PointValuePair.java:     * @return data transfer object that will be serialized
./optimization/PointValuePair.java:         * @return replacement {@link PointValuePair}
./optimization/general/NonLinearConjugateGradientOptimizer.java:     * @return b such that f(a) and f(b) have opposite signs.
./optimization/general/AbstractLeastSquaresOptimizer.java:     * @return the number of evaluations of the Jacobian function.
./optimization/general/AbstractLeastSquaresOptimizer.java:     * @return the weighted Jacobian: W<sup>1/2</sup> J.
./optimization/general/AbstractLeastSquaresOptimizer.java:     * @return the cost.
./optimization/general/AbstractLeastSquaresOptimizer.java:     * @return RMS value
./optimization/general/AbstractLeastSquaresOptimizer.java:     * @return chi-square value
./optimization/general/AbstractLeastSquaresOptimizer.java:     * @return the square-root of the weight matrix.
./optimization/general/AbstractLeastSquaresOptimizer.java:     * @return the covariance matrix.
./optimization/general/AbstractLeastSquaresOptimizer.java:     * @return the covariance matrix.
./optimization/general/AbstractLeastSquaresOptimizer.java:     * @return the covariance matrix.
./optimization/general/AbstractLeastSquaresOptimizer.java:     * @return an estimate of the standard deviation of the optimized parameters
./optimization/general/AbstractLeastSquaresOptimizer.java:     * @return an estimate of the standard deviation of the optimized parameters
./optimization/general/AbstractLeastSquaresOptimizer.java:     * @return the point/value pair giving the optimal value for objective
./optimization/general/AbstractLeastSquaresOptimizer.java:     * @return the point/value pair giving the optimal value of the objective
./optimization/general/AbstractLeastSquaresOptimizer.java:     * @return the residuals.
./optimization/general/AbstractLeastSquaresOptimizer.java:     * @return the square-root of the weight matrix.
./optimization/general/AbstractDifferentiableOptimizer.java:     * @return the gradient at the specified point.
./optimization/general/AbstractScalarDifferentiableOptimizer.java:     * @return the gradient at the specified point.
./optimization/general/AbstractScalarDifferentiableOptimizer.java:     * @return the point/value pair giving the optimal value for objective
./optimization/general/Preconditioner.java:     * @return approximation of H<sup>-1</sup>r where H is the objective function hessian
./optimization/InitialGuess.java:     * @return the initial guess.
./optimization/BaseMultivariateVectorOptimizer.java:     * @return the point/value pair giving the optimal value for objective
./optimization/direct/AbstractSimplex.java:     * @return the dimension of the simplex.
./optimization/direct/AbstractSimplex.java:     * @return the size of the simplex.
./optimization/direct/AbstractSimplex.java:     * @return all the simplex points.
./optimization/direct/AbstractSimplex.java:     * @return the point at location {@code index}.
./optimization/direct/AbstractSimplex.java:     * @return the steps.
./optimization/direct/MultivariateFunctionPenaltyAdapter.java:     * @return either underlying function value or penalty function value
./optimization/direct/PowellOptimizer.java:     * @return a 2-element array containing the new point (at index 0) and
./optimization/direct/PowellOptimizer.java:         * @return the optimum.
./optimization/direct/SimplexOptimizer.java:     * @return the point/value pair giving the optimal value for objective
./optimization/direct/BOBYQAOptimizer.java:     * @return the value of the objective at the optimum.
./optimization/direct/BOBYQAOptimizer.java:     * @return the value of the objective at the optimum.
./optimization/direct/MultivariateFunctionMappingAdapter.java:     * @return bounded value
./optimization/direct/MultivariateFunctionMappingAdapter.java:     * @return unbounded value
./optimization/direct/MultivariateFunctionMappingAdapter.java:     * @return underlying function value
./optimization/direct/MultivariateFunctionMappingAdapter.java:         * @return bounded value
./optimization/direct/MultivariateFunctionMappingAdapter.java:         * @return unbounded value
./optimization/direct/BaseAbstractMultivariateOptimizer.java:     * @return the objective function value at the specified point.
./optimization/direct/BaseAbstractMultivariateOptimizer.java:     * @return the point/value pair giving the optimal value of the objective
./optimization/direct/BaseAbstractMultivariateOptimizer.java:     * @return the point/value pair giving the optimal value for objective
./optimization/direct/BaseAbstractMultivariateOptimizer.java:     * @return the point/value pair giving the optimal value of the objective
./optimization/direct/BaseAbstractMultivariateOptimizer.java:     * @return the optimization type.
./optimization/direct/BaseAbstractMultivariateOptimizer.java:     * @return the initial guess.
./optimization/direct/BaseAbstractMultivariateOptimizer.java:     * @return the lower bounds.
./optimization/direct/BaseAbstractMultivariateOptimizer.java:     * @return the upper bounds.
./optimization/direct/BaseAbstractMultivariateOptimizer.java:     * @return the point/value pair giving the optimal value of the
./optimization/direct/BaseAbstractMultivariateVectorOptimizer.java:     * @return the objective function value at the specified point.
./optimization/direct/BaseAbstractMultivariateVectorOptimizer.java:     * @return the point/value pair giving the optimal value of the objective
./optimization/direct/BaseAbstractMultivariateVectorOptimizer.java:     * @return the point/value pair giving the optimal value for objective
./optimization/direct/BaseAbstractMultivariateVectorOptimizer.java:     * @return the point/value pair giving the optimal value of the objective
./optimization/direct/BaseAbstractMultivariateVectorOptimizer.java:     * @return the initial guess.
./optimization/direct/BaseAbstractMultivariateVectorOptimizer.java:     * @return the weight matrix.
./optimization/direct/BaseAbstractMultivariateVectorOptimizer.java:     * @return the target values.
./optimization/direct/BaseAbstractMultivariateVectorOptimizer.java:     * @return the objective vector function.
./optimization/direct/BaseAbstractMultivariateVectorOptimizer.java:     * @return the point/value pair giving the optimal value for the
./optimization/direct/BaseAbstractMultivariateVectorOptimizer.java:     * @return a reference to the {@link #target array}.
./optimization/direct/BaseAbstractMultivariateVectorOptimizer.java:     * @return a reference to the {@link #weight array}.
./optimization/direct/CMAESOptimizer.java:     * @return History of sigma values.
./optimization/direct/CMAESOptimizer.java:     * @return History of mean matrix.
./optimization/direct/CMAESOptimizer.java:     * @return History of fitness values.
./optimization/direct/CMAESOptimizer.java:     * @return History of D matrix.
./optimization/direct/CMAESOptimizer.java:         * @return the sigma values.
./optimization/direct/CMAESOptimizer.java:         * @return the population size.
./optimization/direct/CMAESOptimizer.java:     * @return the point/value pair giving the optimal value for objective
./optimization/direct/CMAESOptimizer.java:     * @return hsig flag indicating a small correction.
./optimization/direct/CMAESOptimizer.java:     * @return a sorted array of indices pointing into doubles.
./optimization/direct/CMAESOptimizer.java:         * @return the objective value + penalty for violated bounds.
./optimization/direct/CMAESOptimizer.java:         * @return {@code true} if in bounds.
./optimization/direct/CMAESOptimizer.java:         * @return the repaired (i.e. all in bounds) objective variables.
./optimization/direct/CMAESOptimizer.java:         * @return Penalty value according to the violation of the bounds.
./optimization/direct/CMAESOptimizer.java:     * @return Matrix representing the element-wise logarithm of m.
./optimization/direct/CMAESOptimizer.java:     * @return Matrix representing the element-wise square root of m.
./optimization/direct/CMAESOptimizer.java:     * @return Matrix representing the element-wise square of m.
./optimization/direct/CMAESOptimizer.java:     * @return the matrix where the elements of m and n are element-wise multiplied.
./optimization/direct/CMAESOptimizer.java:     * @return Matrix where the elements of m and n are element-wise divided.
./optimization/direct/CMAESOptimizer.java:     * @return Matrix representing the selected columns.
./optimization/direct/CMAESOptimizer.java:     * @return Upper triangular part of matrix.
./optimization/direct/CMAESOptimizer.java:     * @return Row matrix representing the sums of the rows.
./optimization/direct/CMAESOptimizer.java:     * @return the diagonal n-by-n matrix if m is a column matrix or the column
./optimization/direct/CMAESOptimizer.java:     * @return n-by-m matrix filled with 1.
./optimization/direct/CMAESOptimizer.java:     * @return n-by-m matrix of 0 values out of diagonal, and 1 values on
./optimization/direct/CMAESOptimizer.java:     * @return n-by-m matrix of zero values.
./optimization/direct/CMAESOptimizer.java:     * @return a matrix which replicates the input matrix in both directions.
./optimization/direct/CMAESOptimizer.java:     * @return a sequence as column matrix.
./optimization/direct/CMAESOptimizer.java:     * @return the maximum of the matrix element values.
./optimization/direct/CMAESOptimizer.java:     * @return the minimum of the matrix element values.
./optimization/direct/CMAESOptimizer.java:     * @return the maximum of the array values.
./optimization/direct/CMAESOptimizer.java:     * @return the minimum of the array values.
./optimization/direct/CMAESOptimizer.java:     * @return the inverse of the mapping defined by indices.
./optimization/direct/CMAESOptimizer.java:     * @return the indices in inverse order (last is first).
./optimization/direct/CMAESOptimizer.java:     * @return an array of Gaussian random numbers.
./optimization/direct/CMAESOptimizer.java:     * @return a 2-dimensional matrix of Gaussian random numbers.
./optimization/direct/MultiDirectionalSimplex.java:     * @return the best point in the transformed simplex.
./optimization/ConvergenceChecker.java:     * @return {@code true} if the algorithm is considered to have converged.
./optimization/linear/SimplexSolver.java:     * @return column with the most negative coefficient
./optimization/linear/SimplexSolver.java:     * @return row with the minimum ratio
./optimization/linear/AbstractLinearOptimizer.java:     * @return {@code true} if the variables are restricted to non-negative values.
./optimization/linear/AbstractLinearOptimizer.java:     * @return the optimization type.
./optimization/linear/AbstractLinearOptimizer.java:     * @return the optimization type.
./optimization/linear/AbstractLinearOptimizer.java:     * @return the optimization type.
./optimization/linear/AbstractLinearOptimizer.java:     * @return the point/value pair giving the optimal value for objective function
./optimization/linear/LinearObjectiveFunction.java:     * @return coefficients of the linear equation being optimized
./optimization/linear/LinearObjectiveFunction.java:     * @return constant of the linear equation being optimized
./optimization/linear/LinearObjectiveFunction.java:     * @return value of the linear equation at the current point
./optimization/linear/LinearObjectiveFunction.java:     * @return value of the linear equation at the current point
./optimization/linear/SimplexTableau.java:     * @return created tableau
./optimization/linear/SimplexTableau.java:     * @return new versions of the constraints
./optimization/linear/SimplexTableau.java:     * @return new equation
./optimization/linear/SimplexTableau.java:     * @return 2 for Phase 1.  1 for Phase 2.
./optimization/linear/SimplexTableau.java:     * @return number of constraint with the specified relationship
./optimization/linear/SimplexTableau.java:     * @return the -1 times the sum of all coefficients in the given array.
./optimization/linear/SimplexTableau.java:     * @return the row that the variable is basic in.  null if the column is not basic
./optimization/linear/SimplexTableau.java:     * @return whether the model has been solved
./optimization/linear/SimplexTableau.java:     * @return current solution
./optimization/linear/SimplexTableau.java:     * @return width of the tableau
./optimization/linear/SimplexTableau.java:     * @return height of the tableau
./optimization/linear/SimplexTableau.java:     * @return entry at (row, column)
./optimization/linear/SimplexTableau.java:     * @return offset of the first slack variable
./optimization/linear/SimplexTableau.java:     * @return offset of the first artificial variable
./optimization/linear/SimplexTableau.java:     * @return offset of the right hand side
./optimization/linear/SimplexTableau.java:     * @return number of decision variables
./optimization/linear/SimplexTableau.java:     * @return original number of decision variables
./optimization/linear/SimplexTableau.java:     * @return number of slack variables
./optimization/linear/SimplexTableau.java:     * @return number of artificial variables
./optimization/linear/SimplexTableau.java:     * @return tableau data
./optimization/linear/Relationship.java:     * @return relationship obtained when multiplying all coefficients by -1
./optimization/linear/LinearConstraint.java:     * @return coefficients of the constraint (left hand side)
./optimization/linear/LinearConstraint.java:     * @return relationship between left and right hand sides
./optimization/linear/LinearConstraint.java:     * @return value of the constraint (right hand side)
./optimization/linear/LinearOptimizer.java:     * @return maximal number of iterations
./optimization/linear/LinearOptimizer.java:     * @return number of iterations
./optimization/linear/LinearOptimizer.java:     * @return point/value pair giving the optimal value for objective function
./optimization/BaseMultivariateOptimizer.java:     * @return the point/value pair giving the optimal value for objective
./optimization/BaseOptimizer.java:     * @return the maximal number of function evaluations.
./optimization/BaseOptimizer.java:     * @return the number of evaluations of the objective function.
./optimization/BaseOptimizer.java:     * @return the object used to check for convergence.
./optimization/AbstractConvergenceChecker.java:     * @return the relative threshold.
./optimization/AbstractConvergenceChecker.java:     * @return the absolute threshold.
./primes/SmallPrimes.java:     * @return the part of n which remains to be factored, it is either a prime or a semi-prime
./primes/SmallPrimes.java:     * @return  n or 1 if factorization is completed.
./primes/SmallPrimes.java:     * @return the list of prime factors of n
./primes/SmallPrimes.java:     * @return true if n is prime. false if n is definitely composite.
./primes/Primes.java:     * @return true if n is prime. (All numbers &lt; 2 return false).
./primes/Primes.java:     * @return the smallest prime greater than or equal to n.
./primes/Primes.java:     * @return list of prime factors of n
./primes/PollardRho.java:     * @return the list of prime factors of n.
./primes/PollardRho.java:     * @return a prime factor of n.
./primes/PollardRho.java:     * @return gcd(a,b)
./random/RandomData.java:     * @return a random string of hex characters of length {@code len}
./random/RandomData.java:     * @return a random integer greater than or equal to {@code lower}
./random/RandomData.java:     * @return a random long integer greater than or equal to {@code lower} and
./random/RandomData.java:     * @return a random string of hex characters of length {@code len}
./random/RandomData.java:     * @return a random integer greater than or equal to {@code lower} and less
./random/RandomData.java:     * @return a random long integer greater than or equal to {@code lower} and
./random/RandomData.java:     * @return a random value following the specified Poisson distribution
./random/RandomData.java:     * @return a random value following the specified Gaussian distribution
./random/RandomData.java:     * @return a random value following the specified exponential distribution
./random/RandomData.java:     * @return a uniformly distributed random value between lower and upper
./random/RandomData.java:     * @return uniformly distributed random value in the {@code (lower, upper)}
./random/RandomData.java:     * @return a random {@code k}-permutation of {@code n}, as an array of
./random/RandomData.java:     * @return a random sample of {@code k} elements from {@code c}
./random/UncorrelatedRandomVectorGenerator.java:   * @return a random vector as a newly built array of double
./random/BitsStreamGenerator.java:     * @return random bits generated
./random/BitsStreamGenerator.java:     * @return  a pseudorandom, uniformly distributed {@code long}
./random/SobolSequenceGenerator.java:     * @return the last dimension that has been read from the input stream
./random/SobolSequenceGenerator.java:     * @return the i-th point in the Sobol sequence
./random/SobolSequenceGenerator.java:     * @return the index of the next point
./random/RandomDataGenerator.java:     * @return the random string.
./random/RandomDataGenerator.java:     * @return  a pseudorandom, uniformly distributed {@code long}
./random/RandomDataGenerator.java:     * @return random value sampled from the Gamma(shape, scale) distribution
./random/RandomDataGenerator.java:     * @return random value sampled from the Hypergeometric(numberOfSuccesses, sampleSize) distribution
./random/RandomDataGenerator.java:     * @return random value sampled from the Pascal(r, p) distribution
./random/RandomDataGenerator.java:     * @return random value from the T(df) distribution
./random/RandomDataGenerator.java:     * @return random value sampled from the Weibull(shape, size) distribution
./random/RandomDataGenerator.java:     * @return random value sampled from the Zipf(numberOfElements, exponent) distribution
./random/RandomDataGenerator.java:     * @return random value sampled from the beta(alpha, beta) distribution
./random/RandomDataGenerator.java:     * @return random value sampled from the Binomial(numberOfTrials, probabilityOfSuccess) distribution
./random/RandomDataGenerator.java:     * @return random value sampled from the Cauchy(median, scale) distribution
./random/RandomDataGenerator.java:     * @return random value sampled from the ChiSquare(df) distribution
./random/RandomDataGenerator.java:     * @return random value sampled from the F(numeratorDf, denominatorDf) distribution
./random/RandomDataGenerator.java:     * @return the Random used to generate random data
./random/RandomDataGenerator.java:     * @return the SecureRandom used to generate secure random data, wrapped in a
./random/EmpiricalDistribution.java:     * @return the index of the bin containing the value
./random/EmpiricalDistribution.java:     * @return the random value.
./random/EmpiricalDistribution.java:     * @return the sample statistics
./random/EmpiricalDistribution.java:     * @return the number of bins.
./random/EmpiricalDistribution.java:     * @return List of bin statistics.
./random/EmpiricalDistribution.java:     * @return array of bin upper bounds
./random/EmpiricalDistribution.java:     * @return array of upper bounds of subintervals used in data generation
./random/EmpiricalDistribution.java:     * @return true if the distribution has been loaded
./random/EmpiricalDistribution.java:     * @return the probability that selection begins in bin i
./random/EmpiricalDistribution.java:     * @return the probability that selection begins in a bin below bin i.
./random/EmpiricalDistribution.java:     * @return the difference in the within-bin kernel cdf between the
./random/EmpiricalDistribution.java:     * @return the within-bin kernel of the bin containing x
./random/EmpiricalDistribution.java:     * @return sum of the probabilities of bins through binIndex
./random/EmpiricalDistribution.java:     * @return within-bin kernel parameterized by bStats
./random/AbstractRandomGenerator.java:     * @return the next pseudorandom, uniformly distributed {@code int}
./random/AbstractRandomGenerator.java:     * @return  a pseudorandom, uniformly distributed {@code int}
./random/AbstractRandomGenerator.java:     * @return  the next pseudorandom, uniformly distributed {@code long}
./random/AbstractRandomGenerator.java:     * @return  the next pseudorandom, uniformly distributed
./random/AbstractRandomGenerator.java:     * @return  the next pseudorandom, uniformly distributed {@code float}
./random/AbstractRandomGenerator.java:     * @return  the next pseudorandom, uniformly distributed
./random/AbstractRandomGenerator.java:     * @return  the next pseudorandom, Gaussian ("normally") distributed
./random/RandomAdaptor.java:     * @return a Random instance wrapping the RandomGenerator
./random/RandomAdaptor.java:     * @return  the next pseudorandom, uniformly distributed
./random/RandomAdaptor.java:     * @return  the next pseudorandom, uniformly distributed
./random/RandomAdaptor.java:     * @return  the next pseudorandom, uniformly distributed <code>float</code>
./random/RandomAdaptor.java:     * @return  the next pseudorandom, Gaussian ("normally") distributed
./random/RandomAdaptor.java:     * @return the next pseudorandom, uniformly distributed <code>int</code>
./random/RandomAdaptor.java:     * @return  a pseudorandom, uniformly distributed {@code int}
./random/RandomAdaptor.java:     * @return  the next pseudorandom, uniformly distributed <code>long</code>
./random/RandomGeneratorFactory.java:     * @return the given RNG, wrapped in a {@link RandomGenerator}.
./random/RandomGeneratorFactory.java:     * @return the converted seed.
./random/StableRandomGenerator.java:     * @return a random scalar with zero location and unit scale
./random/RandomGenerator.java:     * @return the next pseudorandom, uniformly distributed <code>int</code>
./random/RandomGenerator.java:     * @return  a pseudorandom, uniformly distributed {@code int}
./random/RandomGenerator.java:     * @return  the next pseudorandom, uniformly distributed <code>long</code>
./random/RandomGenerator.java:     * @return  the next pseudorandom, uniformly distributed
./random/RandomGenerator.java:     * @return  the next pseudorandom, uniformly distributed <code>float</code>
./random/RandomGenerator.java:     * @return  the next pseudorandom, uniformly distributed
./random/RandomGenerator.java:     * @return  the next pseudorandom, Gaussian ("normally") distributed
./random/RandomVectorGenerator.java:     * @return a random vector as an array of double.
./random/MersenneTwister.java:     * @return random bits generated
./random/HaltonSequenceGenerator.java:     * @return the scrambled digit
./random/HaltonSequenceGenerator.java:     * @return the i-th point in the Halton sequence
./random/HaltonSequenceGenerator.java:     * @return the index of the next point
./random/NormalizedRandomGenerator.java:   * @return a random scalar with null mean and unit standard deviation
./random/RandomDataImpl.java:     * @return the delegate object.
./random/RandomDataImpl.java:     * @return the random string.
./random/RandomDataImpl.java:     * @return random value sampled from the beta(alpha, beta) distribution
./random/RandomDataImpl.java:     * @return random value sampled from the Binomial(numberOfTrials, probabilityOfSuccess) distribution
./random/RandomDataImpl.java:     * @return random value sampled from the Cauchy(median, scale) distribution
./random/RandomDataImpl.java:     * @return random value sampled from the ChiSquare(df) distribution
./random/RandomDataImpl.java:     * @return random value sampled from the F(numeratorDf, denominatorDf) distribution
./random/RandomDataImpl.java:     * @return random value sampled from the Gamma(shape, scale) distribution
./random/RandomDataImpl.java:     * @return random value sampled from the Hypergeometric(numberOfSuccesses, sampleSize) distribution
./random/RandomDataImpl.java:     * @return random value sampled from the Pascal(r, p) distribution
./random/RandomDataImpl.java:     * @return random value from the T(df) distribution
./random/RandomDataImpl.java:     * @return random value sampled from the Weibull(shape, size) distribution
./random/RandomDataImpl.java:     * @return random value sampled from the Zipf(numberOfElements, exponent) distribution
./random/RandomDataImpl.java:     * @return a random value sampled from the given distribution
./random/RandomDataImpl.java:     * @return a random value sampled from the given distribution
./random/GaussianRandomGenerator.java:     * @return a random scalar with null mean and unit standard deviation
./random/UniformRandomGenerator.java:     * @return a random scalar with null mean and unit standard deviation
./random/ValueServer.java:     * @return generated value
./random/ValueServer.java:     * @return array of generated values
./random/ValueServer.java:     * @return Value of property mode.
./random/ValueServer.java:     * @return Values file URL.
./random/ValueServer.java:     * @return EmpircalDistribution built by {@link #computeDistribution()}
./random/ValueServer.java:     * @return Mean used in data generation.
./random/ValueServer.java:     * @return Standard deviation used when operating in {@link #GAUSSIAN_MODE}.
./random/ValueServer.java:     * @return next random value from the empirical distribution digest
./random/ValueServer.java:     * @return next value from the replay file
./random/ValueServer.java:     * @return random uniform value
./random/ValueServer.java:     * @return random exponential value
./random/ValueServer.java:     * @return random Gaussian value
./random/CorrelatedRandomVectorGenerator.java:     * @return underlying uncorrelated components generator
./random/CorrelatedRandomVectorGenerator.java:     * @return rank of the square matrix.
./random/CorrelatedRandomVectorGenerator.java:     * @return root of the square matrix
./random/CorrelatedRandomVectorGenerator.java:     * @return a random vector as an array of double. The returned array
./RealFieldElement.java:     * @return real value
./RealFieldElement.java:     * @return this+a
./RealFieldElement.java:     * @return this-a
./RealFieldElement.java:     * @return this&times;a
./RealFieldElement.java:     * @return this&divide;a
./RealFieldElement.java:     * @return this - n &times; a where n is the closest integer to this/a
./RealFieldElement.java:     * @return this - n &times; a where n is the closest integer to this/a
./RealFieldElement.java:     * @return abs(this)
./RealFieldElement.java:     * @return ceil(this)
./RealFieldElement.java:     * @return floor(this)
./RealFieldElement.java:     * @return a double number r such that r is an integer r - 0.5 &le; this &le; r + 0.5
./RealFieldElement.java:     * @return closest long to {@link #getReal()}
./RealFieldElement.java:     * @return -1.0, -0.0, +0.0, +1.0 or NaN depending on sign of a
./RealFieldElement.java:     * @return the instance with the same sign as the {@code sign} argument
./RealFieldElement.java:     * @return the instance with the same sign as the {@code sign} argument
./RealFieldElement.java:     * @return this &times; 2<sup>n</sup>
./RealFieldElement.java:     * @return sqrt(<i>this</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)
./RealFieldElement.java:     * @return square root of the instance
./RealFieldElement.java:     * @return cubic root of the instance
./RealFieldElement.java:     * @return n<sup>th</sup> root of the instance
./RealFieldElement.java:     * @return this<sup>p</sup>
./RealFieldElement.java:     * @return this<sup>n</sup>
./RealFieldElement.java:     * @return this<sup>e</sup>
./RealFieldElement.java:     * @return exponential of the instance
./RealFieldElement.java:     * @return exponential minus one of the instance
./RealFieldElement.java:     * @return logarithm of the instance
./RealFieldElement.java:     * @return logarithm of one plus the instance
./RealFieldElement.java://     * @return base 10 logarithm of the instance
./RealFieldElement.java:     * @return cos(this)
./RealFieldElement.java:     * @return sin(this)
./RealFieldElement.java:     * @return tan(this)
./RealFieldElement.java:     * @return acos(this)
./RealFieldElement.java:     * @return asin(this)
./RealFieldElement.java:     * @return atan(this)
./RealFieldElement.java:     * @return atan2(this, x)
./RealFieldElement.java:     * @return cosh(this)
./RealFieldElement.java:     * @return sinh(this)
./RealFieldElement.java:     * @return tanh(this)
./RealFieldElement.java:     * @return acosh(this)
./RealFieldElement.java:     * @return asin(this)
./RealFieldElement.java:     * @return atanh(this)
./RealFieldElement.java:     * @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.
./RealFieldElement.java:     * @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.
./RealFieldElement.java:     * @return a<sub>1</sub>&times;b<sub>1</sub> +
./RealFieldElement.java:     * @return a<sub>1</sub>&times;b<sub>1</sub> +
./RealFieldElement.java:     * @return a<sub>1</sub>&times;b<sub>1</sub> +
./RealFieldElement.java:     * @return a<sub>1</sub>&times;b<sub>1</sub> +
./RealFieldElement.java:     * @return a<sub>1</sub>&times;b<sub>1</sub> +
./RealFieldElement.java:     * @return a<sub>1</sub>&times;b<sub>1</sub> +
./special/Gamma.java:     * @return the value of {@code log(Gamma(x))}, {@code Double.NaN} if
./special/Gamma.java:     * @return the regularized gamma function P(a, x).
./special/Gamma.java:     * @return the regularized gamma function P(a, x)
./special/Gamma.java:     * @return the regularized gamma function Q(a, x)
./special/Gamma.java:     * @return the regularized gamma function P(a, x)
./special/Gamma.java:     * @return digamma(x) to within 10-8 relative or absolute error whichever is smaller.
./special/Gamma.java:     * @return trigamma(x) to within 10-8 relative or absolute error whichever is smaller
./special/Gamma.java:     * @return The Lanczos approximation.
./special/Gamma.java:     * @return The value of {@code 1.0 / Gamma(1.0 + x) - 1.0}.
./special/Gamma.java:     * @return The value of {@code log(Gamma(1 + x))}.
./special/Gamma.java:     * @return the value of {@code Gamma(x)}.
./special/Beta.java:     * @return the regularized beta function I(x, a, b).
./special/Beta.java:     * @return the regularized beta function I(x, a, b)
./special/Beta.java:     * @return the regularized beta function I(x, a, b)
./special/Beta.java:     * @return the regularized beta function I(x, a, b)
./special/Beta.java:     * @return log(B(a, b)).
./special/Beta.java:     * @return the value of {@code log(Gamma(a + b))}.
./special/Beta.java:     * @return the value of {@code log(Gamma(b) / Gamma(a + b))}.
./special/Beta.java:     * @return the value of {@code Delta(b) - Delta(a + b)}
./special/Beta.java:     * @return the value of {@code Delta(p) + Delta(q) - Delta(p + q)}.
./special/Beta.java:     * @return the value of {@code log(Beta(p, q))}, {@code NaN} if
./special/Erf.java:     * @return the error function erf(x)
./special/Erf.java:     * @return the complementary error function erfc(x)
./special/Erf.java:     * @return erf(x2) - erf(x1)
./special/Erf.java:     * @return t such that x = erf(t)
./special/Erf.java:     * @return t such that x = erfc(t)
./special/BesselJ.java:     * @return Value of the Bessel function at x
./special/BesselJ.java:     * @return Value of the Bessel function of the first kind, \(J_{order}(x)\)
./special/BesselJ.java:         * @return the computed function values
./special/BesselJ.java:         * @return the number of valid function values (normally the same as the
./special/BesselJ.java:     * @return BesselJResult a vector of the functions
./stat/interval/ConfidenceInterval.java:     * @return the lower endpoint of the interval
./stat/interval/ConfidenceInterval.java:     * @return the upper endpoint of the interval
./stat/interval/ConfidenceInterval.java:     * @return the asserted probability that the interval contains the
./stat/interval/ConfidenceInterval.java:     * @return String representation of the confidence interval
./stat/interval/IntervalUtils.java:     * @return Confidence interval containing the probability of success with
./stat/interval/IntervalUtils.java:     * @return Confidence interval containing the probability of success with
./stat/interval/IntervalUtils.java:     * @return Confidence interval containing the probability of success with
./stat/interval/IntervalUtils.java:     * @return Confidence interval containing the probability of success with
./stat/interval/BinomialConfidenceInterval.java:     * @return Confidence interval containing the probability of success with
./stat/correlation/PearsonsCorrelation.java:     * @return correlation matrix
./stat/correlation/PearsonsCorrelation.java:     * @return matrix of correlation standard errors
./stat/correlation/PearsonsCorrelation.java:     * @return matrix of p-values
./stat/correlation/PearsonsCorrelation.java:     * @return correlation matrix
./stat/correlation/PearsonsCorrelation.java:     * @return correlation matrix
./stat/correlation/PearsonsCorrelation.java:     * @return Returns Pearson's correlation coefficient for the two arrays
./stat/correlation/PearsonsCorrelation.java:     * @return correlation matrix
./stat/correlation/SpearmansCorrelation.java:     * @return Spearman Rank Correlation Matrix
./stat/correlation/SpearmansCorrelation.java:     * @return PearsonsCorrelation among ranked column data
./stat/correlation/SpearmansCorrelation.java:     * @return correlation matrix
./stat/correlation/SpearmansCorrelation.java:     * @return correlation matrix
./stat/correlation/SpearmansCorrelation.java:     * @return Returns Spearman's rank correlation coefficient for the two arrays
./stat/correlation/SpearmansCorrelation.java:     * @return a rank-transformed matrix
./stat/correlation/SpearmansCorrelation.java:     * @return a list of NaN positions in the input array
./stat/correlation/SpearmansCorrelation.java:     * @return the input array without the values at the specified indices
./stat/correlation/StorelessCovariance.java:     * @return the corresponding index in the matrix array
./stat/correlation/StorelessCovariance.java:     * @return the {@link StorelessBivariateCovariance} element at the given index
./stat/correlation/StorelessCovariance.java:     * @return the covariance of the given element
./stat/correlation/StorelessCovariance.java:     * @return a two-dimensional double array of covariance values
./stat/correlation/StorelessCovariance.java:     * @return nothing as this implementation always throws a
./stat/correlation/Covariance.java:     * @return covariance matrix
./stat/correlation/Covariance.java:     * @return number of observations
./stat/correlation/Covariance.java:     * @return covariance matrix
./stat/correlation/Covariance.java:     * @return covariance matrix
./stat/correlation/Covariance.java:     * @return covariance matrix
./stat/correlation/Covariance.java:     * @return covariance matrix
./stat/correlation/Covariance.java:     * @return returns the covariance for the two arrays
./stat/correlation/Covariance.java:     * @return returns the covariance for the two arrays
./stat/correlation/KendallsCorrelation.java:     * @return correlation matrix
./stat/correlation/KendallsCorrelation.java:     * @return correlation matrix
./stat/correlation/KendallsCorrelation.java:     * @return correlation matrix
./stat/correlation/KendallsCorrelation.java:     * @return Returns Kendall's Tau rank correlation coefficient for the two arrays
./stat/correlation/KendallsCorrelation.java:     * @return the sum of the number from 1 to n
./stat/correlation/StorelessBivariateCovariance.java:     * @return number of observations
./stat/correlation/StorelessBivariateCovariance.java:     * @return the current covariance
./stat/clustering/Cluster.java:     * @return points contained in the cluster
./stat/clustering/Cluster.java:     * @return chosen cluster center
./stat/clustering/EuclideanDoublePoint.java:     * @return a reference (not a copy!) to the wrapped array
./stat/clustering/EuclideanIntegerPoint.java:     * @return a reference (not a copy!) to the wrapped array
./stat/clustering/Clusterable.java:     * @return the distance from the given point
./stat/clustering/Clusterable.java:     * @return the centroid of the given Collection of Points
./stat/clustering/KMeansPlusPlusClusterer.java:     * @return a list of clusters containing the points
./stat/clustering/KMeansPlusPlusClusterer.java:     * @return a list of clusters containing the points
./stat/clustering/KMeansPlusPlusClusterer.java:     * @return the number of points assigned to different clusters as the iteration before
./stat/clustering/KMeansPlusPlusClusterer.java:     * @return the initial centers
./stat/clustering/KMeansPlusPlusClusterer.java:     * @return a random point from the selected cluster
./stat/clustering/KMeansPlusPlusClusterer.java:     * @return a random point from the selected cluster
./stat/clustering/KMeansPlusPlusClusterer.java:     * @return point farthest to its cluster center
./stat/clustering/KMeansPlusPlusClusterer.java:     * @return the index of the nearest {@link Cluster} to the given point
./stat/clustering/DBSCANClusterer.java:     * @return maximum radius of the neighborhood
./stat/clustering/DBSCANClusterer.java:     * @return minimum number of points needed for a cluster
./stat/clustering/DBSCANClusterer.java:     * @return the list of clusters
./stat/clustering/DBSCANClusterer.java:     * @return the expanded cluster
./stat/clustering/DBSCANClusterer.java:     * @return the List of neighbors
./stat/clustering/DBSCANClusterer.java:     * @return merged lists
./stat/StatUtils.java:     * @return the sum of the values or <code>Double.NaN</code> if the array
./stat/StatUtils.java:     * @return the sum of the values or Double.NaN if length = 0
./stat/StatUtils.java:     * @return the sum of the squared values or <code>Double.NaN</code> if the
./stat/StatUtils.java:     * @return the sum of the squares of the values or Double.NaN if length = 0
./stat/StatUtils.java:     * @return the product of the values or Double.NaN if the array is empty
./stat/StatUtils.java:     * @return the product of the values or Double.NaN if length = 0
./stat/StatUtils.java:     * @return the sum of the natural logs of the values or Double.NaN if
./stat/StatUtils.java:     * @return the sum of the natural logs of the values or Double.NaN if
./stat/StatUtils.java:     * @return the mean of the values or Double.NaN if the array is empty
./stat/StatUtils.java:     * @return the mean of the values or Double.NaN if length = 0
./stat/StatUtils.java:     * @return the geometric mean of the values or Double.NaN if the array is empty
./stat/StatUtils.java:     * @return the geometric mean of the values or Double.NaN if length = 0
./stat/StatUtils.java:     * @return the variance of the values or Double.NaN if the array is empty
./stat/StatUtils.java:     * @return the variance of the values or Double.NaN if length = 0
./stat/StatUtils.java:     * @return the variance of the values or Double.NaN if length = 0
./stat/StatUtils.java:     * @return the variance of the values or Double.NaN if the array is empty
./stat/StatUtils.java:     * @return the population variance of the values or Double.NaN if the array is empty
./stat/StatUtils.java:     * @return the population variance of the values or Double.NaN if length = 0
./stat/StatUtils.java:     * @return the population variance of the values or Double.NaN if length = 0
./stat/StatUtils.java:     * @return the population variance of the values or Double.NaN if the array is empty
./stat/StatUtils.java:     * @return the maximum of the values or Double.NaN if the array is empty
./stat/StatUtils.java:     * @return the maximum of the values or Double.NaN if length = 0
./stat/StatUtils.java:     * @return the minimum of the values or Double.NaN if the array is empty
./stat/StatUtils.java:     * @return the minimum of the values or Double.NaN if length = 0
./stat/StatUtils.java:     * @return the percentile value or Double.NaN if the array is empty
./stat/StatUtils.java:     * @return  the percentile value
./stat/StatUtils.java:     * @return sum of paired differences
./stat/StatUtils.java:     * @return mean of paired differences
./stat/StatUtils.java:     * @return variance of paired differences
./stat/StatUtils.java:     * @return normalized (standardized) sample.
./stat/StatUtils.java:     * @return array of array of the most frequently occurring element(s) sorted in ascending order.
./stat/StatUtils.java:     * @return array of array of the most frequently occurring element(s) sorted in ascending order.
./stat/StatUtils.java:     * @return array of array of the most frequently occurring element(s) sorted in ascending order.
./stat/ranking/NaturalRanking.java:     * @return returns the NaNStrategy
./stat/ranking/NaturalRanking.java:     * @return the TiesStrategy
./stat/ranking/NaturalRanking.java:     * @return array of ranks
./stat/ranking/NaturalRanking.java:     * @return array with NaN-valued entries removed
./stat/ranking/NaturalRanking.java:     * @return true iff ranks contains one or more NaNs
./stat/ranking/NaturalRanking.java:     * @return list of indexes i such that <code>ranks[i] = NaN</code>
./stat/ranking/NaturalRanking.java:         * @return result of <code>Double.compare(value, other.value)</code>
./stat/ranking/NaturalRanking.java:         * @return value
./stat/ranking/NaturalRanking.java:         * @return position
./stat/ranking/RankingAlgorithm.java:     * @return an array of ranks corresponding to the elements of the input array
./stat/regression/OLSMultipleLinearRegression.java:     * @return the hat matrix
./stat/regression/OLSMultipleLinearRegression.java:     * @return SSTO - the total sum of squares
./stat/regression/OLSMultipleLinearRegression.java:     * @return residual sum of squares
./stat/regression/OLSMultipleLinearRegression.java:     * @return R-square statistic
./stat/regression/OLSMultipleLinearRegression.java:     * @return adjusted R-Squared statistic
./stat/regression/OLSMultipleLinearRegression.java:     * @return beta
./stat/regression/OLSMultipleLinearRegression.java:     * @return The beta variance-covariance matrix
./stat/regression/AbstractMultipleLinearRegression.java:     * @return the X sample data.
./stat/regression/AbstractMultipleLinearRegression.java:     * @return the Y sample data.
./stat/regression/AbstractMultipleLinearRegression.java:     * @return true if the model has no intercept term; false otherwise
./stat/regression/AbstractMultipleLinearRegression.java:     * @return estimate of the error variance
./stat/regression/AbstractMultipleLinearRegression.java:     * @return regression standard error
./stat/regression/AbstractMultipleLinearRegression.java:     * @return beta
./stat/regression/AbstractMultipleLinearRegression.java:     * @return beta variance
./stat/regression/AbstractMultipleLinearRegression.java:     * @return Y variance
./stat/regression/AbstractMultipleLinearRegression.java:     * @return error variance estimate
./stat/regression/AbstractMultipleLinearRegression.java:     * @return The residuals [n,1] matrix
./stat/regression/SimpleRegression.java:     * @return n number of observations that have been added.
./stat/regression/SimpleRegression.java:     * @return predicted <code>y</code> value
./stat/regression/SimpleRegression.java:     * @return the intercept of the regression line if the model includes an
./stat/regression/SimpleRegression.java:     * @return true if the regression includes an intercept; false otherwise
./stat/regression/SimpleRegression.java:    * @return the slope of the regression line
./stat/regression/SimpleRegression.java:     * @return sum of squared errors associated with the regression model
./stat/regression/SimpleRegression.java:     * @return sum of squared deviations of y values
./stat/regression/SimpleRegression.java:     * @return sum of squared deviations of x values
./stat/regression/SimpleRegression.java:     * @return sum of cross products
./stat/regression/SimpleRegression.java:     * @return sum of squared deviations of predicted y values
./stat/regression/SimpleRegression.java:     * @return sum of squared deviations of y values
./stat/regression/SimpleRegression.java:     * @return Pearson's r
./stat/regression/SimpleRegression.java:     * @return r-square
./stat/regression/SimpleRegression.java:     * @return standard error associated with intercept estimate
./stat/regression/SimpleRegression.java:     * @return standard error associated with slope estimate
./stat/regression/SimpleRegression.java:     * @return half-width of 95% confidence interval for the slope estimate
./stat/regression/SimpleRegression.java:     * @return half-width of 95% confidence interval for the slope estimate
./stat/regression/SimpleRegression.java:     * @return significance level for slope/correlation
./stat/regression/SimpleRegression.java:    * @return the intercept of the regression line
./stat/regression/SimpleRegression.java:     * @return sum of squared deviations of predicted y values
./stat/regression/SimpleRegression.java:     * @return RegressionResults acts as a container of regression output
./stat/regression/SimpleRegression.java:     * @return RegressionResults acts as a container of regression output
./stat/regression/GLSMultipleLinearRegression.java:     * @return inverse of the covariance
./stat/regression/GLSMultipleLinearRegression.java:     * @return beta
./stat/regression/GLSMultipleLinearRegression.java:     * @return The beta variance matrix
./stat/regression/GLSMultipleLinearRegression.java:     * @return error variance
./stat/regression/MillerUpdatingRegression.java:     * @return true regression has an intercept, false no intercept
./stat/regression/MillerUpdatingRegression.java:     * @return number of observations
./stat/regression/MillerUpdatingRegression.java:     * @return the sum of the a and b
./stat/regression/MillerUpdatingRegression.java:     * @return an array with the estimated slope coefficients
./stat/regression/MillerUpdatingRegression.java:     * @return an array with the variance covariance of the included
./stat/regression/MillerUpdatingRegression.java:     * @return an array with the partial correlations of the remainder of
./stat/regression/MillerUpdatingRegression.java:     * @return -1 error, 0 everything ok
./stat/regression/MillerUpdatingRegression.java:     * @return the diagonal element of the hatmatrix
./stat/regression/MillerUpdatingRegression.java:     * @return int[] with the current order of the regressors
./stat/regression/MillerUpdatingRegression.java:     * @return RegressionResults the structure holding all regression results
./stat/regression/MillerUpdatingRegression.java:     * @return RegressionResults the structure holding all regression results
./stat/regression/MillerUpdatingRegression.java:     * @return RegressionResults the structure holding all regression results
./stat/regression/UpdatingMultipleLinearRegression.java:     * @return true if constant exists, false otherwise
./stat/regression/UpdatingMultipleLinearRegression.java:     * @return Number of observations
./stat/regression/UpdatingMultipleLinearRegression.java:     * @return RegressionResults acts as a container of regression output
./stat/regression/UpdatingMultipleLinearRegression.java:     * @return RegressionResults acts as a container of regression output
./stat/regression/MultipleLinearRegression.java:     * @return The [k,1] array representing b
./stat/regression/MultipleLinearRegression.java:     * @return The [k,k] array representing the variance of b
./stat/regression/MultipleLinearRegression.java:     * @return The [n,1] array representing the residuals
./stat/regression/MultipleLinearRegression.java:     * @return The double representing the variance of y
./stat/regression/MultipleLinearRegression.java:     * @return standard errors of estimated regression parameters
./stat/regression/RegressionResults.java:     * @return the parameters estimated for regressor at index.
./stat/regression/RegressionResults.java:     * @return array of parameter estimates, null if no estimation occurred
./stat/regression/RegressionResults.java:     * @return the standard errors associated with parameters estimated at index.
./stat/regression/RegressionResults.java:     * @return an array standard errors associated with parameters estimates,
./stat/regression/RegressionResults.java:     * @return the covariance of the parameter estimates.
./stat/regression/RegressionResults.java:     * @return number of regressors, -1 if not estimated
./stat/regression/RegressionResults.java:     * @return Number of observations, -1 if an error condition prevents estimation
./stat/regression/RegressionResults.java:     * @return sum of squared deviations of y values
./stat/regression/RegressionResults.java:     * @return sum of squared deviations of predicted y values
./stat/regression/RegressionResults.java:     * @return sum of squared errors associated with the regression model
./stat/regression/RegressionResults.java:     * @return sum of squared deviations of y values
./stat/regression/RegressionResults.java:     * @return r-square, a double in the interval [0, 1]
./stat/regression/RegressionResults.java:     * @return adjusted R-Squared statistic
./stat/regression/RegressionResults.java:     * @return true if the model has an intercept term
./stat/regression/RegressionResults.java:     * @return the requested variance-covariance matrix entry
./stat/descriptive/summary/Sum.java:     * @return the sum of the values or 0 if length = 0
./stat/descriptive/summary/Sum.java:     * @return the sum of the values or 0 if length = 0
./stat/descriptive/summary/Sum.java:     * @return the sum of the values or Double.NaN if length = 0
./stat/descriptive/summary/Product.java:     * @return the product of the values or 1 if length = 0
./stat/descriptive/summary/Product.java:     * @return the product of the values or 1 if length = 0
./stat/descriptive/summary/Product.java:     * @return the product of the values or Double.NaN if length = 0
./stat/descriptive/summary/SumOfSquares.java:     * @return the sum of the squares of the values or 0 if length = 0
./stat/descriptive/summary/SumOfLogs.java:     * @return the sum of the natural logs of the values or 0 if
./stat/descriptive/SummaryStatistics.java:     * @return Current values of statistics
./stat/descriptive/SummaryStatistics.java:     * @return The number of available values
./stat/descriptive/SummaryStatistics.java:     * @return The sum or <code>Double.NaN</code> if no values have been added
./stat/descriptive/SummaryStatistics.java:     * @return The sum of squares
./stat/descriptive/SummaryStatistics.java:     * @return the mean
./stat/descriptive/SummaryStatistics.java:     * @return the standard deviation
./stat/descriptive/SummaryStatistics.java:     * @return The quadratic mean or {@code Double.NaN} if no values
./stat/descriptive/SummaryStatistics.java:     * @return the variance
./stat/descriptive/SummaryStatistics.java:     * @return the population variance
./stat/descriptive/SummaryStatistics.java:     * @return the maximum
./stat/descriptive/SummaryStatistics.java:     * @return the minimum
./stat/descriptive/SummaryStatistics.java:     * @return the geometric mean
./stat/descriptive/SummaryStatistics.java:     * @return the sum of logs
./stat/descriptive/SummaryStatistics.java:     * @return second central moment statistic
./stat/descriptive/SummaryStatistics.java:     * @return String with line feeds displaying statistics
./stat/descriptive/SummaryStatistics.java:     * @return true if object equals this
./stat/descriptive/SummaryStatistics.java:     * @return hash code
./stat/descriptive/SummaryStatistics.java:     * @return the StorelessUnivariateStatistic implementing the sum
./stat/descriptive/SummaryStatistics.java:     * @return the StorelessUnivariateStatistic implementing the sum of squares
./stat/descriptive/SummaryStatistics.java:     * @return the StorelessUnivariateStatistic implementing the minimum
./stat/descriptive/SummaryStatistics.java:     * @return the StorelessUnivariateStatistic implementing the maximum
./stat/descriptive/SummaryStatistics.java:     * @return the StorelessUnivariateStatistic implementing the log sum
./stat/descriptive/SummaryStatistics.java:     * @return the StorelessUnivariateStatistic implementing the geometric mean
./stat/descriptive/SummaryStatistics.java:     * @return the StorelessUnivariateStatistic implementing the mean
./stat/descriptive/SummaryStatistics.java:     * @return the StorelessUnivariateStatistic implementing the variance
./stat/descriptive/SummaryStatistics.java:     * @return a copy of this
./stat/descriptive/StorelessUnivariateStatistic.java:     * @return value of the statistic, <code>Double.NaN</code> if it
./stat/descriptive/StorelessUnivariateStatistic.java:     * @return the number of values.
./stat/descriptive/StorelessUnivariateStatistic.java:     * @return a copy of the statistic
./stat/descriptive/AbstractUnivariateStatistic.java:     * @return copy of the stored data array (may be null)
./stat/descriptive/AbstractUnivariateStatistic.java:     * @return reference to the stored data array (may be null)
./stat/descriptive/AbstractUnivariateStatistic.java:     * @return the value of the statistic applied to the stored data
./stat/descriptive/AbstractUnivariateStatistic.java:     * @return true if the parameters are valid and designate a subarray of positive length
./stat/descriptive/AbstractUnivariateStatistic.java:     * @return true if the parameters are valid
./stat/descriptive/AbstractUnivariateStatistic.java:     * @return true if the parameters are valid and designate a subarray of positive length
./stat/descriptive/AbstractUnivariateStatistic.java:     * @return {@code true} if the parameters are valid.
./stat/descriptive/MultivariateSummaryStatistics.java:     * @return The dimension of the data
./stat/descriptive/MultivariateSummaryStatistics.java:     * @return The number of available values
./stat/descriptive/MultivariateSummaryStatistics.java:     * @return results array
./stat/descriptive/MultivariateSummaryStatistics.java:     * @return the array of component sums
./stat/descriptive/MultivariateSummaryStatistics.java:     * @return the array of component sums of squares
./stat/descriptive/MultivariateSummaryStatistics.java:     * @return the array of component log sums
./stat/descriptive/MultivariateSummaryStatistics.java:     * @return the array of component means
./stat/descriptive/MultivariateSummaryStatistics.java:     * @return the array of component standard deviations
./stat/descriptive/MultivariateSummaryStatistics.java:     * @return the covariance matrix
./stat/descriptive/MultivariateSummaryStatistics.java:     * @return the array of component maxima
./stat/descriptive/MultivariateSummaryStatistics.java:     * @return the array of component minima
./stat/descriptive/MultivariateSummaryStatistics.java:     * @return the array of component geometric means
./stat/descriptive/MultivariateSummaryStatistics.java:     * @return String with line feeds displaying statistics
./stat/descriptive/MultivariateSummaryStatistics.java:     * @return true if object equals this
./stat/descriptive/MultivariateSummaryStatistics.java:     * @return hash code
./stat/descriptive/MultivariateSummaryStatistics.java:     * @return the StorelessUnivariateStatistic implementing the sum
./stat/descriptive/MultivariateSummaryStatistics.java:     * @return the StorelessUnivariateStatistic implementing the sum of squares
./stat/descriptive/MultivariateSummaryStatistics.java:     * @return the StorelessUnivariateStatistic implementing the minimum
./stat/descriptive/MultivariateSummaryStatistics.java:     * @return the StorelessUnivariateStatistic implementing the maximum
./stat/descriptive/MultivariateSummaryStatistics.java:     * @return the StorelessUnivariateStatistic implementing the log sum
./stat/descriptive/MultivariateSummaryStatistics.java:     * @return the StorelessUnivariateStatistic implementing the geometric mean
./stat/descriptive/MultivariateSummaryStatistics.java:     * @return the StorelessUnivariateStatistic implementing the mean
./stat/descriptive/StatisticalSummary.java:     * @return The mean or Double.NaN if no values have been added.
./stat/descriptive/StatisticalSummary.java:     * @return The variance, Double.NaN if no values have been added
./stat/descriptive/StatisticalSummary.java:     * @return The standard deviation, Double.NaN if no values have been added
./stat/descriptive/StatisticalSummary.java:     * @return The max or Double.NaN if no values have been added.
./stat/descriptive/StatisticalSummary.java:    * @return The min or Double.NaN if no values have been added.
./stat/descriptive/StatisticalSummary.java:     * @return The number of available values
./stat/descriptive/StatisticalSummary.java:     * @return The sum or Double.NaN if no values have been added
./stat/descriptive/StatisticalSummaryValues.java:     * @return Returns the max.
./stat/descriptive/StatisticalSummaryValues.java:     * @return Returns the mean.
./stat/descriptive/StatisticalSummaryValues.java:     * @return Returns the min.
./stat/descriptive/StatisticalSummaryValues.java:     * @return Returns the number of values.
./stat/descriptive/StatisticalSummaryValues.java:     * @return Returns the sum.
./stat/descriptive/StatisticalSummaryValues.java:     * @return Returns the standard deviation
./stat/descriptive/StatisticalSummaryValues.java:     * @return Returns the variance.
./stat/descriptive/StatisticalSummaryValues.java:     * @return true if object equals this
./stat/descriptive/StatisticalSummaryValues.java:     * @return hash code
./stat/descriptive/StatisticalSummaryValues.java:     * @return String with line feeds displaying statistics
./stat/descriptive/SynchronizedDescriptiveStatistics.java:     * @return a copy of this
./stat/descriptive/SynchronizedSummaryStatistics.java:     * @return a copy of this
./stat/descriptive/UnivariateStatistic.java:     * @return the value of the statistic applied to the input array
./stat/descriptive/UnivariateStatistic.java:     * @return the value of the statistic applied to the included array entries
./stat/descriptive/UnivariateStatistic.java:     * @return a copy of the statistic
./stat/descriptive/StatisticalMultivariateSummary.java:     * @return The dimension of the data
./stat/descriptive/StatisticalMultivariateSummary.java:     * @return the array of component means
./stat/descriptive/StatisticalMultivariateSummary.java:     * @return The covariance, null if no multivariate sample
./stat/descriptive/StatisticalMultivariateSummary.java:     * @return the array of component standard deviations
./stat/descriptive/StatisticalMultivariateSummary.java:     * @return the array of component maxima
./stat/descriptive/StatisticalMultivariateSummary.java:     * @return the array of component minima
./stat/descriptive/StatisticalMultivariateSummary.java:     * @return The number of available values
./stat/descriptive/StatisticalMultivariateSummary.java:     * @return the array of component geometric means
./stat/descriptive/StatisticalMultivariateSummary.java:     * @return the array of component sums
./stat/descriptive/StatisticalMultivariateSummary.java:     * @return the array of component sums of squares
./stat/descriptive/StatisticalMultivariateSummary.java:     * @return the array of component log sums
./stat/descriptive/AggregateSummaryStatistics.java:     * @return the sum of logs
./stat/descriptive/AggregateSummaryStatistics.java:     * @return the geometric mean
./stat/descriptive/AggregateSummaryStatistics.java:     * @return The sum of squares
./stat/descriptive/AggregateSummaryStatistics.java:     * @return second central moment statistic
./stat/descriptive/AggregateSummaryStatistics.java:     * @return Current values of aggregate statistics
./stat/descriptive/AggregateSummaryStatistics.java:     * @return a {@code SummaryStatistics} whose data will be aggregated with
./stat/descriptive/AggregateSummaryStatistics.java:     * @return summary statistics for the combined dataset
./stat/descriptive/AggregateSummaryStatistics.java:         * @return true if object equals this
./stat/descriptive/AggregateSummaryStatistics.java:         * @return hash code
./stat/descriptive/moment/SemiVariance.java:      * @return the SemiVariance
./stat/descriptive/moment/SemiVariance.java:       * @return the SemiVariance
./stat/descriptive/moment/SemiVariance.java:       * @return the SemiVariance
./stat/descriptive/moment/SemiVariance.java:       * @return the SemiVariance
./stat/descriptive/moment/SemiVariance.java:      * @return the SemiVariance
./stat/descriptive/moment/SemiVariance.java:     * @return the value of biasCorrected.
./stat/descriptive/moment/SemiVariance.java:     * @return the varianceDirection
./stat/descriptive/moment/SemiVariance.java:         * @return true if direction is UPSIDE; false otherwise
./stat/descriptive/moment/GeometricMean.java:     * @return the geometric mean or Double.NaN if length = 0 or
./stat/descriptive/moment/GeometricMean.java:     * @return the StorelessUnivariateStatistic implementing the log sum
./stat/descriptive/moment/StandardDeviation.java:     * @return the standard deviation of the values or Double.NaN if length = 0
./stat/descriptive/moment/StandardDeviation.java:     * @return the standard deviation of the values or Double.NaN if length = 0
./stat/descriptive/moment/StandardDeviation.java:     * @return the standard deviation of the values or Double.NaN if length = 0
./stat/descriptive/moment/StandardDeviation.java:     * @return the standard deviation of the values or Double.NaN if length = 0
./stat/descriptive/moment/StandardDeviation.java:     * @return Returns the isBiasCorrected.
./stat/descriptive/moment/VectorialCovariance.java:     * @return covariance matrix
./stat/descriptive/moment/VectorialCovariance.java:     * @return number of vectors in the sample
./stat/descriptive/moment/Variance.java:     * @return the variance of the values or Double.NaN if length = 0
./stat/descriptive/moment/Variance.java:     * @return the variance of the values or Double.NaN if length = 0
./stat/descriptive/moment/Variance.java:     * @return the weighted variance of the values or Double.NaN if length = 0
./stat/descriptive/moment/Variance.java:     * @return the weighted variance of the values
./stat/descriptive/moment/Variance.java:     * @return the variance of the values or Double.NaN if length = 0
./stat/descriptive/moment/Variance.java:     * @return the variance of the values or Double.NaN if the array is empty
./stat/descriptive/moment/Variance.java:     * @return the variance of the values or Double.NaN if length = 0
./stat/descriptive/moment/Variance.java:     * @return the variance of the values or Double.NaN if length = 0
./stat/descriptive/moment/Variance.java:     * @return Returns the isBiasCorrected.
./stat/descriptive/moment/Mean.java:     * @return the mean of the values or Double.NaN if length = 0
./stat/descriptive/moment/Mean.java:     * @return the mean of the values or Double.NaN if length = 0
./stat/descriptive/moment/Mean.java:     * @return the mean of the values or Double.NaN if length = 0
./stat/descriptive/moment/Skewness.java:     * @return the skewness of the available values.
./stat/descriptive/moment/Skewness.java:     * @return the skewness of the values or Double.NaN if length is less than
./stat/descriptive/moment/Kurtosis.java:     * @return the kurtosis of the values or Double.NaN if length is less than 4
./stat/descriptive/moment/VectorialMean.java:     * @return mean vector
./stat/descriptive/moment/VectorialMean.java:     * @return number of vectors in the sample
./stat/descriptive/DescriptiveStatistics.java:     * @return replaced value
./stat/descriptive/DescriptiveStatistics.java:     * @return The mean or Double.NaN if no values have been added.
./stat/descriptive/DescriptiveStatistics.java:     * @return The geometricMean, Double.NaN if no values have been added,
./stat/descriptive/DescriptiveStatistics.java:     * @return The variance, Double.NaN if no values have been added
./stat/descriptive/DescriptiveStatistics.java:     * @return The population variance, Double.NaN if no values have been added,
./stat/descriptive/DescriptiveStatistics.java:     * @return The standard deviation, Double.NaN if no values have been added
./stat/descriptive/DescriptiveStatistics.java:     * @return The quadratic mean or {@code Double.NaN} if no values
./stat/descriptive/DescriptiveStatistics.java:     * @return The skewness, Double.NaN if less than 3 values have been added.
./stat/descriptive/DescriptiveStatistics.java:     * @return The kurtosis, Double.NaN if less than 4 values have been added.
./stat/descriptive/DescriptiveStatistics.java:     * @return The max or Double.NaN if no values have been added.
./stat/descriptive/DescriptiveStatistics.java:    * @return The min or Double.NaN if no values have been added.
./stat/descriptive/DescriptiveStatistics.java:     * @return The number of available values
./stat/descriptive/DescriptiveStatistics.java:     * @return The sum or Double.NaN if no values have been added
./stat/descriptive/DescriptiveStatistics.java:     * @return The sum of the squares or Double.NaN if no
./stat/descriptive/DescriptiveStatistics.java:     * @return The current window size or -1 if its Infinite.
./stat/descriptive/DescriptiveStatistics.java:     * @return returns the current set of numbers in the order in which they
./stat/descriptive/DescriptiveStatistics.java:     * @return returns the current set of
./stat/descriptive/DescriptiveStatistics.java:     * @return return the element at the specified index
./stat/descriptive/DescriptiveStatistics.java:     * @return An estimate for the pth percentile of the stored data
./stat/descriptive/DescriptiveStatistics.java:     * @return String with line feeds displaying statistics
./stat/descriptive/DescriptiveStatistics.java:     * @return the computed value of the statistic.
./stat/descriptive/DescriptiveStatistics.java:     * @return the UnivariateStatistic implementing the mean
./stat/descriptive/DescriptiveStatistics.java:     * @return the UnivariateStatistic implementing the geometric mean
./stat/descriptive/DescriptiveStatistics.java:     * @return the UnivariateStatistic implementing the kurtosis
./stat/descriptive/DescriptiveStatistics.java:     * @return the UnivariateStatistic implementing the maximum
./stat/descriptive/DescriptiveStatistics.java:     * @return the UnivariateStatistic implementing the minimum
./stat/descriptive/DescriptiveStatistics.java:     * @return the UnivariateStatistic implementing the percentile
./stat/descriptive/DescriptiveStatistics.java:     * @return the UnivariateStatistic implementing the skewness
./stat/descriptive/DescriptiveStatistics.java:     * @return the UnivariateStatistic implementing the variance
./stat/descriptive/DescriptiveStatistics.java:     * @return the UnivariateStatistic implementing the sum of squares
./stat/descriptive/DescriptiveStatistics.java:     * @return the UnivariateStatistic implementing the sum
./stat/descriptive/DescriptiveStatistics.java:     * @return a copy of this
./stat/descriptive/WeightedEvaluation.java:     * @return the value of the weighted statistic applied to the input array
./stat/descriptive/WeightedEvaluation.java:     * @return the value of the weighted statistic applied to the included array entries
./stat/descriptive/rank/Max.java:     * @return the maximum of the values or Double.NaN if length = 0
./stat/descriptive/rank/Percentile.java:     * @return the value of the statistic applied to the stored data
./stat/descriptive/rank/Percentile.java:     * @return the percentile value or Double.NaN if the array is empty
./stat/descriptive/rank/Percentile.java:     * @return the percentile value
./stat/descriptive/rank/Percentile.java:     * @return  the percentile value
./stat/descriptive/rank/Percentile.java:     * @return the index of the median element chosen between the
./stat/descriptive/rank/Percentile.java:     * @return quantile set while construction or {@link #setQuantile(double)}
./stat/descriptive/rank/Percentile.java:     * @return work array sliced from values in the range [begin,begin+length)
./stat/descriptive/rank/Percentile.java:     * @return copy of a slice of the original array
./stat/descriptive/rank/Percentile.java:     * @return the copy of sliced array with replaced values
./stat/descriptive/rank/Percentile.java:     * @return the copy of the sliced array after removing the removedValue
./stat/descriptive/rank/Percentile.java:     * @return cached pivots or a newly created one
./stat/descriptive/rank/Percentile.java:     * @return the {@code estimationType} set
./stat/descriptive/rank/Percentile.java:     * @return a new instance, with changed estimation type
./stat/descriptive/rank/Percentile.java:     * @return {@code NaN Handling} strategy set during construction
./stat/descriptive/rank/Percentile.java:     * @return a new instance, with changed NaN handling strategy
./stat/descriptive/rank/Percentile.java:     * @return the {@code kthSelector} set
./stat/descriptive/rank/Percentile.java:     * @return the pivoting strategy set
./stat/descriptive/rank/Percentile.java:     * @return a new instance, with changed KthSelector
./stat/descriptive/rank/Percentile.java:         * @return a computed real valued index as explained in the wikipedia
./stat/descriptive/rank/Percentile.java:         * @return estimated percentile
./stat/descriptive/rank/Percentile.java:         * @return estimated percentile
./stat/descriptive/rank/Percentile.java:         * @return estimated percentile
./stat/descriptive/rank/Percentile.java:         * @return the name
./stat/descriptive/rank/PSquarePercentile.java:     * @return true if {@code o} is a {@code PSquarePercentile} with
./stat/descriptive/rank/PSquarePercentile.java:     * @return string representation of state data
./stat/descriptive/rank/PSquarePercentile.java:     * @return quantile estimated by {@link #getResult()}
./stat/descriptive/rank/PSquarePercentile.java:     * @return maximum in the data set added to this statistic
./stat/descriptive/rank/PSquarePercentile.java:     * @return minimum in the data set added to this statistic
./stat/descriptive/rank/PSquarePercentile.java:         * @return Marker array
./stat/descriptive/rank/PSquarePercentile.java:         * @return true if the object compares with this object are equivalent
./stat/descriptive/rank/PSquarePercentile.java:         * @return computed percentile
./stat/descriptive/rank/PSquarePercentile.java:         * @return height of mid point marker
./stat/descriptive/rank/PSquarePercentile.java:         * @return kth cell (of the markers ranging from 1-5) where observed
./stat/descriptive/rank/PSquarePercentile.java:         * @return marker height
./stat/descriptive/rank/PSquarePercentile.java:         * @return cloned object
./stat/descriptive/rank/PSquarePercentile.java:         * @return Markers as a string
./stat/descriptive/rank/PSquarePercentile.java:         * @return this instance
./stat/descriptive/rank/PSquarePercentile.java:         * @return this instance
./stat/descriptive/rank/PSquarePercentile.java:         * @return this instance
./stat/descriptive/rank/PSquarePercentile.java:         * @return difference between desired and actual position
./stat/descriptive/rank/PSquarePercentile.java:         * @return estimated quantile
./stat/descriptive/rank/PSquarePercentile.java:         * @return true if yD is a bad estimate
./stat/descriptive/rank/PSquarePercentile.java:         * @return true if this equals passed in other object o
./stat/descriptive/rank/PSquarePercentile.java:         * @return cloned marker
./stat/descriptive/rank/PSquarePercentile.java:         * @return true if addition is successful and false otherwise
./stat/descriptive/rank/PSquarePercentile.java:         * @return true if addition is successful and false otherwise
./stat/descriptive/rank/PSquarePercentile.java:     * @return an instance of PSquareMarkers
./stat/descriptive/rank/PSquarePercentile.java:         * @return percentile
./stat/descriptive/rank/PSquarePercentile.java:         * @return clone of this instance
./stat/descriptive/rank/PSquarePercentile.java:         * @return percentile value of the marker index passed
./stat/descriptive/rank/PSquarePercentile.java:         * @return computed percentile
./stat/descriptive/rank/PSquarePercentile.java:         * @return percentile estimate
./stat/descriptive/rank/Min.java:     * @return the minimum of the values or Double.NaN if length = 0
./stat/descriptive/AbstractStorelessUnivariateStatistic.java:     * @return the value of the statistic applied to the input array
./stat/descriptive/AbstractStorelessUnivariateStatistic.java:     * @return the value of the statistic applied to the included array entries
./stat/descriptive/AbstractStorelessUnivariateStatistic.java:     * @return true if object returns the same value as this
./stat/descriptive/AbstractStorelessUnivariateStatistic.java:     * @return hash code
./stat/Frequency.java:     * @return a string representation.
./stat/Frequency.java:     * @return values Iterator
./stat/Frequency.java:     * @return entry set Iterator
./stat/Frequency.java:     * @return the total frequency count.
./stat/Frequency.java:     * @return the frequency of v.
./stat/Frequency.java:     * @return the frequency of v.
./stat/Frequency.java:     * @return the frequency of v.
./stat/Frequency.java:     * @return the frequency of v.
./stat/Frequency.java:     * @return the number of unique values that have been added to the frequency table.
./stat/Frequency.java:     * @return the proportion of values equal to v
./stat/Frequency.java:     * @return the proportion of values equal to v
./stat/Frequency.java:     * @return the proportion of values equal to v
./stat/Frequency.java:     * @return the proportion of values equal to v
./stat/Frequency.java:     * @return the proportion of values equal to v
./stat/Frequency.java:     * @return the proportion of values equal to v
./stat/Frequency.java:     * @return the proportion of values equal to v
./stat/Frequency.java:     * @return the proportion of values equal to v
./stat/Frequency.java:     * @return the proportion of values less than or equal to v
./stat/Frequency.java:     * @return the proportion of values less than or equal to v
./stat/Frequency.java:     * @return the proportion of values less than or equal to v
./stat/Frequency.java:     * @return the proportion of values less than or equal to v
./stat/Frequency.java:     * @return a list containing the value(s) which appear most often.
./stat/Frequency.java:         * @return  result of comparison
./stat/inference/OneWayAnova.java:     * @return Fvalue
./stat/inference/OneWayAnova.java:     * @return Pvalue
./stat/inference/OneWayAnova.java:     * @return Pvalue
./stat/inference/OneWayAnova.java:     * @return computed AnovaStats
./stat/inference/OneWayAnova.java:     * @return true if the null hypothesis can be rejected with
./stat/inference/OneWayAnova.java:     * @return computed AnovaStats
./stat/inference/WilcoxonSignedRankTest.java:     * @return z = y - x
./stat/inference/WilcoxonSignedRankTest.java:     * @return |z|
./stat/inference/WilcoxonSignedRankTest.java:     * @return wilcoxonSignedRank statistic (the larger of W+ and W-)
./stat/inference/WilcoxonSignedRankTest.java:     * @return two-sided exact p-value
./stat/inference/WilcoxonSignedRankTest.java:     * @return two-sided asymptotic p-value
./stat/inference/WilcoxonSignedRankTest.java:     * @return p-value
./stat/inference/TTest.java:     * @return t statistic
./stat/inference/TTest.java:     * @return p-value for t-test
./stat/inference/TTest.java:     * @return true if the null hypothesis can be rejected with
./stat/inference/TTest.java:     * @return t statistic
./stat/inference/TTest.java:     * @return t statistic
./stat/inference/TTest.java:     * @return t statistic
./stat/inference/TTest.java:     * @return t statistic
./stat/inference/TTest.java:     * @return t statistic
./stat/inference/TTest.java:     * @return t statistic
./stat/inference/TTest.java:     * @return p-value
./stat/inference/TTest.java:     * @return p-value
./stat/inference/TTest.java:     * @return p-value
./stat/inference/TTest.java:     * @return p-value
./stat/inference/TTest.java:     * @return p-value for t-test
./stat/inference/TTest.java:     * @return p-value for t-test
./stat/inference/TTest.java:     * @return true if the null hypothesis can be rejected with
./stat/inference/TTest.java:     * @return true if the null hypothesis can be rejected with
./stat/inference/TTest.java:     * @return p-value for t-test
./stat/inference/TTest.java:     * @return p-value for t-test
./stat/inference/TTest.java:     * @return true if the null hypothesis can be rejected with
./stat/inference/TTest.java:     * @return approximate degrees of freedom
./stat/inference/TTest.java:     * @return t test statistic
./stat/inference/TTest.java:     * @return t test statistic
./stat/inference/TTest.java:     * @return t test statistic
./stat/inference/TTest.java:     * @return p-value
./stat/inference/TTest.java:     * @return p-value
./stat/inference/TTest.java:     * @return p-value
./stat/inference/BinomialTest.java:     * @return true if the null hypothesis can be rejected with confidence {@code 1 - alpha}
./stat/inference/BinomialTest.java:     * @return p-value
./stat/inference/MannWhitneyUTest.java:     * @return concatenated array
./stat/inference/MannWhitneyUTest.java:     * @return Mann-Whitney U statistic (maximum of U<sup>x</sup> and U<sup>y</sup>)
./stat/inference/MannWhitneyUTest.java:     * @return two-sided asymptotic p-value
./stat/inference/MannWhitneyUTest.java:     * @return asymptotic p-value
./stat/inference/ChiSquareTest.java:     * @return chiSquare test statistic
./stat/inference/ChiSquareTest.java:     * @return p-value
./stat/inference/ChiSquareTest.java:     * @return true iff null hypothesis can be rejected with confidence
./stat/inference/ChiSquareTest.java:     * @return chiSquare test statistic
./stat/inference/ChiSquareTest.java:     * @return p-value
./stat/inference/ChiSquareTest.java:     * @return true iff null hypothesis can be rejected with confidence
./stat/inference/ChiSquareTest.java:     * @return chiSquare test statistic
./stat/inference/ChiSquareTest.java:     * @return p-value
./stat/inference/ChiSquareTest.java:     * @return true iff null hypothesis can be rejected with confidence
./stat/inference/GTest.java:     * @return G-Test statistic
./stat/inference/GTest.java:     * @return p-value
./stat/inference/GTest.java:     * @return p-value
./stat/inference/GTest.java:     * @return true iff null hypothesis can be rejected with confidence 1 -
./stat/inference/GTest.java:     * @return Shannon Entropy of the given Matrix
./stat/inference/GTest.java:     * @return Shannon Entropy of the given Vector
./stat/inference/GTest.java:     * @return G-Test statistic
./stat/inference/GTest.java:     * @return root log-likelihood ratio
./stat/inference/GTest.java:     * @return p-value
./stat/inference/GTest.java:     * @return true iff null hypothesis can be rejected with confidence 1 -
./stat/inference/KolmogorovSmirnovTest.java:     * @return the p-value associated with the null hypothesis that {@code data} is a sample from
./stat/inference/KolmogorovSmirnovTest.java:     * @return Kolmogorov-Smirnov statistic \(D_n\)
./stat/inference/KolmogorovSmirnovTest.java:     * @return p-value associated with the null hypothesis that {@code x} and {@code y} represent
./stat/inference/KolmogorovSmirnovTest.java:     * @return p-value associated with the null hypothesis that {@code x} and {@code y} represent
./stat/inference/KolmogorovSmirnovTest.java:     * @return test statistic \(D_{n,m}\) used to evaluate the null hypothesis that {@code x} and
./stat/inference/KolmogorovSmirnovTest.java:     * @return test statistic \(n m D_{n,m}\) used to evaluate the null hypothesis that {@code x} and
./stat/inference/KolmogorovSmirnovTest.java:     * @return the p-value associated with the null hypothesis that {@code data} is a sample from
./stat/inference/KolmogorovSmirnovTest.java:     * @return true iff the null hypothesis that {@code data} is a sample from {@code distribution}
./stat/inference/KolmogorovSmirnovTest.java:     * @return estimated p-value
./stat/inference/KolmogorovSmirnovTest.java:     * @return estimated p-value
./stat/inference/KolmogorovSmirnovTest.java:     * @return \(P(D_n < d)\)
./stat/inference/KolmogorovSmirnovTest.java:     * @return \(P(D_n < d)\)
./stat/inference/KolmogorovSmirnovTest.java:     * @return \(P(D_n < d)\)
./stat/inference/KolmogorovSmirnovTest.java:     * @return the two-sided probability of \(P(D_n < d)\)
./stat/inference/KolmogorovSmirnovTest.java:     * @return \(P(D_n < d)\)
./stat/inference/KolmogorovSmirnovTest.java:     * @return \(P(D_n < d)\)
./stat/inference/KolmogorovSmirnovTest.java:     * @return H matrix
./stat/inference/KolmogorovSmirnovTest.java:     * @return H matrix
./stat/inference/KolmogorovSmirnovTest.java:     * @return Kolmogorov sum evaluated at t
./stat/inference/KolmogorovSmirnovTest.java:     * @return the integral d-statistic in the range [0, n*m]
./stat/inference/KolmogorovSmirnovTest.java:     * @return probability that a randomly selected m-n partition of m + n generates \(D_{n,m}\)
./stat/inference/KolmogorovSmirnovTest.java:     * @return approximate probability that a randomly selected m-n partition of m + n generates
./stat/inference/KolmogorovSmirnovTest.java:     * @return proportion of randomly generated m-n partitions of m + n that result in \(D_{n,m}\)
./stat/inference/KolmogorovSmirnovTest.java:     * @return proportion of randomly generated m-n partitions of m + n that result in \(D_{n,m}\)
./stat/inference/KolmogorovSmirnovTest.java:     * @return true if x and y together contain ties
./stat/inference/KolmogorovSmirnovTest.java:     * @return C(i,j) for given m, n, c
./stat/inference/KolmogorovSmirnovTest.java:     * @return number or paths to (i, j) from (0,0) representing D-values as large as c for given m, n
./transform/FastSineTransformer.java:     * @return the real transformed array
./transform/RealTransformer.java:     * @return the real transformed array (spectrum)
./transform/RealTransformer.java:     * @return the real transformed array
./transform/FastHadamardTransformer.java:     * @return the integer transformed array (spectrum)
./transform/FastHadamardTransformer.java:     * @return the real transformed array, {@code y}
./transform/FastHadamardTransformer.java:     * @return the integer transformed array, {@code y}
./transform/FastFourierTransformer.java:     * @return the complex transformed array
./transform/FastFourierTransformer.java:     * @return the complex transformed array
./transform/FastFourierTransformer.java:     * @return the complex transformed array
./transform/FastFourierTransformer.java:     * @return transform of {@code mdca} as a Multi-Dimensional Complex Array, i.e. {@code Complex[][][][]}
./transform/FastFourierTransformer.java:         * @return matrix element
./transform/FastFourierTransformer.java:         * @return the previous value
./transform/FastFourierTransformer.java:         * @return size in all dimensions
./transform/FastFourierTransformer.java:         * @return underlying storage array
./transform/TransformUtils.java:     * @return a reference to the scaled array
./transform/TransformUtils.java:     * @return a reference to the scaled array
./transform/TransformUtils.java:     * @return a two dimensional array filled with the real and imaginary parts
./transform/TransformUtils.java:     * @return an array of {@link Complex} with specified real and imaginary parts.
./transform/TransformUtils.java:     * @return the base-2 logarithm of {@code n}
./transform/FastCosineTransformer.java:     * @return the real transformed array
./util/Incrementor.java:     * @return the counter upper limit.
./util/Incrementor.java:     * @return the current count.
./util/Incrementor.java:     * @return {@code false} if the next call to {@link #incrementCount(int)
./util/Incrementor.java:     * @return an incrementor wrapping an {@link IntegerSequence.Incrementor}
./util/FastMath.java:     * @return the high order part of the mantissa
./util/FastMath.java:     * @return square root of a
./util/FastMath.java:     * @return hyperbolic cosine of x
./util/FastMath.java:     * @return hyperbolic sine of x
./util/FastMath.java:     * @return hyperbolic tangent of x
./util/FastMath.java:     * @return inverse hyperbolic cosine of a
./util/FastMath.java:     * @return inverse hyperbolic sine of a
./util/FastMath.java:     * @return inverse hyperbolic tangent of a
./util/FastMath.java:     * @return -1.0, -0.0, +0.0, +1.0 or NaN depending on sign of a
./util/FastMath.java:     * @return -1.0, -0.0, +0.0, +1.0 or NaN depending on sign of a
./util/FastMath.java:     * @return neighbor of a towards positive infinity
./util/FastMath.java:     * @return neighbor of a towards positive infinity
./util/FastMath.java:     * @return neighbor of a towards negative infinity
./util/FastMath.java:     * @return neighbor of a towards negative infinity
./util/FastMath.java:     * @return a random number between 0.0 and 1.0
./util/FastMath.java:     * @return double e<sup>x</sup>
./util/FastMath.java:     * @return exp(x)
./util/FastMath.java:     * @return exp(x) - 1
./util/FastMath.java:     * @return exp(x) - 1
./util/FastMath.java:     * @return log(x)
./util/FastMath.java:     * @return log(x)
./util/FastMath.java:     * @return {@code log(1 + x)}.
./util/FastMath.java:     * @return log10(x)
./util/FastMath.java:     * @return the value of the logarithm, i.e. the number {@code y} such that
./util/FastMath.java:     * @return double
./util/FastMath.java:     * @return d<sup>e</sup>
./util/FastMath.java:     * @return d<sup>e</sup>
./util/FastMath.java:         * @return product
./util/FastMath.java:         * @return reciprocal of the instance
./util/FastMath.java:         * @return d^e, split in high and low bits
./util/FastMath.java:     *  @return sin(x) - x
./util/FastMath.java:     *  @return cos(x) - 1
./util/FastMath.java:     *  @return sin(xa + xb)
./util/FastMath.java:     *  @return cos(xa + xb)
./util/FastMath.java:     *  @return tan(xa+xb) (or cotangent, depending on cotanFlag)
./util/FastMath.java:     * @return sin(x)
./util/FastMath.java:     * @return cos(x)
./util/FastMath.java:     * @return tan(x)
./util/FastMath.java:     *  @return atan(x)
./util/FastMath.java:     * @return atan(xa + xb) (or angle shifted by {@code PI} if leftPlane is true)
./util/FastMath.java:     * @return phase angle of point (x,y) between {@code -PI} and {@code PI}
./util/FastMath.java:     * @return arc sine of x
./util/FastMath.java:     * @return arc cosine of x
./util/FastMath.java:     * @return cubic root of x
./util/FastMath.java:     *  @return x converted into radians
./util/FastMath.java:     *  @return x converted into degrees
./util/FastMath.java:     * @return abs(x)
./util/FastMath.java:     * @return abs(x)
./util/FastMath.java:     * @return abs(x)
./util/FastMath.java:     * @return abs(x)
./util/FastMath.java:     * @return ulp(x)
./util/FastMath.java:     * @return ulp(x)
./util/FastMath.java:     * @return d &times; 2<sup>n</sup>
./util/FastMath.java:     * @return f &times; 2<sup>n</sup>
./util/FastMath.java:     * @return the next machine representable number in the specified direction
./util/FastMath.java:     * @return the next machine representable number in the specified direction
./util/FastMath.java:     * @return a double number f such that f is an integer f <= x < f + 1.0
./util/FastMath.java:     * @return a double number c such that c is an integer c - 1.0 < x <= c
./util/FastMath.java:     * @return a double number r such that r is an integer r - 0.5 <= x <= r + 0.5
./util/FastMath.java:     * @return closest long to x
./util/FastMath.java:     * @return closest int to x
./util/FastMath.java:     * @return a if a is lesser or equal to b, b otherwise
./util/FastMath.java:     * @return a if a is lesser or equal to b, b otherwise
./util/FastMath.java:     * @return a if a is lesser or equal to b, b otherwise
./util/FastMath.java:     * @return a if a is lesser or equal to b, b otherwise
./util/FastMath.java:     * @return b if a is lesser or equal to b, a otherwise
./util/FastMath.java:     * @return b if a is lesser or equal to b, a otherwise
./util/FastMath.java:     * @return b if a is lesser or equal to b, a otherwise
./util/FastMath.java:     * @return b if a is lesser or equal to b, a otherwise
./util/FastMath.java:     * @return sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)
./util/FastMath.java:     * @return the remainder, rounded
./util/FastMath.java:     * @return integer with same valie as n if no overflows occur
./util/FastMath.java:     * @return n+1 if no overflows occur
./util/FastMath.java:     * @return n+1 if no overflows occur
./util/FastMath.java:     * @return n-1 if no overflows occur
./util/FastMath.java:     * @return n-1 if no overflows occur
./util/FastMath.java:     * @return a+b if no overflows occur
./util/FastMath.java:     * @return a+b if no overflows occur
./util/FastMath.java:     * @return a-b if no overflows occur
./util/FastMath.java:     * @return a-b if no overflows occur
./util/FastMath.java:     * @return a*b if no overflows occur
./util/FastMath.java:     * @return a*b if no overflows occur
./util/FastMath.java:     * @return q such that a = q b + r with 0 <= r < b if b > 0 and b < r <= 0 if b < 0
./util/FastMath.java:     * @return q such that a = q b + r with 0 <= r < b if b > 0 and b < r <= 0 if b < 0
./util/FastMath.java:     * @return r such that a = q b + r with 0 <= r < b if b > 0 and b < r <= 0 if b < 0
./util/FastMath.java:     * @return r such that a = q b + r with 0 <= r < b if b > 0 and b < r <= 0 if b < 0
./util/FastMath.java:     * @return the magnitude with the same sign as the {@code sign} argument
./util/FastMath.java:     * @return the magnitude with the same sign as the {@code sign} argument
./util/FastMath.java:     * @return exponent for d in IEEE754 representation, without bias
./util/FastMath.java:     * @return exponent for d in IEEE754 representation, without bias
./util/FastMath.java:         * @return k
./util/FastMath.java:         * @return remA
./util/FastMath.java:         * @return remB
./util/ArithmeticUtils.java:     * @return the sum {@code x+y}
./util/ArithmeticUtils.java:     * @return the sum {@code a+b}
./util/ArithmeticUtils.java:     * @return {@code n choose k}
./util/ArithmeticUtils.java:     * @return {@code n choose k}
./util/ArithmeticUtils.java:     * @return {@code n choose k}
./util/ArithmeticUtils.java:     * @return {@code n!}
./util/ArithmeticUtils.java:     * @return {@code n!}
./util/ArithmeticUtils.java:     * @return {@code n!}
./util/ArithmeticUtils.java:     * @return the greatest common divisor (never negative).
./util/ArithmeticUtils.java:     * @return the greatest common divisor.
./util/ArithmeticUtils.java:     * @return the greatest common divisor, never negative.
./util/ArithmeticUtils.java:     * @return the least common multiple, never negative.
./util/ArithmeticUtils.java:     * @return the least common multiple, never negative.
./util/ArithmeticUtils.java:     * @return the product {@code x * y}.
./util/ArithmeticUtils.java:     * @return the product {@code a * b}.
./util/ArithmeticUtils.java:     * @return the difference {@code x - y}.
./util/ArithmeticUtils.java:     * @return the difference {@code a - b}.
./util/ArithmeticUtils.java:     * @return \( k^e \)
./util/ArithmeticUtils.java:     * @return k<sup>e</sup>
./util/ArithmeticUtils.java:     * @return \( k^e \)
./util/ArithmeticUtils.java:     * @return k<sup>e</sup>
./util/ArithmeticUtils.java:     * @return k<sup>e</sup>
./util/ArithmeticUtils.java:     * @return k<sup>e</sup>
./util/ArithmeticUtils.java:     * @return k<sup>e</sup>
./util/ArithmeticUtils.java:     * @return {@code S(n,k)}
./util/ArithmeticUtils.java:     * @return the sum {@code a + b}.
./util/ArithmeticUtils.java:     * @return true if the argument is a power of two
./util/ContinuedFraction.java:     * @return the n-th a coefficient.
./util/ContinuedFraction.java:     * @return the n-th b coefficient.
./util/ContinuedFraction.java:     * @return the value of the continued fraction evaluated at x.
./util/ContinuedFraction.java:     * @return the value of the continued fraction evaluated at x.
./util/ContinuedFraction.java:     * @return the value of the continued fraction evaluated at x.
./util/ContinuedFraction.java:     * @return the value of the continued fraction evaluated at x.
./util/TransformerMap.java:     * @return true|false
./util/TransformerMap.java:     * @return true|false
./util/TransformerMap.java:     * @return the mapped NumberTransformer or null.
./util/TransformerMap.java:     * @return the replaced transformer if one is present
./util/TransformerMap.java:     * @return the removed transformer if one is present or
./util/TransformerMap.java:     * @return Set of Classes
./util/TransformerMap.java:     * @return Set of NumberTransformers
./util/TransformerMap.java:     * @return the double value of the Object.
./util/BigReal.java:     * @return the rounding mode.
./util/BigReal.java:     * @return the scale
./util/BigReal.java:     * @return double value corresponding to the instance
./util/BigReal.java:     * @return BigDecimal value corresponding to the instance
./util/CentralPivotingStrategy.java:     * @return The index corresponding to a simple average of
./util/RandomPivotingStrategy.java:     * @return The index corresponding to a random uniformly selected
./util/PivotingStrategyInterface.java:     * @return the index of the pivot element chosen between the
./util/Combinations.java:     * @return the size of the universe.
./util/Combinations.java:     * @return the size of the subsets to be enumerated.
./util/Combinations.java:     * @return a lexicographic comparator.
./util/Combinations.java:        /** @return True until next is called the first time, then false */
./util/Combinations.java:        /** @return the singleton in first activation; throws NSEE thereafter */
./util/Combinations.java:         * @return the lexicographic norm.
./util/IterationEvent.java:     * @return the number of iterations performed
./util/KthSelector.java:     * @return pivoting strategy
./util/KthSelector.java:     * @return K<sup>th</sup> value
./util/KthSelector.java:     * @return index of the pivot after partition
./util/BigRealField.java:     * @return the unique instance
./util/BigRealField.java:     * @return the singleton instance
./util/Precision.java:     * @return <ul><li>0 if  {@link #equals(double, double, double) equals(x, y, eps)}</li>
./util/Precision.java:     * @return <ul><li>0 if  {@link #equals(double, double, int) equals(x, y, maxUlps)}</li>
./util/Precision.java:     * @return {@code true} if the values are equal.
./util/Precision.java:     * @return {@code true} if the values are equal or both are NaN.
./util/Precision.java:     * @return {@code true} if the values are equal or within range of each other.
./util/Precision.java:     * @return {@code true} if the values are equal or within range of each other,
./util/Precision.java:     * @return {@code true} if there are fewer than {@code maxUlps} floating
./util/Precision.java:     * @return {@code true} if both arguments are NaN or if there are less than
./util/Precision.java:     * @return {@code true} if the values are equal.
./util/Precision.java:     * @return {@code true} if the values are equal or both are NaN.
./util/Precision.java:     * @return {@code true} if the values are two adjacent floating point
./util/Precision.java:     * @return {@code true} if the values are two adjacent floating point
./util/Precision.java:     * @return {@code true} if the values are equal or within range of each other,
./util/Precision.java:     * @return {@code true} if there are fewer than {@code maxUlps} floating
./util/Precision.java:     * @return {@code true} if both arguments are NaN or if there are less than
./util/Precision.java:     * @return the rounded value.
./util/Precision.java:     * @return the rounded value.
./util/Precision.java:     * @return the rounded value.
./util/Precision.java:     * @return the rounded value.
./util/Precision.java:     * @return the rounded value.
./util/Precision.java:     * @return a number {@code delta} so that {@code x + delta} and {@code x}
./util/Decimal64Field.java:     * @return the unique instance of this class
./util/CombinatoricsUtils.java:     * @return {@code n choose k}
./util/CombinatoricsUtils.java:     * @return {@code n choose k}
./util/CombinatoricsUtils.java:     * @return {@code n choose k}
./util/CombinatoricsUtils.java:     * @return {@code n!}
./util/CombinatoricsUtils.java:     * @return {@code n!}
./util/CombinatoricsUtils.java:     * @return {@code n!}
./util/CombinatoricsUtils.java:     * @return {@code S(n,k)}
./util/CombinatoricsUtils.java:     * @return an {@link Iterator iterator} over the k-sets in n.
./util/OpenIntToFieldHashMap.java:     * @return capacity to use for the specified size
./util/OpenIntToFieldHashMap.java:     * @return smallest power of two greater than the input value
./util/OpenIntToFieldHashMap.java:     * @return data associated with the key
./util/OpenIntToFieldHashMap.java:     * @return true if a value is associated with key
./util/OpenIntToFieldHashMap.java:     * @return iterator over the map elements
./util/OpenIntToFieldHashMap.java:     * @return perturbed hash
./util/OpenIntToFieldHashMap.java:     * @return index at which key should be inserted
./util/OpenIntToFieldHashMap.java:     * @return index at which key should be inserted
./util/OpenIntToFieldHashMap.java:     * @return next probe
./util/OpenIntToFieldHashMap.java:     * @return changed index
./util/OpenIntToFieldHashMap.java:     * @return number of elements stored in the map
./util/OpenIntToFieldHashMap.java:     * @return removed value
./util/OpenIntToFieldHashMap.java:     * @return true if an element is associated with key at index
./util/OpenIntToFieldHashMap.java:     * @return removed value
./util/OpenIntToFieldHashMap.java:     * @return previous value associated with the key
./util/OpenIntToFieldHashMap.java:     * @return true if  tables should grow
./util/OpenIntToFieldHashMap.java:     * @return hash value of the key
./util/OpenIntToFieldHashMap.java:         * @return true if there is a next element
./util/OpenIntToFieldHashMap.java:         * @return key of current entry
./util/OpenIntToFieldHashMap.java:         * @return value of current entry
./util/OpenIntToFieldHashMap.java:     * @return a new array
./util/DoubleArray.java:     * @return number of elements
./util/DoubleArray.java:     * @return value stored at the specified index
./util/DoubleArray.java:     * @return the value which has been discarded or "pushed" out of the array
./util/DoubleArray.java:     * @return all elements added to the array
./util/FastMathCalc.java:     * @return cos(x)
./util/FastMathCalc.java:     * @return sin(x)
./util/FastMathCalc.java:     *  @return exp(x)
./util/FastMathCalc.java:     * @return exp(p) in standard precision (equal to result[0] + result[1])
./util/FastMathCalc.java:     * @return log(xi)
./util/FastMathCalc.java:     * @return formatted number
./util/CompositeFormat.java:     * @return the default number format.
./util/CompositeFormat.java:     * @return the default number format specific to the given locale.
./util/CompositeFormat.java:     * @return the first non-whitespace character.
./util/CompositeFormat.java:     * @return the special number.
./util/CompositeFormat.java:     * @return the parsed number.
./util/CompositeFormat.java:     * @return true if the expected string was there
./util/CompositeFormat.java:     * @return the value passed in as toAppendTo.
./util/Pair.java:     * @return the key (first element of the pair).
./util/Pair.java:     * @return the value (second element of the pair).
./util/Pair.java:     * @return the first element of the pair.
./util/Pair.java:     * @return the second element of the pair.
./util/Pair.java:     * @return {@code true} if the given object is also a map entry and
./util/Pair.java:     * @return the hash code value.
./util/Pair.java:     * @return a new {@code Pair} containing {@code k} and {@code v}.
./util/MedianOf3PivotingStrategy.java:     * @return The index corresponding to a pivot chosen between the
./util/MathUtils.java:     * @return the hash code
./util/MathUtils.java:     * @return {@code new Double(x).equals(new Double(y))}
./util/MathUtils.java:     * @return the hash code
./util/MathUtils.java:     * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
./util/MathUtils.java:      * @return max(a1, e2)
./util/MathUtils.java:      * @return min(a1, e2)
./util/MathUtils.java:     * @return the value, within the interval {@code [0 |period|)},
./util/MathUtils.java:     * @return a value with magnitude equal to {@code magnitude} and with the
./util/MathUtils.java:     * @return a value with magnitude equal to {@code magnitude} and with the
./util/MathUtils.java:     * @return a value with magnitude equal to {@code magnitude} and with the
./util/MathUtils.java:     * @return a value with magnitude equal to {@code magnitude} and with the
./util/Decimal64.java:     * @return {@code true} if {@code this} number is infinite
./util/Decimal64.java:     * @return {@code true} if {@code this} is {@code NaN}
./util/Decimal64.java:     * @return base 10 logarithm of the instance
./util/IntegerSequence.java:     * @return a range.
./util/IntegerSequence.java:     * @return a range.
./util/IntegerSequence.java:         * @return the size of the range.
./util/IntegerSequence.java:         * @return an new instance.
./util/IntegerSequence.java:         * @return a new instance.
./util/IntegerSequence.java:         * @return a new instance.
./util/IntegerSequence.java:         * @return a new instance.
./util/IntegerSequence.java:         * @return a new instance.
./util/IntegerSequence.java:         * @return the counter upper limit.
./util/IntegerSequence.java:         * @return the current count.
./util/IntegerSequence.java:         * @return {@code false} if calling {@link #increment()}
./util/IntegerSequence.java:         * @return {@code false} if calling {@link #increment(int)
./util/OpenIntToDoubleHashMap.java:     * @return capacity to use for the specified size
./util/OpenIntToDoubleHashMap.java:     * @return smallest power of two greater than the input value
./util/OpenIntToDoubleHashMap.java:     * @return data associated with the key
./util/OpenIntToDoubleHashMap.java:     * @return true if a value is associated with key
./util/OpenIntToDoubleHashMap.java:     * @return iterator over the map elements
./util/OpenIntToDoubleHashMap.java:     * @return perturbed hash
./util/OpenIntToDoubleHashMap.java:     * @return index at which key should be inserted
./util/OpenIntToDoubleHashMap.java:     * @return index at which key should be inserted
./util/OpenIntToDoubleHashMap.java:     * @return next probe
./util/OpenIntToDoubleHashMap.java:     * @return changed index
./util/OpenIntToDoubleHashMap.java:     * @return number of elements stored in the map
./util/OpenIntToDoubleHashMap.java:     * @return removed value
./util/OpenIntToDoubleHashMap.java:     * @return true if an element is associated with key at index
./util/OpenIntToDoubleHashMap.java:     * @return removed value
./util/OpenIntToDoubleHashMap.java:     * @return previous value associated with the key
./util/OpenIntToDoubleHashMap.java:     * @return true if  tables should grow
./util/OpenIntToDoubleHashMap.java:     * @return hash value of the key
./util/OpenIntToDoubleHashMap.java:         * @return true if there is a next element
./util/OpenIntToDoubleHashMap.java:         * @return key of current entry
./util/OpenIntToDoubleHashMap.java:         * @return value of current entry
./util/DefaultTransformer.java:     * @return a double primitive representation of the Object o.
./util/FastMathLiteralArrays.java:     * @return a clone of the data array.
./util/FastMathLiteralArrays.java:     * @return a clone of the data array.
./util/FastMathLiteralArrays.java:     * @return a clone of the data array.
./util/FastMathLiteralArrays.java:     * @return a clone of the data array.
./util/FastMathLiteralArrays.java:     * @return a clone of the data array.
./util/MultidimensionalCounter.java:         * @return the unidimensional count after the counter has been
./util/MultidimensionalCounter.java:         * @return the index within the unidimensionl counter.
./util/MultidimensionalCounter.java:         * @return the indices within the multidimensional counter.
./util/MultidimensionalCounter.java:         * @return the count at the corresponding index for the current state
./util/MultidimensionalCounter.java:     * @return the iterator.
./util/MultidimensionalCounter.java:     * @return the number of dimensions.
./util/MultidimensionalCounter.java:     * @return the multidimensional counts.
./util/MultidimensionalCounter.java:     * @return the index within the unidimensionl counter.
./util/MultidimensionalCounter.java:     * @return the total size of the unidimensional counter.
./util/MultidimensionalCounter.java:     * @return the sizes of the multidimensional counter in each dimension.
./util/MathArrays.java:         * @return the result of the operation.
./util/MathArrays.java:         * @return the result of the operation.
./util/MathArrays.java:     * @return scaled copy of array with each entry multiplied by val.
./util/MathArrays.java:     * @return a new array {@code r} where {@code r[i] = a[i] + b[i]}.
./util/MathArrays.java:     * @return a new array {@code r} where {@code r[i] = a[i] - b[i]}.
./util/MathArrays.java:     * @return a new array {@code r} where {@code r[i] = a[i] * b[i]}.
./util/MathArrays.java:     * @return a new array {@code r} where {@code r[i] = a[i] / b[i]}.
./util/MathArrays.java:     * @return the L<sub>1</sub> distance between the two points
./util/MathArrays.java:     * @return the L<sub>1</sub> distance between the two points
./util/MathArrays.java:     * @return the L<sub>2</sub> distance between the two points
./util/MathArrays.java:     * @return the cosine of the angle between the vectors.
./util/MathArrays.java:     * @return the L<sub>2</sub> distance between the two points
./util/MathArrays.java:     * @return the L<sub>&infin;</sub> distance between the two points
./util/MathArrays.java:     * @return the L<sub>&infin;</sub> distance between the two points
./util/MathArrays.java:     * @return {@code true} if sorted, {@code false} otherwise.
./util/MathArrays.java:     * @return {@code true} if sorted, {@code false} otherwise.
./util/MathArrays.java:     * @return {@code true} if the arrays have the same length.
./util/MathArrays.java:     * @return {@code true} if the arrays have the same length.
./util/MathArrays.java:     * @return {@code true} if the array is sorted.
./util/MathArrays.java:     * @return the 2-norm of the vector.
./util/MathArrays.java:        /** @return the key. */
./util/MathArrays.java:        /** @return the value. */
./util/MathArrays.java:     * @return the copied array.
./util/MathArrays.java:     * @return the copied array.
./util/MathArrays.java:     * @return the copied array.
./util/MathArrays.java:     * @return the copied array.
./util/MathArrays.java:     * @return the copied array.
./util/MathArrays.java:     * @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.
./util/MathArrays.java:     * @return a<sub>1</sub>&times;b<sub>1</sub> +
./util/MathArrays.java:     * @return a<sub>1</sub>&times;b<sub>1</sub> +
./util/MathArrays.java:     * @return a<sub>1</sub>&times;b<sub>1</sub> +
./util/MathArrays.java:     * @return true if the values are both null or have same dimension
./util/MathArrays.java:     * @return true if the values are both null or have same dimension and
./util/MathArrays.java:     * @return {@code true} if the values are both {@code null} or have same
./util/MathArrays.java:     * @return {@code true} if the values are both {@code null} or have same
./util/MathArrays.java:     * @return the normalized array.
./util/MathArrays.java:     * @return a new array
./util/MathArrays.java:     * @return a new array
./util/MathArrays.java:     * @return the convolution of {@code x} and {@code h}.
./util/MathArrays.java:     * @return an array whose entries are the numbers 0, 1, ..., {@code n}-1.
./util/MathArrays.java:     * @return an array whose entries are the numbers
./util/MathArrays.java:     * @return true if the parameters are valid and designate a subarray of positive length
./util/MathArrays.java:     * @return true if the parameters are valid
./util/MathArrays.java:     * @return true if the parameters are valid and designate a subarray of positive length
./util/MathArrays.java:     * @return {@code true} if the parameters are valid.
./util/MathArrays.java:     * @return a new array consisting of the entries of the argument arrays
./util/MathArrays.java:     * @return descending list of values included in the input array
./util/ResizableDoubleArray.java:     * @return the value which has been discarded or "pushed" out of the array
./util/ResizableDoubleArray.java:     * @return the value that has been replaced in the array.
./util/ResizableDoubleArray.java:     * @return the contraction criteria used to reclaim memory.
./util/ResizableDoubleArray.java:     * @return the contraction criterion used to reclaim memory.
./util/ResizableDoubleArray.java:     * @return value stored at the specified index
./util/ResizableDoubleArray.java:     * @return the double array.
./util/ResizableDoubleArray.java:     * @return the expansion factor of this expandable double array
./util/ResizableDoubleArray.java:     * @return the expansion mode.
./util/ResizableDoubleArray.java:     * @return the length of the internal storage array.
./util/ResizableDoubleArray.java:     * @return the length of the internal array.
./util/ResizableDoubleArray.java:     * @return the number of elements.
./util/ResizableDoubleArray.java:     * @return the internal storage array used by this object
./util/ResizableDoubleArray.java:     * @return the internal storage array used by this object.
./util/ResizableDoubleArray.java:     * @return the start index.
./util/ResizableDoubleArray.java:     * @return the result.
./util/ResizableDoubleArray.java:     * @return true if array satisfies the contraction criteria
./util/ResizableDoubleArray.java:     * @return the starting index.
./util/ResizableDoubleArray.java:     * @return a new ResizableDoubleArray with the same data and configuration
./util/ResizableDoubleArray.java:     * @return true iff object is a ResizableDoubleArray with the same data and
./util/ResizableDoubleArray.java:     * @return the hash code representing this {@code ResizableDoubleArray}.
./util/NumberTransformer.java:     * @return the double value of the Object.
./util/IterationManager.java:     * @return the number of iterations.
./util/IterationManager.java:     * @return the maximum number of iterations.
